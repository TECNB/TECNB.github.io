<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Task</title>
      <link href="/posts/f24c741b.html"/>
      <url>/posts/f24c741b.html</url>
      
        <content type="html"><![CDATA[<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><h2 id="2023-9-25"><a href="#2023-9-25" class="headerlink" title="2023.9.25"></a>2023.9.25</h2><p><strong>1、完全完成tag点击后的动画detailEdit以及detailDelete切换的动画</strong></p><p><strong>2、9.24的andriod笔记</strong></p><p><strong>3、完成tag中点击detailEdit后的网络请求</strong></p><p><strong>4、点击“+”号跳转到create界面</strong></p><p>5、store部分详情的网络请求</p><p>6、用户信息部分（名字以及分数）的网络请求</p><h2 id="2023-9-26"><a href="#2023-9-26" class="headerlink" title="2023.9.26"></a>2023.9.26</h2><p><strong>1、fzl的javaee的3_4</strong></p><p><strong>2、完全完成store详情</strong></p><p><strong>3、user信息（名字以及分数）的获取</strong></p><p><strong>4、stroe界面点击得到商品分数</strong></p><p><strong>5、target详情</strong></p><p>6、target详情的edit以及delete的转化</p><p>7、target详情的delete的删除的网络请求</p><p>8、target详情的edit的得到分数的网络请求</p><p>9、target页面上方的日期补完</p><p>10、target详情日期倒数逻辑</p><h2 id="2023-9-27"><a href="#2023-9-27" class="headerlink" title="2023.9.27"></a>2023.9.27</h2><p><strong>1、target详情的edit以及delete的转化</strong></p><p><strong>2、target详情的delete的删除的网络请求</strong></p><p><strong>3、target详情的edit的得到分数的网络请求</strong></p><p>4、target页面上方的日期补完</p><p>5、target详情日期倒数逻辑</p><h2 id="2023-9-28"><a href="#2023-9-28" class="headerlink" title="2023.9.28"></a>2023.9.28</h2><p><strong>1、target页面上方的日期补完</strong></p><p><strong>2、target详情日期倒数逻辑</strong></p><p>3、target的过期以及已完成页面以及相应逻辑</p><p>4、target详情如果没被获取到则显示另外的页面</p><p>5、creat部分的返回以及标题显示逻辑     </p><h2 id="2023-9-29"><a href="#2023-9-29" class="headerlink" title="2023.9.29"></a>2023.9.29</h2><p><strong>1、target的过期以及已完成页面以及相应逻辑</strong></p><p><strong>2、target详情如果没被获取到则显示另外的页面</strong></p><p>3、creat部分的返回以及标题显示逻辑</p><h2 id="2023-9-30"><a href="#2023-9-30" class="headerlink" title="2023.9.30"></a>2023.9.30</h2><h2 id="2023-10-01"><a href="#2023-10-01" class="headerlink" title="2023.10.01"></a>2023.10.01</h2><h2 id="2023-10-02"><a href="#2023-10-02" class="headerlink" title="2023.10.02"></a>2023.10.02</h2><p>1、完成javaEE作业</p><p>2、完成swift作业</p><p>3、creat部分的返回以及标题显示逻辑</p><h2 id="2023-10-03"><a href="#2023-10-03" class="headerlink" title="2023.10.03"></a>2023.10.03</h2><p><strong>1、完成javaEE作业</strong></p><p><strong>2、完成swift作业</strong></p><p>3、creat部分的返回以及标题显示逻辑</p><h2 id="2023-10-04"><a href="#2023-10-04" class="headerlink" title="2023.10.04"></a>2023.10.04</h2><p><strong>1、creat部分的返回以及标题显示逻辑</strong></p><p>2、完成tag的creat功能</p><p>3、完成target的creat功能</p><p>4、完成store的creat功能</p><p>5、完成loginNav布局的开发</p><p><strong>6、完成sign布局的开发</strong></p><h2 id="2023-10-05"><a href="#2023-10-05" class="headerlink" title="2023.10.05"></a>2023.10.05</h2><p><strong>1、完成tag的creat功能</strong></p><p><strong>2、完成target的creat功能</strong></p><p><strong>3、完成store的creat功能</strong></p><p><strong>4、完成loginNav布局的开发</strong></p><p><strong>5、完成登录逻辑以及相应网络请求</strong></p><p><strong>6、完成注册逻辑以及相应网络请求</strong></p><p>7、完成tag详情在time中的获取</p><p>8、完成target详情在time中的获取</p><p>9、完成time的计时功能</p><h2 id="2023-10-06"><a href="#2023-10-06" class="headerlink" title="2023.10.06"></a>2023.10.06</h2><p><strong>1、完成tag详情在time中的获取</strong></p><p><strong>2、完成target详情在time中的获取</strong></p><p><strong>3、完成time的计时功能</strong></p><p><strong>4、完成user界面的的选择时间跨度的布局</strong></p><p><strong>5、完成user界面的网络请求</strong></p><p><strong>6、登出功能</strong></p><p>总结：第一次任务全部完成，也终于在国庆结束前完成Habeet安卓版的基本开发了</p><h2 id="2023-10-07"><a href="#2023-10-07" class="headerlink" title="2023.10.07"></a>2023.10.07</h2><p><strong>1、安卓笔记补完</strong></p><p>2、安卓笔记上传到blog中</p><p>3、英语视频作业</p><p><strong>4、create界面中名称以及备注还有分数为空的相应逻辑</strong></p><p><strong>5、login界面的忘记密码功能</strong></p><p><strong>6、注册中检验两次输入是否相同</strong></p><p><strong>7、侧边栏的名字自动更改</strong></p><p><strong>8、商店为空的页面</strong></p><p><strong>9、检验qq邮箱，以及相应的提示</strong></p><p><strong>10、输入密码应该是小黑点的格式</strong></p><p><strong>11、将使用<a href="mailto:&#x33;&#x34;&#56;&#57;&#48;&#52;&#52;&#55;&#52;&#x30;&#64;&#x71;&#113;&#x2e;&#99;&#x6f;&#x6d;">&#x33;&#x34;&#56;&#57;&#48;&#52;&#52;&#55;&#52;&#x30;&#64;&#x71;&#113;&#x2e;&#99;&#x6f;&#x6d;</a>注册里面的邮箱部分改为蓝色</strong></p><p><strong>12、将使用<a href="mailto:&#x33;&#x34;&#x38;&#57;&#x30;&#52;&#52;&#55;&#x34;&#x30;&#x40;&#x71;&#x71;&#46;&#x63;&#111;&#109;">&#x33;&#x34;&#x38;&#57;&#x30;&#52;&#52;&#55;&#x34;&#x30;&#x40;&#x71;&#x71;&#46;&#x63;&#111;&#109;</a>注册里面的邮箱部分动态填入，并且点击跳转到上一个页面</strong></p><p><strong>13、关于详情的各项数据长度的限定</strong></p><p><strong>14、解决随时完成的target过多会导致随时完成的target页面直接消失</strong></p><p><strong>15、target、store、tag完成后及时更新userPoint</strong></p><p><strong>16、整体界面优化</strong></p><p>总结：修修补补的一天，虽然完成得这么多，但是实际上工作量不大，但是确实爽，也基本修完了</p><h2 id="2023-10-08"><a href="#2023-10-08" class="headerlink" title="2023.10.08"></a>2023.10.08</h2><p><strong>1、点击tag详情进行更改的功能</strong></p><p><strong>2、安卓笔记上传到blog中</strong></p><p><strong>3、英语视频作业以及书面作业</strong></p><p>4、概率论作业</p><p><strong>5、点击tag详情进行更改的功能</strong></p><p><strong>6、增加了开发中的提示</strong></p><p><strong>7、解决了tag数目为0时空指针的问题</strong></p><h2 id="2023-10-09"><a href="#2023-10-09" class="headerlink" title="2023.10.09"></a>2023.10.09</h2><p><strong>1、JavaEE 6.1作业</strong></p><p><strong>2、安卓笔记上传到blog中</strong></p><p>3、习的PPT</p><p><strong>4、数据库作业</strong></p><p>5、概率论作业</p><h2 id="2023-10-10"><a href="#2023-10-10" class="headerlink" title="2023.10.10"></a>2023.10.10</h2><p>1、习的PPT</p><p><strong>2、概率论作业</strong></p><p>3、刮痧的剧本以及人员安排</p><p><strong>4、给fzl录Habeet的相关视频</strong></p><h2 id="2023-10-11"><a href="#2023-10-11" class="headerlink" title="2023.10.11"></a>2023.10.11</h2><p>1、习的PPT</p><p><strong>2、刮痧的剧本以及人员安排</strong></p><p>3、物理网课</p><p>4、java 7.1作业</p><h2 id="2023-10-12"><a href="#2023-10-12" class="headerlink" title="2023.10.12"></a>2023.10.12</h2><p><strong>1、java 7.1作业</strong></p><h2 id="2023-10-13"><a href="#2023-10-13" class="headerlink" title="2023.10.13"></a>2023.10.13</h2><h2 id="2023-10-14"><a href="#2023-10-14" class="headerlink" title="2023.10.14"></a>2023.10.14</h2><p><strong>1、文件夹上传功能（传递模型的文件夹）</strong></p><p>2、更改公司管理这一里面的数据</p><p>3、实现模型创建以及公司创建</p><p>4、完成盐加密</p><p>5、完成token登录</p><h2 id="2023-10-15"><a href="#2023-10-15" class="headerlink" title="2023.10.15"></a>2023.10.15</h2><p><strong>1、交打印出来的奖学金表到早六</strong></p><p><strong>2、更改公司管理这一里面的数据</strong></p><p><strong>3、实现模型创建以及公司创建</strong></p><p>4、完成盐加密</p><p>5、完成token登录</p><h2 id="2023-10-16"><a href="#2023-10-16" class="headerlink" title="2023.10.16"></a>2023.10.16</h2><p><strong>1、修复无法根据id修改模型的bug</strong></p><h2 id="2023-10-17"><a href="#2023-10-17" class="headerlink" title="2023.10.17"></a>2023.10.17</h2><p><strong>1、更改dish为model，setmeal为company</strong> </p><p><strong>2、删除了以及不需要的flavor的相关内容以及逻辑</strong></p><p>总结：没有新增功能，但是修改了大量名称使其优化，尽量不出现与AR模型不相关的内容</p><h2 id="2023-10-18"><a href="#2023-10-18" class="headerlink" title="2023.10.18"></a>2023.10.18</h2><p><strong>1、修改setmeal_dish为company_model</strong> </p><p><strong>2、修复公司添加模型时不显示模型类型的bug</strong></p><p>总结：继续优化与AR不相关的代码</p><h2 id="2023-10-19"><a href="#2023-10-19" class="headerlink" title="2023.10.19"></a>2023.10.19</h2><h2 id="2023-10-20"><a href="#2023-10-20" class="headerlink" title="2023.10.20"></a>2023.10.20</h2><h2 id="2023-10-21"><a href="#2023-10-21" class="headerlink" title="2023.10.21"></a>2023.10.21</h2><p><strong>1、增加管理员注册功能</strong> </p><p><strong>2、为管理员以及员工增添区分权限字段if_manager,会根据此点存入不同的session,而员工的权限范围限定在添加模型，修改模型，增加分类，修改分类，修改公司，但是不能添加公司</strong> </p><p><strong>3、为category、model、model的添加、修改、展示部分的代码都增加了根据管理员对应的id或者员工所对应的creat_user_id，来筛选出相应管理员所创建的数据，而不会展示别的公司管理员的数据</strong></p><p>总结：大量优化有关管理员登录以及展示问题的相关代码</p><h2 id="2023-10-22"><a href="#2023-10-22" class="headerlink" title="2023.10.22"></a>2023.10.22</h2><h2 id="2023-10-23"><a href="#2023-10-23" class="headerlink" title="2023.10.23"></a>2023.10.23</h2><p><strong>1、新建一个项目完成3d模型的显示</strong></p><h2 id="2023-10-24"><a href="#2023-10-24" class="headerlink" title="2023.10.24"></a>2023.10.24</h2><p><strong>1、完成vuu2适配中login的部分</strong></p><h2 id="2023-10-25"><a href="#2023-10-25" class="headerlink" title="2023.10.25"></a>2023.10.25</h2><p><strong>1、根据index属性注册路由相应的值再进行跳转</strong></p><p><strong>2、完成了对于html页面到vue页面的大多数设计，但是并没有适配</strong></p><h2 id="2023-10-26"><a href="#2023-10-26" class="headerlink" title="2023.10.26"></a>2023.10.26</h2><p><strong>1、修复不显示icon 的bug</strong></p><p><strong>2、修复不能所有页面均不能跳转至增加页面的bug</strong></p><p>3、修复进入index时无法默认显示员工页面的bug</p><p><strong>4、修复所有页面的布局问题</strong></p><p><strong>5、修复所有页面的颜色问题</strong></p><p><strong>6、修复登出键无法登出的问题</strong></p><p>7、修复点击返回按钮无法正确返回的问题（完成了但是没有完成完成还需要再看看相关逻辑）</p><p><strong>8、修复无法根据id展示修改界面的问题</strong></p><p>9、重新封装下载文件api，在html里面的下载文件请求我放在了&#x2F;common没有封装到api里，会导致报错</p><p>10、感觉这个loading有点过于长了，不太正常</p><p><strong>11、利用vue-3d-loader的依赖实现写死路径展示3d模型的效果</strong></p><p><strong>12、head里面的图标以及title展示</strong></p><p>13、把3d模型展示进行优化，现在的问题是一开始的比例太大了，可以放小一点，包括放大到一定程度模型会直接消失（这点也许不改）</p><p>14、使其能正确获取到图片并展示</p><p>15、修复字体不引入的问题</p><p>16、完成上传模型的格式检验</p><p>17、glb加上贴图转化到usdz</p><p>18、javaee作业7-1工程</p><p>总结：大部分完成适配全部页面</p><h2 id="2023-10-27"><a href="#2023-10-27" class="headerlink" title="2023.10.27"></a>2023.10.27</h2><p><strong>1、修复进入index时无法默认显示员工页面的bug(使用redirect来解决的以及defAct要改好)</strong></p><p><strong>2、重新封装下载文件api，在html里面的下载文件请求我放在了&#x2F;common没有封装到api里，会导致报错</strong></p><p><strong>3、感觉这个loading有点过于长了，不太正常(通过更改loading时间为600毫秒来解决)</strong></p><p><strong>4、把3d模型展示进行优化，现在的问题是一开始的比例太大了，可以放小一点，包括放大到一定程度模型会直接消失（这点也许不改）</strong></p><p><strong>5、使其能正确获取到图片并展示</strong></p><p>6、修复字体不引入的问题（应该就直接不引了，效果大差不差）</p><p><strong>7、修复点击返回按钮无法正确返回的问题</strong></p><p>7、完成上传模型的格式检验</p><p>8、glb加上贴图转化到usdz</p><p>9、javaee作业7-1工程</p><p>10、swift作业</p><p>11、把与项目无关的数据库以及无关数据以及java后端的内容都删掉</p><h2 id="2023-10-28"><a href="#2023-10-28" class="headerlink" title="2023.10.28"></a>2023.10.28</h2><p><strong>1、javaee作业7-1工程</strong></p><p><strong>2、swift作业</strong></p><p><strong>3、安卓作业</strong></p><p>4、数据库作业</p><p>5、物理笔记做一做捏</p><p>6、逻辑轮笔记做一做捏</p><p>7、完成上传模型的格式检验</p><p>8、glb加上贴图转化到usdz</p><p>9、把与项目无关的数据库以及无关数据以及java后端的内容都删掉</p><h2 id="2023-10-29"><a href="#2023-10-29" class="headerlink" title="2023.10.29"></a>2023.10.29</h2><p><strong>1、数据库作业</strong></p><p><strong>2、物理笔记做一做捏</strong></p><p>3、逻辑轮笔记做一做捏</p><p>4、完成上传模型的格式检验</p><p>5、glb加上贴图转化到usdz</p><p>6、把与项目无关的数据库以及无关数据以及java后端的内容都删掉</p><h2 id="2023-10-30"><a href="#2023-10-30" class="headerlink" title="2023.10.30"></a>2023.10.30</h2><p>1、逻辑轮笔记做一做捏</p><p>2、完成上传模型的格式检验</p><p><strong>3、glb加上贴图转化到usdz(这块最后发现难以实现，实现也较为麻烦，所以改为在管理端传2种模型)</strong></p><p><strong>4、初步完成写死数据的数据可视化</strong></p><p><strong>4.1 完成布局</strong></p><p><strong>4.2 折线图</strong></p><p><strong>4.3 两个饼图</strong></p><p><strong>5、把与项目无关的数据库以及无关数据以及java后端的内容都删掉</strong></p><p><strong>6、新增favorite_count、view_count字段</strong></p><p><strong>7、并完成点击模型详情增加观看次数的功能</strong></p><h2 id="2023-10-31"><a href="#2023-10-31" class="headerlink" title="2023.10.31"></a>2023.10.31</h2><p>1、逻辑轮笔记做一做捏</p><p>2、完成上传模型的格式检验</p><p><strong>3、获取用户信息接口</strong></p><p><strong>4、添加收藏模型接口</strong></p><p><strong>5、删除收藏模型接口</strong></p><p><strong>6、获取收藏模型接口</strong></p><p><strong>7、添加收藏企业接口</strong></p><p><strong>8、删除收藏企业接口</strong></p><p><strong>9、获取收藏企业接口</strong></p><p>10、添加收藏展厅接口</p><p>11、删除收藏展厅接口</p><p>12、获取收藏展厅接口</p><p>13、现在根据登录的账号权限修改管理端有点问题</p><p>问题表现为点击indexView2的菜单的子菜单时会直接跳转到indexView1</p><p>解决方法1、观察是否存在跳转行为</p><p>解决方法2、观察路由是否有问题</p><p>解决方法3、重写相关逻辑</p><h2 id="2023-11-01"><a href="#2023-11-01" class="headerlink" title="2023.11.01"></a>2023.11.01</h2><p><strong>1、增加大量与展厅相关的内容</strong></p><p><strong>2、完善部分展厅与公司之间的逻辑</strong></p><h2 id="2023-11-02"><a href="#2023-11-02" class="headerlink" title="2023.11.02"></a>2023.11.02</h2><p><strong>1、添加收藏展厅接口</strong></p><p><strong>2、删除收藏展厅接口</strong></p><p><strong>3、获取收藏展厅接口</strong></p><p><strong>4、完成展厅管理的适配</strong></p><p><strong>5、完成分类的适配</strong></p><p>6、完成模型适配</p><p>7、完成公司适配</p><p><strong>8、修改展厅headtitle异常的bug</strong></p><h2 id="2023-11-03"><a href="#2023-11-03" class="headerlink" title="2023.11.03"></a>2023.11.03</h2><p><strong>1、后端完成模型适配</strong></p><p><strong>2、后端完成公司适配</strong></p><p><strong>3、公司删除后数据表也要删除</strong></p><p><strong>4、展厅删除后数据表也要删除</strong></p><p><strong>5、前端完成模型适配</strong></p><p><strong>6、前端完成公司适配</strong></p><p>7、展厅Banner位推荐模型（也许在展厅管理部分增加，具体如果只需要一个推荐位则在展厅后添加字段，如果需要多个则可能多加一张表？可以简化下）</p><p>8、公司选择是否加入或者退出展厅（感觉应该有更简化的方法，可以在创建公司时多设置一个选项，是否允许被展厅展示）</p><p>9、优化下java后端的代码，做好笔记</p><p><strong>10、修改展厅图标</strong></p><p><strong>11、修改没获取到图片时的默认图标</strong></p><h2 id="2023-11-04"><a href="#2023-11-04" class="headerlink" title="2023.11.04"></a>2023.11.04</h2><p>1、概率论</p><p>2、数据库</p><p>3、jpa初步学习</p><p>4、用户数据界面优化（注意不同尺寸下的优化）</p><p>5、用户数据界面动态从后端获取数据</p><p>6、模型部分完成从服务器端上传以及获取</p><p>7、图片部分完成从服务器端上传以及获取</p><p>8、前端动态展示模型</p><p>9、前端动态展示页面</p><p><strong>10、展厅Banner位推荐模型（也许在展厅管理部分增加，具体如果只需要一个推荐位则在展厅后添加字段，如果需要多个则可能多加一张表？可以简化下）</strong></p><p>11、公司选择是否加入或者退出展厅（感觉应该有更简化的方法，可以在创建公司时多设置一个选项，是否允许被展厅展示）</p><p><strong>12、新增模型界面的隶属展厅</strong></p><p><strong>13、获取展厅推荐的模型接口</strong></p><p><strong>14、新增公司界面的隶属展厅</strong></p><p>15、优化下java后端的代码，做好笔记</p><p><strong>16、数据库作业</strong></p><p><strong>17、安卓作业</strong></p><h2 id="2023-11-05"><a href="#2023-11-05" class="headerlink" title="2023.11.05"></a>2023.11.05</h2><p>1、概率论</p><p>2、数据库</p><p>3、jpa初步学习</p><p>4、部分用户数据界面优化（注意不同尺寸下的优化，现在发现第三行数据横向没有使用flex导致出问题，现在在考虑怎么横向加入flex，以及）</p><p>5、用户数据界面动态从后端获取数据</p><p>6、模型部分完成从服务器端上传以及获取</p><p>7、图片部分完成从服务器端上传以及获取</p><p>8、前端动态展示模型</p><p>9、前端动态展示页面</p><p><strong>10、公司选择是否加入或者退出展厅（感觉应该有更简化的方法，可以在创建公司时多设置一个选项，是否允许被展厅展示，想到了可以在manager登录时，也增加一个展厅管理，然后可以在这个展厅管理里面选择加入或者退出，同时状态改为是否已经加入，最后还是协商决定不做）</strong></p><p><strong>11、录制进度视频</strong></p><p><strong>12、修复不同权限的用户登录后session混乱的bug</strong></p><p><strong>13、修复数据可视化界面不跟随flex布局改变的问题</strong></p><p><strong>14、完成界面的横向flex缩放</strong></p><h2 id="2023-11-06"><a href="#2023-11-06" class="headerlink" title="2023.11.06"></a>2023.11.06</h2><p>1、概率论</p><p>2、数据库</p><p>3、jpa初步学习</p><p>4、完全完成用户数据界面优化（注意不同尺寸下的优化，现在发现第三行数据横向没有使用flex导致出问题，现在在考虑怎么横向加入flex，以及）</p><p>5、用户数据界面动态从后端获取数据</p><p>6、模型部分完成从服务器端上传以及获取</p><p>7、图片部分完成从服务器端上传以及获取</p><p>8、前端动态展示模型</p><p>9、前端动态展示页面</p><p><strong>10、完成界面的垂直方向flex缩放</strong></p><p><strong>11、使一个莫名其妙iframe消失(display:none)，方便做y方向的缩放</strong></p><p><strong>12、修复card-header缩放问题</strong></p><h2 id="2023-11-07"><a href="#2023-11-07" class="headerlink" title="2023.11.07"></a>2023.11.07</h2><p>1、概率论</p><p>2、数据库</p><p>3、jpa初步学习</p><p><strong>4、完全完成用户数据界面优化（注意不同尺寸下的优化，现在发现第三行数据横向没有使用flex导致出问题，现在在考虑怎么横向加入flex，以及饼图以及折线图的图例以及其对应的位置）</strong></p><p>5、用户数据界面动态从后端获取数据</p><p>6、模型部分完成从服务器端上传以及获取</p><p>7、图片部分完成从服务器端上传以及获取</p><p>8、前端动态展示模型</p><p>9、前端动态展示页面</p><p><strong>10、正确显示echarts内的折线图以及饼图中的name部分</strong></p><p><strong>11、通过tomcat获取到服务器上面的图片</strong></p><h2 id="2023-11-08"><a href="#2023-11-08" class="headerlink" title="2023.11.08"></a>2023.11.08</h2><p>1、概率论</p><p>2、数据库</p><p>3、jpa初步学习</p><p>4、用户数据界面动态从后端获取数据</p><p>5、模型部分完成从服务器端上传以及获取</p><p><strong>6、图片部分完成从服务器端上传以及获取</strong></p><p>7、前端动态展示模型</p><p>8、前端动态展示页面</p><h2 id="2023-11-09"><a href="#2023-11-09" class="headerlink" title="2023.11.09"></a>2023.11.09</h2><p>1、概率论</p><p>2、数据库</p><p>3、jpa初步学习</p><p>4、用户数据界面动态从后端获取数据</p><p>5、模型部分完成从服务器端上传以及获取</p><p>6、前端动态展示模型</p><p>7、前端动态展示页面</p><p>8、注意判断zip的返回然后将将el-update的上传判断为失败</p><p><strong>9、完成整体数据的获取逻辑</strong></p><p>10、完成整体数据部分的代码注释</p><p><strong>11、更改企业管理员的权限</strong></p><p><strong>12、完成analytics这张表收藏以及观看模型时增加记录</strong></p><h2 id="2023-11-10"><a href="#2023-11-10" class="headerlink" title="2023.11.10"></a>2023.11.10</h2><p>1、概率论</p><p>2、数据库</p><p>3、jpa初步学习</p><p><strong>4、初步完成用户数据界面动态从后端获取数据</strong></p><p>5、模型部分完成从服务器端上传以及获取</p><p>6、前端动态展示模型</p><p><strong>7、初步完成前端动态展示数据页面</strong></p><p>8、注意判断zip的返回然后将将el-update的上传判断为失败</p><p><strong>9、完成整体数据部分的代码注释</strong></p><p><strong>10、英语小组作业</strong></p><p><strong>11、毛概作业</strong></p><p><strong>12、概率论作业</strong></p><p><strong>13、完成删除模型、公司、展厅时同步移除analytics表内的内容</strong></p><p><strong>14、完成收藏公司、展厅、模型时同步增加analytics表内的内容</strong></p><p><strong>15、取消收藏公司、展厅、模型时同步移除analytics表内的内容</strong></p><p><strong>16、完成展厅管理员的当日用户喜爱数据</strong></p><p><strong>17、初步完成饼图的动态获取</strong></p><p><strong>18、完成模型饼图的动态获取</strong></p><h2 id="2023-11-11"><a href="#2023-11-11" class="headerlink" title="2023.11.11"></a>2023.11.11</h2><p>1、概率论</p><p>2、数据库</p><p>3、jpa初步学习</p><p>4、模型部分完成从服务器端上传以及获取</p><p>5、前端动态展示模型</p><p>6、注意判断zip的返回然后将将el-update的上传判断为失败</p><p><strong>7、完成展厅饼图的动态获取</strong></p><p><strong>8、完成当日展厅折线图的动态获取</strong></p><p><strong>9、完成最近7天展厅折线图的动态获取</strong></p><p><strong>10、完成loading动画加载</strong></p><p><strong>11、修复近7天展厅折线图的动态获取x轴无法正确顺序显示星期的bug</strong></p><p><strong>12、完成最近30天展厅折线图的动态获取</strong></p><p><strong>13、完成最近一年展厅折线图的动态获取</strong></p><p><strong>14、修复无法正确返回count值最大的那个元素</strong></p><p><strong>15、实现员工权限的数据可视化展示（解决方法：直接偷懒不给员工展示数据可视化）</strong></p><p><strong>16、完成分类的饼图动态获取</strong></p><p><strong>17、完成模型折线图的动态获取</strong></p><p><strong>18、完成对于折线图类型以及时间的方法封装</strong></p><p><strong>19、完成对于saveAnalyticsData方法的封装</strong></p><p><strong>20、完成数据可视化中对于创建者的判断</strong></p><h2 id="2023-11-12"><a href="#2023-11-12" class="headerlink" title="2023.11.12"></a>2023.11.12</h2><p>1、概率论</p><p>2、数据库</p><p>3、jpa初步学习</p><p>4、模型部分完成从服务器端上传以及获取</p><p>5、前端动态展示模型</p><p>6、注意判断zip的返回然后将将el-update的上传判断为失败</p><p><strong>7、录制进度视频</strong></p><h2 id="2023-11-13"><a href="#2023-11-13" class="headerlink" title="2023.11.13"></a>2023.11.13</h2><p>1、概率论</p><p>2、数据库</p><p>3、jpa初步学习</p><p>4、模型部分完成从服务器端上传以及获取</p><p>5、前端动态展示模型</p><p>6、注意判断zip的返回然后将将el-update的上传判断为失败</p><p><strong>7、修复推荐位不返回companyId的问题</strong></p><p><strong>8、推荐模型添加companyName和companyCategory返回值</strong></p><p><strong>9、新增根据公司id获取展厅下模型</strong></p><p>10、笔记</p><p>11、修复更改模型后companymodel数据没改的问题</p><p>12、修改展厅这块有数据库多余添加选中参展公司的bug</p><p>13、修改展厅这块有在参展公司多起来后布局有问题的bug</p><p>14、修改展厅这块选择继续添加参展公司时没有正确为公司打勾</p><p><strong>15、完成展厅address的添加</strong></p><p><strong>16、完成数据库数据的添加</strong></p><p>17、在添加公司这块的下面部分有问题，在模型未创建时则会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取模型分类</span></span><br><span class="line"><span class="title function_">getModelType</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">getCategoryList</span>(&#123; <span class="string">&#x27;type&#x27;</span>: <span class="number">1</span> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">modelType</span> = res.<span class="property">data</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">getModelList</span>(res.<span class="property">data</span>[<span class="number">0</span>].<span class="property">id</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">msg</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p>18、新的展厅管理员去模型管理以及公司管理时会报500</p><p>19、更改后的重名类型逻辑，在删除和修改时的逻辑依然有问题</p><p>20、复习英语</p><h2 id="2023-11-14"><a href="#2023-11-14" class="headerlink" title="2023.11.14"></a>2023.11.14</h2><p>1、概率论</p><p>2、数据库</p><p>3、jpa初步学习</p><p>4、模型部分完成从服务器端上传以及获取</p><p>5、前端动态展示模型</p><p>6、注意判断zip的返回然后将将el-update的上传判断为失败</p><p>7、笔记</p><p>8、修复更改模型后companymodel数据没改的问题</p><p>9、修改展厅这块有数据库多余添加选中参展公司的bug</p><p>10、修改展厅这块有在参展公司多起来后布局有问题的bug</p><p>11、修改展厅这块选择继续添加参展公司时没有正确为公司打勾</p><p>12、在添加公司这块的下面部分有问题，在模型未创建时则会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取模型分类</span></span><br><span class="line"><span class="title function_">getModelType</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">getCategoryList</span>(&#123; <span class="string">&#x27;type&#x27;</span>: <span class="number">1</span> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">modelType</span> = res.<span class="property">data</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">getModelList</span>(res.<span class="property">data</span>[<span class="number">0</span>].<span class="property">id</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">msg</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p>13、新的展厅管理员去模型管理以及公司管理时会报500</p><p>14、更改后的重名类型逻辑，在删除和修改时的逻辑依然有问题</p><p><strong>15、复习英语</strong></p><p><strong>16、复习物理</strong></p><p><strong>17、fif读单词</strong></p><h2 id="2023-11-15"><a href="#2023-11-15" class="headerlink" title="2023.11.15"></a>2023.11.15</h2><p>1、概率论</p><p>2、数据库</p><p>3、jpa初步学习</p><p>4、模型部分完成从服务器端上传以及获取</p><p>5、前端动态展示模型</p><p>6、注意判断zip的返回然后将将el-update的上传判断为失败</p><p>7、笔记</p><p><strong>8、修复更改模型后companyModel表数据没改的问题</strong></p><p>9、修改展厅这块有数据库多余添加选中参展公司的bug</p><p><strong>10、修改展厅这块有在参展公司多起来后布局有问题的bug</strong></p><p>11、修改展厅这块选择继续添加参展公司时没有正确为公司打勾</p><p><strong>12、在添加公司这块的下面部分有问题，在模型未创建时则会报错</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取模型分类</span></span><br><span class="line"><span class="title function_">getModelType</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">getCategoryList</span>(&#123; <span class="string">&#x27;type&#x27;</span>: <span class="number">1</span> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">modelType</span> = res.<span class="property">data</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">getModelList</span>(res.<span class="property">data</span>[<span class="number">0</span>].<span class="property">id</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">msg</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p><strong>13、新的展厅管理员去模型管理以及公司管理时会报500</strong></p><p>14、更改后的重名类型逻辑，在删除和修改时的逻辑依然有问题</p><p><strong>15、修复更改模型后exhibitionCompany表数据没改的问题</strong></p><h2 id="2023-11-16"><a href="#2023-11-16" class="headerlink" title="2023.11.16"></a>2023.11.16</h2><p>1、概率论</p><p>2、数据库</p><p>3、jpa初步学习</p><p>4、模型部分完成从服务器端上传以及获取</p><p>5、前端动态展示模型</p><p>6、注意判断zip的返回然后将将el-update的上传判断为失败</p><p>7、笔记</p><p>8、修改展厅这块有数据库多余添加选中参展公司的bug</p><p>9、修改展厅这块选择继续添加参展公司时没有正确为公司打勾</p><p>首先搞清楚不同变量的意义</p><p>首先是checkedList出现在“已选参展公司”部分，作为el-checkbox-group的v-model出现，赋值来源于对于checkList的watch，在checkList改变时checkedList会被附上相同的值</p><p>companyTable是最后被上传的表</p><p>checkList用处在于最后点击确认按钮后为companyTable赋值</p><p>companyAddList实际上是该分类下的公司列表</p><p>经过一晚，现在明白了el-checkbox-group 值不可以为对象，所以新建了一个</p><p>10、更改后的重名类型逻辑，在删除和修改时的逻辑依然有问题</p><p><strong>11、company表多加一个address</strong></p><p>12、模型图片改为列表，放多张照片</p><p><strong>13、company表再多加一个logo字段</strong></p><p><strong>14、company保存时没有加上服务器名</strong></p><p><strong>15、exhibition保存时没有加上服务器名</strong></p><p><strong>16、完成管理端的所有图片回传</strong></p><p><strong>17、面对大屏时逻辑依然有问题</strong></p><p><strong>18、完成物理实验报告</strong></p><h2 id="2023-11-17"><a href="#2023-11-17" class="headerlink" title="2023.11.17"></a>2023.11.17</h2><p>1、概率论</p><p>2、数据库</p><p>3、jpa初步学习</p><p>4、模型部分完成从服务器端上传以及获取</p><p>5、前端动态展示模型</p><p>6、注意判断zip的返回然后将将el-update的上传判断为失败</p><p>7、笔记</p><p><strong>8、修改展厅这块有数据库多余添加选中参展公司的bug</strong></p><p><strong>9、修改展厅这块选择继续添加参展公司时没有正确为公司打勾</strong></p><p><strong>首先搞清楚不同变量的意义</strong></p><p><strong>首先是checkedList出现在“已选参展公司”部分，作为el-checkbox-group的v-model出现，赋值来源于对于checkList的watch，在checkList改变时checkedList会被附上相同的值</strong></p><p><strong>companyTable是最后被上传的表</strong></p><p><strong>checkList用处在于最后点击确认按钮后为companyTable赋值</strong></p><p><strong>companyAddList实际上是该分类下的公司列表</strong></p><p><strong>经过一晚，现在明白了el-checkbox-group 值不可以为对象，所以新建了一个数组checkedListIds只存入id，然后label里存入item.id</strong></p><p><strong>历经4个多小时完成bug修复，学到的是对于框架中参数会出现严格限制需要看清，以及想起了我的网页vue插件，还有对于对象和数组概念的清晰</strong></p><p>10、更改后的重名类型逻辑，在删除和修改时的逻辑依然有问题</p><p><strong>11、在添加模型页面模型图片改为列表，放多张照片，并回显</strong></p><p><strong>12、修改公司这块选择继续添加模型时没有正确为模型打勾</strong></p><p><strong>13、完成对于添加模型页面模型图片数目的限制</strong></p><p><strong>14、完成添加模型页面模型图片列表的正确上传</strong></p><p><strong>15、完成模型List中图片数组的显示（也许可以偷懒只回显一张图片？后续通过preview-src-list在预览中可以查看多个图片，然后在主页的图片显示第一个图片）</strong></p><h2 id="2023-11-18"><a href="#2023-11-18" class="headerlink" title="2023.11.18"></a>2023.11.18</h2><p><strong>1、概率论</strong></p><p><strong>2、数据库</strong></p><p><strong>3、jpa初步学习</strong></p><p>和mybatis-plus实在太像了，唯一不同的是dao（数据访问对象 data access object）在JPA中叫做<code>repository</code>，而mybaits的dao叫<code>mapper</code>，以及没有IService直接为service提供了基础的增删改查，需要自己写对应的接口，并借助repository来实现</p><p><strong>4、模型部分完成从服务器端上传以及获取</strong></p><p><strong>首先是请求路径改为服务器，进行下载测试</strong></p><p><strong>如果不行就使用另一个下载图片的方法，进行测试，因为根据昨晚的下载，发现下载下来的文件根本没有后缀</strong></p><p><strong>最后使用本地测试，发现是没加glb后缀的原因</strong></p><p><strong>5、前端动态展示模型测试</strong></p><p>6、注意判断zip的返回然后将将el-update的上传判断为失败</p><p>7、更改后的重名类型逻辑，在删除和修改时的逻辑依然有问题</p><p>8、完成模型数据以及材质图的服务器存入</p><p><strong>9、Lambda表达式学习</strong></p><p>10、Stream流</p><p>11、es6语法糖学习</p><p>12、根据idea的提示优化代码并做好优化笔记</p><h2 id="2023-11-19"><a href="#2023-11-19" class="headerlink" title="2023.11.19"></a>2023.11.19</h2><p>1、注意判断zip的返回然后将将el-update的上传判断为失败</p><p>2、更改后的重名类型逻辑，在删除和修改时的逻辑依然有问题</p><p>3、完成模型数据以及材质图的服务器存入</p><p>4、Stream流</p><p>5、es6语法糖学习</p><p><strong>6、根据idea的提示优化代码并做好优化笔记</strong></p><p><strong>7、试试某些属性不返回的方法（<a href="https://blog.csdn.net/monody666/article/details/134393760">java实体类，注解设置某些属性不返回前端-CSDN博客</a>）以及jpa如何实现部分不返回</strong></p><h2 id="2023-11-20"><a href="#2023-11-20" class="headerlink" title="2023.11.20"></a>2023.11.20</h2><p>1、注意判断zip的返回然后将将el-update的上传判断为失败</p><p>2、更改后的重名类型逻辑，在删除和修改时的逻辑依然有问题</p><p>3、完成模型数据以及材质图的服务器存入</p><p>4、Stream流</p><p>5、es6语法糖学习</p><p><strong>7、修改了路由跳转的方式，防止用户访问到空页面</strong></p><p><strong>8、对路由进行监听，防止用户访问到不该访问的页面</strong></p><p><strong>9、完成glb模型到本地的上传解压</strong></p><p><strong>10、完成glb模型到服务器的上传解压</strong></p><p><strong>11、在el-update的方法返回里找到glb文件的名称</strong></p><p><strong>12、通过el-update的方法返回的glb文件名称进行模型下载，动态返回到页面中去</strong></p><p>13、在上传glb过程中对于材质图进行额外的上传逻辑</p><p>13、sotoken初步学习</p><h2 id="2023-11-21"><a href="#2023-11-21" class="headerlink" title="2023.11.21"></a>2023.11.21</h2><p>1、注意判断zip的返回然后将将el-update的上传判断为失败</p><p>2、更改后的重名类型逻辑，在删除和修改时的逻辑依然有问题</p><p>3、完成模型数据以及材质图的服务器存入</p><p>4、Stream流</p><p>5、es6语法糖学习</p><p>6、sotoken初步学习</p><p><strong>7、上传usdz模型至服务器并保存名字到数据库</strong></p><p><strong>8、在上传glb过程中对于材质图进行额外的上传逻辑</strong></p><p><strong>9、录制进度视频（1、动态显示相应模型以及贴图，但是贴图这块还在考虑，2、完善返回格式，之前在一些不需要的返回数据返回了空值，但是这在苹果端会导致报错，3、完善添加推荐模型的逻辑，4、二维码）</strong></p><h2 id="2023-11-22"><a href="#2023-11-22" class="headerlink" title="2023.11.22"></a>2023.11.22</h2><p>1、注意判断zip的返回然后将将el-update的上传判断为失败</p><p>2、更改后的重名类型逻辑，在删除和修改时的逻辑依然有问题</p><p>3、完成模型数据以及材质图的服务器存入</p><p>4、Stream流</p><p>5、es6语法糖学习</p><p>6、sotoken初步学习</p><p>7、完成文档</p><p><strong>8、因为安卓端只需要glb模型，所以去除添加材质的逻辑</strong></p><p><strong>9、优化服务器端的模型文件夹命名</strong></p><p><strong>10、修复无法点击修改模型的bug（估计是在page里因为之前防止返回null做了companyModel,实际上是{id}的问题）</strong></p><p>11、修复客户端公司下无法正确添加模型的bug</p><p>12、修复展厅管理员无法正确查看公司数据</p><p>13、修复用户数据的饼图不展示的问题</p><p>14、完成客户端相关文档编写</p><p>15、完成 技术创新点文档编写</p><p>16、物理实验报告</p><h2 id="2023-11-23"><a href="#2023-11-23" class="headerlink" title="2023.11.23"></a>2023.11.23</h2><p>1、注意判断zip的返回然后将将el-update的上传判断为失败</p><p>2、更改后的重名类型逻辑，在删除和修改时的逻辑依然有问题</p><p>3、完成模型数据以及材质图的服务器存入</p><p>4、Stream流</p><p>5、es6语法糖学习</p><p>6、sotoken初步学习</p><p><strong>7、完成文档</strong></p><p>11、修复客户端公司下无法正确添加模型的bug</p><p><strong>12、修复展厅管理员无法正确查看公司数据</strong></p><p><strong>13、修复用户数据的饼图不展示的问题</strong></p><p><strong>14、完成客户端相关文档编写</strong></p><p><strong>15、完成 技术创新点文档编写</strong></p><p>16、物理实验报告</p><p>17、修复用户数据的饼图设置null的条件错误的bug</p><p><strong>18、添加更多数据</strong></p><h2 id="2023-11-24"><a href="#2023-11-24" class="headerlink" title="2023.11.24"></a>2023.11.24</h2><p>1、注意判断zip的返回然后将将el-update的上传判断为失败</p><p>2、更改后的重名类型逻辑，在删除和修改时的逻辑依然有问题</p><p><strong>3、完成模型数据以及材质图的服务器存入（不需要存入了，glb 格式本身就压缩了材质图，这个很早就解决了，忘记删了）</strong></p><p>4、Stream流</p><p>5、es6语法糖学习</p><p>6、sotoken初步学习</p><p>11、修复客户端公司下无法正确添加模型的bug</p><p><strong>12、物理实验报告</strong></p><p>13、修复用户数据的饼图设置null的条件错误的bug</p><p><strong>14、完成 s3 ppt(用时3个多小时)</strong></p><p><strong>15、完成概率论作业并完成相关作业的视频学习</strong></p><p><strong>16、优化模型中所有返回List类型modelDto的代码</strong></p><p>17、学习optional</p><h2 id="2023-11-25"><a href="#2023-11-25" class="headerlink" title="2023.11.25"></a>2023.11.25</h2><p>1、注意判断zip的返回然后将将el-update的上传判断为失败</p><p>2、更改后的重名类型逻辑，在删除和修改时的逻辑依然有问题</p><p>3、Stream流</p><p>4、es6语法糖学习</p><p>5、sotoken初步学习</p><p>6、修复客户端公司下无法正确添加模型的bug</p><p>7、修复用户数据的饼图设置null的条件错误的bug</p><p><strong>8、学习optional</strong></p><p><strong>9、优化generateModelDtoList方法，把查询到部分都分到各自的服务层去</strong></p><p>10、优化公司中所有返回List类型companyDto的代码</p><p><strong>11、新建一个OptionalUtil用于防止空指针错误，并优化优化逻辑减少重复代码</strong></p><p><strong>12、建立统一异常处理类</strong></p><p><strong>13、每一种错误都返回不同的状态码</strong></p><p>总结：今天对于架构有了更深的理解</p><h2 id="2023-11-26"><a href="#2023-11-26" class="headerlink" title="2023.11.26"></a>2023.11.26</h2><p>1、注意判断zip的返回然后将将el-update的上传判断为失败</p><p>2、更改后的重名类型逻辑，在删除和修改时的逻辑依然有问题</p><p>3、Stream流</p><p>4、es6语法糖学习</p><p>5、sotoken初步学习</p><p><strong>6、修复客户端公司下无法正确添加模型的bug（很奇怪，bug自己把自己修好了😅）</strong></p><p><strong>7、修复用户数据的饼图设置null的条件错误的bug（原因竟然是在非null时忘记把控制null的变量设为false了😔）</strong></p><p>8、优化公司中所有返回List类型companyDto的代码</p><p><strong>9、增加预览的进度条</strong></p><p><strong>10、修改预览的进度条的位置大小（外层再套一个div？你是对的，上午的TEC🫡）</strong></p><p><strong>11、修改找不到id返回new 结果里面全是null，直接被存到list导致出错的问题，也可以不解决，毕竟只要数据库不存错就行（最后发现是自己重写了错误的list方法）</strong></p><p><strong>12、解决饼图的颜色可能重复的问题</strong></p><p><strong>13、对部分代码进行了规范日志输出</strong></p><h2 id="2023-11-27"><a href="#2023-11-27" class="headerlink" title="2023.11.27"></a>2023.11.27</h2><p>1、注意判断zip的返回然后将将el-update的上传判断为失败</p><p>2、更改后的重名类型逻辑，在删除和修改时的逻辑依然有问题</p><p><strong>3、Stream流</strong></p><p>4、es6语法糖学习</p><p>5、sotoken初步学习</p><p><strong>6、优化公司中所有返回List类型companyDto的代码</strong></p><p><strong>7、继续优化模型中的list方法</strong></p><p><strong>8、完成概率论作业以及相关学习</strong></p><p><strong>9、今天要优化完所有客户端这边的接口</strong></p><p><strong>10、感觉日志打印这里还是有点问题（主要在于每次都需要在开头结尾打印日志造成了重复代码，以及有时候日志太多好像更难定位问题发生的地方了，这里是睡完午觉的TEC：在系统观看java日志框架 Slf4j 的时候，由弹幕发现了AOP可以实现封装每次开头结尾打印日志的效果）</strong></p><p><strong>11、完成安卓作业</strong></p><h2 id="2023-11-28"><a href="#2023-11-28" class="headerlink" title="2023.11.28"></a>2023.11.28</h2><p>1、注意判断zip的返回然后将将el-update的上传判断为失败</p><p>2、更改后的重名类型逻辑，在删除和修改时的逻辑依然有问题</p><p>3、es6语法糖学习</p><p>4、sotoken初步学习</p><p><strong>5、完成fzl周中作业</strong></p><p><strong>6、完成安卓作业</strong></p><p><strong>7、完成英语小组作业</strong></p><h2 id="2023-11-29"><a href="#2023-11-29" class="headerlink" title="2023.11.29"></a>2023.11.29</h2><p>1、注意判断zip的返回然后将将el-update的上传判断为失败</p><p>2、更改后的重名类型逻辑，在删除和修改时的逻辑依然有问题</p><p>3、es6语法糖学习</p><p>4、sotoken初步学习</p><p><strong>5、整理笔记并传至博客</strong></p><p><strong>6、mac传的文章有时间差，回去用 win 重新传下，记得把文件再传回 mac 方便后续用 mac 上传</strong></p><p><strong>7、修复博客图片丢失的问题</strong></p><p>8、完善项目经验笔记</p><p>9、ts 学习</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>竞赛 AR 展厅的项目经验</title>
      <link href="/posts/3542d252.html"/>
      <url>/posts/3542d252.html</url>
      
        <content type="html"><![CDATA[<h1 id="竞赛-AR-展厅的项目经验"><a href="#竞赛-AR-展厅的项目经验" class="headerlink" title="竞赛 AR 展厅的项目经验"></a>竞赛 AR 展厅的项目经验</h1><h2 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分"></a>后端部分</h2><p>后端部分主要是学习如何优化代码，由 CRUD 搬砖转到有一定后端架构能力，还有对 Java 8 一些特性的学习</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="接口使用Body方式传递"><a href="#接口使用Body方式传递" class="headerlink" title="接口使用Body方式传递"></a>接口使用Body方式传递</h4><p>需要在代码前加@RequstBody，而且不能是String这样的类型</p><p>正确写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/addFavorites&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">addModelFavorites</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, String&gt; requestMap)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> requestMap.get(<span class="string">&quot;userId&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">favoritesId</span> <span class="operator">=</span> requestMap.get(<span class="string">&quot;favoritesId&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">type</span> <span class="operator">=</span> Integer.parseInt(requestMap.get(<span class="string">&quot;type&quot;</span>));</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;根据id收藏模型&quot;</span>);</span><br><span class="line">    <span class="type">UserFavorites</span> <span class="variable">userFavorites</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserFavorites</span>();</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userIdLong</span> <span class="operator">=</span> Long.valueOf(userId);</span><br><span class="line">  <span class="type">Long</span> <span class="variable">favoritesIdLong</span> <span class="operator">=</span> Long.valueOf(favoritesId);</span><br><span class="line">  </span><br><span class="line">    userFavorites.setUserId(userIdLong);</span><br><span class="line">    userFavorites.setFavoritesId(favoritesIdLong);</span><br><span class="line">    userFavorites.setType(type);</span><br><span class="line"></span><br><span class="line">    userFavoritesService.save(userFavorites);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">Model</span> <span class="variable">model</span> <span class="operator">=</span> modelService.getById(favoritesIdLong);</span><br><span class="line">        model.setFavoriteCount(model.getFavoriteCount() + <span class="number">1</span>);</span><br><span class="line">        modelService.updateById(model);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="type">Company</span> <span class="variable">company</span> <span class="operator">=</span> companyService.getById(favoritesIdLong);</span><br><span class="line">        company.setFavoriteCount(company.getFavoriteCount() + <span class="number">1</span>);</span><br><span class="line">        companyService.updateById(company);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 这里是展厅增加收藏数的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;收藏模型成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误写法，不能用json传递，只能用<a href="http://localhost:81/model/list?categoryId=1712732535265550338&amp;status=1%E7%9A%84%E6%96%B9%E5%BC%8F%E4%BC%A0%E9%80%92">http://localhost:81/model/list?categoryId=1712732535265550338&amp;status=1的方式传递</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/addFavorites&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">addModelFavorites</span><span class="params">(String userId, String favoritesId, <span class="type">int</span> type)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;根据id收藏模型&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userIdLong</span> <span class="operator">=</span> Long.valueOf(userId);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">favoritesIdLong</span> <span class="operator">=</span> Long.valueOf(favoritesId);</span><br><span class="line"></span><br><span class="line">    <span class="type">UserFavorites</span> <span class="variable">userFavorites</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserFavorites</span>();</span><br><span class="line">    userFavorites.setUserId(userIdLong);</span><br><span class="line">    userFavorites.setFavoritesId(favoritesIdLong);</span><br><span class="line">    userFavorites.setType(type);</span><br><span class="line"></span><br><span class="line">    userFavoritesService.save(userFavorites);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">Model</span> <span class="variable">model</span> <span class="operator">=</span> modelService.getById(favoritesIdLong);</span><br><span class="line">        model.setFavoriteCount(model.getFavoriteCount() + <span class="number">1</span>);</span><br><span class="line">        modelService.updateById(model);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="type">Company</span> <span class="variable">company</span> <span class="operator">=</span> companyService.getById(favoritesIdLong);</span><br><span class="line">        company.setFavoriteCount(company.getFavoriteCount() + <span class="number">1</span>);</span><br><span class="line">        companyService.updateById(company);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 这里是展厅增加收藏数的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;收藏模型成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="queryWrapper-in"><a href="#queryWrapper-in" class="headerlink" title="queryWrapper.in();"></a>queryWrapper.in();</h4><p>使用queryWrapper.in就可以直接根据限定条件为company的id中符合ids数组中的内容，这样就不需要再根据for循环去重复存入list</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper.in(Company::getId, ids);</span><br></pre></td></tr></table></figure><h4 id="saveBatch"><a href="#saveBatch" class="headerlink" title="saveBatch"></a>saveBatch</h4><p>mybatis-plus封装的一个可以批量保存的方法，参数为List类型</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC (控制反转)"></a>IOC (控制反转)</h4><p>Inversion of Control</p><p>SpringBoot 通过 @Component 注解实现 IOC</p><h4 id="DI-依赖注入"><a href="#DI-依赖注入" class="headerlink" title="DI (依赖注入)"></a>DI (依赖注入)</h4><p>Dependency Injection</p><h4 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h4><p>1、Java反射机制的核心是在程序运行时动态加载类并获取类的详细信息，从而操作类或对象的属性和方法。本质是JVM得到class对象之后，<strong>再通过class对象进行反编译，从而获取对象的各种信息。</strong><br>2、Java属于先编译再运行的语言，程序中对象的类型在编译期就确定下来了，而当程序在运行时可能需要动态加载某些类，这些类因为之前用不到，所以没有被加载到JVM。通过反射，可以在运行时动态地创建对象并调用其属性，<strong>不需要提前在编译期知道运行的对象是谁。</strong></p><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><h4 id="领域驱动设计-DDD"><a href="#领域驱动设计-DDD" class="headerlink" title="领域驱动设计(DDD)"></a>领域驱动设计(DDD)</h4><h4 id="代码设计模式"><a href="#代码设计模式" class="headerlink" title="代码设计模式"></a>代码设计模式</h4><h5 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h5><h5 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h5><p>通过套娃的方式，将需要改变的类套在外层，这样在需求更改时只需要该相应的类</p><h5 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h5><h5 id="状态模型"><a href="#状态模型" class="headerlink" title="状态模型"></a>状态模型</h5><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><h4 id="java上传图片到服务器并通过服务器地址访问"><a href="#java上传图片到服务器并通过服务器地址访问" class="headerlink" title="java上传图片到服务器并通过服务器地址访问"></a>java上传图片到服务器并通过服务器地址访问</h4><p>关于文件的二进制转化，HuTool 提供了相关的功能来简化这一常见任务：</p><p>路径拼接：</p><ul><li>传统Java方式可能需要手动拼接路径字符串，而HuTool的<code>FileUtil.file</code>方法可以更方便地构建文件对象，自动处理路径的拼接，避免手动拼接路径字符串的繁琐操作。</li></ul><p>IO操作：</p><ul><li>传统Java方式中，可能需要手动处理文件的输入流和输出流，并进行逐字节或逐块的复制。而使用HuTool的<code>IoUtil.copy</code>方法，可以更简单地实现文件的拷贝操作，提高了代码的简洁性。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/downloadGLB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadGLB</span><span class="params">(String name, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 基础路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">basePath</span> <span class="operator">=</span> <span class="string">&quot;C:\\model\\AndroidEntry\\&quot;</span> + name + <span class="string">&quot;\\&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Hutool提供的文件工具类</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> FileUtil.file(basePath, name + <span class="string">&quot;.glb&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置响应头，使用原始文件名，不进行编码</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span> + name + <span class="string">&quot;.glb&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 传统Java方式</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">             <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream()) &#123;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4096</span>];</span><br><span class="line">            <span class="type">int</span> bytesRead;</span><br><span class="line">            <span class="keyword">while</span> ((bytesRead = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                outputStream.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Hutool提供的IO工具类进行文件拷贝</span></span><br><span class="line">        IoUtil.copy(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file), response.getOutputStream());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在方法中添加日志输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Downloading file: &quot;</span> + file.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">&quot;File size: &quot;</span> + file.length());</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="密码加盐"><a href="#密码加盐" class="headerlink" title="密码加盐"></a>密码加盐</h4><ol><li><p><strong>取用户输入的密码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> user.getPassword();</span><br></pre></td></tr></table></figure></li><li><p><strong>查询数据库中对应用户名的用户信息：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper.eq(User::getUsername, user.getUsername());</span><br><span class="line"><span class="type">User</span> <span class="variable">emp</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br></pre></td></tr></table></figure></li><li><p><strong>获取数据库中存储的盐值：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> emp.getSalt();</span><br></pre></td></tr></table></figure></li><li><p><strong>设置盐值到加密工具类中：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PasswordWithSaltUtils.setSalt(salt);</span><br></pre></td></tr></table></figure></li><li><p><strong>对用户输入的密码进行盐值加密：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">hashPassword</span> <span class="operator">=</span> PasswordWithSaltUtils.hashPassword(password);</span><br></pre></td></tr></table></figure></li><li><p><strong>比较数据库中存储的加密密码和用户输入的加密密码是否一致，如果不一致则返回密码错误信息：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!emp.getPassword().equals(hashPassword)) &#123;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>密码加盐封装的代码 PasswordWithSaltUtils 如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PasswordWithSaltUtils</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    将随机生成的盐设置为密码加密的属性，便于获取</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String salt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对于salt的set方法，当新增员工的时候，salt为null,使用36位随机生成</span></span><br><span class="line"><span class="comment">     * 当我们需要登录的时候</span></span><br><span class="line"><span class="comment">     * 通过从数据库中查询到该用户在注册时生成的盐来进行计算，得出当前该用户在登录时候输入密码的hashPassword</span></span><br><span class="line"><span class="comment">     * 将当前登录时候计算出的hashPassword和用户在注册时候存放在数据库中的hashPassword比对</span></span><br><span class="line"><span class="comment">     * 如果一样则登录，否则失败</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> salt</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setSalt</span><span class="params">(String salt)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (salt == <span class="literal">null</span>)&#123;</span><br><span class="line">            PasswordWithSaltUtils.salt = UUID.randomUUID().toString();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            PasswordWithSaltUtils.salt = salt;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">hashPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">mDigest</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;SHA-512&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] result = mDigest.digest((password + salt).getBytes());</span><br><span class="line">            <span class="keyword">return</span> bytesToHex(result);  <span class="comment">// 将字节数组转换为十六进制字符串</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将原始的字节数组转换为十六进制后返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">bytesToHex</span><span class="params">(<span class="type">byte</span>[] hash)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">hexString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">2</span> * hash.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; hash.length; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> Integer.toHexString(<span class="number">0xff</span> &amp; hash[i]);</span><br><span class="line">            <span class="keyword">if</span>(hex.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                hexString.append(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            hexString.append(hex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hexString.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Long&gt; ids = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(); <span class="comment">// 使用Set来存储唯一的id</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面是常规的for循环</span></span><br><span class="line"><span class="keyword">for</span> (ExhibitionCompany exhibitionCompanyItem : exhibitionCompanyList) &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> exhibitionCompanyItem.getCompanyId();</span><br><span class="line">    ids.add(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面是foreach方式优化了代码</span></span><br><span class="line">exhibitionCompanyList.forEach((exhibitionCompany) -&gt; &#123;</span><br><span class="line">    ids.add(exhibitionCompany.getId());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="stream流"><a href="#stream流" class="headerlink" title="stream流"></a>stream流</h4><p>可以更方便的对集合或者数组进行链状流式的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用传统的for循环方式</span></span><br><span class="line">List&lt;Long&gt; companyIds = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (CompanyModel companyModel1 : companyModelList) &#123;</span><br><span class="line">    companyIds.add(companyModel1.getCompanyId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Stream和Lambda表达式方式</span></span><br><span class="line">List&lt;Long&gt; companyIds = companyModelList.stream()</span><br><span class="line">        .map(CompanyModel::getCompanyId)</span><br><span class="line">        .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>flatMap</p><p>flatMap()可以把一个对象转换为多个对象放到流中</p><p>例如下面的listByCompanyId返回的就是list</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;CompanyModel&gt; companyModelList =companyIds.stream()       </span><br><span class="line">  .flatMap(idItem-&gt;companyModelService.listByCompanyId(String.valueOf(idItem)).stream())</span><br><span class="line">  .toList();</span><br></pre></td></tr></table></figure><h4 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h4><p>使用Optional类可以避免手动的null检查，使代码更加简洁</p><p>Optional.orElseGet()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 if-else 版本的null检查</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line"><span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line"><span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">    modelDto.setCategoryName(categoryName);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    modelDto.setCategoryName(<span class="string">&quot;暂无分类&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line"><span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> Optional.ofNullable(categoryService.getById(categoryId))</span><br><span class="line">        .map(Category::getName)</span><br><span class="line">        .orElse(<span class="string">&quot;暂无分类&quot;</span>);</span><br><span class="line"><span class="comment">// 使用 Optional 版本的null检查</span></span><br><span class="line">modelDto.setCategoryName(categoryName);</span><br></pre></td></tr></table></figure><p>Optional.orElseThrow()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 if-else 版本的null检查,并返回</span></span><br><span class="line"><span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;    </span><br><span class="line">  categoryName = category.getName();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">  <span class="keyword">return</span> R.error(<span class="string">&quot;不存在该公司分类&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Optional 版本的null检查,并返回，这里使用的是自己封装的optional类的内容</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getNameError</span><span class="params">(String name,String msg)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> Optional.ofNullable(name)        </span><br><span class="line">    .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">CustomException</span>(msg));</span><br><span class="line">&#125;</span><br><span class="line">String categoryName=optionalUtils.getNameError(category.getName(),<span class="string">&quot;不存在该公司分类&quot;</span>);</span><br></pre></td></tr></table></figure><p>养成使用Optional的习惯可以写出更加优雅的代码来避免空指针异常。</p><pre><code>Optional.ofNullable() 将对象封装为Optional对象。无论传入的参数是否为null都不会出现问题。（建议使用 ）Optional.of() 传入的参数必须不能为null。（不建议使用）Optional.empty() 返回一个空的Optional对象。Optional.ifPresent() 该方法会判断其内部封装的数据是否为空,不为空的时候才能执行具体的消费代码。Optional.isPresent()  该方法会判断其内部封装的数据是否为空,为空返回false,不为空返回true.Optional.filter()  在方法中进行逻辑判断,如果满足会返回Optional对象；不满足则返回null.Optional.map() 将对象中的值转为Optional&lt;List&lt;T&gt;&gt;对象.</code></pre><p>如果想要安全的获取Optional对象中的值，不推荐使用get()方法。推荐使用以下几种方法。</p><pre><code>Optional.orElseGet() 如果Optional中的值为null,可以自定义返回一个对象。Optional.orElseThrow()  如果Optional中的值为null,可以手动抛出异常。</code></pre><p>有个会混淆的点在于orElseGet与orElse的区别，先说结论orElseGet会用的更多，因为orElse无论Optional的值是否为null都会进行，会导致内存的多余使用</p><p>链接查看：<a href="https://blog.csdn.net/daobuxinzi/article/details/117376218">java中orElse()和orElseGet()的区别_java orelseget-CSDN博客</a></p><h4 id="不返回实体类的某个属性"><a href="#不返回实体类的某个属性" class="headerlink" title="不返回实体类的某个属性"></a>不返回实体类的某个属性</h4><p>使用@JsonProperty(access &#x3D; JsonProperty.Access.WRITE_ONLY)来实现只写不返回</p><p>原文连接：<a href="https://blog.csdn.net/monody666/article/details/134393760">java实体类，注解设置某些属性不返回前端-CSDN博客</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优化数组存入"><a href="#优化数组存入" class="headerlink" title="优化数组存入"></a>优化数组存入</h4><p>直接在实例化时存入数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">List&lt;CompanyModel&gt; companyModelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">QueryWrapper&lt;CompanyModel&gt; modelQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">modelQueryWrapper.in(<span class="string">&quot;company_id&quot;</span>, ids);</span><br><span class="line">modelQueryWrapper.eq(<span class="string">&quot;category_name&quot;</span>, categoryName);</span><br><span class="line"></span><br><span class="line">List&lt;CompanyModel&gt; companyModelList1 = companyModelService.list(modelQueryWrapper);</span><br><span class="line"><span class="keyword">if</span> (companyModelList1.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;该分类下不存在模型&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*for (CompanyModel model : companyModelList1) &#123;</span></span><br><span class="line"><span class="comment">    companyModelList.add(model);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line">List&lt;CompanyModel&gt; companyModelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(companyModelList1);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Objects-requireNonNullElse"><a href="#Objects-requireNonNullElse" class="headerlink" title="Objects.requireNonNullElse"></a>Objects.requireNonNullElse</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*else if (admId != null) &#123;</span></span><br><span class="line"><span class="comment">     // 如果是&quot;manager&quot;角色，只显示创建者ID与Session中ID匹配的模型</span></span><br><span class="line"><span class="comment">     queryWrapper.eq(Model::getCreateUserId, admId);</span></span><br><span class="line"><span class="comment">&#125; else &#123;</span></span><br><span class="line"><span class="comment">     // 如果没有&quot;manager&quot;或 &quot;employee&quot;角色信息，不显示模型</span></span><br><span class="line"><span class="comment">     queryWrapper.eq(Model::getCreateUserId, &quot;0&quot;); // 这是一个永远不成立的条件，确保不显示模型</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">queryWrapper.eq(Model::getCreateUserId, Objects.requireNonNullElse(admId, <span class="string">&quot;0&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h4><p>使用箭头的方法更简单易懂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (chosenDate) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;today&quot;</span> -&gt; &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;last7days&quot;</span>-&gt;&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CustomException 是一个自定义的运行时异常类，继承了标准的 RuntimeException。它旨在通过包含一个 ErrorCodeEnum 来更结构化地封装和处理异常，以表示与异常相关的错误代码。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="comment">// 表示与异常相关联的错误代码</span></span><br><span class="line">    <span class="keyword">private</span> ErrorCodeEnum errorCode;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * CustomException 的构造函数，接受一个 ErrorCodeEnum 参数，并使用 ErrorCodeEnum 中相应的错误消息初始化异常。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errorCode 表示特定错误条件的 ErrorCodeEnum。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomException</span><span class="params">(ErrorCodeEnum errorCode)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用超类构造函数，使用 ErrorCodeEnum 中的错误消息</span></span><br><span class="line">        <span class="built_in">super</span>(errorCode.getMessage());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用提供的 ErrorCodeEnum 初始化 errorCode 字段</span></span><br><span class="line">        <span class="built_in">this</span>.errorCode = errorCode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于检索与异常相关联的 ErrorCodeEnum 的 getter 方法。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 表示特定错误条件的 ErrorCodeEnum。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ErrorCodeEnum <span class="title function_">getErrorCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errorCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="统一异常处理类"><a href="#统一异常处理类" class="headerlink" title="统一异常处理类"></a>统一异常处理类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice(annotations = &#123; RestController.class, Controller.class &#125;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行异常处理方法，这里的异常是就是 SQLIntegrityConstraintViolationException 异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理 SQLIntegrityConstraintViolationException 异常的逻辑</span></span><br><span class="line">        log.error(ex.getMessage());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ex.getMessage().contains(<span class="string">&quot;Duplicate entry&quot;</span>)) &#123;</span><br><span class="line">            String[] split = ex.getMessage().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> split[<span class="number">2</span>] + <span class="string">&quot;已存在&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> R.error(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行异常处理方法,这里的异常是就是自己建立的统一异常处理，简单版</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(CustomException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(CustomException ex)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理 CustomException 异常的逻辑</span></span><br><span class="line">        log.error(ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> R.error(ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 进行异常处理方法,这里的异常是就是自己建立的统一异常处理，通过枚举错误类设置code以及msg版</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(CustomException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(CustomException ex)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理 CustomException 异常的逻辑</span></span><br><span class="line">        <span class="comment">// 创建新的 R 对象并设置新的 code 值</span></span><br><span class="line">        log.error(ex.getMessage());</span><br><span class="line">        R&lt;String&gt; response = R.error(ex.getMessage());</span><br><span class="line"></span><br><span class="line">        <span class="type">ErrorCodeEnum</span> <span class="variable">errorCode</span> <span class="operator">=</span> ex.getErrorCode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 假设 ErrorCodeEnum 的 code 是整数类型</span></span><br><span class="line">        response.setCode(errorCode.getCode());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="抛出异常的方法"><a href="#抛出异常的方法" class="headerlink" title="抛出异常的方法"></a>抛出异常的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getError</span><span class="params">(T value, ErrorCodeEnum errorCodeEnum)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(value)</span><br><span class="line">            .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">CustomException</span>(errorCodeEnum));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="枚举异常错误类"><a href="#枚举异常错误类" class="headerlink" title="枚举异常错误类"></a>枚举异常错误类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ErrorCodeEnum</span> &#123;</span><br><span class="line">    EXHIBITION_NULL(<span class="number">0</span>,<span class="string">&quot;不存在该展厅&quot;</span>),</span><br><span class="line">    CATEGORY_NULL(<span class="number">0</span>,<span class="string">&quot;不存在该分类&quot;</span>),</span><br><span class="line">    bannerModel_Null(<span class="number">0</span>,<span class="string">&quot;该展厅不存在推荐模型&quot;</span>),</span><br><span class="line">    COMPANY_ALREADY_ASSOCIATED(<span class="number">0</span>,<span class="string">&quot;已经关联公司，不能删除&quot;</span>),</span><br><span class="line">    MODEL_ALREADY_ASSOCIATED(<span class="number">0</span>,<span class="string">&quot;已经关联模型，不能删除&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中文描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="规范的日志打印"><a href="#规范的日志打印" class="headerlink" title="规范的日志打印"></a>规范的日志打印</h4><p>参考文章：<a href="https://blog.csdn.net/Mango_Bin/article/details/120482159">Java：如果优雅地打印出完美日志-CSDN博客</a></p><p>方法的进入参数以及方法结束时返回值</p><p>这部分我使用 AOP 进行封装了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;@annotation(Loggable)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logBefore</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> signature.toShortString();</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line"></span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">methodSignature</span> <span class="operator">=</span> (MethodSignature) signature;</span><br><span class="line">        String[] parameterNames = methodSignature.getParameterNames();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; paramMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            paramMap.put(parameterNames[i], args[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;进入 &#123;&#125; 方法，传入值: &#123;&#125;&quot;</span>, methodName, paramMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(pointcut = &quot;@annotation(Loggable)&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logAfterReturning</span><span class="params">(JoinPoint joinPoint, Object result)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;结束 &#123;&#125; 方法，返回值: &#123;&#125;&quot;</span>, joinPoint.getSignature().toShortString(), result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if-else分支</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.info(<span class="string">&quot;进入 companyId 为 null 的分支&quot;</span>);</span><br></pre></td></tr></table></figure><p>关键部分（可能引发错误的部分）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.info(<span class="string">&quot;通过 exhibitionCompanyList 获取的 companyIds：&#123;&#125;&quot;</span>,companyIds);</span><br></pre></td></tr></table></figure><h4 id="mybatisPlus属性自动填充"><a href="#mybatisPlus属性自动填充" class="headerlink" title="mybatisPlus属性自动填充"></a>mybatisPlus属性自动填充</h4><p>使用MetaObjectHandler来实现</p><p>下面是AR项目所写的代码</p><p>自建的 MyMetaObjectHandler 类并继承 mp MetaObjectHandler 接口重写相关方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="comment">//插入时自动填充</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充【insert】。。。&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>,<span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>,<span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新时自动填充</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充【update】。。。&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>,LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>,<span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时实体类也需要进行相关的注解配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span><span class="comment">//插入时填充字段</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><span class="comment">//插入和更新时填充字段</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;</span><br></pre></td></tr></table></figure><h4 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h4><p>AOP：面向切面编程，对面向对象编程的一种补充，一般处理非业务代码，比如打印日志</p><p>比如说每一个对象都需要开头结尾打印日志，那么可以把每个对象切一刀，再把切面抽象为对象，就可以实现封装每次开头结尾打印日志的效果</p><p>首先是自定义一个接口，这样就可以自由控制在哪个方法进行日志打印</p><p>自定义接口：Loggable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Loggable &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义一个切面类，在切面类里写好需要封装的日志</p><p>切面类：LoggingAspect</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;@annotation(Loggable)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logBefore</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> signature.toShortString();</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line"></span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">methodSignature</span> <span class="operator">=</span> (MethodSignature) signature;</span><br><span class="line">        String[] parameterNames = methodSignature.getParameterNames();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; paramMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            paramMap.put(parameterNames[i], args[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;进入 &#123;&#125; 方法，参数: &#123;&#125;&quot;</span>, methodName, paramMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(pointcut = &quot;@annotation(Loggable)&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logAfterReturning</span><span class="params">(JoinPoint joinPoint, Object result)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;结束 &#123;&#125; 方法，返回值: &#123;&#125;&quot;</span>, joinPoint.getSignature().toShortString(), result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是使用方法</p><p>在需要打印日志的方法上面加上注解@Loggable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/getAll&quot;)</span></span><br><span class="line"><span class="meta">@Loggable</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;ExhibitionCompany&gt;&gt; <span class="title function_">listAllCompany</span><span class="params">(String exhibitionId)</span> &#123;</span><br><span class="line">  List&lt;ExhibitionCompany&gt; list = exhibitionCompanyService.listByExhibitionId(exhibitionId);</span><br><span class="line">  <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h4><p>参考文章：<a href="https://blog.csdn.net/afreon/article/details/128825831">这8种java异步实现方式，性能炸裂！_Java精选的博客-CSDN博客</a></p><h4 id="消息队列-MQ"><a href="#消息队列-MQ" class="headerlink" title="消息队列(MQ)"></a>消息队列(MQ)</h4><p>参考文章：<a href="https://blog.csdn.net/weixin_40623736/article/details/108566965">java常用的消息队列 看完这篇你就懂了_java给外部推送消息队列都需要做什么-CSDN博客</a></p><p>主流框架有RabbitMQ、RocketMQ、ActiveMQ、Kafka、ZeroMQ、Pulsar</p><p>目前使用阿里开发的 RocketMQ 较多</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="框架学习"><a href="#框架学习" class="headerlink" title="框架学习"></a>框架学习</h3><h4 id="HuTool框架"><a href="#HuTool框架" class="headerlink" title="HuTool框架"></a>HuTool框架</h4><h4 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h4><p>和mybatis-plus实在太像了，唯一不同的是dao（数据访问对象 data access object）在JPA中叫做<code>repository</code>，而mybaits的dao叫<code>mapper</code>，以及没有IService直接为service提供了基础的增删改查，需要自己写对应的接口，并借助repository来实现</p><p>基础链接：<a href="https://blog.csdn.net/qq_42495847/article/details/107991361">最详细的Spring-data-jpa入门（一）_springdatajpa-CSDN博客</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JpaUserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">JpaUserService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JpaUserRepository jpaUserRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> JpaUser <span class="title function_">insertUser</span><span class="params">(JpaUser user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jpaUserRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        jpaUserRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> JpaUser <span class="title function_">updateUser</span><span class="params">(JpaUser user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jpaUserRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;JpaUser&gt; <span class="title function_">findAllUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jpaUserRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> JpaUser <span class="title function_">findUserById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jpaUserRepository.findById(id).orElse(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sa-Token"><a href="#Sa-Token" class="headerlink" title="Sa-Token"></a>Sa-Token</h4><h5 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h5><p>Maven 方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.dev33<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sa-token-spring-boot3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.36.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-设置配置文件"><a href="#2-设置配置文件" class="headerlink" title="2. 设置配置文件"></a>2. 设置配置文件</h5><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#Sa-Token 配置</span></span><br><span class="line"><span class="attr">sa-token:</span></span><br><span class="line">  <span class="comment"># token 名称（同时也是 cookie 名称）</span></span><br><span class="line">  <span class="attr">token-name:</span> <span class="string">satoken</span></span><br><span class="line">  <span class="comment"># token 有效期（单位：秒） 默认30天，-1 代表永久有效</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">2592000</span></span><br><span class="line">  <span class="comment"># token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结</span></span><br><span class="line">  <span class="attr">active-timeout:</span> <span class="number">-1</span></span><br><span class="line">  <span class="comment"># 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）</span></span><br><span class="line">  <span class="comment"># 这里不允许同一账号多地同时登录</span></span><br><span class="line">  <span class="attr">is-concurrent:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）</span></span><br><span class="line">  <span class="comment"># 这里使用每次新建一个token</span></span><br><span class="line">  <span class="attr">is-share:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）</span></span><br><span class="line">  <span class="attr">token-style:</span> <span class="string">uuid</span></span><br><span class="line">  <span class="comment"># 是否输出操作日志</span></span><br><span class="line">  <span class="attr">is-log:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h5 id="3-登录认证以及获取-token"><a href="#3-登录认证以及获取-token" class="headerlink" title="3. 登录认证以及获取 token"></a>3. 登录认证以及获取 token</h5><p>登录时使用：login</p><p>获取 token 使用：getTokenValueByLoginId</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;User&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 sa-token 的登录方法</span></span><br><span class="line">    StpUtil.login(emp.getId()); <span class="comment">// 使用sa-token 中的登录方法，id值直接使用emp的id;</span></span><br><span class="line">    emp.setToken(StpUtil.getTokenValueByLoginId(emp.getId())); <span class="comment">// 将每次登录产生的token返回</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-获取-userId"><a href="#4-获取-userId" class="headerlink" title="4. 获取 userId"></a>4. 获取 userId</h5><p>获取 userid 使用 getLoginIdByToken</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/favoritesModels&quot;)</span></span><br><span class="line"><span class="meta">@Loggable</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;ModelDto&gt;&gt; <span class="title function_">favoritesModels</span><span class="params">(String token)</span> &#123;</span><br><span class="line">    <span class="comment">// 根据每次登录产生的token来获取当前登录用户收藏的模型</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userIdLong</span> <span class="operator">=</span> Long.valueOf((String) optionalUtils.getError(StpUtil.getLoginIdByToken(token), ErrorCodeEnum.INVALID_TOKEN));</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;开始获取收藏的模型...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 sa-token 获取当前登录用户的ID</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userIdLong</span> <span class="operator">=</span> Long.valueOf((String)StpUtil.getLoginIdByToken(token);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回包含模型信息的成功响应</span></span><br><span class="line">    <span class="keyword">return</span> R.success(modelDtoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="Bug复盘"><a href="#Bug复盘" class="headerlink" title="Bug复盘"></a>Bug复盘</h3><h4 id="循环依赖"><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h4><p>好像这块是八股文的部分，但是实际开发还是遇到这个问题了，所以还是记录一下</p><p>循环依赖其实就是循环引用，也就是两个或则两个以上的bean互相持有对方，最终形成闭环。比如A依赖于B，B依赖于C，C又依赖于A。</p><p>解决方法：</p><p>加上Lazy注解，会延时引用bean，虽然这个解决方法，但是感觉好像有点头疼砍头，后续出问题了，再整理一下依赖关系吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="keyword">private</span> CompanyService companyService;</span><br></pre></td></tr></table></figure><h2 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h2><h3 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h3><h4 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h4><h5 id="符号-x3D-x3D-判断有误的问题"><a href="#符号-x3D-x3D-判断有误的问题" class="headerlink" title="符号 &#x3D;&#x3D; 判断有误的问题"></a>符号 &#x3D;&#x3D; 判断有误的问题</h5><p>可以使用 &#x3D; &#x3D; &#x3D; 来实现，同样java中可以.isEmpty、&#x3D;&#x3D; “”、&#x3D;&#x3D; null都试试</p><h5 id="axios封装API"><a href="#axios封装API" class="headerlink" title="axios封装API"></a>axios封装API</h5><p>1、下载 axios 插件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install axios</span><br></pre></td></tr></table></figure><p>2、main.js 引入依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./plugins/element-ui/index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  store,</span><br><span class="line">  router,</span><br><span class="line">  axios,</span><br><span class="line">  <span class="title class_">ElementUI</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、封装请求方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;../router/index&#x27;</span>; <span class="comment">// 导入你的路由实例</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;api&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000000</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// request拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置请求的Content-Type</span></span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否需要设置 token</span></span><br><span class="line">    <span class="comment">// const isToken = (config.headers || &#123;&#125;).isToken === false</span></span><br><span class="line">    <span class="comment">// if (getToken() &amp;&amp; !isToken) &#123;</span></span><br><span class="line">    <span class="comment">//   config.headers[&#x27;Authorization&#x27;] = &#x27;Bearer &#x27; + getToken(); // 根据实际情况修改</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// get请求映射params参数</span></span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">method</span> === <span class="string">&#x27;get&#x27;</span> &amp;&amp; config.<span class="property">params</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> url = config.<span class="property">url</span> + <span class="string">&#x27;?&#x27;</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> propName <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(config.<span class="property">params</span>)) &#123;</span><br><span class="line">        <span class="keyword">const</span> value = config.<span class="property">params</span>[propName];</span><br><span class="line">        <span class="keyword">var</span> part = <span class="built_in">encodeURIComponent</span>(propName) + <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (value !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> value !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(value)) &#123;</span><br><span class="line">              <span class="keyword">let</span> params = propName + <span class="string">&#x27;[&#x27;</span> + key + <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">              <span class="keyword">var</span> subPart = <span class="built_in">encodeURIComponent</span>(params) + <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">              url += subPart + <span class="built_in">encodeURIComponent</span>(value[key]) + <span class="string">&#x27;&amp;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            url += part + <span class="built_in">encodeURIComponent</span>(value) + <span class="string">&#x27;&amp;&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      url = url.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">      config.<span class="property">params</span> = &#123;&#125;;</span><br><span class="line">      config.<span class="property">url</span> = url;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---响应拦截器---&#x27;</span>, response);</span><br><span class="line">    <span class="comment">// 检查响应是否包含数据以及 code 字段</span></span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">data</span> &amp;&amp; response.<span class="property">data</span>.<span class="property">code</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> code = response.<span class="property">data</span>.<span class="property">code</span>;</span><br><span class="line">      <span class="keyword">const</span> msg = response.<span class="property">data</span>.<span class="property">msg</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (code === <span class="number">0</span> &amp;&amp; msg === <span class="string">&#x27;You have to login&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 返回登录页面</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---/backend/page/login/login.html---&#x27;</span>, code);</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;userInfo&#x27;</span>);</span><br><span class="line">        <span class="comment">// 使用传递的路由实例进行页面跳转</span></span><br><span class="line">        router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span> &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 处理未包含 code 字段的响应</span></span><br><span class="line">      <span class="comment">// 这里可以添加适当的处理逻辑</span></span><br><span class="line">      <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span> + error);</span><br><span class="line">    <span class="keyword">let</span> &#123; message &#125; = error;</span><br><span class="line">    <span class="keyword">if</span> (message === <span class="string">&#x27;Network Error&#x27;</span>) &#123;</span><br><span class="line">      message = <span class="string">&#x27;后端接口连接异常&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.<span class="title function_">includes</span>(<span class="string">&#x27;timeout&#x27;</span>)) &#123;</span><br><span class="line">      message = <span class="string">&#x27;系统接口请求超时&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.<span class="title function_">includes</span>(<span class="string">&#x27;Request failed with status code&#x27;</span>)) &#123;</span><br><span class="line">      message = <span class="string">&#x27;系统接口&#x27;</span> + message.<span class="title function_">substr</span>(message.<span class="property">length</span> - <span class="number">3</span>) + <span class="string">&#x27;异常&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">ElementUI</span>.<span class="title class_">Message</span>(&#123;</span><br><span class="line">      <span class="attr">message</span>: message,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">      <span class="attr">duration</span>: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure><p>4、封装 api</p><p>注意传递参数有所不同，GET请求通常使用查询字符串（params）传递参数，而POST、PUT请求通常使用请求体（data）传递参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $axios <span class="keyword">from</span> <span class="string">&#x27;../utils/request&#x27;</span>;</span><br><span class="line"><span class="comment">// 查询列表数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getCompanyPage</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/company/page&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    params</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">deleteCompany</span> = (<span class="params">ids</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/company&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123; ids &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改数据接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">editCompany</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/company&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; ...params &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增数据接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">addCompany</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/company&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; ...params &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询详情接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">queryCompanyById</span> = (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/company/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查模型列表的接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">queryCompanyList</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/company/listCompanies&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    params</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量起售禁售</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">companyStatusByStatus</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/company/status/<span class="subst">$&#123;params.status&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123; <span class="attr">ids</span>: params.<span class="property">ids</span> &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、使用方法</p><p>需要 import 导入</p><p>然后注意参数的传入有不同方法</p><p>比如直接建一个对象 params 然后传入getCompanyPage(params) 或者直接在deleteCompany(id)</p><p>还有注意具体的使用</p><p>比如 getCompanyPage 就直接接收就行 const res &#x3D; await getCompanyPage(params);</p><p>而 deleteCompany会加入 then 以及箭头函数来进行后续操作</p><p>deleteCompany(type &#x3D;&#x3D;&#x3D; ‘批量’ ? this.checkList.join(‘,’) : id)</p><p>​.then(res &#x3D;&gt; {</p><p>})</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dashboard-container&quot; id=&quot;company-app&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">      &lt;!-- ... 省略部分布局代码 ... --&gt;</span><br><span class="line">      &lt;el-table :data=&quot;tableData&quot; stripe class=&quot;tableBox&quot; @selection-change=&quot;handleSelectionChange&quot;&gt;</span><br><span class="line">        &lt;el-table-column type=&quot;selection&quot; width=&quot;25&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">        &lt;el-table-column prop=&quot;name&quot; label=&quot;公司名称&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">        &lt;!-- ... 省略部分列配置 ... --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-table-column label=&quot;操作&quot; width=&quot;160&quot; align=&quot;center&quot;</span><br><span class="line">          v-if=&quot;userInfo.position == &#x27;manager&#x27; || userInfo.position == &#x27;admin&#x27;&quot;&gt;</span><br><span class="line">          &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">            &lt;el-button type=&quot;text&quot; size=&quot;small&quot; class=&quot;blueBug&quot; @click=&quot;addSetMeal(scope.row.id)&quot;&gt;</span><br><span class="line">              修改</span><br><span class="line">            &lt;/el-button&gt;</span><br><span class="line">            &lt;el-button type=&quot;text&quot; size=&quot;small&quot; class=&quot;blueBug&quot; @click=&quot;statusHandle(scope.row)&quot;&gt;</span><br><span class="line">              &#123;&#123; scope.row.status == &#x27;0&#x27; ? &#x27;展示&#x27; : &#x27;隐藏&#x27; &#125;&#125;</span><br><span class="line">            &lt;/el-button&gt;</span><br><span class="line">            &lt;el-button type=&quot;text&quot; size=&quot;small&quot; class=&quot;delBut non&quot; @click=&quot;deleteHandle(&#x27;单删&#x27;, scope.row.id)&quot;&gt;</span><br><span class="line">              删除</span><br><span class="line">            &lt;/el-button&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/el-table-column&gt;</span><br><span class="line">      &lt;/el-table&gt;</span><br><span class="line">      &lt;el-pagination class=&quot;pageList&quot; :page-sizes=&quot;[10, 20, 30, 40]&quot; :page-size=&quot;pageSize&quot;</span><br><span class="line">        layout=&quot;total, sizes, prev, pager, next, jumper&quot; :total=&quot;counts&quot; @size-change=&quot;handleSizeChange&quot;</span><br><span class="line">        :current-page.sync=&quot;page&quot; @current-change=&quot;handleCurrentChange&quot;&gt;&lt;/el-pagination&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; getCompanyPage, deleteCompany &#125; from &#x27;../../api/company.js&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  // ... 其他部分保持不变 ...</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    async init() &#123;</span><br><span class="line">      const params = &#123;</span><br><span class="line">        page: this.page,</span><br><span class="line">        pageSize: this.pageSize,</span><br><span class="line">        name: this.input ? this.input : undefined,</span><br><span class="line">      &#125;;</span><br><span class="line">      try &#123;</span><br><span class="line">        const res = await getCompanyPage(params);</span><br><span class="line">        if (String(res.code) === &#x27;1&#x27;) &#123;</span><br><span class="line">          if (res.data != null) &#123;</span><br><span class="line">            this.tableData = res.data.records || [];</span><br><span class="line"></span><br><span class="line">            // 遍历tableData中的每个记录</span><br><span class="line">            this.tableData.forEach(record =&gt; &#123;</span><br><span class="line">              if (record.description === &quot;&quot;) &#123;</span><br><span class="line">                record.description = &quot;暂无简介&quot;;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            this.tableData.forEach(record =&gt; &#123;</span><br><span class="line">              console.log(&quot;Description: &quot; + record.description);</span><br><span class="line">            &#125;);</span><br><span class="line">            if (this.tableData.length &gt; 0) &#123;</span><br><span class="line">              this.ifNull = false</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            this.counts = res.data.total;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125; catch (err) &#123;</span><br><span class="line">        this.$message.error(&#x27;请求出错了：&#x27; + err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 删除</span><br><span class="line">    deleteHandle(type, id) &#123;</span><br><span class="line">      if (type === &#x27;批量&#x27; &amp;&amp; id === null) &#123;</span><br><span class="line">        if (this.checkList.length === 0) &#123;</span><br><span class="line">          return this.$message.error(&#x27;请选择删除对象&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      this.$confirm(&#x27;确定删除该公司, 是否继续?&#x27;, &#x27;确定删除&#x27;, &#123;</span><br><span class="line">        &#x27;confirmButtonText&#x27;: &#x27;确定&#x27;,</span><br><span class="line">        &#x27;cancelButtonText&#x27;: &#x27;取消&#x27;,</span><br><span class="line">      &#125;).then(() =&gt; &#123;</span><br><span class="line">        deleteCompany(type === &#x27;批量&#x27; ? this.checkList.join(&#x27;,&#x27;) : id)</span><br><span class="line">          .then(res =&gt; &#123;</span><br><span class="line">            if (res.code === 1) &#123;</span><br><span class="line">              this.$message.success(&#x27;删除成功！&#x27;);</span><br><span class="line">              this.handleQuery();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              this.$message.error(res.data.msg || &#x27;公司仍在展示状态&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(err =&gt; &#123;</span><br><span class="line">            this.$message.error(&#x27;请求出错了：&#x27; + err);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;).catch(() =&gt; &#123;</span><br><span class="line">        // 用户点击取消按钮的处理逻辑</span><br><span class="line">        // 可以不做任何处理，或者在这里添加一些取消操作的逻辑</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // ... 其他方法保持不变 ...</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="js字符串处理"><a href="#js字符串处理" class="headerlink" title="js字符串处理"></a>js字符串处理</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fileName=file.<span class="property">name</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">modelPath</span> = fileName.<span class="title function_">substring</span>(<span class="number">0</span>, fileName.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>));</span><br></pre></td></tr></table></figure><h5 id="js判断数组为空"><a href="#js判断数组为空" class="headerlink" title="js判断数组为空"></a>js判断数组为空</h5><p>不能使用 &#x3D;&#x3D; [] 或者 &#x3D;&#x3D; “” 或者 &#x3D;&#x3D; null 以及三个等号也不行，需要使用 .length&#x3D;&#x3D;0</p><h5 id="js数组处理常用方法"><a href="#js数组处理常用方法" class="headerlink" title="js数组处理常用方法"></a>js数组处理常用方法</h5><h6 id="push（）-末尾添加数据"><a href="#push（）-末尾添加数据" class="headerlink" title="push（） 末尾添加数据"></a>push（） 末尾添加数据</h6><p><strong>作用:</strong> 就是往数组末尾添加数据</p><p><strong>返回值:</strong> 就是这个数组的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line">res = arr.<span class="title function_">push</span>(<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[10,20,30,40,20]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//5</span></span><br></pre></td></tr></table></figure><h6 id="splice（）-截取数组"><a href="#splice（）-截取数组" class="headerlink" title="splice（）  截取数组"></a>splice（）  截取数组</h6><p>它仅能够截取数组中指定区段的元素，并返回这个子数组。</p><p>如果仅指定一个参数，则表示从该参数值指定的下标位置开始，截取到数组的尾部所有元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parts = routerPath.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>); </span><br><span class="line"><span class="comment">// 获取第二个斜杠后面的内容       </span></span><br><span class="line"><span class="keyword">var</span> result = parts.<span class="property">length</span> &gt;= <span class="number">3</span> ? parts[<span class="number">2</span>] : <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span> + result);</span><br></pre></td></tr></table></figure><h6 id="join（）-数组转字符串"><a href="#join（）-数组转字符串" class="headerlink" title="join（） 数组转字符串"></a>join（） 数组转字符串</h6><p><strong>作用:</strong> 就是把一个数组转成字符串</p><p><strong>返回值:</strong> 就是转好的一个字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line">res = arr.<span class="title function_">join</span>(<span class="string">&quot;+&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);  <span class="comment">// 10+20+30+40+50+60</span></span><br></pre></td></tr></table></figure><h6 id="map-映射数组"><a href="#map-映射数组" class="headerlink" title="map  映射数组"></a>map  映射数组</h6><p>map() 方法返回一个新数组，这个新数组：由原数组中的每个元素调用一个指定方法后的返回值组成的新数组。</p><p>map() 不会对空数组进行检测。</p><p>map() 不会改变原始数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子数值项求平方</span></span><br><span class="line"><span class="keyword">let</span> data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> newData = data.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item * item;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newData);</span><br><span class="line"><span class="comment">//箭头函数的写法</span></span><br><span class="line"><span class="keyword">let</span> newData2 = data.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item *item);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newData2);</span><br></pre></td></tr></table></figure><h6 id="filter-过滤数组"><a href="#filter-过滤数组" class="headerlink" title="filter  过滤数组"></a>filter  过滤数组</h6><p>filter用于对数组进行<strong>过滤</strong>。<br>它创建一个新数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> res = nums.<span class="title function_">filter</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> num &gt; <span class="number">5</span>;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);  <span class="comment">// [6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><h6 id="find（）用来获取数组中满足条件的第一个数据"><a href="#find（）用来获取数组中满足条件的第一个数据" class="headerlink" title="find（）用来获取数组中满足条件的第一个数据"></a>find（）用来获取数组中满足条件的第一个数据</h6><p>获取数组中满足条件的第一个数据，最后会返回一个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> menu = <span class="variable language_">this</span>.<span class="property">menuList</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> === routerPath);</span><br></pre></td></tr></table></figure><h5 id="ES6核心语法"><a href="#ES6核心语法" class="headerlink" title="ES6核心语法"></a>ES6核心语法</h5><p>1、变量与常量</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="attr">count</span>: <span class="built_in">number</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">count</span>: <span class="built_in">number</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//常量注意全部大写的格式</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">BASE_URL</span>: <span class="built_in">string</span>=<span class="string">&quot;http:...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//let 与 var 的区别就在于 var 是函数作用域，let 是块作用域。例子如下,log 会报错为不存在变量count，而 var 在下面的情况下就不会报错</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">count</span>: <span class="built_in">number</span>=<span class="number">0</span></span><br><span class="line">    count++</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count)</span><br></pre></td></tr></table></figure><p>2、模版字符串</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">str1</span>: <span class="built_in">string</span> =<span class="string">&#x27;abc&#x27;</span>+<span class="string">&#x27;efg&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">str2</span>: <span class="built_in">string</span> = <span class="string">`efg<span class="subst">$&#123;str1&#125;</span></span></span><br><span class="line"><span class="string">    这也是字符串的内容</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="comment">// 反斜杠里就可以使用$&#123;&#125;的方式来存入字符串变量，并且兼容换行</span></span><br></pre></td></tr></table></figure><p>3、解构赋值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">arr</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> a=arr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">const</span> b=arr[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">const</span> c=arr[<span class="number">2</span>]</span><br><span class="line"><span class="comment">//上面的方式获取较为麻烦，可以用下面的方式获取值，需要注意的是解构赋值在 ts 中不支持为变量附上类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [a, b, c]: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//同时可以为为对象来实现相应的效果</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: &#123; <span class="attr">username</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span>, <span class="attr">gender</span>: <span class="built_in">string</span> &#125; = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;TEC&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; username, age, gender &#125;: &#123; <span class="attr">username</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span>, <span class="attr">gender</span>: <span class="built_in">string</span> &#125; = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;TEC&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>4、数组和对象的扩展</p><p>4.1、扩展运算符</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用...数组名的方式可以直接将数组扩展到另一个数组上</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr3 = [...arr1, ...arr2, <span class="number">10</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同时对象也可以这么使用</span></span><br><span class="line"><span class="keyword">const</span> obj1=&#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2=&#123;</span><br><span class="line">    <span class="attr">b</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj3=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;TEC&#x27;</span>,</span><br><span class="line">    ...obj1,</span><br><span class="line">    ...obj2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.2、数组方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以使用Array.from来将伪数组转化为真数组，来使用数组的相关功能，但是ts里直接使用推荐使用剩余参数（rest parameters）代替 arguments 对象。arguments 是一个类数组对象，而剩余参数更灵活并且是真正的数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.3、对象方法 </p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.assign为浅拷贝，浅拷贝的意义在于去改变 objB 的值时，不会影响到 objA ，而无论是直接数组赋值还是深拷贝都会产生影响</span></span><br><span class="line"><span class="keyword">const</span> objA=&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;TEC&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> objB=<span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;,objA)</span><br></pre></td></tr></table></figure><p>5、 Class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以像 java 一样使用类的概念</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line"></span><br><span class="line">    constructor(name: string, age: number) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    introduce() &#123;</span><br><span class="line">        console.log(`My name is $&#123;<span class="built_in">this</span>.name&#125; and I am $&#123;<span class="built_in">this</span>.age&#125; years old.`);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>(<span class="string">&quot;吴悠&quot;</span>, <span class="number">18</span>);</span><br><span class="line">a1.introduce();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以像 java 一样继承父类，调用 super()</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    additionalProperty: string;</span><br><span class="line"></span><br><span class="line">    constructor(name: string, age: number, additionalProperty: string) &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        <span class="built_in">this</span>.additionalProperty = additionalProperty;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    introduceWithAdditional() &#123;</span><br><span class="line">        console.log(`My name is $&#123;<span class="built_in">this</span>.name&#125;, I am $&#123;<span class="built_in">this</span>.age&#125; years old, and my additional property is $&#123;<span class="built_in">this</span>.additionalProperty&#125;.`);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">25</span>, <span class="string">&quot;Some additional info&quot;</span>);</span><br><span class="line">b1.introduceWithAdditional();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>6、箭头函数     </p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getSum1</span> = (<span class="params">n</span>) =&gt; n + <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getSum2</span> = (<span class="params">n1, n2</span>) =&gt; n1 + n2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getSum3</span> = (<span class="params">n1, n2, ...other</span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(n1, n2, other);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getResult</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> sum += item);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getResult</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]));  <span class="comment">// Output: 15</span></span><br></pre></td></tr></table></figure><h4 id="布局基础"><a href="#布局基础" class="headerlink" title="布局基础"></a>布局基础</h4><h5 id="前端添加图标的方法"><a href="#前端添加图标的方法" class="headerlink" title="前端添加图标的方法"></a>前端添加图标的方法</h5><p>在阿里巴巴图标库中找到图标加入购物车，选完后最好加入一个项目中，因为购物车可能被清，然后点击下载，将下载下来的文件全部存到项目静态资源目录如assets，使用方法则是直接用class命名的方式，具体图标的，命名可在iconfont.json中查看，注意”css_prefix_text”: “icon-“,有这个就需要class前面加上icon-</p><h5 id="在两个元素之间拉开一定的距离，并且两个元素加上距离依旧占到height的100"><a href="#在两个元素之间拉开一定的距离，并且两个元素加上距离依旧占到height的100" class="headerlink" title="在两个元素之间拉开一定的距离，并且两个元素加上距离依旧占到height的100%"></a>在两个元素之间拉开一定的距离，并且两个元素加上距离依旧占到height的100%</h5><p>使用flex布局中的gap可以达到这样的效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;listView&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;line3&quot;&gt;</span><br><span class="line">          &lt;!--下面的代码是实现效果的核心代码--&gt;</span><br><span class="line">            &lt;div class=&quot;l3Data2&quot; style=&quot;display: flex; gap: 10px;flex-direction: column;&quot;&gt;</span><br><span class="line">                &lt;!-- 模型喜爱数据 --&gt;</span><br><span class="line">                &lt;el-card style=&quot;height: 50%&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;card-header&quot; slot=&quot;header&quot;&gt;模型喜爱数据&lt;/p&gt;</span><br><span class="line">                    &lt;div id=&quot;modelPieChart&quot; style=&quot;height: 100%;&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/el-card&gt;</span><br><span class="line">                &lt;!-- 类型喜爱数据 --&gt;</span><br><span class="line">                &lt;el-card style=&quot;height: 50%&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;card-header&quot; slot=&quot;header&quot;&gt;类型喜爱数据&lt;/p&gt;</span><br><span class="line">                    &lt;div id=&quot;categoryPieChart&quot; style=&quot;height: 100%;&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/el-card&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="大屏适配"><a href="#大屏适配" class="headerlink" title="大屏适配"></a>大屏适配</h5><p>想要实现的效果为在任意屏幕下都能占满屏幕，使用 min-height: 100vh;来解决这个问题，这样无论数据是否超出限制，至少能够占满屏幕</p><p>接下来在数据超出时因为同一父元素下两个子元素同时使用使用了height：100%，导致可能出现两个滚动条，这也提醒了我height百分比的形式不是万能的，在内部会超出限制时会导致布局出错，百分比的形式还是应该出现在缩放时比较合理，常规不需要进行限制，只需要min-height: 100vh;然后元素会自己进行高度拉伸</p><h4 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h4><h5 id="router防止页面回退"><a href="#router防止页面回退" class="headerlink" title="router防止页面回退"></a>router防止页面回退</h5><p>直接使用replace代替push可以使得页面的回退消失</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this.$router.push(&#123; name: &#x27;index&#x27; &#125;);</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;index&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure><h5 id="路由监听防止用户回退页面出错"><a href="#路由监听防止用户回退页面出错" class="headerlink" title="路由监听防止用户回退页面出错"></a>路由监听防止用户回退页面出错</h5><p>通过watch的方式监听$route并进行相依的操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;$route&#x27;</span>(to, <span class="keyword">from</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">handleRouteChange</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="-2"><a href="#-2" class="headerlink" title=""></a></h4><h3 id="框架学习-1"><a href="#框架学习-1" class="headerlink" title="框架学习"></a>框架学习</h3><h4 id="Echarts"><a href="#Echarts" class="headerlink" title="Echarts"></a>Echarts</h4><h5 id="echarts折线图"><a href="#echarts折线图" class="headerlink" title="echarts折线图"></a>echarts折线图</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">renderLineChart</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 渲染观看数量趋势折线图</span></span><br><span class="line">    <span class="keyword">const</span> lineChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;lineChart&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加折线图配置和数据</span></span><br><span class="line">    <span class="keyword">const</span> option = &#123;</span><br><span class="line">        <span class="comment">// 配置选项</span></span><br><span class="line">        <span class="attr">xAxis</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: [<span class="string">&#x27;Day 1&#x27;</span>, <span class="string">&#x27;Day 2&#x27;</span>, <span class="string">&#x27;Day 3&#x27;</span>, <span class="string">&#x27;Day 4&#x27;</span>, <span class="string">&#x27;Day 5&#x27;</span>], <span class="comment">// 示例数据</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">yAxis</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">legend</span>: &#123;</span><br><span class="line">            <span class="attr">data</span>: [<span class="string">&#x27;模型观看人数&#x27;</span>], <span class="comment">// 添加图例名称</span></span><br><span class="line">            <span class="attr">orient</span>: <span class="string">&#x27;horizontal&#x27;</span>,</span><br><span class="line">            <span class="attr">x</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="string">&#x27;top&#x27;</span>,</span><br><span class="line">            <span class="attr">itemGap</span>: <span class="number">40</span>, <span class="comment">// 控制每一项的间距，也就是图例之间的距离</span></span><br><span class="line">            <span class="attr">itemHeight</span>: <span class="number">10</span>, <span class="comment">// 控制图例图形的高度</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">series</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;模型观看人数&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: [<span class="number">100</span>, <span class="number">200</span>, <span class="number">150</span>, <span class="number">300</span>, <span class="number">250</span>], <span class="comment">// 示例数据</span></span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">                <span class="attr">color</span>: [<span class="string">&#x27;#5DB1FF&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加窗口大小改变监听事件，当窗口大小改变时，图表会重新绘制，自适应窗口大小</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        lineChart.<span class="title function_">resize</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    lineChart.<span class="title function_">setOption</span>(option);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="echarts饼图"><a href="#echarts饼图" class="headerlink" title="echarts饼图"></a>echarts饼图</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">renderModelPieChart</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 渲染模型喜爱数据饼图</span></span><br><span class="line">    <span class="keyword">const</span> modelPieChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modelPieChart&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加饼图配置和数据</span></span><br><span class="line">    <span class="keyword">const</span> option = &#123;</span><br><span class="line">        <span class="comment">// 配置选项</span></span><br><span class="line">        <span class="attr">legend</span>: &#123;</span><br><span class="line">            <span class="attr">data</span>: [<span class="string">&#x27;Model A&#x27;</span>, <span class="string">&#x27;Model B&#x27;</span>], <span class="comment">// 添加图例名称</span></span><br><span class="line">            <span class="attr">orient</span>: <span class="string">&#x27;horizontal&#x27;</span>,</span><br><span class="line">            <span class="attr">x</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="string">&#x27;top&#x27;</span>,</span><br><span class="line">            <span class="attr">itemGap</span>: <span class="number">40</span>, <span class="comment">// 控制每一项的间距，也就是图例之间的距离</span></span><br><span class="line">            <span class="attr">itemHeight</span>: <span class="number">10</span>, <span class="comment">// 控制图例图形的高度</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">series</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;模型收藏人数&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;pie&#x27;</span>,</span><br><span class="line">                <span class="attr">radius</span>: <span class="string">&#x27;55%&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: [</span><br><span class="line">                    &#123; <span class="attr">name</span>: <span class="string">&#x27;Model A&#x27;</span>, <span class="attr">value</span>: <span class="number">30</span>, <span class="attr">itemStyle</span>: &#123; <span class="attr">color</span>: <span class="string">&#x27;#FAC858&#x27;</span> &#125; &#125;, <span class="comment">// 示例数据</span></span><br><span class="line">                    &#123; <span class="attr">name</span>: <span class="string">&#x27;Model B&#x27;</span>, <span class="attr">value</span>: <span class="number">20</span>, <span class="attr">itemStyle</span>: &#123; <span class="attr">color</span>: <span class="string">&#x27;#91CC75&#x27;</span> &#125; &#125;, <span class="comment">// 示例数据</span></span><br><span class="line">                    <span class="comment">// 添加更多模型数据</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加窗口大小改变监听事件，当窗口大小改变时，图表会重新绘制，自适应窗口大小</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        modelPieChart.<span class="title function_">resize</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    modelPieChart.<span class="title function_">setOption</span>(option);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h5 id="echarts图例"><a href="#echarts图例" class="headerlink" title="echarts图例"></a>echarts图例</h5><p>具体参考<a href="https://blog.csdn.net/chen__cheng/article/details/118388833">Echarts legend属性使用-CSDN博客</a></p><p>在option中加入legend即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">renderLineChart</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 渲染观看数量趋势折线图</span></span><br><span class="line">    <span class="keyword">const</span> lineChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;lineChart&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加折线图配置和数据</span></span><br><span class="line">    <span class="keyword">const</span> option = &#123;</span><br><span class="line">        <span class="attr">legend</span>: &#123;</span><br><span class="line">            <span class="attr">data</span>: [<span class="string">&#x27;模型观看人数&#x27;</span>], <span class="comment">// 添加图例名称</span></span><br><span class="line">            <span class="attr">orient</span>: <span class="string">&#x27;horizontal&#x27;</span>,</span><br><span class="line">            <span class="attr">x</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="string">&#x27;top&#x27;</span>,</span><br><span class="line">            <span class="attr">itemGap</span>: <span class="number">40</span>, <span class="comment">// 控制每一项的间距，也就是图例之间的距离</span></span><br><span class="line">            <span class="attr">itemHeight</span>: <span class="number">10</span>, <span class="comment">// 控制图例图形的高度</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    lineChart.<span class="title function_">setOption</span>(option);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h5 id="echarts改变图标颜色"><a href="#echarts改变图标颜色" class="headerlink" title="echarts改变图标颜色"></a>echarts改变图标颜色</h5><p>折线图的折线换颜色,直接color底下加相应颜色即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">renderLineChart</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 渲染观看数量趋势折线图</span></span><br><span class="line">    <span class="keyword">const</span> lineChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;lineChart&#x27;</span>));</span><br><span class="line">    <span class="comment">// 添加折线图配置和数据</span></span><br><span class="line">    <span class="keyword">const</span> option = &#123;</span><br><span class="line">        <span class="attr">series</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;模型观看人数&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: [<span class="number">100</span>, <span class="number">200</span>, <span class="number">150</span>, <span class="number">300</span>, <span class="number">250</span>], <span class="comment">// 示例数据</span></span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">                <span class="attr">color</span>: [<span class="string">&#x27;#5DB1FF&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;;</span><br><span class="line">    lineChart.<span class="title function_">setOption</span>(option);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>饼图换颜色需要在外层嵌套itemStyle</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">renderModelPieChart</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 渲染模型喜爱数据饼图</span></span><br><span class="line">    <span class="keyword">const</span> modelPieChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modelPieChart&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加饼图配置和数据</span></span><br><span class="line">    <span class="keyword">const</span> option = &#123;</span><br><span class="line">        <span class="attr">series</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;模型收藏人数&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;pie&#x27;</span>,</span><br><span class="line">                <span class="attr">radius</span>: <span class="string">&#x27;55%&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: [</span><br><span class="line">                    &#123; <span class="attr">name</span>: <span class="string">&#x27;Model A&#x27;</span>, <span class="attr">value</span>: <span class="number">30</span>, <span class="attr">itemStyle</span>: &#123; <span class="attr">color</span>: <span class="string">&#x27;#FAC858&#x27;</span> &#125; &#125;, <span class="comment">// 示例数据</span></span><br><span class="line">                    &#123; <span class="attr">name</span>: <span class="string">&#x27;Model B&#x27;</span>, <span class="attr">value</span>: <span class="number">20</span>, <span class="attr">itemStyle</span>: &#123; <span class="attr">color</span>: <span class="string">&#x27;#91CC75&#x27;</span> &#125; &#125;, <span class="comment">// 示例数据</span></span><br><span class="line">                    <span class="comment">// 添加更多模型数据</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    modelPieChart.<span class="title function_">setOption</span>(option);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="echarts美观折线图"><a href="#echarts美观折线图" class="headerlink" title="echarts美观折线图"></a>echarts美观折线图</h5><h5 id="圆润折线图以及折线面积效果还有增大转折点尺寸以及取消边界间隙"><a href="#圆润折线图以及折线面积效果还有增大转折点尺寸以及取消边界间隙" class="headerlink" title="圆润折线图以及折线面积效果还有增大转折点尺寸以及取消边界间隙"></a>圆润折线图以及折线面积效果还有增大转折点尺寸以及取消边界间隙</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">  <span class="attr">xAxis</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">    <span class="attr">boundaryGap</span>: <span class="literal">false</span>, <span class="comment">// 取消边界间隙</span></span><br><span class="line">    <span class="attr">data</span>: [<span class="string">&#x27;Mon&#x27;</span>, <span class="string">&#x27;Tue&#x27;</span>, <span class="string">&#x27;Wed&#x27;</span>, <span class="string">&#x27;Thu&#x27;</span>, <span class="string">&#x27;Fri&#x27;</span>, <span class="string">&#x27;Sat&#x27;</span>, <span class="string">&#x27;Sun&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">yAxis</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">series</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">data</span>: [<span class="number">820</span>, <span class="number">932</span>, <span class="number">901</span>, <span class="number">934</span>, <span class="number">1290</span>, <span class="number">1330</span>, <span class="number">1320</span>],</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">      <span class="attr">smooth</span>: <span class="literal">true</span>, <span class="comment">// 圆润折线图</span></span><br><span class="line">      <span class="attr">symbolSize</span>: <span class="number">7</span>, <span class="comment">// 增大转折点尺寸</span></span><br><span class="line">      <span class="attr">areaStyle</span>: &#123;&#125;  <span class="comment">// 折线面积效果</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="-3"><a href="#-3" class="headerlink" title=""></a></h4><h5 id="echarts不同尺寸下的优化"><a href="#echarts不同尺寸下的优化" class="headerlink" title="echarts不同尺寸下的优化"></a>echarts不同尺寸下的优化</h5><h6 id="图表不跟随页面改变而缩放"><a href="#图表不跟随页面改变而缩放" class="headerlink" title="图表不跟随页面改变而缩放"></a>图表不跟随页面改变而缩放</h6><p>这是因为echarts的相关图标需要resize一下才会改变大小</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">renderLineChart</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 渲染观看数量趋势折线图</span></span><br><span class="line">    <span class="keyword">const</span> lineChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;lineChart&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加窗口大小改变监听事件，当窗口大小改变时，图表会重新绘制，自适应窗口大小</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        lineChart.<span class="title function_">resize</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="comment">//注意resize需要在setOption之前进行否则不生效</span></span><br><span class="line">    lineChart.<span class="title function_">setOption</span>(option);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h6 id="图表不跟随横向flex的大小进行缩放"><a href="#图表不跟随横向flex的大小进行缩放" class="headerlink" title="图表不跟随横向flex的大小进行缩放"></a>图表不跟随横向flex的大小进行缩放</h6><p>这点问题是比如说我设置flex一个为2一个为1，最后两个元素缩放却缩放成了1:2，我本来以为是echarts配置问题，但是在查找后（原文链接：<a href="https://blog.csdn.net/weixin_39808181/article/details/117998689">echarts不会随着flex布局自适应伸缩_flex不跟随内容自动伸展_zc自由飞~的博客-CSDN博客</a>）我发现需要加上最小宽度，并且最小宽度还要和flex布局的大小一致</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.l3Data1</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">60%</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.l3Data2</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">30%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="图表不跟随竖直向flex的大小进行缩放"><a href="#图表不跟随竖直向flex的大小进行缩放" class="headerlink" title="图表不跟随竖直向flex的大小进行缩放"></a>图表不跟随竖直向flex的大小进行缩放</h6><p>这个问题比较曲折，首先是竖直方向进行缩放，发现图标直接随着缩放大小而消失到屏幕外，后来发现原因来自于最外层添加了overflow-y: hidden;在修改为overflow-y: auto;后，出现了两个y轴点拖动条，然后发现页面里有多余的iframe并占据了4x4的大小导致最外层又多了一个拖动条，解决方法在于直接在iframe的id的css中加上display:none，但是这样图表在缩放后会变到不能看的程度，这时候需要加上min-height,这个还是挺基础的,关键在于这里并不能使用常规的百分比方式，因为会导致另外的元素与其高度不统一，下面会放上竖直方向如何进行flex缩放</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.listView</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line1</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line2</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">10</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">250px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line3</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">20</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">460px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Element-UI"><a href="#Element-UI" class="headerlink" title="Element-UI"></a>Element-UI</h4><h5 id="修改el-card的样式"><a href="#修改el-card的样式" class="headerlink" title="修改el-card的样式"></a>修改el-card的样式</h5><p>注意要加上::v-deep才能修改到样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">el</span>-card ::v-deep .<span class="property">el</span>-card__header &#123;</span><br><span class="line">    <span class="attr">height</span>: <span class="number">10</span>%;</span><br><span class="line">    padding-<span class="attr">left</span>: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="property">el</span>-card ::v-deep .<span class="property">el</span>-card__body &#123;</span><br><span class="line">    <span class="attr">display</span>: grid;</span><br><span class="line">    align-<span class="attr">items</span>: center;</span><br><span class="line">    <span class="attr">height</span>: <span class="number">90</span>%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="element-ui-联排按钮效果"><a href="#element-ui-联排按钮效果" class="headerlink" title="element-ui 联排按钮效果"></a>element-ui 联排按钮效果</h5><p>使用el-button-group可以去除el-button自带的右侧margin,代码的代码还实现了默认当日按钮被点击，点击其他按钮也会进行相应的点击变化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;listView&quot;&gt;</span><br><span class="line">        &lt;!-- 时间筛选功能 --&gt;</span><br><span class="line">        &lt;div class=&quot;line1&quot;&gt;</span><br><span class="line">            &lt;el-button-group&gt;</span><br><span class="line">                &lt;el-button :type=&quot;selectedButton === &#x27;today&#x27; ? &#x27;primary&#x27; : &#x27;&#x27;&quot; @click=&quot;selectDate(&#x27;today&#x27;)&quot;&gt;当日&lt;/el-button&gt;</span><br><span class="line">                &lt;el-button :type=&quot;selectedButton === &#x27;last7days&#x27; ? &#x27;primary&#x27; : &#x27;&#x27;&quot;</span><br><span class="line">                    @click=&quot;selectDate(&#x27;last7days&#x27;)&quot;&gt;最近7天&lt;/el-button&gt;</span><br><span class="line">                &lt;el-button :type=&quot;selectedButton === &#x27;last30days&#x27; ? &#x27;primary&#x27; : &#x27;&#x27;&quot;</span><br><span class="line">                    @click=&quot;selectDate(&#x27;last30days&#x27;)&quot;&gt;最近30天&lt;/el-button&gt;</span><br><span class="line">                &lt;el-button :type=&quot;selectedButton === &#x27;last60days&#x27; ? &#x27;primary&#x27; : &#x27;&#x27;&quot;</span><br><span class="line">                    @click=&quot;selectDate(&#x27;last60days&#x27;)&quot;&gt;最近60天&lt;/el-button&gt;</span><br><span class="line">                &lt;el-button :type=&quot;selectedButton === &#x27;last90days&#x27; ? &#x27;primary&#x27; : &#x27;&#x27;&quot;</span><br><span class="line">                    @click=&quot;selectDate(&#x27;last90days&#x27;)&quot;&gt;最近90天&lt;/el-button&gt;</span><br><span class="line">                &lt;el-button :type=&quot;selectedButton === &#x27;lastyear&#x27; ? &#x27;primary&#x27; : &#x27;&#x27;&quot;</span><br><span class="line">                    @click=&quot;selectDate(&#x27;lastyear&#x27;)&quot;&gt;最近一年&lt;/el-button&gt;</span><br><span class="line">            &lt;/el-button-group&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            selectedButton: &#x27;today&#x27;, // 默认选中当日按钮</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="el-checkbox-group的值为对象时的复选框回显问题"><a href="#el-checkbox-group的值为对象时的复选框回显问题" class="headerlink" title="el-checkbox-group的值为对象时的复选框回显问题"></a>el-checkbox-group的值为对象时的复选框回显问题</h5><p>el-checkbox-group 值不可以为对象，所以新建了一个数组checkedListIds只存入id，然后label里存入item.id</p><h5 id="Element-ui-进度条的使用"><a href="#Element-ui-进度条的使用" class="headerlink" title="Element-ui 进度条的使用"></a>Element-ui 进度条的使用</h5><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/621765478">axios进度条功能onDownloadProgress函数total参数为undefined问题 - 知乎 (zhihu.com)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-progress :percentage=&quot;this.downloadProgress&quot; type=&quot;circle&quot; :width=&quot;400&quot; color=&quot;#ffc200&quot;</span><br><span class="line">             v-if=&quot;this.downloadProgress &gt; 0 &amp;&amp; this.downloadProgress &lt; 100&quot;&gt;&lt;/el-progress&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      downloadProgress: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    vue3dLoader</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"></span><br><span class="line">    Preview(androidModelPath) &#123;</span><br><span class="line">      // ... (other code) ...</span><br><span class="line">      // 初始化进度为0</span><br><span class="line">      this.downloadProgress = 0;</span><br><span class="line">      this.glbFileUrl = &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">      // 发起文件下载请求</span><br><span class="line">      downloadGLBPreview(&#123; name: androidModelPath &#125;, (progressEvent) =&gt; &#123;</span><br><span class="line">        // 计算下载进度</span><br><span class="line">        console.log(&#x27;Download Progress:&#x27;, progressEvent.loaded, &#x27;/&#x27;, progressEvent.total);</span><br><span class="line">        this.downloadProgress = Math.round(progressEvent.loaded / progressEvent.total * 100);</span><br><span class="line">      &#125;).then((url) =&gt; &#123;</span><br><span class="line">        // 下载完成后，设置文件URL并显示对话框</span><br><span class="line">        this.glbFileUrl = url;</span><br><span class="line">      &#125;);</span><br><span class="line">      this.dialogVisible = true;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>封装 api 部分</p><p>注意点在于我本来是通过localhost:8080进行转发到<a href="http://42.192.90.134:81的，但是这样做的话，返回头的ContentLength就会丢失，而关键的统计文件总大小的">http://42.192.90.134:81的，但是这样做的话，返回头的ContentLength就会丢失，而关键的统计文件总大小的</a> progressEvent.total 就来自于返回头中的 ContentLength ，所以必须直接使用<a href="http://42.192.90.134:81/common/downloadGLBPreview%E7%9A%84%E6%96%B9%E5%BC%8F">http://42.192.90.134:81/common/downloadGLBPreview的方式</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $axios <span class="keyword">from</span> <span class="string">&#x27;../utils/request&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">downloadGLBPreview</span> = (<span class="params">params, onDownloadProgress</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`http://42.192.90.134:81/common/downloadGLBPreview`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    params,</span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span>, <span class="comment">// Set responseType to &#x27;blob&#x27;</span></span><br><span class="line">    onDownloadProgress, <span class="comment">// Pass the onDownloadProgress callback</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle the blob response</span></span><br><span class="line">    <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([response.<span class="property">data</span>], &#123; <span class="attr">type</span>: <span class="string">&#x27;model/gltf-binary&#x27;</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> url;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="效果实现"><a href="#效果实现" class="headerlink" title="效果实现"></a>效果实现</h3><h4 id="loading动画加载"><a href="#loading动画加载" class="headerlink" title="loading动画加载"></a>loading动画加载</h4><p>使用v-loading来控制某个页面动画的加载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;listView&quot; v-loading=&quot;loading&quot;&gt;</span><br></pre></td></tr></table></figure><p>在js部分中使用this.loading控制动画是否出现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            loading: true,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">        async init(chosenDate) &#123;</span><br><span class="line">            const params = &#123;</span><br><span class="line">                chosenDate: chosenDate,</span><br><span class="line">            &#125;;</span><br><span class="line">            try &#123;</span><br><span class="line">                this.loading = true</span><br><span class="line">                const res = await getAnalytics(params);</span><br><span class="line">                if (String(res.code) === &#x27;1&#x27;) &#123;</span><br><span class="line">                    this.closeLoading()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (err) &#123;</span><br><span class="line">                this.$message.error(&#x27;请求出错了：&#x27; + err);</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    closeLoading() &#123;</span><br><span class="line">            this.timer = null;</span><br><span class="line">            this.timer = setTimeout(() =&gt; &#123;</span><br><span class="line">                this.loading = false;</span><br><span class="line">            &#125;, 600);</span><br><span class="line">        &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="3D-模型预览"><a href="#3D-模型预览" class="headerlink" title="3D 模型预览"></a>3D 模型预览</h4><h5 id="Vue-3D-Loader"><a href="#Vue-3D-Loader" class="headerlink" title="Vue-3D-Loader"></a>Vue-3D-Loader</h5><p>框架地址：<a href="https://king2088.github.io/vue-3d-loader-docs/zh/guide/getting-started.html#%E5%85%A8%E5%B1%80%E5%BC%95%E5%85%A5">快速上手 | Vue 3d loader (king2088.github.io)</a></p><p>1、安装插件</p><p>注意 vue-3d-model 的最新版本不适配 vue2 ，要使用的话就需要指定版本</p><p><em>vue3请安装<strong>2.0.0</strong>及以上版本，vue2请安装<strong>1.x.x</strong>版本</em></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install vue-<span class="number">3d</span>-loader</span><br></pre></td></tr></table></figure><p>2、使用方法</p><p>先 import 引入 ，然后使用插件所提供的组件vue3dLoader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;vue3dLoader v-<span class="keyword">else</span> :width=<span class="string">&quot;700&quot;</span> :height=<span class="string">&quot;800&quot;</span> :fileType=<span class="string">&quot;&#x27;gltf&#x27;&quot;</span> :cameraPosition=<span class="string">&quot;&#123; x: 0, y: 0, z: 0.35 &#125;&quot;</span></span><br><span class="line">                :filePath=<span class="string">&quot;this.glbFileUrl&quot;</span> :backgroundColor=<span class="string">&quot;0x000000&quot;</span>&gt;&lt;/vue3dLoader&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; getModelPage, deleteModel, modelStatusByStatus, addBannerModel, removeBannerModel, downloadGLBPreview &#125; from <span class="string">&#x27;../../api/model&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; vue3dLoader &#125; from <span class="string">&quot;vue-3d-loader&quot;</span>;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            glbFileUrl: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        Preview(androidModelPath) &#123;</span><br><span class="line">            console.log(<span class="string">&quot;androidModelPath:&quot;</span> + androidModelPath)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 初始化进度为0</span></span><br><span class="line">            <span class="built_in">this</span>.downloadProgress = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">this</span>.glbFileUrl = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发起文件下载请求</span></span><br><span class="line">            downloadGLBPreview(&#123; name: androidModelPath &#125;, (progressEvent) =&gt; &#123;</span><br><span class="line">                <span class="comment">// 计算下载进度</span></span><br><span class="line">                console.log(<span class="string">&#x27;Download Progress:&#x27;</span>, progressEvent.loaded, <span class="string">&#x27;/&#x27;</span>, progressEvent.total);</span><br><span class="line">                <span class="built_in">this</span>.downloadProgress = Math.round(progressEvent.loaded / progressEvent.total * <span class="number">100</span>);</span><br><span class="line">            &#125;).then((url) =&gt; &#123;</span><br><span class="line">                <span class="comment">// 下载完成后，设置文件URL并显示对话框</span></span><br><span class="line">                <span class="built_in">this</span>.glbFileUrl = url;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">this</span>.dialogVisible = <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="其他部分"><a href="#其他部分" class="headerlink" title="其他部分"></a>其他部分</h2><h3 id="服务器访问图片"><a href="#服务器访问图片" class="headerlink" title="服务器访问图片"></a>服务器访问图片</h3><p>原文如下<a href="https://blog.csdn.net/happy_lights/article/details/105921022">如何访问存在服务器的图片或者视屏等静态资源_如何访问服务器上的静态视频-CSDN博客</a></p><p>方法有很多，比如springboot静态资源配置来访问或者nginx反向代理，这里我选择使用启动tomcat端口来进行访问</p><p>首先启动一个tomcat服务器，宝塔管理系统有一个插件java项目管理器，可以轻松的配置tomcat的配置文件（下面的配置文件为了简约我删了很多）新加Context标签然后docBase中输入服务器放图片的位置，path中则是访问的地址，最后网址为42.192.90.134:8082&#x2F;images&#x2F;014896a7-bb90-40e9-a988-64703ed80e12.jpg</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8805&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span> <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span> <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--关键在于下面的这句--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span> =<span class="string">&quot;C:\img&quot;</span> <span class="attr">path</span> =<span class="string">&quot;/images&quot;</span> <span class="attr">debug</span> =<span class="string">&quot;0&quot;</span> <span class="attr">reloadable</span> =<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解决服务器图片跨域问题"><a href="#解决服务器图片跨域问题" class="headerlink" title="解决服务器图片跨域问题"></a>解决服务器图片跨域问题</h3><p>因为我访问图片的方法是在服务器端开了一个tomcat端口8082，实现方法如下：<br>主要是新增了docBase绑定服务器地址</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span> <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span> <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span> <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--下面是增加的代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">&quot;C:\img&quot;</span> <span class="attr">path</span>=<span class="string">&quot;/images&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在访问C:\img\iphone-14-pro这类的文件时，因为基础地址不等于docBase，所以存在跨域问题，但是tomcat的跨域不可能用@CrossOrigin去实现跨域，需要配置文件，设置跨域请求头，具体配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CorsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.catalina.filters.CorsFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.allowed.origins<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.allowed.methods<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>GET,POST,HEAD,OPTIONS,PUT<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.allowed.headers<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Content-Type,X-Requested-With,accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.exposed.headers<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Access-Control-Allow-Origin,Access-Control-Allow-Credentials<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.preflight.maxage<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CorsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原文如下：<a href="https://zhuanlan.zhihu.com/p/546829621">Tomcat设置跨域 - 知乎 (zhihu.com)</a></p><h3 id="MySQL索引"><a href="#MySQL索引" class="headerlink" title="MySQL索引"></a>MySQL索引</h3><p>![截屏2023-11-13 18.42.01](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-11-13 18.42.01.png)</p><h3 id="IDEA快捷键"><a href="#IDEA快捷键" class="headerlink" title="IDEA快捷键"></a>IDEA快捷键</h3><p>在方法后直接加上.var 可以自动创建相应的返回值的对象</p><p>.notnull 生成相应的 if 语句判断为非空（虽然现在基本都使用自己封装的 OptionalUtils 了）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android</title>
      <link href="/posts/5d018fb1.html"/>
      <url>/posts/5d018fb1.html</url>
      
        <content type="html"><![CDATA[<h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><p>目前安卓开发有两种语言可以选择，java或者Kotlin，Kotlin比起Java来说更加简洁，且优化了不少写法<br>安卓开发的框架呢有Jetpack Compose，使用声明式开发，基本语法方面与SwiftUI大相径庭，但是只适用于Kotlin语言<br>使用xml去布局activity（页面），使用java去编写逻辑（相当于javascript）<br>要编写逻辑时，需要用id（XXXX xxxx&#x3D;findViewById（R.id.xxxx））去找到该控件，实例化之后再去进行后续操作</p><h2 id="简单控件"><a href="#简单控件" class="headerlink" title="简单控件"></a>简单控件</h2><h3 id="text"><a href="#text" class="headerlink" title="text"></a>text</h3><p>单位有px，dp（常用），sp（字体专用，会根据系统文字大小进行调整，一般情况下与dp大小一致）<br>一般是在@String里面（values包下面）去写文字，这样方便一次修改，以及后续调整语言</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_margin</span>=<span class="string">&quot;@dimen/dimen_20&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在Design中表示可从左侧控件展示处拖拽至布局文件上，创建简单一个TextView。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/textView&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;TextView&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--修改颜色、大小--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置颜色 @color/color_ff0000位置：app/values/colors--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置大小 @dimen/text_size_18位置：app/values/dimens--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置内容 @string/str_setting_color_size位置：app/values/strings--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;@string/str_setting_color_size&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;@dimen/dimen_10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/color_ff0000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/text_size_20&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加图片和使用阴影--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加图片:drawableTop、drawableBottom、drawableLeft（drawableStart）、drawableRight（drawableEnd）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用阴影:shadowColor（阴影颜色）、shadowDx(tv_2位置为基准，数字越大越往右)、</span></span><br><span class="line"><span class="comment">    shadowDy(tv_2位置为基准，数字越大越往下)、shadowRadius（数字越大越模糊）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--图片 @mipmap/ic_launcher 位置：app/mipmap/任意一个目录能找到即可--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawableLeft</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;@dimen/dimen_10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowColor</span>=<span class="string">&quot;@color/color_FF773D&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowDx</span>=<span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowDy</span>=<span class="string">&quot;-20&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowRadius</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;右侧添加图片和使用阴影&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/color_188FFF&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/text_size_20&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--对电话和邮件增加链接--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--autoLink对文本内容自动添加E-mail地址、电话号码添加超级链接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:autoLink</span>=<span class="string">&quot;email|phone&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;@dimen/dimen_10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;可点击跳转邮件:SCC5201314@qq.com\n可点击跳转电话:0215201314&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/color_188FFF&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/text_size_14&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--内容过多--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--maxLength最多显示几行，单行也可用android:singleline=&quot;true&quot;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--ellipsize，内容显示不下时，显示...（位置最前、中间、最后都可以），这里要加行数限制才行--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--lineSpacingMultiplier，行距--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:ellipsize</span>=<span class="string">&quot;end&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:lineSpacingMultiplier</span>=<span class="string">&quot;1.2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;@dimen/dimen_10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:maxLength</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;TxtView继承了View，它还是Button、EditText两个UI组件类的父类。它的作用是在用户界面上显示文本素。从功能上来看TextView就是个文本编辑器，只不过Android关闭的它的可编辑功能。如果需要一个可编辑的文本框，就要使用到它的子类Editext了，Editext允许用户编辑文本框中的内容。TextView和Editext它俩最大的区别就在于TextView不允许用户编辑文本内容，Editext允许用户编辑文本内容。</span></span></span><br><span class="line"><span class="string"><span class="tag">下面咱写几个实例来详细了解一下TextView的。&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/color_188FFF&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/text_size_14&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--background设置背景色--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--padding内边距（边到可用范围的距离）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@color/color_ff0000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;@dimen/dimen_10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;背景色红色的文本&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/white&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--带边框的文本--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--layout_margin外边距（TextView到其他控件的距离）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;@dimen/dimen_10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/bg_tv_frame_red&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;带着红色边框的文本&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--带边框的文本背景色渐变--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--代码可实现文本的渐变--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;@dimen/dimen_10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/bg_tv_frame_gradient&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/white&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;带着边框和背景色渐变的文本&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="LinearLayout"><a href="#LinearLayout" class="headerlink" title="LinearLayout"></a>LinearLayout</h3><p>线性布局</p><p>使用orientation属性控制排列方式，默认水平排列<br>水平：orientation：horizontal</p><p>垂直：orientation：vertical<br>使用layout_weight属性控制权重，相当于各自拥有多大比例</p><p>Layout_width为0dp时,layout_weight表示水平方向的宽度比例</p><p>Layout_height为0dp时,layout_weight表示垂直方向的宽度比例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;400dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;300dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@color/teal_200&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="RelativeLayout"><a href="#RelativeLayout" class="headerlink" title="RelativeLayout"></a>RelativeLayout</h3><p>相对布局，感觉比较像css里的绝对定位</p><p>布局方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//左上</span><br><span class="line">android:layout_alignParentTop=&quot;true&quot;</span><br><span class="line">android:layout_alignParentLeft=&quot;true&quot;</span><br><span class="line"></span><br><span class="line">//右上</span><br><span class="line">android:layout_alignParentTop=&quot;true&quot;</span><br><span class="line">android:layout_alignParentRight=&quot;true&quot;//不设置基于右侧，会自动设置为基于左侧</span><br><span class="line"></span><br><span class="line">//左下</span><br><span class="line">android:layout_alignParentBottom=&quot;true&quot;  //不设置基于底部，会自动设置为基于顶部</span><br><span class="line">android:layout_alignParentLeft=&quot;true&quot;   </span><br><span class="line"></span><br><span class="line">//右下</span><br><span class="line">android:layout_alignParentBottom=&quot;true&quot;  //不设置基于底部，会自动设置为基于顶部</span><br><span class="line">android:layout_alignParentRight=&quot;true&quot;  //不设置基于右侧，会自动设置为基于左侧</span><br><span class="line"></span><br><span class="line">android:layout_above=&quot;@id/button3&quot;    //居中控件顶部</span><br><span class="line">android:layout_below=&quot;@id/button3&quot;    //居中控件底部</span><br><span class="line">android:layout_toLeftOf=&quot;@id/button3&quot;  //居中控件左侧</span><br><span class="line">android:layout_toRightOf=&quot;@id/button3&quot;  //居中控件右侧</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="GridLayout"><a href="#GridLayout" class="headerlink" title="GridLayout"></a>GridLayout</h3><h4 id="设置几行几列"><a href="#设置几行几列" class="headerlink" title="设置几行几列"></a>设置几行几列</h4><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>android:rowCount</td><td>设置网格布局有几行</td></tr><tr><td>android:columnCount</td><td>设置网格布局有几列</td></tr></tbody></table><h4 id="设置组件所在的行或列"><a href="#设置组件所在的行或列" class="headerlink" title="设置组件所在的行或列"></a>设置组件所在的行或列</h4><blockquote><p><strong>注意：</strong> 行列从 0 开始计算，比如第一行是 0 ，第二行是 1</p></blockquote><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>android:layout_row</td><td>设置组件位于第几行</td></tr><tr><td>android:layout_column</td><td>设置组件位于第几列</td></tr></tbody></table><h4 id="设置组件跨几行几列"><a href="#设置组件跨几行几列" class="headerlink" title="设置组件跨几行几列"></a>设置组件跨几行几列</h4><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>android:layout_rowSpan</td><td>设置组件跨几行</td></tr><tr><td>android:layout_columnSpan</td><td>设置组件跨几列</td></tr></tbody></table><h3 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h3><p><strong>ScrollView</strong> 是一个竖直滚动条，水平方向上的滚动条为 <strong>HorizontalScrollView</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;8dp&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ScrollView</span></span></span><br><span class="line"><span class="tag">       &lt;!<span class="attr">--注意ScrollView为竖直滚动</span>，<span class="attr">所以layout_width必须match_parent</span></span></span><br><span class="line"><span class="tag">  &lt;!<span class="attr">--同理HorizontalScrollView为水平滚动</span>，<span class="attr">所以layout_height必须match_parent--</span>&gt;</span></span><br><span class="line">        android:id=&quot;@+id/scrollview&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot; </span><br><span class="line">        android:layout_height=&quot;500dp&quot;&gt;</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@string/chuliuxiang&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><p>事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取控件id</span></span><br><span class="line">        Button btn1=findViewById(R.id.btn1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 监听点击事件</span></span><br><span class="line">        btn1.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// 在这里写要执行的操作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 长按事件</span></span><br><span class="line">        btn1.setOnLongClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnLongClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onLongClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// 在这里写要执行的操作</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 触摸事件</span></span><br><span class="line">        btn1.setOnTouchListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnTouchListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouch</span><span class="params">(View v, MotionEvent event)</span> &#123;</span><br><span class="line">                <span class="comment">// 在这里写要执行的操作</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ImageView"><a href="#ImageView" class="headerlink" title="ImageView"></a>ImageView</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--src设置前景，而background设置背景，scaleType为缩放形式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:id</span>=<span class="string">&quot;@+id/iv&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_width</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_height</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_centerHorizontal</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:scaleType</span>=<span class="string">&quot;fitCenter&quot;</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">android:src</span>=<span class="string">&quot;@drawable/developer&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:background</span>=<span class="string">&quot;@drawable/developer&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><p>相当于引入组件，优化了代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">&quot;@layout/activity_drawer_menu&quot;</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/drawerMenu1&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DrawerLayout"><a href="#DrawerLayout" class="headerlink" title="DrawerLayout"></a>DrawerLayout</h3><p>安卓自带的抽屉式菜单</p><p>使用方法为分为两部分，一个是正文部分（必须放在最上面），一个是菜单部分，其中如果是左侧拉出的菜单就必须要加上android:layout_gravity&#x3D;”start”，同理右侧拉出则改为end，注意下面的代码我进行了封装，而使用后发现只有NavigationView才能加上layout_gravity这个属性</p><h4 id="xml部分的使用"><a href="#xml部分的使用" class="headerlink" title="xml部分的使用"></a>xml部分的使用</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.drawerlayout.widget.DrawerLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/drawerLayout&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;15dp&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--正文部分--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--左侧菜单部分--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.navigation.NavigationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;210dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/drawerMenu&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">layout</span>=<span class="string">&quot;@layout/activity_drawer_menu&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">com.google.android.material.navigation.NavigationView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="java部分的使用"><a href="#java部分的使用" class="headerlink" title="java部分的使用"></a>java部分的使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取activity_nav.xml中的根布局</span></span><br><span class="line">        <span class="type">View</span> <span class="variable">Nav</span> <span class="operator">=</span> findViewById(R.id.Nav);</span><br><span class="line"></span><br><span class="line">        <span class="type">ImageView</span> <span class="variable">navMenuImageView</span> <span class="operator">=</span> Nav.findViewById(R.id.navMenu);</span><br><span class="line">        navMenuImageView.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// 在这里处理点击事件，打开抽屉</span></span><br><span class="line">                Log.v(<span class="string">&quot;drawerMenu&quot;</span>,<span class="string">&quot;点击成功&quot;</span>);</span><br><span class="line">                <span class="type">DrawerLayout</span> <span class="variable">drawerLayout</span> <span class="operator">=</span> findViewById(R.id.drawerLayout);</span><br><span class="line">                drawerLayout.openDrawer(GravityCompat.START); <span class="comment">// 打开左侧抽屉</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NavigationView"><a href="#NavigationView" class="headerlink" title="NavigationView"></a>NavigationView</h3><p>这个视图相当于一个封装好的菜单，在menu属性部分存入主体菜单的布局，在headerLayout属性部分存入头部菜单的布局（比如头像姓名）</p><h3 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h3><p>这个控件是用来展示大量数据，它比ListView的优势在于能够回收利用数据（名字的由来）同时可以选择单列展示，双列展示，瀑布流展示</p><h4 id="xml部分："><a href="#xml部分：" class="headerlink" title="xml部分："></a>xml部分：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/recyclerView&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="java部分："><a href="#java部分：" class="headerlink" title="java部分："></a>java部分：</h4><h5 id="TagActivity部分："><a href="#TagActivity部分：" class="headerlink" title="TagActivity部分："></a>TagActivity部分：</h5><p>主要在于新增tagAdapter，以及数据tagList的获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里省略网络请求方法performNetworkRequest()部分，在此方法中主要用于获取tagList的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TagActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RecyclerView recyclerView;</span><br><span class="line">    <span class="keyword">private</span> TagAdapter tagAdapter;</span><br><span class="line">     <span class="keyword">private</span> List&lt;TagItem&gt; tagList;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_tag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化数据列表</span></span><br><span class="line">        tagList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 初始化 tagList</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化适配器并将其与RecyclerView关联</span></span><br><span class="line">        tagAdapter = <span class="keyword">new</span> <span class="title class_">TagAdapter</span>(tagList);</span><br><span class="line">        recyclerView.setAdapter(tagAdapter);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动异步任务来执行网络请求</span></span><br><span class="line">        performNetworkRequest();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行网络请求的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="TagItem部分："><a href="#TagItem部分：" class="headerlink" title="TagItem部分："></a>TagItem部分：</h5><p>该部分就是提前把需要展示的数据封装为类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TagItem</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String tagName;</span><br><span class="line">    <span class="keyword">private</span> String tagDescription;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isDetailsVisible; <span class="comment">// 新增的字段</span></span><br><span class="line">    <span class="comment">// 构造函数和其他方法...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isDetailsVisible</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isDetailsVisible;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDetailsVisible</span><span class="params">(<span class="type">boolean</span> visible)</span> &#123;</span><br><span class="line">        isDetailsVisible = visible;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TagItem</span><span class="params">(String tagName, String tagDescription)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tagName = tagName;</span><br><span class="line">        <span class="built_in">this</span>.tagDescription = tagDescription;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTagName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tagName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTagDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tagDescription;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="TagAdapter部分："><a href="#TagAdapter部分：" class="headerlink" title="TagAdapter部分："></a>TagAdapter部分：</h5><p>该部分的重写方法是内部封装好去重写的方法</p><p>首先最开始是去定义在TagAdapter中的全局变量</p><p>然后onCreateViewHolder()方法去新增view（注意要另外建立好）</p><p>接着是onBindViewHolder是绑定数据（也就是set各种属性）注意这里设定属性有可能会只设置到最后一个元素，原因一般有两种：1、没加notifyDataSetChanged()通知适配器数据已更改   2、试图在方法里去改变属性，因为方法最后只会绑定到最后一个view，应该在外围进行更改</p><p>还有getItemCount来确定一共生成多少view</p><p>数据来源则是ViewHolder，这里去find各种需要的元素id，然后在onBindViewHolder进行相应操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TagAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;TagAdapter.ViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;TagItem&gt; tagItemList;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">visibilityState1</span> <span class="operator">=</span> View.VISIBLE;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">visibilityState2</span> <span class="operator">=</span> View.GONE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TagAdapter</span><span class="params">(List&lt;TagItem&gt; tagItemList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tagItemList = tagItemList;</span><br><span class="line">        <span class="comment">// 初始化可见性状态</span></span><br><span class="line">        <span class="built_in">this</span>.visibilityState1 = View.VISIBLE;</span><br><span class="line">        <span class="built_in">this</span>.visibilityState2 = View.GONE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(parent.getContext()).inflate(R.layout.item_tag, parent, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ViewHolder</span>(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewHolder holder, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="type">TagItem</span> <span class="variable">tagItem</span> <span class="operator">=</span> tagItemList.get(position);</span><br><span class="line">        System.out.println(tagItem.getTagName());</span><br><span class="line">        holder.tagNameTextView.setText(tagItem.getTagName());</span><br><span class="line">        holder.tagDescriptionTextView.setText(tagItem.getTagDescription());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        holder.navDelete.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// 切换可见性状态</span></span><br><span class="line">                visibilityState1 = (visibilityState1 == View.GONE) ? View.VISIBLE : View.GONE;</span><br><span class="line">                visibilityState2 = (visibilityState2 == View.GONE) ? View.VISIBLE : View.GONE;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 通知适配器数据已更改，以便刷新所有itemView</span></span><br><span class="line">                notifyDataSetChanged();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置detailEdit的可见性状态</span></span><br><span class="line">        holder.detailEdit.setVisibility(visibilityState1);</span><br><span class="line">        <span class="comment">// 设置detailDelete的可见性状态</span></span><br><span class="line">        holder.detailDelete.setVisibility(visibilityState2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加渐变动画效果</span></span><br><span class="line">        <span class="keyword">if</span> (visibilityState1 == View.VISIBLE) &#123;</span><br><span class="line">            animateView(holder.detailEdit, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            animateView(holder.detailEdit, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (visibilityState2 == View.VISIBLE) &#123;</span><br><span class="line">            animateView(holder.detailDelete, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            animateView(holder.detailDelete, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 辅助方法来执行渐变动画</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">animateView</span><span class="params">(View view, <span class="type">boolean</span> show)</span> &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">startAlpha</span> <span class="operator">=</span> show ? <span class="number">0f</span> : <span class="number">1f</span>;</span><br><span class="line">        <span class="type">float</span> <span class="variable">endAlpha</span> <span class="operator">=</span> show ? <span class="number">1f</span> : <span class="number">0f</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectAnimator</span> <span class="variable">alphaAnimator</span> <span class="operator">=</span> ObjectAnimator.ofFloat(view, <span class="string">&quot;alpha&quot;</span>, startAlpha, endAlpha);</span><br><span class="line">        alphaAnimator.setDuration(<span class="number">300</span>); <span class="comment">// 设置动画持续时间</span></span><br><span class="line"></span><br><span class="line">        alphaAnimator.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tagItemList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder &#123;</span><br><span class="line">        TextView tagNameTextView;</span><br><span class="line">        TextView tagDescriptionTextView;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取activity_nav.xml中的根布局</span></span><br><span class="line">        View Nav;</span><br><span class="line">        ImageView navDelete;</span><br><span class="line"></span><br><span class="line">        CardView detailEdit;</span><br><span class="line">        CardView detailDelete;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ViewHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(itemView);</span><br><span class="line">            tagNameTextView = itemView.findViewById(R.id.tagName);</span><br><span class="line">            tagDescriptionTextView = itemView.findViewById(R.id.tagDescription);</span><br><span class="line"></span><br><span class="line">            Nav= ((Activity)itemView.getContext()).findViewById(R.id.Nav);</span><br><span class="line">            navDelete = Nav.findViewById(R.id.navDelete);</span><br><span class="line">            detailEdit = itemView.findViewById(R.id.detailEdit);</span><br><span class="line">            detailDelete = itemView.findViewById(R.id.detailDelete);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ConstraintLayout"><a href="#ConstraintLayout" class="headerlink" title="ConstraintLayout"></a>ConstraintLayout</h3><p>相当于融合了LinearLayout和RelativeLayout</p><p>下表列出了可用约束的属性列表</p><table><thead><tr><th>属性</th></tr></thead><tbody><tr><td>layout_constraintLeft_toLeftOf</td></tr><tr><td>layout_constraintLeft_toRightOf</td></tr><tr><td>layout_constraintRight_toLeftOf</td></tr><tr><td>layout_constraintRight_toRightOf</td></tr><tr><td>layout_constraintTop_toTopOf</td></tr><tr><td>layout_constraintTop_toBottomOf</td></tr><tr><td>layout_constraintBottom_toTopOf</td></tr><tr><td>layout_constraintBottom_toBottomOf</td></tr><tr><td>layout_constraintBaseline_toBaselineOf</td></tr><tr><td>layout_constraintStart_toEndOf</td></tr><tr><td>layout_constraintStart_toStartOf</td></tr><tr><td>layout_constraintEnd_toStartOf</td></tr><tr><td>layout_constraintEnd_toEndOf</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.drawerlayout.widget.DrawerLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.TagActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/drawerLayout&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;15dp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/Nav&quot;</span> <span class="attr">layout</span>=<span class="string">&quot;@layout/activity_nav&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/recyclerView&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@id/Nav&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">androidx.cardview.widget.CardView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/cardView&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;70dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;70dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:cardCornerRadius</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:cardElevation</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;+&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textStyle</span>=<span class="string">&quot;bold&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/white&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">&quot;@color/zi&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">androidx.cardview.widget.CardView</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.navigation.NavigationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/drawerMenu&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;210dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span></span></span><br><span class="line"><span class="tag">            <span class="attr">layout</span>=<span class="string">&quot;@layout/activity_drawer_menu&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">com.google.android.material.navigation.NavigationView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="EditView"><a href="#EditView" class="headerlink" title="EditView"></a>EditView</h3><p>用于文字的输入</p><p>hint用于提示文字，maxLength为最长允许输入长度，</p><p>background&#x3D;”@null”很关键，可以去除掉hint的下划线</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:hint</span>=<span class="string">&quot;请输入名称&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:maxLength</span>=<span class="string">&quot;6&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textStyle</span>=<span class="string">&quot;bold&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">&quot;@color/balck&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:hitColor</span>=<span class="string">&quot;@color/hui&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">&quot;15sp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@null&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在java中获取文字</p><p>注意赋值给String类型的变量是要toString()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userEmail=userEmailEditText.getText().toString();</span><br></pre></td></tr></table></figure><h2 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h2><h3 id="视图宽高"><a href="#视图宽高" class="headerlink" title="视图宽高"></a>视图宽高</h3><p>match_parent:与父级视图保持一致</p><p>wrap_content:表示与内容自适应</p><p>以dp为单位的具体尺寸</p><h3 id="间距"><a href="#间距" class="headerlink" title="间距"></a>间距</h3><p>外边距：layout_margin</p><p>内边距：padding</p><h3 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h3><p>指定当前视图相对于上级视图的对齐方式：layout_gravity</p><p>指定下级视图相对于当前视图的对齐方式：gravity</p><p>固定左上角：left|top</p><h3 id="排列方式"><a href="#排列方式" class="headerlink" title="排列方式"></a>排列方式</h3><p>使用orientation属性控制排列方式，默认水平排列<br>水平：orientation：horizontal</p><p>垂直：orientation：vertical</p><h3 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h3><p>使用layout_weight属性控制权重，相当于各自拥有多大比例</p><p>Layout_width为0dp时,layout_weight表示水平方向的宽度比例</p><p>Layout_height为0dp时,layout_weight表示垂直方向的宽度比例</p><h3 id="对可见性的处理"><a href="#对可见性的处理" class="headerlink" title="对可见性的处理"></a>对可见性的处理</h3><p>使用Visibility来到达使用同一个xml达成不同布局的效果，能够优化代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取activity_drawer_menu.xml中的根布局</span></span><br><span class="line">        <span class="type">View</span> <span class="variable">drawerMenu1</span> <span class="operator">=</span> findViewById(R.id.drawerMenu1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取drawerMenuPoint和drawerMenuAvatar控件</span></span><br><span class="line">        <span class="type">CardView</span> <span class="variable">drawerMenuPoint</span> <span class="operator">=</span> drawerMenu1.findViewById(R.id.drawerMenuPoint);</span><br><span class="line">        <span class="type">CardView</span> <span class="variable">drawerMenuAvatar</span> <span class="operator">=</span> drawerMenu1.findViewById(R.id.drawerMenuAvatar);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置它们的visibility为GONE</span></span><br><span class="line">        drawerMenuPoint.setVisibility(View.GONE);</span><br><span class="line">        drawerMenuAvatar.setVisibility(View.GONE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>在Logcat里查看调试信息</p><p>Log.v 的调试颜色为黑色的，任何消息都会输出，这里的v代表verbose啰嗦的意思，平时使用就是Log.v(“”,””);<br>Log.d的输出颜色是蓝色的，仅输出debug调试的意思，但他会输出上层的信息，过滤起来可以通过DDMS的Logcat标签来选择.<br>Log.i的输出为绿色，一般提示性的消息information，它不会输出Log.v和Log.d的信息，但会显示i、w和e的信息<br>Log.w的意思为橙色，可以看作为warning警告，一般需要我们注意优化Android代码，同时选择它后还会输出Log.e的信息。<br>Log.e为红色，可以想到error错误，这里仅显示红色的错误信息，这些错误就需要我们认真的分析，查看栈的信息了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Log.v(<span class="string">&quot;你好&quot;</span>,<span class="string">&quot;点击成功&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="实践效果"><a href="#实践效果" class="headerlink" title="实践效果"></a>实践效果</h2><h3 id="导航跳转页面"><a href="#导航跳转页面" class="headerlink" title="导航跳转页面"></a>导航跳转页面</h3><p>下面封装了代码，关键代码在自定义方法startActivity中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DrawerMenuHelper.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DrawerMenuHelper</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AppCompatActivity activity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DrawerMenuHelper</span><span class="params">(AppCompatActivity activity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.activity = activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setupDrawerMenu</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">      <span class="comment">//先找到按钮</span></span><br><span class="line">        LinearLayout drawerMenuTo1=navigationView.findViewById(drawerMenuToBIds[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        drawerMenuTo1.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                startActivity(MainActivity.class);</span><br><span class="line">                Log.v(<span class="string">&quot;drawerMenu&quot;</span>,<span class="string">&quot;点击抽屉的第一个按钮&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//关键代码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startActivity</span><span class="params">(Class&lt;?&gt; cls)</span> &#123;</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(activity, cls);</span><br><span class="line">        activity.startActivity(intent);</span><br><span class="line">        activity.finish(); <span class="comment">// 关闭当前活动</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//MainActivity.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="type">DrawerMenuHelper</span> <span class="variable">drawerMenuHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DrawerMenuHelper</span>(<span class="built_in">this</span>);</span><br><span class="line">        drawerMenuHelper.setupDrawerMenu(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h3><p>使用okhttp3框架</p><p>首先要在build.gradle进行引入implementation(“com.squareup.okhttp3:okhttp:4.9.1”)</p><p>其次是在AndroidManifest.xml加入权限</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>然后编写请求的逻辑这里要注意数据的格式、请求的方法、返回数据的格式（具体去查看swiftui笔记里的网络请求部分）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">performNetworkRequest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 创建 OkHttpClient 实例</span></span><br><span class="line">    <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 请求URL</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://tengenchang.top/tag/get&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 请求数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">requestData</span> <span class="operator">=</span> <span class="string">&quot;3489044730@qq.com&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置请求体</span></span><br><span class="line">    <span class="type">MediaType</span> <span class="variable">JSON</span> <span class="operator">=</span> MediaType.parse(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">    <span class="type">RequestBody</span> <span class="variable">requestBody</span> <span class="operator">=</span> RequestBody.create(JSON, requestData);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建 POST 请求</span></span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">            .url(url)</span><br><span class="line">            .post(requestBody)</span><br><span class="line">            .build();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 下面使用 &#x27;request&#x27; 对象来执行网络请求，我会在下方再补充代码</span></span><br><span class="line">    <span class="comment">// 例如，使用 &#x27;client&#x27; 执行请求：client.newCall(request).enqueue(callback);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来首先要把网络请求放在子线程里，本来是使用写一个类继承AsyncTask，然后在主线程中使用execute()方法来调用子线程，但是execute()方法，以及在主线程更新ui的onPostExecute()方法已经在API30中被弃用（卡了我一整节习概QAQ）解决方法就是使用okhttp3的onResponse()方法内的runOnUiThread()方法去在更新ui</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">performNetworkRequest</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 上面为配置 &#x27;request&#x27; 对象的各种细节来执行网络请求，我已经在笔记上方给出代码</span></span><br><span class="line">    <span class="comment">// 使用OkHttp3执行异步网络请求</span></span><br><span class="line">    client.newCall(request).enqueue(<span class="keyword">new</span> <span class="title class_">Callback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">                <span class="comment">// 获取响应数据</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">responseBody</span> <span class="operator">=</span> response.body().string();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 解析JSON响应</span></span><br><span class="line">                    <span class="type">JSONObject</span> <span class="variable">jsonResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(responseBody);</span><br><span class="line">                    <span class="type">JSONArray</span> <span class="variable">data</span> <span class="operator">=</span> jsonResponse.getJSONArray(<span class="string">&quot;data&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 清空已有数据</span></span><br><span class="line">                    tagList.clear();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 遍历JSON数据并添加到tagList中</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.length(); i++) &#123;</span><br><span class="line">                        <span class="type">JSONObject</span> <span class="variable">item</span> <span class="operator">=</span> data.getJSONObject(i);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">tagName</span> <span class="operator">=</span> item.getString(<span class="string">&quot;tagName&quot;</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">tagDescribe</span> <span class="operator">=</span> item.getString(<span class="string">&quot;tagDescribe&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 创建TagItem对象并添加到tagList中</span></span><br><span class="line">                        tagList.add(<span class="keyword">new</span> <span class="title class_">TagItem</span>(tagName, tagDescribe));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 更新 UI，确保在主线程中执行</span></span><br><span class="line">                    runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                            <span class="comment">// 通知适配器数据已更新</span></span><br><span class="line">                            tagAdapter.notifyDataSetChanged();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 请求失败，输出错误信息</span></span><br><span class="line">                Log.e(<span class="string">&quot;TagActivity&quot;</span>, <span class="string">&quot;请求失败，状态码: &quot;</span> + response.code());</span><br><span class="line">                Log.e(<span class="string">&quot;TagActivity&quot;</span>, response.body().string());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Call call, IOException e)</span> &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RelativeLayout内的适配器只能修改单一View的问题"><a href="#RelativeLayout内的适配器只能修改单一View的问题" class="headerlink" title="RelativeLayout内的适配器只能修改单一View的问题"></a>RelativeLayout内的适配器只能修改单一View的问题</h3><p>原因一般有两种：1、没加notifyDataSetChanged()通知适配器数据已更改   2、试图在方法里去改变属性，因为方法最后只会绑定到最后一个view，应该在外围进行更改(具体源代码可以去看简单空间部分的RelativeLayout介绍，这个问题也卡了挺久QAQ)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TagAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;TagAdapter.ViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;TagItem&gt; tagItemList;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">visibilityState1</span> <span class="operator">=</span> View.VISIBLE;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">visibilityState2</span> <span class="operator">=</span> View.GONE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TagAdapter</span><span class="params">(List&lt;TagItem&gt; tagItemList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tagItemList = tagItemList;</span><br><span class="line">        <span class="comment">// 初始化可见性状态</span></span><br><span class="line">        <span class="built_in">this</span>.visibilityState1 = View.VISIBLE;</span><br><span class="line">        <span class="built_in">this</span>.visibilityState2 = View.GONE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(parent.getContext()).inflate(R.layout.item_tag, parent, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ViewHolder</span>(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewHolder holder, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="type">TagItem</span> <span class="variable">tagItem</span> <span class="operator">=</span> tagItemList.get(position);</span><br><span class="line">        System.out.println(tagItem.getTagName());</span><br><span class="line">        holder.tagNameTextView.setText(tagItem.getTagName());</span><br><span class="line">        holder.tagDescriptionTextView.setText(tagItem.getTagDescription());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        holder.navDelete.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// 切换可见性状态</span></span><br><span class="line">                visibilityState1 = (visibilityState1 == View.GONE) ? View.VISIBLE : View.GONE;</span><br><span class="line">                visibilityState2 = (visibilityState2 == View.GONE) ? View.VISIBLE : View.GONE;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 通知适配器数据已更改，以便刷新所有itemView</span></span><br><span class="line">                notifyDataSetChanged();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置detailEdit的可见性状态</span></span><br><span class="line">        holder.detailEdit.setVisibility(visibilityState1);</span><br><span class="line">        <span class="comment">// 设置detailDelete的可见性状态</span></span><br><span class="line">        holder.detailDelete.setVisibility(visibilityState2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加渐变动画效果</span></span><br><span class="line">        <span class="keyword">if</span> (visibilityState1 == View.VISIBLE) &#123;</span><br><span class="line">            animateView(holder.detailEdit, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            animateView(holder.detailEdit, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (visibilityState2 == View.VISIBLE) &#123;</span><br><span class="line">            animateView(holder.detailDelete, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            animateView(holder.detailDelete, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 辅助方法来执行渐变动画</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">animateView</span><span class="params">(View view, <span class="type">boolean</span> show)</span> &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">startAlpha</span> <span class="operator">=</span> show ? <span class="number">0f</span> : <span class="number">1f</span>;</span><br><span class="line">        <span class="type">float</span> <span class="variable">endAlpha</span> <span class="operator">=</span> show ? <span class="number">1f</span> : <span class="number">0f</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectAnimator</span> <span class="variable">alphaAnimator</span> <span class="operator">=</span> ObjectAnimator.ofFloat(view, <span class="string">&quot;alpha&quot;</span>, startAlpha, endAlpha);</span><br><span class="line">        alphaAnimator.setDuration(<span class="number">300</span>); <span class="comment">// 设置动画持续时间</span></span><br><span class="line"></span><br><span class="line">        alphaAnimator.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tagItemList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder &#123;</span><br><span class="line">        TextView tagNameTextView;</span><br><span class="line">        TextView tagDescriptionTextView;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取activity_nav.xml中的根布局</span></span><br><span class="line">        View Nav;</span><br><span class="line">        ImageView navDelete;</span><br><span class="line"></span><br><span class="line">        CardView detailEdit;</span><br><span class="line">        CardView detailDelete;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ViewHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(itemView);</span><br><span class="line">            tagNameTextView = itemView.findViewById(R.id.tagName);</span><br><span class="line">            tagDescriptionTextView = itemView.findViewById(R.id.tagDescription);</span><br><span class="line"></span><br><span class="line">            Nav= ((Activity)itemView.getContext()).findViewById(R.id.Nav);</span><br><span class="line">            navDelete = Nav.findViewById(R.id.navDelete);</span><br><span class="line">            detailEdit = itemView.findViewById(R.id.detailEdit);</span><br><span class="line">            detailDelete = itemView.findViewById(R.id.detailDelete);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除指定页面"><a href="#删除指定页面" class="headerlink" title="删除指定页面"></a>删除指定页面</h3><p>最大的问题在于如何删除，以及如何通知主线程去更改ui，以及使用getcontext来找到父activity</p><p>注意一下getcontext的用法</p><p>View类中提供的方法，在继承了View的类中才可以调用。</p><p>返回的是当前View运行在哪个Activity Contex中，获取当前context的实例。</p><p>如果使用场景是Activity则相当于 this</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">deleteTarget</span><span class="params">(TargetItem targetItem, <span class="type">int</span> position, Context context)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建 OkHttpClient 实例</span></span><br><span class="line">    <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 请求URL</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://tengenchang.top/target/delete&quot;</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;targetId:&quot;</span> + targetItem.getTargetId());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建 JSON 对象</span></span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">requestData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        requestData.put(<span class="string">&quot;userEmail&quot;</span>, <span class="string">&quot;3489044730@qq.com&quot;</span>);</span><br><span class="line">        requestData.put(<span class="string">&quot;targetName&quot;</span>, targetItem.getTargetName());</span><br><span class="line">        requestData.put(<span class="string">&quot;ifPoints&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        requestData.put(<span class="string">&quot;targetId&quot;</span>, Long.valueOf(targetItem.getTargetId()));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置请求体</span></span><br><span class="line">    <span class="type">MediaType</span> <span class="variable">JSON</span> <span class="operator">=</span> MediaType.parse(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">    <span class="type">RequestBody</span> <span class="variable">requestBody</span> <span class="operator">=</span> RequestBody.create(JSON, requestData.toString());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建 POST 请求</span></span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">            .url(url)</span><br><span class="line">            .post(requestBody)</span><br><span class="line">            .build();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用 OkHttp3 执行异步网络请求</span></span><br><span class="line">    client.newCall(request).enqueue(<span class="keyword">new</span> <span class="title class_">Callback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">                <span class="comment">// 从数据源中删除项</span></span><br><span class="line">                targetItemList.remove(position);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 通知适配器删除了特定位置的项</span></span><br><span class="line">                ((Activity) context).runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                        notifyItemRemoved(position);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 通知适配器更新从删除位置到列表末尾的所有项</span></span><br><span class="line">                ((Activity) context).runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                        notifyItemRangeChanged(position, targetItemList.size());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 请求失败，输出错误信息</span></span><br><span class="line">                Log.e(<span class="string">&quot;TargetActivity&quot;</span>, <span class="string">&quot;请求失败，状态码: &quot;</span> + response.code());</span><br><span class="line">                Log.e(<span class="string">&quot;TargetActivity&quot;</span>, response.body().string());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Call call, IOException e)</span> &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="edit和delete转化"><a href="#edit和delete转化" class="headerlink" title="edit和delete转化"></a>edit和delete转化</h3><h5 id="第一种情况"><a href="#第一种情况" class="headerlink" title="第一种情况"></a>第一种情况</h5><p>页面里只有一个RelativeLayout，无论在adapter里实现点击事件还是在activity中实现点击事件都可以，详细内容可见<strong>RelativeLayout内的适配器只能修改单一View的问题</strong></p><h5 id="第二种情况（又卡住QAQ）"><a href="#第二种情况（又卡住QAQ）" class="headerlink" title="第二种情况（又卡住QAQ）"></a>第二种情况（又卡住QAQ）</h5><p>页面中有两个RelativeLayout,那就不能在adapter中实现事件，因为最后只会实现最后一个点击事件，这时就需要在activity中实现</p><h6 id="TargetActivity："><a href="#TargetActivity：" class="headerlink" title="TargetActivity："></a>TargetActivity：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TargetActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RecyclerView targetWithTimeRecyclerView;</span><br><span class="line">    <span class="keyword">private</span> RecyclerView targetNoTimeRecyclerView;</span><br><span class="line">    <span class="keyword">private</span> TargetWithTimeAdapter targetWithTimeAdapter;</span><br><span class="line">    <span class="keyword">private</span> TargetNoTimeAdapter targetNoTimeAdapter;</span><br><span class="line">    <span class="keyword">private</span> List&lt;TargetItem&gt; targetWithTimeList;</span><br><span class="line">    <span class="keyword">private</span> List&lt;TargetItem&gt; targetNoTimeList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">targetVisibilityState1</span> <span class="operator">=</span> View.VISIBLE;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">targetVisibilityState2</span> <span class="operator">=</span> View.GONE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> View Nav;</span><br><span class="line">    ImageView navDelete;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_target);</span><br><span class="line">        </span><br><span class="line">        Nav = findViewById(R.id.Nav);</span><br><span class="line">        navDelete = Nav.findViewById(R.id.navDelete);</span><br><span class="line"></span><br><span class="line">        navDelete.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// 切换可见性状态</span></span><br><span class="line">                targetVisibilityState1 = (targetVisibilityState1 == View.GONE) ? View.VISIBLE : View.GONE;</span><br><span class="line">                targetVisibilityState2 = (targetVisibilityState2 == View.GONE) ? View.VISIBLE : View.GONE;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 更新两个适配器的可见性状态</span></span><br><span class="line">                targetNoTimeAdapter.updateVisibility(targetVisibilityState1, targetVisibilityState2);</span><br><span class="line">                targetWithTimeAdapter.updateVisibility(targetVisibilityState1, targetVisibilityState2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 初始化RecyclerView</span></span><br><span class="line">        targetWithTimeRecyclerView = findViewById(R.id.targetWithTimeRecyclerView);</span><br><span class="line">        targetNoTimeRecyclerView = findViewById(R.id.targetNoTimeRecyclerView);</span><br><span class="line">        targetWithTimeRecyclerView.setLayoutManager(<span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(<span class="built_in">this</span>));</span><br><span class="line">        targetNoTimeRecyclerView.setLayoutManager(<span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(<span class="built_in">this</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化数据列表</span></span><br><span class="line">        targetWithTimeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 初始化 targetWithTimeList</span></span><br><span class="line">        targetNoTimeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 初始化 targetNoTimeList</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化适配器并将其与RecyclerView关联</span></span><br><span class="line">        targetWithTimeAdapter = <span class="keyword">new</span> <span class="title class_">TargetWithTimeAdapter</span>(targetWithTimeList,targetVisibilityState1, targetVisibilityState2);</span><br><span class="line">        targetNoTimeAdapter = <span class="keyword">new</span> <span class="title class_">TargetNoTimeAdapter</span>(targetNoTimeList,targetVisibilityState1, targetVisibilityState2);</span><br><span class="line"></span><br><span class="line">        targetWithTimeRecyclerView.setAdapter(targetWithTimeAdapter);</span><br><span class="line">        targetNoTimeRecyclerView.setAdapter(targetNoTimeAdapter);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="targetNoTimeAdapter"><a href="#targetNoTimeAdapter" class="headerlink" title="targetNoTimeAdapter"></a>targetNoTimeAdapter</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TargetNoTimeAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;TargetNoTimeAdapter.ViewHolder&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;TargetItem&gt; targetItemList;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">targetNoTimeVisibilityState1</span> <span class="operator">=</span> View.VISIBLE;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> targetNoTimeVisibilityState2= View.GONE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TargetNoTimeAdapter</span><span class="params">(List&lt;TargetItem&gt; targetItemList, <span class="type">int</span> visibilityState1, <span class="type">int</span> visibilityState2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.targetItemList = targetItemList;</span><br><span class="line">        <span class="comment">// 初始化可见性状态</span></span><br><span class="line">        <span class="built_in">this</span>.targetNoTimeVisibilityState1 = visibilityState1;</span><br><span class="line">        <span class="built_in">this</span>.targetNoTimeVisibilityState2 = visibilityState2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> TargetNoTimeAdapter.ViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(parent.getContext()).inflate(R.layout.item_target_notime, parent, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TargetNoTimeAdapter</span>.ViewHolder(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> TargetNoTimeAdapter.ViewHolder holder, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="type">TargetItem</span> <span class="variable">targetItem</span> <span class="operator">=</span> targetItemList.get(position);</span><br><span class="line">        System.out.println(targetItem.getTargetName());</span><br><span class="line">        holder.targetNameTextView.setText(targetItem.getTargetName());</span><br><span class="line">        holder.targetDescriptionTextView.setText(targetItem.getTargetDescribe());</span><br><span class="line">        holder.targetNoTimePointTextView.setText(<span class="string">&quot;X&quot;</span>+targetItem.getTargetPoint());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置detailEdit的可见性状态</span></span><br><span class="line">        holder.targetNoTimePointCardView.setVisibility(targetNoTimeVisibilityState1);</span><br><span class="line">        holder.targetNoTimeDayDifference.setVisibility(targetNoTimeVisibilityState1);</span><br><span class="line">        <span class="comment">// 设置detailDelete的可见性状态</span></span><br><span class="line">        holder.targetNoTimeDelete.setVisibility(targetNoTimeVisibilityState2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateVisibility</span><span class="params">(<span class="type">int</span> visibilityState1, <span class="type">int</span> visibilityState2)</span> &#123;</span><br><span class="line">        targetNoTimeVisibilityState1 = visibilityState1;</span><br><span class="line">        targetNoTimeVisibilityState2 = visibilityState2;</span><br><span class="line">        notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> targetItemList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder &#123;</span><br><span class="line">        TextView targetNameTextView;</span><br><span class="line">        TextView targetDescriptionTextView;</span><br><span class="line">        TextView targetNoTimePointTextView;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取activity_nav.xml中的根布局</span></span><br><span class="line">        View Nav;</span><br><span class="line">        ImageView navDelete;</span><br><span class="line"></span><br><span class="line">        CardView targetNoTimePointCardView;</span><br><span class="line">        CardView targetNoTimeDelete;</span><br><span class="line">        TextView targetNoTimeDayDifference;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ViewHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(itemView);</span><br><span class="line">            targetNameTextView = itemView.findViewById(R.id.targetNoTimeName);</span><br><span class="line">            targetDescriptionTextView = itemView.findViewById(R.id.targetNoTimeDescribe);</span><br><span class="line">            targetNoTimePointTextView = itemView.findViewById(R.id.targetNoTimePoint);</span><br><span class="line"></span><br><span class="line">            Nav = ((Activity) itemView.getContext()).findViewById(R.id.Nav);</span><br><span class="line">            navDelete = Nav.findViewById(R.id.navDelete);</span><br><span class="line">            targetNoTimePointCardView = itemView.findViewById(R.id.targetNoTimePointCardView);</span><br><span class="line">            targetNoTimeDelete = itemView.findViewById(R.id.targetNoTimeDelete);</span><br><span class="line">            targetNoTimeDayDifference = itemView.findViewById(R.id.targetNoTimeDayDifference);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="日期创建"><a href="#日期创建" class="headerlink" title="日期创建"></a>日期创建</h3><p>这块涉及的比较多，有时间再仔细看一下</p><p>知识点不只是日期的相应处理，还有使用java去构建布局，这一点我都使用的都比较简单，但是下面的代码是比较复杂布局构建，但是其实复杂布局就是去记住更多的布局对象的相应属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> View <span class="title function_">createDateItemView</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> index, <span class="keyword">final</span> List&lt;TargetItem&gt; targetWithTimeList)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取当前日期</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">currentDate</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">    <span class="comment">// 将日期向前或向后移动 index 天</span></span><br><span class="line">    calendar.add(Calendar.DAY_OF_MONTH, index);</span><br><span class="line">    <span class="comment">// 获取新的日期</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">    <span class="comment">// 恢复 calendar 到当前日期</span></span><br><span class="line">    calendar.setTime(currentDate);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建日期的格式化工具，用于显示星期几和日期天数</span></span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">dayOfWeekFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;E&quot;</span>);</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">dayOfMonthFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建日期项的布局参数，设置边距</span></span><br><span class="line">    LinearLayout.<span class="type">LayoutParams</span> <span class="variable">layoutParams</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinearLayout</span>.LayoutParams(</span><br><span class="line">            LinearLayout.LayoutParams.WRAP_CONTENT,</span><br><span class="line">            LinearLayout.LayoutParams.WRAP_CONTENT</span><br><span class="line">    );</span><br><span class="line">    layoutParams.setMargins(<span class="number">18</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建日期项的外层布局</span></span><br><span class="line">    <span class="type">RelativeLayout</span> <span class="variable">dateItemLayout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RelativeLayout</span>(<span class="built_in">this</span>);</span><br><span class="line">    dateItemLayout.setLayoutParams(layoutParams);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建显示星期几的文本视图</span></span><br><span class="line">    <span class="type">TextView</span> <span class="variable">dayOfWeekTextView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextView</span>(<span class="built_in">this</span>);</span><br><span class="line">    dayOfWeekTextView.setText(dayOfWeekFormat.format(date));</span><br><span class="line">    dayOfWeekTextView.setId(View.generateViewId());</span><br><span class="line">    dayOfWeekTextView.setTextColor(Color.GRAY);</span><br><span class="line">    dayOfWeekTextView.setTextSize(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置星期几文本视图的布局参数，水平居中显示</span></span><br><span class="line">    RelativeLayout.<span class="type">LayoutParams</span> <span class="variable">dayOfWeekParams</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RelativeLayout</span>.LayoutParams(</span><br><span class="line">            RelativeLayout.LayoutParams.WRAP_CONTENT,</span><br><span class="line">            RelativeLayout.LayoutParams.WRAP_CONTENT</span><br><span class="line">    );</span><br><span class="line">    dayOfWeekParams.addRule(RelativeLayout.CENTER_HORIZONTAL);</span><br><span class="line">    dayOfWeekTextView.setLayoutParams(dayOfWeekParams);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建显示日期天数的文本视图</span></span><br><span class="line">    <span class="type">TextView</span> <span class="variable">dayOfMonthTextView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextView</span>(<span class="built_in">this</span>);</span><br><span class="line">    dayOfMonthTextView.setText(dayOfMonthFormat.format(date));</span><br><span class="line">    dayOfMonthTextView.setWidth(getResources().getDimensionPixelSize(R.dimen.date_item_width));</span><br><span class="line">    dayOfMonthTextView.setHeight(getResources().getDimensionPixelSize(R.dimen.date_item_height));</span><br><span class="line">    dayOfMonthTextView.setGravity(Gravity.CENTER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查是否为当前日期，设置初始状态</span></span><br><span class="line">    <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">        dayOfMonthTextView.setTextColor(Color.parseColor(<span class="string">&quot;#CFC8FF&quot;</span>));</span><br><span class="line">        dayOfMonthTextView.setBackgroundResource(R.drawable.selected_date_background);</span><br><span class="line">        lastSelectedDayTextView = dayOfMonthTextView;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dayOfMonthTextView.setTextColor(Color.parseColor(<span class="string">&quot;#CFC8FF&quot;</span>));</span><br><span class="line">        dayOfMonthTextView.setBackgroundResource(R.drawable.unselected_date_background);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置日期天数文本视图的布局参数，水平居中显示，位于星期几文本视图下方</span></span><br><span class="line">    RelativeLayout.<span class="type">LayoutParams</span> <span class="variable">dayOfMonthParams</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RelativeLayout</span>.LayoutParams(</span><br><span class="line">            RelativeLayout.LayoutParams.WRAP_CONTENT,</span><br><span class="line">            RelativeLayout.LayoutParams.WRAP_CONTENT</span><br><span class="line">    );</span><br><span class="line">    dayOfMonthParams.addRule(RelativeLayout.CENTER_HORIZONTAL);</span><br><span class="line">    dayOfMonthParams.addRule(RelativeLayout.BELOW, dayOfWeekTextView.getId());</span><br><span class="line">    dayOfMonthTextView.setLayoutParams(dayOfMonthParams);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 允许日期天数文本视图响应点击事件</span></span><br><span class="line">    dayOfMonthTextView.setClickable(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置日期天数文本视图的点击事件监听器</span></span><br><span class="line">    <span class="comment">// 在日期项点击事件的回调中添加以下代码</span></span><br><span class="line">    dayOfMonthTextView.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lastSelectedDayTextView != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 取消上一个选中日期的背景和文本颜色</span></span><br><span class="line">                lastSelectedDayTextView.setBackgroundResource(R.drawable.unselected_date_background);</span><br><span class="line">                lastSelectedDayTextView.setTextColor(Color.parseColor(<span class="string">&quot;#CFC8FF&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置当前选中日期的背景和文本颜色</span></span><br><span class="line">            dayOfMonthTextView.setBackgroundResource(R.drawable.selected_date_background);</span><br><span class="line">            dayOfMonthTextView.setTextColor(Color.parseColor(<span class="string">&quot;#CFC8FF&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新 lastSelectedDayTextView 为当前选中的日期</span></span><br><span class="line">            lastSelectedDayTextView = dayOfMonthTextView;</span><br><span class="line">            System.out.println(<span class="string">&quot;lastSelectedDayTextView:&quot;</span> + lastSelectedDayTextView);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取选中日期的字符串形式，例如 &quot;2023-07-19&quot;</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">selectedDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>).format(date);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历目标列表</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; targetWithTimeList.size(); i++) &#123;</span><br><span class="line">                <span class="type">TargetItem</span> <span class="variable">targetItem</span> <span class="operator">=</span> targetWithTimeList.get(i);</span><br><span class="line">                <span class="type">String</span> <span class="variable">deadline</span> <span class="operator">=</span> targetItem.getDeadline(); <span class="comment">// 获取deadline，例如 &quot;2023-07-19T19:14:00&quot;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 解析deadline中的日期部分和时间部分</span></span><br><span class="line">                String[] deadlineParts = deadline.split(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">deadlineDate</span> <span class="operator">=</span> deadlineParts[<span class="number">0</span>]; <span class="comment">// 日期部分，例如 &quot;2023-07-19&quot;</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">deadlineTime</span> <span class="operator">=</span> deadlineParts[<span class="number">1</span>].substring(<span class="number">0</span>, <span class="number">5</span>); <span class="comment">// 时间部分，例如 &quot;19:14&quot;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 计算日期差</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">dayDifference</span> <span class="operator">=</span> calculateDayDifference(selectedDate, deadlineDate);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 根据日期差的规则设置不同的值</span></span><br><span class="line">                <span class="keyword">if</span> (dayDifference &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 相差日期大于0，获得相差的天数</span></span><br><span class="line">                    targetItem.setDayDifference(dayDifference + <span class="string">&quot;天&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dayDifference == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 相差日期等于0，获得deadline的小时以及分钟</span></span><br><span class="line">                    targetItem.setDayDifference(deadlineTime);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 相差日期小于0，获得deadline的月份和日子</span></span><br><span class="line">                    targetItem.setDayDifference(deadlineDate.substring(<span class="number">5</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;deadlineTime:&quot;</span> + targetItem.getDayDifference());</span><br><span class="line">                <span class="comment">// 通知适配器数据已更改</span></span><br><span class="line">                targetWithTimeAdapter.notifyDataSetChanged();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将星期几和日期天数文本视图添加到日期项的布局中</span></span><br><span class="line">    dateItemLayout.addView(dayOfWeekTextView);</span><br><span class="line">    dateItemLayout.addView(dayOfMonthTextView);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回日期项的布局</span></span><br><span class="line">    <span class="keyword">return</span> dateItemLayout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RecyclerView适配器根据条件转成不同的页面"><a href="#RecyclerView适配器根据条件转成不同的页面" class="headerlink" title="RecyclerView适配器根据条件转成不同的页面"></a>RecyclerView适配器根据条件转成不同的页面</h3><p>这里的实现效果，我之前一直是采用多个RecyclerView来达成条件转成的效果，然后可以直接根据一定的条件进行不同的页面，不过下面的例子只实现了list为空时的转化</p><p>Adapter部分</p><p>注意getItemViewType判断list的size</p><p>onCreateViewHolder的if语句来转化不同页面</p><p>onBindViewHolder的if语句进行不同处理</p><p>getItemCount也是去判断list的size</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TagAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;TagAdapter.ViewHolder&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TagAdapter</span><span class="params">(List&lt;TagItem&gt; tagItemList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tagItemList = tagItemList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemViewType</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tagItemList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 返回1表示空页面</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 返回0表示正常数据项</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (viewType == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(parent.getContext()).inflate(R.layout.item_tag, parent, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TagAdapter</span>.ViewHolder(view);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(parent.getContext()).inflate(R.layout.item_tag_null, parent, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TagAdapter</span>.ViewHolder(view);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewHolder holder, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tagItemList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 当数据为空时，可以设置空页面的提示信息或样式</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 可以设置其他空页面的样式或操作</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tagItemList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 返回1项以显示空页面</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> tagItemList.size();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ViewHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(itemView);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="轮播图实现"><a href="#轮播图实现" class="headerlink" title="轮播图实现"></a>轮播图实现</h3><p>使用ViewPager2来实现轮播图，ViewPager2实际上也是RecyclerView</p><p>使用handler.postDelayed(runnable, 1800);开始轮播任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginNavActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TextView userAgreement;</span><br><span class="line">    <span class="keyword">private</span> TextView privacyPolicy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ViewPager2 viewPager;</span><br><span class="line">    <span class="keyword">private</span> List&lt;CarouselItem&gt; carouselItems = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">currentItem</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 当前轮播图项的索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Handler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler</span>();</span><br><span class="line">    <span class="keyword">private</span> Runnable runnable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LinearLayout loginNavLoginLinearLayout;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_login_nav);</span><br><span class="line"></span><br><span class="line">        userAgreement=findViewById(R.id.userAgreement);</span><br><span class="line">        privacyPolicy=findViewById(R.id.privacyPolicy);</span><br><span class="line"></span><br><span class="line">        userAgreement.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                startActivity(UserAgreementActivity.class);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        privacyPolicy.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                startActivity(PrivacyPolicyActivity.class);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        viewPager = findViewById(R.id.viewPager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加轮播图项数据</span></span><br><span class="line">        carouselItems.add(<span class="keyword">new</span> <span class="title class_">CarouselItem</span>(R.drawable.loginnavlogo1, <span class="string">&quot;兑换\n商店积分&quot;</span>));</span><br><span class="line">        carouselItems.add(<span class="keyword">new</span> <span class="title class_">CarouselItem</span>(R.drawable.loginnavlogo2, <span class="string">&quot;发现\n自我进步&quot;</span>));</span><br><span class="line">        carouselItems.add(<span class="keyword">new</span> <span class="title class_">CarouselItem</span>(R.drawable.loginnavlogo3, <span class="string">&quot;建立\n计时标签&quot;</span>));</span><br><span class="line">        carouselItems.add(<span class="keyword">new</span> <span class="title class_">CarouselItem</span>(R.drawable.loginnavlogo4, <span class="string">&quot;建立\n你的目标&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建适配器并设置到ViewPager2</span></span><br><span class="line">        <span class="type">CarouselAdapter</span> <span class="variable">carouselAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CarouselAdapter</span>(carouselItems);</span><br><span class="line">        viewPager.setAdapter(carouselAdapter);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建轮播任务</span></span><br><span class="line">        runnable = <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (currentItem == carouselItems.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                    currentItem = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    currentItem++;</span><br><span class="line">                &#125;</span><br><span class="line">                viewPager.setCurrentItem(currentItem);</span><br><span class="line">                handler.postDelayed(<span class="built_in">this</span>, <span class="number">1800</span>); <span class="comment">// 1.8秒后再次执行</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始轮播任务</span></span><br><span class="line">        handler.postDelayed(runnable, <span class="number">1800</span>);</span><br><span class="line"></span><br><span class="line">        loginNavLoginLinearLayout=findViewById(R.id.loginNavLogin);</span><br><span class="line">        loginNavLoginLinearLayout.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="comment">//监听按钮，如果点击，就跳转</span></span><br><span class="line">                startActivity(HomeActivity.class);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        <span class="comment">// 在Activity销毁时停止轮播任务，防止内存泄漏</span></span><br><span class="line">        handler.removeCallbacks(runnable);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startActivity</span><span class="params">(Class&lt;?&gt; cls)</span> &#123;</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>, cls);</span><br><span class="line">        <span class="built_in">this</span>.startActivity(intent);</span><br><span class="line">        <span class="built_in">this</span>.finish(); <span class="comment">// 关闭当前活动</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跳转时传递信息"><a href="#跳转时传递信息" class="headerlink" title="跳转时传递信息"></a>跳转时传递信息</h3><p>通过putExtra转递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startActivity</span><span class="params">(Class&lt;?&gt; cls)</span> &#123;</span><br><span class="line">    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>, cls);</span><br><span class="line">  <span class="comment">//为跳转放入信息</span></span><br><span class="line">    intent.putExtra(<span class="string">&quot;sourceActivity&quot;</span>, <span class="string">&quot;Tag&quot;</span>);</span><br><span class="line">    startActivity(intent);</span><br><span class="line">    finish(); <span class="comment">// 关闭当前活动</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取传递的标志</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sourceActivity</span> <span class="operator">=</span> getIntent().getStringExtra(<span class="string">&quot;sourceActivity&quot;</span>);</span><br><span class="line"><span class="comment">// 根据不同的标志设置不同的标题</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;Tag&quot;</span>.equals(sourceActivity)) &#123;      </span><br><span class="line">  createNavTitle.setText(<span class="string">&quot;建立标签&quot;</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;Store&quot;</span>.equals(sourceActivity)) &#123;       </span><br><span class="line">  createNavTitle.setText(<span class="string">&quot;建立商品&quot;</span>);   </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;Target&quot;</span>.equals(sourceActivity)) &#123;       </span><br><span class="line">  createNavTitle.setText(<span class="string">&quot;建立目标&quot;</span>);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计时页面实现"><a href="#计时页面实现" class="headerlink" title="计时页面实现"></a>计时页面实现</h3><h3 id="弹窗实现"><a href="#弹窗实现" class="headerlink" title="弹窗实现"></a>弹窗实现</h3><p>先创建AlertDialog对象</p><p>再通过setTitle以及setMessage以及setPositiveButton以及setNegativeButton来设置相应的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">cancelTimer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (countDownTimer != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 创建一个 AlertDialog.Builder 对象</span></span><br><span class="line">        AlertDialog.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">// 设置弹窗标题</span></span><br><span class="line">        builder.setTitle(<span class="string">&quot;确定要放弃吗？&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置弹窗正文</span></span><br><span class="line">        builder.setMessage(<span class="string">&quot;本次计时将不会得到任何分数&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置确定按钮，并指定点击事件</span></span><br><span class="line">        builder.setPositiveButton(<span class="string">&quot;确定&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">                <span class="comment">// 用户点击了确定按钮，执行放弃计时的操作</span></span><br><span class="line">                countDownTimer.cancel();</span><br><span class="line">                timerTextView.setText(timer);</span><br><span class="line">                isTimerRunning = <span class="literal">false</span>;</span><br><span class="line">                timeButtonTextView.setText(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 设置取消按钮，并指定点击事件</span></span><br><span class="line">        builder.setNegativeButton(<span class="string">&quot;取消&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">                <span class="comment">// 用户点击了取消按钮，不执行任何操作，只关闭弹窗</span></span><br><span class="line">                dialog.dismiss();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 创建并显示 AlertDialog</span></span><br><span class="line">        <span class="type">AlertDialog</span> <span class="variable">alertDialog</span> <span class="operator">=</span> builder.create();</span><br><span class="line">        alertDialog.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提示框实现"><a href="#提示框实现" class="headerlink" title="提示框实现"></a>提示框实现</h3><p>注意这里的context可以取消</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Toast.makeText(context.getApplicationContext(), <span class="string">&quot;完成目标&quot;</span>, Toast.LENGTH_SHORT).show();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SwiftUI</title>
      <link href="/posts/882d3c67.html"/>
      <url>/posts/882d3c67.html</url>
      
        <content type="html"><![CDATA[<h1 id="SwiftUI"><a href="#SwiftUI" class="headerlink" title="SwiftUI"></a>SwiftUI</h1><p>宣告式程式设计的前端IOS编程语言</p><h2 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h2><p>ContentView.swift为入口文件</p><p>Assets存放静态资源</p><p>HabeetApp为启动入口</p><p><img src="https://gitee.com/TECNB/pic-demo/raw/master/image-20230807154634820.png" alt="image-20230807154634820"></p><h3 id="ContentView"><a href="#ContentView" class="headerlink" title="ContentView"></a>ContentView</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="string">&quot;globe&quot;</span>)</span><br><span class="line">                .imageScale(.large)</span><br><span class="line">                .foregroundColor(.accentColor)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Hello, world!&quot;</span>)</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//產生 ContentView 和 HomeView 的預覽</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView_Previews</span>: <span class="title class_">PreviewProvider</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ContentView</span>()</span><br><span class="line">        .previewDevice(<span class="type">PreviewDevice</span>(rawValue: <span class="string">&quot;iPhone 12 Pro&quot;</span>)) <span class="comment">//更改预览的设备</span></span><br><span class="line">            .previewDisplayName(<span class="string">&quot;iPhone 12 Pro&quot;</span>)<span class="comment">//更改预览的名字</span></span><br><span class="line">      .previewInterfaceOrientation(.landscapeLeft) <span class="comment">//以橫向模式預覽UI</span></span><br><span class="line">        <span class="type">HomeView</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HabeetApp"><a href="#HabeetApp" class="headerlink" title="HabeetApp"></a>HabeetApp</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HabeetApp</span>: <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">ContentView</span>()</span><br><span class="line">            <span class="type">HomeView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="视图（View）"><a href="#视图（View）" class="headerlink" title="视图（View）"></a>视图（View）</h2><p>@ViewBuilder可以解决优化视图之后无返回值的问题</p><p><img src="https://gitee.com/TECNB/pic-demo/raw/master/image-20230809153455860.png" alt="image-20230809153455860"></p><h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">&quot;Stay Hungry. Stay Foolish.&quot;</span>)</span><br><span class="line">    .fontWeight(.bold)</span><br><span class="line">    .font(.title)<span class="comment">//这是使用系统的预设的字体调整方式</span></span><br><span class="line">.font(.system(size: <span class="number">50</span>))<span class="comment">//这样就可以自己调整大小</span></span><br><span class="line">.minimumScaleFactor(<span class="number">0.7</span>)<span class="comment">//这代表你能接受这个元素最小为多大，系统会自动更改</span></span><br><span class="line">    .lineLimit(<span class="number">1</span>)<span class="comment">//这样就限制字体为一行</span></span><br><span class="line">.foregroundColor(.indigo)<span class="comment">//更改字体颜色为紫色</span></span><br></pre></td></tr></table></figure><h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//role里面是苹果给的预设，比如警告按钮.destructive</span></span><br><span class="line"><span class="type">Button</span>(role: .none, action: &#123;</span><br><span class="line">    <span class="comment">// 欲執行的動作</span></span><br><span class="line">&#125;, label: &#123;</span><br><span class="line">  <span class="comment">// 按鈕外觀描述（可以使用text（））</span></span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.padding(.top,<span class="number">30</span>)  <span class="comment">//文字上方加上一些间距</span></span><br><span class="line">.foregroundColor(.white)</span><br><span class="line">.background(<span class="type">Color</span>.purple)</span><br><span class="line">.cornerRadius(<span class="number">20</span>) <span class="comment">//建立圆角按钮</span></span><br><span class="line">.buttonStyle(.borderedProminent)  <span class="comment">//苹果内置的样式按钮为重点</span></span><br><span class="line">.buttonStyle(.plain)  <span class="comment">//苹果内置的样式按钮为没有任何样式</span></span><br><span class="line"><span class="comment">//简易版本</span></span><br><span class="line"><span class="type">Button</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;label: &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span>(<span class="string">&quot;user1&quot;</span>)<span class="comment">//里面为Assets内的图片的名称</span></span><br><span class="line">    .resizable()<span class="comment">//預設上，iOS 會以原始大小來顯示圖片，要在 SwiftUI 中調整圖片大小，則我們可以加入 resizable 修飾器（iOS 會延伸圖片來填滿可用區域）,此延伸模式並沒有考量圖片本身的長寬比</span></span><br><span class="line">.scaledToFit()<span class="comment">//保持原來圖片的長寬比，則你可以應用 scaledToFit 修飾器</span></span><br></pre></td></tr></table></figure><h3 id="Vertical-Stack-VStack-垂直堆叠视图"><a href="#Vertical-Stack-VStack-垂直堆叠视图" class="headerlink" title="Vertical Stack(VStack 垂直堆叠视图)"></a>Vertical Stack(VStack 垂直堆叠视图)</h3><p>作用为把子视图排列成一个垂直的堆栈（默认不可见，相当于css里的display：block）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VStack</span>(spacing: <span class="number">20</span>) &#123;</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Horizontal-Stack-HStack-水平堆叠视图"><a href="#Horizontal-Stack-HStack-水平堆叠视图" class="headerlink" title="Horizontal Stack(HStack 水平堆叠视图)"></a>Horizontal Stack(HStack 水平堆叠视图)</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HStack</span> &#123;</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">&#125;</span><br><span class="line">.padding(.horizontal, <span class="number">20</span>) <span class="comment">//左右邊緣加入 20 點的間距</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//HStack 視圖實際上提供兩個可選型別的參數，一個是 alignment，另一個則是 spacing</span></span><br><span class="line"><span class="comment">//1、將所有的圖片視圖對齊底部邊緣</span></span><br><span class="line"><span class="comment">//2、在視圖之間加入10 點的間距</span></span><br><span class="line"><span class="type">HStack</span>(alignment: .bottom, spacing: <span class="number">10</span>) &#123;</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ZStack（Z轴堆叠视图）"><a href="#ZStack（Z轴堆叠视图）" class="headerlink" title="ZStack（Z轴堆叠视图）"></a>ZStack（Z轴堆叠视图）</h3><p>越靠近下面的，在z轴上越高</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ZStack</span>&#123;</span><br><span class="line">  <span class="comment">// 目标视图的内容</span></span><br><span class="line">  <span class="type">Text</span>(<span class="string">&quot;最底部&quot;</span>)</span><br><span class="line">  <span class="type">Text</span>(<span class="string">&quot;中间&quot;</span>)</span><br><span class="line">  <span class="type">Text</span>(<span class="string">&quot;最顶部&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Rectangle"><a href="#Rectangle" class="headerlink" title="Rectangle"></a>Rectangle</h3><p><code>Rectangle()</code> 是 SwiftUI 中的一个视图类型，用于创建一个矩形形状的视图</p><p>注意在overlay与Rectangle等视图联系时，在overlay里使用foreach等类似语句，不会报相应的foreach里参数使用错误，而是会报错：Type ‘() -&gt; ()’ cannot conform to ‘ShapeStyle’，会导致我们找错报错的方向（卡了半个多小时，QAQ）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在下述示例中，Rectangle() 创建一个蓝色的矩形视图</span></span><br><span class="line"><span class="type">Rectangle</span>()</span><br><span class="line">    .frame(width: <span class="number">100</span>, height: <span class="number">50</span>)</span><br><span class="line">    .foregroundColor(<span class="type">Color</span>.blue)</span><br></pre></td></tr></table></figure><h3 id="Circle"><a href="#Circle" class="headerlink" title="Circle"></a>Circle</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Circle</span>()</span><br><span class="line">.fill(<span class="type">Color</span>.blue)<span class="comment">// 填充为蓝色</span></span><br><span class="line">.frame(width: <span class="number">100</span>, height: <span class="number">100</span>) <span class="comment">// 设置圆形的尺寸</span></span><br></pre></td></tr></table></figure><h3 id="Spacer"><a href="#Spacer" class="headerlink" title="Spacer"></a>Spacer</h3><p>「留白」（Spacer ）的 SwiftUI 特殊元件，留白視圖是一個沒有內容的視圖，它在堆疊視圖中占用儘可能多的空間。例如：當你將留白視圖放置在垂直佈局中，它會在堆疊允許的範圍內垂直擴展。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Spacer</span>()</span><br><span class="line">.layoutPriority(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="TextField"><a href="#TextField" class="headerlink" title="TextField"></a>TextField</h3><p>输入框</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面通过设置textFieldStyle为PlainTextFieldStyle()使得能够自定义输入框的样式</span></span><br><span class="line"><span class="type">TextField</span>(<span class="string">&quot;请输入备注&quot;</span>, text: <span class="variable">$textInput</span>)</span><br><span class="line">    .font(<span class="type">Font</span>.system(size: <span class="number">16</span>, weight: .bold)) <span class="comment">// 设置字体样式</span></span><br><span class="line">    .padding(<span class="type">EdgeInsets</span>(top: <span class="number">15</span>, leading: <span class="number">15</span>, bottom: <span class="number">15</span>, trailing: <span class="number">15</span>)) <span class="comment">// 调整内部空间</span></span><br><span class="line">    .background(<span class="type">Color</span>(<span class="type">UIColor</span>(red: <span class="number">250</span><span class="operator">/</span><span class="number">255</span>, green: <span class="number">250</span><span class="operator">/</span><span class="number">255</span>, blue: <span class="number">255</span><span class="operator">/</span><span class="number">255</span>, alpha: <span class="number">1</span>))) <span class="comment">// 设置背景颜色</span></span><br><span class="line">    .cornerRadius(<span class="number">22.5</span>) <span class="comment">// 圆角边框</span></span><br><span class="line">    .textFieldStyle(<span class="type">PlainTextFieldStyle</span>()) <span class="comment">// 去掉默认的边框样式</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TabView"><a href="#TabView" class="headerlink" title="TabView"></a>TabView</h3><p>轮播图</p><p><strong>注意</strong>这个currentIndex &#x3D; (currentIndex + 1) % items.count里面的 items.count不能为0否则报错（卡了我半小时，主要是swiftui项目崩溃的日志实在是又长又没有重点😡）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面为实现自动播放功能的轮播图，注意在实验后发现大多数参数不能该</span></span><br><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> currentIndex <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> timer <span class="operator">=</span> <span class="type">Timer</span>.publish(every: <span class="number">3</span>, on: .main, in: .common).autoconnect()</span><br><span class="line"><span class="keyword">let</span> items <span class="operator">=</span> [</span><br><span class="line">        (<span class="string">&quot;loginNavLogo1&quot;</span>, <span class="string">&quot;兑换<span class="subst">\n</span>商店积分&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;loginNavLogo2&quot;</span>, <span class="string">&quot;发现<span class="subst">\n</span>自我进步&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;loginNavLogo3&quot;</span>, <span class="string">&quot;建立<span class="subst">\n</span>计时标签&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;loginNavLogo4&quot;</span>, <span class="string">&quot;建立<span class="subst">\n</span>你的目标&quot;</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//selection实际上就是</span></span><br><span class="line"><span class="comment">// 创建一个TabView，通过绑定的方式来追踪选中的索引</span></span><br><span class="line"><span class="type">TabView</span>(selection: <span class="variable">$currentIndex</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用ForEach来遍历items数组的索引</span></span><br><span class="line">  <span class="comment">//items.indices被用作遍历的集合，它返回了一个表示items数组索引的范围。</span></span><br><span class="line">    <span class="type">ForEach</span>(items.indices, id: \.<span class="keyword">self</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="type">Image</span>(items[index].<span class="number">0</span>)</span><br><span class="line">                .resizable()</span><br><span class="line">                .scaledToFit()</span><br><span class="line">                .frame(width: <span class="number">400</span>, height: <span class="number">380</span>)</span><br><span class="line"></span><br><span class="line">            <span class="type">HStack</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(items[index].<span class="number">1</span>)</span><br><span class="line">                    .font(.title)</span><br><span class="line">                    .multilineTextAlignment(.leading)</span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 为每个页面分配一个标签，这里使用索引作为标签</span></span><br><span class="line">        <span class="comment">// 在 ForEach 视图内部，每个循环迭代都会创建一个新的 VStack 视图，并通过 .tag(index) 方法将这个 VStack 视图与当前的索引值 index(currentIndex) 相关联。</span></span><br><span class="line">        .tag(index)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置TabView的样式为页面样式，允许用户水平滑动浏览页面</span></span><br><span class="line">.tabViewStyle(<span class="type">PageTabViewStyle</span>(indexDisplayMode: .automatic))</span><br><span class="line"><span class="comment">// 设置索引视图的样式，始终显示索引</span></span><br><span class="line">.indexViewStyle(<span class="type">PageIndexViewStyle</span>(backgroundDisplayMode: .always))</span><br><span class="line"><span class="comment">// 当接收到计时器(timer)的事件时，执行闭包内的操作</span></span><br><span class="line">.onReceive(timer) &#123;<span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// 在控制台输出一条消息，表示计时器触发</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Timer triggered&quot;</span>)</span><br><span class="line">    <span class="comment">// 更新当前选中的索引，实现页面自动切换效果，取余运算以循环显示页面</span></span><br><span class="line">    currentIndex <span class="operator">=</span> (currentIndex <span class="operator">+</span> <span class="number">1</span>) <span class="operator">%</span> items.count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vertical代表竖直方向，showsIndicators代表是否显示滚动条</span></span><br><span class="line"><span class="type">ScrollView</span>(.vertical, showsIndicators: <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="type">ForEach</span>(tagWithTime.indices, id: \.<span class="keyword">self</span>) &#123; index <span class="keyword">in</span> </span><br><span class="line">        <span class="type">TagItemView</span>(tagTimeIndex:tagTimeIndex)</span><br><span class="line">            .frame(maxWidth: .infinity)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Picker"><a href="#Picker" class="headerlink" title="Picker"></a>Picker</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面为时间Picker</span></span><br><span class="line">.sheet(isPresented: <span class="variable">$showScorePicker</span>) &#123;</span><br><span class="line">    <span class="type">Picker</span>(<span class="string">&quot;分数&quot;</span>, selection: <span class="variable">$selectedScore</span>) &#123;</span><br><span class="line">        <span class="type">ForEach</span>(<span class="number">1</span><span class="operator">...</span><span class="number">8</span>, id: \.<span class="keyword">self</span>) &#123; score <span class="keyword">in</span></span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\(score)</span> Point&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .pickerStyle(<span class="type">WheelPickerStyle</span>())</span><br><span class="line">  <span class="comment">//控制sheet的弹出的高度和允许用户拖拽到的位置</span></span><br><span class="line">    .presentationDetents([.fraction(<span class="number">0.4</span>),.medium,.large])</span><br><span class="line">    .edgesIgnoringSafeArea(.all)</span><br><span class="line">    </span><br><span class="line">    <span class="type">Button</span> &#123;</span><br><span class="line">        showScorePicker.toggle()</span><br><span class="line">    &#125;label: &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;完成&quot;</span>)</span><br><span class="line">            .foregroundColor(<span class="type">Color</span>.white)</span><br><span class="line">    &#125;</span><br><span class="line">        .frame(width: <span class="number">100</span>,height: <span class="number">40</span>)</span><br><span class="line">        .background(<span class="type">Color</span>.indigo)</span><br><span class="line">        .cornerRadius(<span class="number">12</span>)</span><br><span class="line">        .padding(.top,<span class="number">30</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DatePicker"><a href="#DatePicker" class="headerlink" title="DatePicker"></a>DatePicker</h3><p>关键在于.datePickerStyle(GraphicalDatePickerStyle())，通过这个修饰符出来的样式是好看的</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面为时间Picker</span></span><br><span class="line">.sheet(isPresented: <span class="variable">$showDatePicker</span>) &#123;</span><br><span class="line">    <span class="type">VStack</span> &#123;</span><br><span class="line">        <span class="type">DatePicker</span>(</span><br><span class="line">            selection: <span class="variable">$selectedDate</span>,</span><br><span class="line">            in: <span class="type">Date</span>()<span class="operator">...</span></span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;选择时间&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//通过这个修饰符出来的样式是好看的</span></span><br><span class="line">        .datePickerStyle(<span class="type">GraphicalDatePickerStyle</span>())</span><br><span class="line">        .labelsHidden()</span><br><span class="line">        .presentationDetents([.fraction(<span class="number">0.6</span>),.large])</span><br><span class="line">            .edgesIgnoringSafeArea(.all)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="type">Button</span> &#123;</span><br><span class="line">            showDatePicker.toggle()</span><br><span class="line">        &#125;label: &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;完成&quot;</span>)</span><br><span class="line">                .foregroundColor(<span class="type">Color</span>.white)</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(width: <span class="number">100</span>,height: <span class="number">40</span>)</span><br><span class="line">        .background(<span class="type">Color</span>.indigo)</span><br><span class="line">        .cornerRadius(<span class="number">12</span>)</span><br><span class="line">        .padding(.top,<span class="number">30</span>)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    .padding()</span><br><span class="line">    .background(<span class="type">Color</span>.white)</span><br><span class="line">    .cornerRadius(<span class="number">15</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="视图修饰符（View-Modifier）"><a href="#视图修饰符（View-Modifier）" class="headerlink" title="视图修饰符（View Modifier）"></a>视图修饰符（View Modifier）</h2><p>本质上就是一个苹果为我们提供好的实例里的方法</p><p>注意每次使用视图修饰符时，SwiftUI都会在后台创建一个新的原始视图的修饰版本，所以视图修饰符的前后位置也很关键，视图修饰符不同的位置会改变其样式,同时在使用视图修饰符后返回的值也都有所不同（肯返回some View或者text），而部分视图修饰符又要求了它接受的值，所以顺序不同可能会造成类型的bug</p><h3 id="background"><a href="#background" class="headerlink" title="background"></a>background</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.background &#123;</span><br><span class="line">    <span class="type">Image</span>(<span class="string">&quot;background&quot;</span>)</span><br><span class="line">        .resizable()</span><br><span class="line">        .ignoresSafeArea()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//渐变色</span></span><br><span class="line">.background(</span><br><span class="line"><span class="type">LinearGradient</span>(</span><br><span class="line">        gradient: <span class="type">Gradient</span>(</span><br><span class="line">            colors: [</span><br><span class="line">                <span class="type">Color</span>(red: <span class="number">142</span><span class="operator">/</span><span class="number">255</span>, green: <span class="number">150</span><span class="operator">/</span><span class="number">255</span>, blue: <span class="number">255</span><span class="operator">/</span><span class="number">255</span>),</span><br><span class="line">                <span class="type">Color</span>(red: <span class="number">108</span><span class="operator">/</span><span class="number">255</span>, green: <span class="number">93</span><span class="operator">/</span><span class="number">255</span>, blue: <span class="number">211</span><span class="operator">/</span><span class="number">255</span>)</span><br><span class="line">            ]</span><br><span class="line">        ),</span><br><span class="line">      <span class="comment">//从右往左渐变</span></span><br><span class="line">        startPoint: .trailing,</span><br><span class="line">        endPoint: .leading</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h3><p>padding设置在frame前面可以达到不改变设定宽高，只是内部改变padding</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.padding(.horizontal, <span class="number">20</span>) <span class="comment">//左右加入 20 点的间距</span></span><br><span class="line">.padding(.top,<span class="number">30</span>)  <span class="comment">//在上方加上 30 点的间距</span></span><br></pre></td></tr></table></figure><h3 id="frame"><a href="#frame" class="headerlink" title="frame"></a>frame</h3><p>frame只是把一个视图限制在一定的宽度和高度之中，并不会改变视图本身的大小，但是可以利用子视图来撑大父视图，使其大小改变</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.frame(width: <span class="number">200</span>) <span class="comment">//用於將寬度限制為「200 點」</span></span><br><span class="line">.frame(maxWidth: .infinity)<span class="comment">//设定最大宽度为无限</span></span><br><span class="line">.frame(width: <span class="number">100</span>,alignment: .leading)<span class="comment">//并制定对齐方式</span></span><br></pre></td></tr></table></figure><h3 id="boder"><a href="#boder" class="headerlink" title="boder"></a>boder</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.border(<span class="type">Color</span>.red,width: <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="opacity"><a href="#opacity" class="headerlink" title="opacity"></a>opacity</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.opacity(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><h3 id="multilineTextAlignment"><a href="#multilineTextAlignment" class="headerlink" title="multilineTextAlignment"></a>multilineTextAlignment</h3><p>文字对齐方式（主要返回的some View）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.multilineTextAlignment(.leading)<span class="comment">//左对齐</span></span><br><span class="line">.multilineTextAlignment(.center)<span class="comment">//居中对齐</span></span><br><span class="line">.multilineTextAlignment(.trailing)<span class="comment">//右对齐</span></span><br></pre></td></tr></table></figure><h3 id="lineSpacing"><a href="#lineSpacing" class="headerlink" title="lineSpacing"></a>lineSpacing</h3><p>行间距，增加文字行与行之间点距离</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.lineSpacing(<span class="number">4.0</span>)</span><br></pre></td></tr></table></figure><h3 id="front"><a href="#front" class="headerlink" title="front"></a>front</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.font(.title)</span><br><span class="line">.font(.title2)</span><br><span class="line">.font(.title3)</span><br><span class="line">.font(.footnote)</span><br></pre></td></tr></table></figure><p>不同字体在默认状态下的大小（单位为px）</p><img src="https://gitee.com/TECNB/pic-demo/raw/master/image-20230807212415287.png" alt="image-20230807212415287" style="zoom:50%;" /><h3 id="kerning"><a href="#kerning" class="headerlink" title="kerning"></a>kerning</h3><p>文本里文字之间的间距</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.kerning(<span class="number">2.0</span>)  <span class="comment">//设置文字之间的间距为2px</span></span><br><span class="line">.kerning(<span class="operator">-</span><span class="number">1.0</span>)  <span class="comment">//设置文字之间的间距为-1px，字体排布更加紧凑</span></span><br></pre></td></tr></table></figure><h3 id="fontWeight"><a href="#fontWeight" class="headerlink" title="fontWeight"></a>fontWeight</h3><p>文字字重</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.fontWeight(.black)  <span class="comment">//比bold（默认）更大些</span></span><br><span class="line">.fontWeight(.bold)</span><br></pre></td></tr></table></figure><h3 id="alert"><a href="#alert" class="headerlink" title="alert"></a>alert</h3><p>按钮下的方法</p><p>注意这个$alertIsVisible如果在foreeach里的视图组件使用的话，不要把它作为binding参数传进来，否则alertIsVisible为true后会同时唤出多个alert，导致alert里的参数传递会出错,应该把alertIsVisible作为视图组件的private变量，确保在foreach循环里，每个视图组件的变量alertIsVisible都私有（卡了我一晚上，本来是玩博德之门3的啊啊啊啊啊啊啊啊QAQ）<br>还有要注意的是，如果想在一个视图里使用多个alert，靠增加.alert的数量是没用的，应该通过返回多个Alert达到增加alert数量的结果</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//primaryButton和secondaryButton好像在IOS15已经取消了</span></span><br><span class="line">.alert(isPresented: <span class="variable">$isShowingAlert</span>) &#123;</span><br><span class="line">    <span class="type">Alert</span>(</span><br><span class="line">        title: <span class="type">Text</span>(<span class="string">&quot;确定要删除吗？&quot;</span>), <span class="comment">// 弹窗标题</span></span><br><span class="line">        message: <span class="type">Text</span>(<span class="string">&quot;删除后将会从您的标签移除数据&quot;</span>), <span class="comment">// 弹窗消息</span></span><br><span class="line">        primaryButton: .default(<span class="type">Text</span>(<span class="string">&quot;确定&quot;</span>), action: &#123;</span><br><span class="line">            <span class="comment">// 在确定按钮点击时执行的操作</span></span><br><span class="line">            deleteTag(tagName: tagName,tagTimeIndex:tagTimeIndex)</span><br><span class="line">                </span><br><span class="line">        &#125;),</span><br><span class="line">        secondaryButton: .cancel(<span class="type">Text</span>(<span class="string">&quot;取消&quot;</span>)) <span class="comment">// 弹窗的取消按钮</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现多个alert</span></span><br><span class="line">.alert(isPresented: <span class="variable">$time</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> timeStop &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Alert</span>(</span><br><span class="line">            title: <span class="type">Text</span>(<span class="string">&quot;确定要放弃吗？&quot;</span>), <span class="comment">// 弹窗标题</span></span><br><span class="line">            message: <span class="type">Text</span>(<span class="string">&quot;本次计时将不会得到任何分数&quot;</span>), <span class="comment">// 弹窗消息</span></span><br><span class="line">            primaryButton: .default(<span class="type">Text</span>(<span class="string">&quot;确定&quot;</span>), action: &#123;</span><br><span class="line">                <span class="comment">// 在确定按钮点击时执行的操作</span></span><br><span class="line">                resetCountdown()</span><br><span class="line">              <span class="comment">//记得回收alert</span></span><br><span class="line">                time <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">            &#125;),</span><br><span class="line">            secondaryButton: .cancel(<span class="type">Text</span>(<span class="string">&quot;取消&quot;</span>)) <span class="comment">// 弹窗的取消按钮</span></span><br><span class="line">        )</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Alert</span>(</span><br><span class="line">            title: <span class="type">Text</span>(<span class="string">&quot;计时结束&quot;</span>), <span class="comment">// 弹窗标题</span></span><br><span class="line">            message: <span class="type">Text</span>(<span class="string">&quot;本次计时获得<span class="subst">\(tagWithTime[selectedTagIndex].tagPoint<span class="operator">!</span>)</span>Points&quot;</span>), <span class="comment">// 弹窗消息</span></span><br><span class="line">            primaryButton: .default(<span class="type">Text</span>(<span class="string">&quot;确定&quot;</span>), action: &#123;</span><br><span class="line">                <span class="comment">// 在确定按钮点击时执行的操作</span></span><br><span class="line">                resetCountdown()</span><br><span class="line">              <span class="comment">//记得回收alert</span></span><br><span class="line">                time <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">            &#125;),</span><br><span class="line">            secondaryButton: .cancel(<span class="type">Text</span>(<span class="string">&quot;取消&quot;</span>)) <span class="comment">// 弹窗的取消按钮</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h3><p>如果在大的动画里有部分动画不满意，可以直接在那个部分里再加一份动画，或者动画为none，也可以加上不同的id来是SwiftUI意识到这是不同的View，还有在View里加上.transition可以控制不同的动画效果,也可以用.withAnimation精确控制动画出现的时机</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动画的类型//根据@state的值变化后自动产生动画</span></span><br><span class="line">.animation(.easeInOut, value: ifShowTargetMenu)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/TECNB/pic-demo/raw/master/image-20230808212241299.png" alt="image-20230808212241299"></p><h3 id="controlSize"><a href="#controlSize" class="headerlink" title="controlSize"></a>controlSize</h3><p>任何视图都可以使用，但是只有苹果给的预设</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.controlSize(.large)</span><br></pre></td></tr></table></figure><h3 id="layoutPriority"><a href="#layoutPriority" class="headerlink" title="layoutPriority"></a>layoutPriority</h3><p>排版的优先顺序，默认都为0</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.layoutPriority(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.transition(.move(edge: .top ).combined(with: .opacity))<span class="comment">//从上面开始出现，并结合透明度的变化（也是动画？）</span></span><br></pre></td></tr></table></figure><h3 id="cornerRadius"><a href="#cornerRadius" class="headerlink" title="cornerRadius"></a>cornerRadius</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.cornerRadius(<span class="number">22.5</span>)<span class="comment">//此时设置为圆角</span></span><br></pre></td></tr></table></figure><h3 id="toggle"><a href="#toggle" class="headerlink" title="toggle"></a>toggle</h3><p>翻转Bool变量的值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifShowMenu.toggle()</span><br></pre></td></tr></table></figure><h3 id="ignoresSafeArea"><a href="#ignoresSafeArea" class="headerlink" title="ignoresSafeArea"></a>ignoresSafeArea</h3><p>在进行背景颜色修改时，手机底部和顶部无法正确上色，可以使用这个Modifier</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ignoresSafeArea()</span><br></pre></td></tr></table></figure><h3 id="onTapGesture"><a href="#onTapGesture" class="headerlink" title="onTapGesture"></a>onTapGesture</h3><p>在视图的顶端点击后的动作</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.onTapGesture &#123;</span><br><span class="line">ifShowMenu.toggle()<span class="comment">//这里是把ifShowMenu这个变量翻转</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="colorMultiply"><a href="#colorMultiply" class="headerlink" title="colorMultiply"></a>colorMultiply</h3><p>将整个图片的颜色变暗为黑色</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span>(<span class="string">&quot;targetBefore&quot;</span>)</span><br><span class="line">    .colorMultiply(.black)</span><br></pre></td></tr></table></figure><h3 id="shadow"><a href="#shadow" class="headerlink" title="shadow"></a>shadow</h3><p>增加阴影效果</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.shadow(color: <span class="type">Color</span>.black.opacity(<span class="number">0.2</span>), radius: <span class="number">10</span>, x: <span class="number">0</span>, y: <span class="number">5</span>) <span class="comment">// 添加阴影效果,阴影的颜色是黑色，透明度为 0.2，半径为 10，水平偏移量为 0，垂直偏移量为 5</span></span><br></pre></td></tr></table></figure><h3 id="overlay"><a href="#overlay" class="headerlink" title="overlay"></a>overlay</h3><p>alignment：可以控制8个角的放置的位置，下面的示例固定在右下角</p><p>注意在overlay与Rectangle等视图联系时，在overlay里使用foreach等类似语句，不会报相应的foreach里参数使用错误，而是会报错：Type ‘() -&gt; ()’ cannot conform to ‘ShapeStyle’，会导致我们找错报错的方向（卡了半个多小时，QAQ）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VStack</span>&#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;被重叠的主视图&quot;</span>)              </span><br><span class="line">&#125;.overlay(alignment:.bottomTrailing) &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;覆盖的内容&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="onAppear"><a href="#onAppear" class="headerlink" title="onAppear"></a>onAppear</h3><p>注意子组件里的onAppear在父组件是无效的，里面的内容不会执行</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.onAppear &#123;</span><br><span class="line">  <span class="comment">// 页面加载时，调用闭包并传递初始日期       </span></span><br><span class="line">  <span class="keyword">self</span>.onDateSelected<span class="operator">?</span>(<span class="keyword">self</span>.selectedDate)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sheet"><a href="#sheet" class="headerlink" title="sheet"></a>sheet</h3><p>通过presentationDetents控制大小（注意presentationDetents要放在sheet里面才有效，以及该修饰符IOS16才适配）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面为时间Picker</span></span><br><span class="line">.sheet(isPresented: <span class="variable">$showScorePicker</span>) &#123;</span><br><span class="line">    <span class="type">Picker</span>(<span class="string">&quot;分数&quot;</span>, selection: <span class="variable">$selectedScore</span>) &#123;</span><br><span class="line">        <span class="type">ForEach</span>(<span class="number">1</span><span class="operator">...</span><span class="number">8</span>, id: \.<span class="keyword">self</span>) &#123; score <span class="keyword">in</span></span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\(score)</span> Point&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .pickerStyle(<span class="type">WheelPickerStyle</span>())</span><br><span class="line">  <span class="comment">//控制sheet的弹出的高度和允许用户拖拽到的位置</span></span><br><span class="line">    .presentationDetents([.fraction(<span class="number">0.4</span>),.medium,.large])</span><br><span class="line">    .edgesIgnoringSafeArea(.all)</span><br><span class="line">    </span><br><span class="line">    <span class="type">Button</span> &#123;</span><br><span class="line">        showScorePicker.toggle()</span><br><span class="line">    &#125;label: &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;完成&quot;</span>)</span><br><span class="line">            .foregroundColor(<span class="type">Color</span>.white)</span><br><span class="line">    &#125;</span><br><span class="line">        .frame(width: <span class="number">100</span>,height: <span class="number">40</span>)</span><br><span class="line">        .background(<span class="type">Color</span>.indigo)</span><br><span class="line">        .cornerRadius(<span class="number">12</span>)</span><br><span class="line">        .padding(.top,<span class="number">30</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="毛玻璃效果"><a href="#毛玻璃效果" class="headerlink" title="毛玻璃效果"></a>毛玻璃效果</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 毛玻璃效果</span></span><br><span class="line"><span class="keyword">if</span> ifShowMenu &#123;</span><br><span class="line">  <span class="comment">//extraLight: 轻微的模糊效果，适合提供一些轻微的模糊和亮度。</span></span><br><span class="line"><span class="comment">//light: 适度的模糊效果，较亮。</span></span><br><span class="line"><span class="comment">//dark: 适度的模糊效果，较暗。</span></span><br><span class="line"><span class="comment">//regular: 默认的模糊效果，适中的模糊程度。</span></span><br><span class="line">    <span class="type">VisualEffectView</span>(effect: <span class="type">UIBlurEffect</span>(style: .light))</span><br><span class="line">        .ignoresSafeArea()</span><br><span class="line">           </span><br><span class="line">    <span class="type">Color</span>.white.opacity(<span class="number">0.3</span>) <span class="comment">// 透明的白色背景，可以增量毛玻璃的效果</span></span><br><span class="line">        .ignoresSafeArea()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面的代码好像是和UIkit进行转化，是必须的</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">VisualEffectView</span>: <span class="title class_">UIViewRepresentable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> effect: <span class="type">UIVisualEffect</span>?</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">makeUIView</span>(<span class="params">context</span>: <span class="type">UIViewRepresentableContext</span>&lt;<span class="keyword">Self</span>&gt;) -&gt; <span class="type">UIVisualEffectView</span> &#123;</span><br><span class="line">        <span class="type">UIVisualEffectView</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateUIView</span>(<span class="keyword">_</span> <span class="params">uiView</span>: <span class="type">UIVisualEffectView</span>, <span class="params">context</span>: <span class="type">UIViewRepresentableContext</span>&lt;<span class="keyword">Self</span>&gt;) &#123;</span><br><span class="line">        uiView.effect <span class="operator">=</span> effect</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="视图宽度固定为设备的一半，并置于左侧"><a href="#视图宽度固定为设备的一半，并置于左侧" class="headerlink" title="视图宽度固定为设备的一半，并置于左侧"></a>视图宽度固定为设备的一半，并置于左侧</h3><p>难点在于直接使用frame固定尺寸的话，是达不到置于左侧的效果的</p><p>同时下面的例子还使得图片固定在左上角</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽屉式导航菜单</span></span><br><span class="line"><span class="keyword">if</span> ifShowMenu &#123;</span><br><span class="line">    <span class="type">DrawerMenu</span>(isDrawerOpen: <span class="variable">$ifShowMenu</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DrawerMenu</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> isDrawerOpen: <span class="type">Bool</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">      <span class="comment">//GeometryReader也是一个视图</span></span><br><span class="line">        <span class="type">GeometryReader</span> &#123; geometry <span class="keyword">in</span></span><br><span class="line">            <span class="type">VStack</span>(alignment: .leading) &#123;</span><br><span class="line">                <span class="type">Image</span>(<span class="string">&quot;Avatar&quot;</span>)</span><br><span class="line">                    .resizable()</span><br><span class="line">                    .scaledToFit()</span><br><span class="line">                    .frame(width: <span class="number">40</span>, height: <span class="number">40</span>)</span><br><span class="line">                    .alignmentGuide(<span class="type">HorizontalAlignment</span>.leading) &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                        geometry.size.width <span class="operator">/</span> <span class="number">2</span> <span class="comment">// Align to the left half of the screen</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    .padding(.leading,<span class="number">30</span>).padding(.bottom,<span class="number">10</span>)</span><br><span class="line">              <span class="type">Spacer</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            .frame(width: geometry.size.width <span class="operator">/</span> <span class="number">2</span>, height: geometry.size.height<span class="operator">+</span><span class="number">40</span>) <span class="comment">// Set VStack height to screen height</span></span><br><span class="line">            .background(<span class="type">Color</span>.white)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="两种导航方式"><a href="#两种导航方式" class="headerlink" title="两种导航方式"></a>两种导航方式</h3><h4 id="NavigationStack"><a href="#NavigationStack" class="headerlink" title="NavigationStack"></a>NavigationStack</h4><p>这种方法会在左上角留下back的返回字样</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按钮驱动版</span></span><br><span class="line"><span class="type">NavigationStack</span>&#123;</span><br><span class="line">  <span class="type">ZStack</span>&#123;</span><br><span class="line">      <span class="type">Button</span>&#123;</span><br><span class="line">          ifShowTarget<span class="operator">=</span><span class="literal">true</span></span><br><span class="line">      &#125;label: &#123;</span><br><span class="line">          <span class="comment">//目标</span></span><br><span class="line">          <span class="type">HStack</span>&#123;</span><br><span class="line">              <span class="type">Image</span>(<span class="string">&quot;targetBefore&quot;</span>)</span><br><span class="line">                  .resizable()</span><br><span class="line">                  .scaledToFit()</span><br><span class="line">                  .frame(width: <span class="number">30</span>, height: <span class="number">30</span>)</span><br><span class="line">                  .padding(.leading,<span class="number">5</span>)</span><br><span class="line">              <span class="type">Text</span>(<span class="string">&quot;目标&quot;</span>)</span><br><span class="line">                  .frame(width: <span class="number">120</span>,alignment: .leading)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">//NavigationLink</span></span><br><span class="line">    <span class="type">NavigationLink</span>(<span class="string">&quot;&quot;</span>, destination: <span class="type">TargetView</span>(), isActive: <span class="variable">$ifShowTarget</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接点击跳转版</span></span><br><span class="line"><span class="type">NavigationStack</span>&#123;</span><br><span class="line">  <span class="type">ZStack</span>&#123;</span><br><span class="line">    <span class="comment">//NavigationLink</span></span><br><span class="line">    <span class="type">NavigationLink</span>(destination: <span class="type">TargetView</span>())&#123;</span><br><span class="line"><span class="type">Text</span>(<span class="string">&quot;点击跳转&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fullScreenCover"><a href="#fullScreenCover" class="headerlink" title="fullScreenCover"></a>fullScreenCover</h4><p>这种方法是在当前页面直接开一个新的视图，比较符合常规的导航</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span>&#123;</span><br><span class="line">    ifShowTarget<span class="operator">=</span><span class="literal">true</span></span><br><span class="line">&#125;label: &#123;</span><br><span class="line">    <span class="comment">//目标</span></span><br><span class="line">    <span class="type">HStack</span>&#123;</span><br><span class="line">        <span class="type">Image</span>(<span class="string">&quot;targetBefore&quot;</span>)</span><br><span class="line">            .resizable()</span><br><span class="line">            .scaledToFit()</span><br><span class="line">            .frame(width: <span class="number">30</span>, height: <span class="number">30</span>)</span><br><span class="line">            .padding(.leading,<span class="number">5</span>)</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;目标&quot;</span>)</span><br><span class="line">            .frame(width: <span class="number">120</span>,alignment: .leading)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ifShowTarget&#123;</span><br><span class="line">    <span class="type">NullView</span>()</span><br><span class="line">        .fullScreenCover(isPresented: <span class="variable">$ifShowTarget</span>, content: &#123;</span><br><span class="line">            <span class="comment">// 在此处放置其他您希望在全屏覆盖视图上显示的内容</span></span><br><span class="line">            <span class="type">TargetView</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="API网络请求"><a href="#API网络请求" class="headerlink" title="API网络请求"></a>API网络请求</h3><h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><p>第一步是建立好结构体接收传回来的参数，可以通过postman获取到传回来的JSON数据，根据数据进行书写</p><p>第二步建立urlRequest，并给出链接的设定，包括请求方式（httpMethod），请求头（header），请求参数（httpBody），其中请求参数这里需要转化为Data类型的数据，如果是直接传入String则使用userEmail.data(using: .utf8)转化，如果是json数据则进行转化：</p><p>1、let requestData &#x3D; [“userEmail”: userEmail]</p><p>2、let jsonData &#x3D; try JSONSerialization.data(withJSONObject: requestData)</p><p>第三步是创建 URLSession 数据任务，传回来的数据也要通过解码：</p><p>JSONDecoder().decode(ResponseData.self, from: data)<br>最后还有处理各种出错情况</p><p><img src="https://gitee.com/TECNB/pic-demo/raw/master/image-20230814212122622.png" alt="image-20230814212122622"></p><p>注意下面的例子只是将类型粗糙的分类，具体怎么请求最主要要是要看后端的api的需求</p><h4 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h4><p>在大体上该例子常用于获取数组类型的数据</p><h5 id="JSON格式"><a href="#JSON格式" class="headerlink" title="JSON格式"></a>JSON格式</h5><p>该格式里的data里最外围是[ ]</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;00000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;一切 ok&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;userEmail&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;targetName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;测试1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;targetDescribe&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hhh&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;targetColor&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;targetPoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;deadline&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;deadlineString&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ifPoints&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ifTargetNull&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ifTargetUpdate&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;targetId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1692785063700615169&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;userEmail&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;targetName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;测试2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;targetDescribe&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hhh&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;targetColor&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;targetPoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;deadline&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;deadlineString&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ifPoints&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ifTargetNull&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ifTargetUpdate&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;targetId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1692785123469447170&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ok&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p>在细节上该例子讲参数写死，并返回值，且传给后端的数据为text( let jsonData &#x3D; userEmail.data(using: .utf8) )</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TagDataManager.swift</span></span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应数据结构体，用于解码服务器响应的 JSON 数据</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ResponseData</span>: <span class="title class_">Decodable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data: [<span class="type">TagWithTime</span>]  <span class="comment">// 包含标签数组的数据字段</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标签结构体，用于解码标签数据</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TagWithTime</span>: <span class="title class_">Decodable</span>, <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> id: <span class="type">String</span>  <span class="comment">// 标签的唯一标识符，服务器返回的是字符串类型</span></span><br><span class="line">    <span class="keyword">let</span> tagName: <span class="type">String</span>  <span class="comment">// 标签名称</span></span><br><span class="line">    <span class="keyword">let</span> tagDescribe: <span class="type">String</span>  <span class="comment">// 标签描述</span></span><br><span class="line">    <span class="keyword">let</span> tagHour: <span class="type">String</span>  <span class="comment">// 标签时间的小时部分（字符串类型）</span></span><br><span class="line">    <span class="keyword">let</span> tagMinute: <span class="type">String</span>  <span class="comment">// 标签时间的分钟部分（字符串类型）</span></span><br><span class="line">    <span class="keyword">let</span> tagPoint: <span class="type">String</span>  <span class="comment">// 标签的积分值（字符串类型）</span></span><br><span class="line">    <span class="comment">// 其他字段省略，如果需要可以添加</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标签数据管理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TagDataManager</span> &#123;</span><br><span class="line">    <span class="comment">// 获取标签数据的方法</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">fetchTagData</span>(<span class="params">completion</span>: <span class="keyword">@escaping</span> ([<span class="type">TagWithTime</span>]<span class="operator">?</span>, <span class="type">Error</span>?) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="comment">// 定义请求的 URL</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://tengenchang.top/tag/get&quot;</span>) <span class="keyword">else</span> &#123;</span><br><span class="line">            completion(<span class="literal">nil</span>, <span class="literal">nil</span>)  <span class="comment">// 处理 URL 创建错误情况</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 准备请求参数</span></span><br><span class="line">        <span class="keyword">let</span> userEmail <span class="operator">=</span> <span class="string">&quot;3489044730@qq.com&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">// 将请求参数转换为 JSON 数据</span></span><br><span class="line">            <span class="keyword">let</span> jsonData <span class="operator">=</span> userEmail.data(using: .utf8)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 创建一个 URL 请求</span></span><br><span class="line">            <span class="keyword">var</span> request <span class="operator">=</span> <span class="type">URLRequest</span>(url: url)</span><br><span class="line">            request.httpMethod <span class="operator">=</span> <span class="string">&quot;POST&quot;</span>  <span class="comment">// 设置请求方法为 POST</span></span><br><span class="line">            request.setValue(<span class="string">&quot;application/json&quot;</span>, forHTTPHeaderField: <span class="string">&quot;Content-Type&quot;</span>)</span><br><span class="line">            request.httpBody <span class="operator">=</span> jsonData  <span class="comment">// 设置请求体为 JSON 数据</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 创建 URLSession 数据任务</span></span><br><span class="line">            <span class="type">URLSession</span>.shared.dataTask(with: request) &#123; data, response, error <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> data <span class="operator">=</span> data &#123;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="comment">// 解码服务器响应的 JSON 数据</span></span><br><span class="line">                        <span class="keyword">let</span> decodedResponse <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode(<span class="type">ResponseData</span>.<span class="keyword">self</span>, from: data)</span><br><span class="line">                        completion(decodedResponse.data, <span class="literal">nil</span>)  <span class="comment">// 将解码后的标签数据传递给回调闭包</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;JSON decoding error: <span class="subst">\(error)</span>&quot;</span>)</span><br><span class="line">                        completion(<span class="literal">nil</span>, error)  <span class="comment">// 处理解码错误情况</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> error <span class="operator">=</span> error &#123;</span><br><span class="line">                    completion(<span class="literal">nil</span>, error)  <span class="comment">// 处理网络请求错误情况</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;.resume()  <span class="comment">// 启动数据任务</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            completion(<span class="literal">nil</span>, error)  <span class="comment">// 处理其他错误情况</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//TagView.swift</span></span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TagView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> ifShowMenu:<span class="type">Bool</span><span class="operator">=</span><span class="literal">false</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> ifShowTarget:<span class="type">Bool</span><span class="operator">=</span><span class="literal">false</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> showWhichView:<span class="type">Int</span><span class="operator">=</span><span class="number">2</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> ifDelete:<span class="type">Bool</span><span class="operator">=</span><span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> tagWithTime: [<span class="type">TagWithTime</span>] <span class="operator">=</span> []</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> ifshowTagDetailBNull <span class="operator">=</span> <span class="literal">false</span> <span class="comment">//判断标签里是否有数据没有数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> tagDataManager <span class="operator">=</span> <span class="type">TagDataManager</span>()</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ZStack</span>&#123;</span><br><span class="line">            <span class="comment">// 目标视图的内容</span></span><br><span class="line">            <span class="type">VStack</span>&#123;</span><br><span class="line">                <span class="comment">//第一行的Nav</span></span><br><span class="line">                <span class="type">NavView</span>(ifShowMenu: <span class="variable">$ifShowMenu</span>,showWhichView:<span class="variable">$showWhichView</span>,ifDelete:<span class="variable">$ifDelete</span>)</span><br><span class="line">              <span class="comment">//获取的标签数据的展示处</span></span><br><span class="line">                <span class="type">ForEach</span>(tagWithTime, id: \.id) &#123; tag <span class="keyword">in</span></span><br><span class="line">  <span class="type">TagItemView</span>(ifDelete:<span class="variable">$ifDelete</span>,isShowingAlert:<span class="variable">$isShowingAlert</span>,tagName:tag.tagName,tagDescribe:tag.tagDescribe)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">//在页面出现时就调用获取标签数据的方法fetchTagData()</span></span><br><span class="line">        &#125;.onAppear &#123;</span><br><span class="line">             fetchTagData()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">fetchTagData</span>() &#123;</span><br><span class="line">            tagDataManager.fetchTagData &#123; fetchedData, error <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> fetchedData <span class="operator">=</span> fetchedData &#123;</span><br><span class="line">                    ifshowTagDetailBNull <span class="operator">=</span> fetchedData.isEmpty</span><br><span class="line">                    tagWithTime <span class="operator">=</span> fetchedData</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Error fetching data: <span class="subst">\(error<span class="operator">?</span>.localizedDescription <span class="operator">??</span> <span class="string">&quot;Unknown error&quot;</span>)</span>&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h4><p>在大体上该例子常用于删除数据</p><h5 id="JSON格式-1"><a href="#JSON格式-1" class="headerlink" title="JSON格式"></a>JSON格式</h5><p>该格式就是后端返回的值全是null</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="string">&quot;00000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;message&quot;</span>: <span class="string">&quot;一切 ok&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;userId&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;picUrl&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;tagName&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;tagDescribe&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;tagColor&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;tagPoint&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;tagHour&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;tagMinute&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;creatTime&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;userEmail&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;ifRepeat&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;ifTagNull&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;ifTagUpdate&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;tagId&quot;</span>: null</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;ok&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><p>在细节上该例子不返回任何参数，这里data明明由{ }包裹，但是却使用[TagWithTime]类型解密，还没有报错的原因在于，该方法的并不需要访问里面的数据，completion也不返回[TagWithTime]，，所以可以这么使用，不能使用[TagWithTime]类型解密的例子为例子4</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TagDataManager.swift</span></span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TagResponseData</span>: <span class="title class_">Decodable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data: [<span class="type">TagWithTime</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TagWithTime</span>: <span class="title class_">Decodable</span>, <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> id: <span class="type">String</span>?  <span class="comment">// 注意这里的 id 是 String 类型，因为服务器返回的数据是 String</span></span><br><span class="line">    <span class="keyword">let</span> tagName: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">let</span> tagDescribe: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">let</span> tagHour: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">let</span> tagMinute: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">let</span> tagPoint: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">let</span> ifTagNull:<span class="type">String</span>?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TagDataManager</span> &#123;</span><br><span class="line">    <span class="comment">// 删除标签的方法</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">deleteTag</span>(<span class="params">tagName</span>: <span class="type">String</span>, <span class="params">completion</span>: <span class="keyword">@escaping</span> (<span class="type">Error</span>?) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="comment">// 定义请求的 URL</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://tengenchang.top/tag/delete&quot;</span>) <span class="keyword">else</span> &#123;</span><br><span class="line">            completion(<span class="literal">nil</span>) <span class="comment">// 处理错误情况</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 准备请求参数</span></span><br><span class="line">        <span class="keyword">let</span> tagName <span class="operator">=</span> tagName</span><br><span class="line">        <span class="comment">// 将请求参数转换为 JSON 数据</span></span><br><span class="line">        <span class="keyword">let</span> jsonData <span class="operator">=</span> tagName.data(using: .utf8)</span><br><span class="line">        <span class="comment">// 创建一个 URL 请求</span></span><br><span class="line">        <span class="keyword">var</span> request <span class="operator">=</span> <span class="type">URLRequest</span>(url: url)</span><br><span class="line">    </span><br><span class="line">        request.httpMethod <span class="operator">=</span> <span class="string">&quot;POST&quot;</span> <span class="comment">// 设置请求方法为 POST</span></span><br><span class="line">        request.setValue(<span class="string">&quot;application/json&quot;</span>, forHTTPHeaderField: <span class="string">&quot;Content-Type&quot;</span>)</span><br><span class="line">        request.httpBody <span class="operator">=</span> jsonData <span class="comment">// 设置请求体为 JSON 数据</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建 URLSession 数据任务</span></span><br><span class="line">        <span class="type">URLSession</span>.shared.dataTask(with: request) &#123; <span class="keyword">_</span>, <span class="keyword">_</span>, error <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> error <span class="operator">=</span> error &#123;</span><br><span class="line">                completion(error)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                completion(<span class="literal">nil</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.resume() <span class="comment">// 启动数据任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//TagItemView.swift</span></span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TagItemView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> tagDataManager <span class="operator">=</span> <span class="type">TagDataManager</span>()</span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> tagWithTime:[<span class="type">TagWithTime</span>]</span><br><span class="line">    <span class="keyword">let</span> tagTimeIndex:<span class="type">Int</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ifDelete&#123;</span><br><span class="line">                <span class="type">Button</span>&#123;</span><br><span class="line">                    isShowingAlert <span class="operator">=</span> <span class="literal">true</span> <span class="comment">// 点击按钮时设置弹窗显示状态为 true</span></span><br><span class="line">                &#125;label: &#123;</span><br><span class="line">                    <span class="type">Image</span>(<span class="string">&quot;x&quot;</span>)</span><br><span class="line">                        .resizable()</span><br><span class="line">                        .scaledToFit()</span><br><span class="line">                        .frame(width: <span class="number">12</span>,height: <span class="number">12</span>)</span><br><span class="line">                &#125;.alert(isPresented: <span class="variable">$isShowingAlert</span>) &#123;</span><br><span class="line">                    <span class="type">Alert</span>(</span><br><span class="line">                        title: <span class="type">Text</span>(<span class="string">&quot;确定要删除吗？&quot;</span>), <span class="comment">// 弹窗标题</span></span><br><span class="line">                        message: <span class="type">Text</span>(<span class="string">&quot;删除后将会从您的标签移除数据&quot;</span>), <span class="comment">// 弹窗消息</span></span><br><span class="line">                        primaryButton: .default(<span class="type">Text</span>(<span class="string">&quot;确定&quot;</span>), action: &#123;</span><br><span class="line">                            <span class="comment">// 在确定按钮点击时执行的操作</span></span><br><span class="line">                            deleteTag(tagName: tagName,tagTimeIndex:tagTimeIndex)</span><br><span class="line">                        &#125;),</span><br><span class="line">                        secondaryButton: .cancel(<span class="type">Text</span>(<span class="string">&quot;取消&quot;</span>)) <span class="comment">// 弹窗的取消按钮</span></span><br><span class="line">                    )</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">deleteTag</span>(<span class="params">tagName</span>:<span class="type">String</span>,<span class="params">tagTimeIndex</span>:<span class="type">Int</span>)&#123;</span><br><span class="line">        tagDataManager.deleteTag(tagName: tagName) &#123; error <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> error <span class="operator">==</span> <span class="literal">nil</span> &#123;</span><br><span class="line">                deleteSuccess<span class="operator">=</span><span class="literal">true</span></span><br><span class="line">                tagNum<span class="operator">-=</span><span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> tagNum<span class="operator">==</span><span class="number">0</span>&#123;</span><br><span class="line">                    ifshowTagDetailBNull<span class="operator">=</span><span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">                tagWithTime.remove(at: tagTimeIndex)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;删除标签成功&quot;</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;删除标签失败&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例子3"><a href="#例子3" class="headerlink" title="例子3"></a>例子3</h4><p>在大体上该例子用于检验用户是否注册，利用completion返回Int，方便用户直接跳转到登录界面或者注册界面</p><h5 id="JSON格式-2"><a href="#JSON格式-2" class="headerlink" title="JSON格式"></a>JSON格式</h5><p>该格式就是后端的代码就是return null</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户注册过</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;00000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;一切 ok&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;userName&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;picData&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;picUrl&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;userEmail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3489044730@qq.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;userPassword&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;userCode&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;completeTarget&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;point&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ifUpdate&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;openId&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ok&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用户没有注册过</span></span><br><span class="line"><span class="comment">//直接没有任何返回值</span></span><br></pre></td></tr></table></figure><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><p>在细节上该例子传入的参数是动态的，返回简单参数如(Int)，利用completion返回起来简单，且使用时直接调用方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UserDataManager.swift</span></span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UserResponseData</span>: <span class="title class_">Decodable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> code: <span class="type">String</span>?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserDataManager</span>&#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">checkEmail</span>(<span class="params">email</span>: <span class="type">String</span>, <span class="params">completion</span>: <span class="keyword">@escaping</span> (<span class="type">Int</span>) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://tengenchang.top/user/home&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            completion(<span class="number">12</span>) <span class="comment">// URL错误的情况下的备用值</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 准备请求参数</span></span><br><span class="line">        <span class="keyword">let</span> userEmail <span class="operator">=</span> email</span><br><span class="line">        <span class="comment">// 将请求参数转换为 JSON 数据</span></span><br><span class="line">        <span class="keyword">let</span> jsonData <span class="operator">=</span>  userEmail.data(using: .utf8)</span><br><span class="line">        <span class="comment">// 创建一个 URL 请求</span></span><br><span class="line">        <span class="keyword">var</span> request <span class="operator">=</span> <span class="type">URLRequest</span>(url: url)</span><br><span class="line">            </span><br><span class="line">        request.httpMethod <span class="operator">=</span> <span class="string">&quot;POST&quot;</span> <span class="comment">// 设置请求方法为 POST</span></span><br><span class="line">        request.setValue(<span class="string">&quot;application/json&quot;</span>, forHTTPHeaderField: <span class="string">&quot;Content-Type&quot;</span>)</span><br><span class="line">        request.httpBody <span class="operator">=</span> jsonData <span class="comment">// 设置请求体为 JSON 数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 假设您使用URLSession进行API请求</span></span><br><span class="line">        <span class="type">URLSession</span>.shared.dataTask(with: request) &#123; data, response, error <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> data <span class="operator">=</span> data &#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> decodedData <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode(<span class="type">UserResponseData</span>.<span class="keyword">self</span>, from: data)</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> code <span class="operator">=</span> decodedData.code &#123;</span><br><span class="line">                        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                            <span class="keyword">if</span> code <span class="operator">==</span> <span class="string">&quot;nil&quot;</span> &#123;</span><br><span class="line">                                completion(<span class="number">12</span>)</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                completion(<span class="number">11</span>)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">                    <span class="built_in">print</span>(error)</span><br><span class="line">                    completion(<span class="number">12</span>) <span class="comment">// 错误情况</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.resume()</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//HomeView.swift</span></span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HomeView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@EnvironmentObject</span> <span class="keyword">private</span> <span class="keyword">var</span> userData: <span class="type">UserData</span></span><br><span class="line">  <span class="keyword">let</span> userDataManager <span class="operator">=</span> <span class="type">UserDataManager</span>() <span class="comment">// 实例化UserDataManager</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(alignment: .leading,spacing: <span class="number">20</span>)&#123;</span><br><span class="line">            <span class="type">Button</span>&#123;</span><br><span class="line">              <span class="comment">//isValidQQEmailFormat为检验QQ邮箱的合法性</span></span><br><span class="line">                <span class="keyword">let</span> isValidQQEmail <span class="operator">=</span> isValidQQEmailFormat(email: userData.userEmail)</span><br><span class="line">                <span class="keyword">if</span> isValidQQEmail&#123;</span><br><span class="line">                  <span class="comment">//这里使用了API请求的checkEmail方法</span></span><br><span class="line">                  <span class="comment">//并直接返回了retrurnShowWhichView的值，方便用户直接跳转到登录界面或者注册界面</span></span><br><span class="line">                    userDataManager.checkEmail(email: userData.userEmail) &#123; retrurnShowWhichView <span class="keyword">in</span></span><br><span class="line">                        showWhichView <span class="operator">=</span> retrurnShowWhichView</span><br><span class="line">                        timerTriggered <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    ifshowTextAlert<span class="operator">=</span><span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;label: &#123;</span><br><span class="line">                <span class="type">HStack</span>()&#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;继续&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.padding(<span class="number">15</span>)</span><br><span class="line">            .overlay &#123;</span><br><span class="line">                <span class="keyword">if</span> ifshowTextAlert&#123;</span><br><span class="line">                    <span class="type">TextAlertView</span>(textContant:<span class="variable">$textContant</span>,ifshowTextAlert:<span class="variable">$ifshowTextAlert</span>)</span><br><span class="line">                        </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例子4"><a href="#例子4" class="headerlink" title="例子4"></a>例子4</h4><p>大体上该例子作用于获取该用户的账户信息，一般不是数组</p><h5 id="JSON格式-3"><a href="#JSON格式-3" class="headerlink" title="JSON格式"></a>JSON格式</h5><p>注意json返回的数据不是数组，且要获取里面的数据时时，不要为结构体或者类加上[]</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="string">&quot;00000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;message&quot;</span>: <span class="string">&quot;一切 ok&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;userId&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;point&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;pointType&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;pointName&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;pointDescribe&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;pointDate&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;userEmail&quot;</span>: <span class="string">&quot;3489044730@qq.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userTimeP&quot;</span>: <span class="string">&quot;过去一天&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pointAll&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;progress&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pointInsistence&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pointAverage&quot;</span>: <span class="string">&quot;0.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;completeTarget&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;completeTargetRate&quot;</span>: <span class="string">&quot;0.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ifProgress&quot;</span>: null</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;ok&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><p>在细节上该例子解析出来的数据放在类里面，而不是数组，注意拆包和初始化时候的使用可选项</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//StoreDataManager.swift</span></span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PointRecordResponseData</span>: <span class="title class_">Decodable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data: <span class="type">PointRecordData</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里用结构体也可以</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PointRecordData</span>:<span class="title class_">Decodable</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> userTimeP, pointAll, progress: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> pointInsistence, pointAverage, completeTarget, completeTargetRate: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserDataManager</span>&#123;</span><br><span class="line">    <span class="comment">// 获取用户目标完成情况的方法</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">fetchPointRecordData</span>(<span class="params">userTimeP</span>:<span class="type">String</span>,<span class="params">completion</span>: <span class="keyword">@escaping</span> (<span class="type">PointRecordData</span>?, <span class="type">Error</span>?) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="comment">// 定义请求的 URL</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://tengenchang.top/pointRecord/get&quot;</span>) <span class="keyword">else</span> &#123;</span><br><span class="line">            completion(<span class="literal">nil</span>, <span class="literal">nil</span>) <span class="comment">// 处理错误情况</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 准备请求参数</span></span><br><span class="line">        <span class="keyword">let</span> userEmail <span class="operator">=</span> <span class="string">&quot;3489044730@qq.com&quot;</span></span><br><span class="line">        <span class="keyword">let</span> userTimeP<span class="operator">=</span>userTimeP</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//转化为JSON格式</span></span><br><span class="line">        <span class="keyword">let</span> parameters: [<span class="type">String</span>: <span class="keyword">Any</span>] <span class="operator">=</span> [<span class="string">&quot;userEmail&quot;</span>: userEmail, <span class="string">&quot;userTimeP&quot;</span>: userTimeP]</span><br><span class="line">        <span class="comment">// 将请求参数转换为 JSON 数据</span></span><br><span class="line">        <span class="keyword">let</span> jsonData <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">JSONSerialization</span>.data(withJSONObject: parameters)</span><br><span class="line">        <span class="comment">// 创建一个 URL 请求</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">var</span> request <span class="operator">=</span> <span class="type">URLRequest</span>(url: url)</span><br><span class="line">            </span><br><span class="line">        request.httpMethod <span class="operator">=</span> <span class="string">&quot;POST&quot;</span> <span class="comment">// 设置请求方法为 POST</span></span><br><span class="line">        request.setValue(<span class="string">&quot;application/json&quot;</span>, forHTTPHeaderField: <span class="string">&quot;Content-Type&quot;</span>)</span><br><span class="line">        request.httpBody <span class="operator">=</span> jsonData <span class="comment">// 设置请求体为 JSON 数据</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment">// 创建 URLSession 数据任务</span></span><br><span class="line">        <span class="type">URLSession</span>.shared.dataTask(with: request) &#123; data, response, error <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> data <span class="operator">=</span> data &#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="comment">// 解码服务器响应的数据</span></span><br><span class="line">                    <span class="keyword">let</span> decodedResponse <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode(<span class="type">PointRecordResponseData</span>.<span class="keyword">self</span>, from: data)</span><br><span class="line">                        completion(decodedResponse.data, <span class="literal">nil</span>)</span><br><span class="line">                &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;JSON decoding error: <span class="subst">\(error)</span>&quot;</span>)</span><br><span class="line">                    completion(<span class="literal">nil</span>, error)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> error <span class="operator">=</span> error &#123;</span><br><span class="line">                completion(<span class="literal">nil</span>, error)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.resume() <span class="comment">// 启动数据任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//UserView.swift</span></span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UserView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> userDataManager <span class="operator">=</span> <span class="type">UserDataManager</span>() <span class="comment">// 实例化UserDataManager</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> userTimeP:<span class="type">String</span><span class="operator">=</span><span class="string">&quot;过去一周&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> pointRecordData:<span class="type">PointRecordData</span>?</span><br><span class="line">    <span class="keyword">let</span> pointAll:<span class="type">String</span><span class="operator">=</span><span class="string">&quot;10&quot;</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ZStack</span>&#123;</span><br><span class="line">            <span class="comment">// 目标视图的内容</span></span><br><span class="line">            <span class="type">VStack</span>&#123;</span><br><span class="line">                <span class="type">ZStack</span>&#123;</span><br><span class="line">                    <span class="type">VStack</span>(alignment: .leading)&#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;获取分数&quot;</span>)</span><br><span class="line">                        <span class="type">HStack</span>&#123;</span><br><span class="line">                            <span class="type">Text</span>((pointRecordData<span class="operator">?</span>.pointAll) <span class="operator">??</span> <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;努力的<span class="subst">\(String(userTimeP.suffix(<span class="number">2</span>)))</span>！&quot;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">ZStack</span>&#123;</span><br><span class="line">                    <span class="type">VStack</span>(alignment: .leading)&#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;进步&quot;</span>)</span><br><span class="line">                        <span class="type">HStack</span>&#123;</span><br><span class="line">                            <span class="type">Text</span>((pointRecordData<span class="operator">?</span>.progress) <span class="operator">??</span> <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="type">HStack</span>&#123;</span><br><span class="line">                    <span class="type">VStack</span>&#123;</span><br><span class="line">                        <span class="type">VStack</span>(alignment: .leading)&#123;</span><br><span class="line">                            <span class="type">HStack</span>&#123;</span><br><span class="line">                                <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\((pointRecordData<span class="operator">?</span>.pointInsistence) <span class="operator">??</span> <span class="string">&quot;0&quot;</span>)</span><span class="subst">\n</span>连续得分&quot;</span>)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="type">VStack</span>(alignment: .leading)&#123;</span><br><span class="line">                            <span class="type">HStack</span>&#123;</span><br><span class="line">                                <span class="type">VStack</span>&#123;</span><br><span class="line">                                    <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\((pointRecordData<span class="operator">?</span>.completeTargetRate) <span class="operator">??</span> <span class="string">&quot;0.0&quot;</span>)</span>%&quot;</span>)</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">VStack</span>&#123;</span><br><span class="line">                        <span class="type">VStack</span>(alignment: .leading)&#123;</span><br><span class="line">                            <span class="type">HStack</span>&#123;</span><br><span class="line">                                <span class="type">VStack</span>&#123;</span><br><span class="line">                                    <span class="type">Text</span>((pointRecordData<span class="operator">?</span>.pointAverage) <span class="operator">??</span> <span class="string">&quot;0.0&quot;</span>)</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        <span class="type">VStack</span>(alignment: .leading)&#123;</span><br><span class="line">                            <span class="type">HStack</span>&#123;</span><br><span class="line">                                <span class="type">VStack</span>&#123;</span><br><span class="line">                                    <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\((pointRecordData<span class="operator">?</span>.completeTarget) <span class="operator">??</span> <span class="string">&quot;0&quot;</span>)</span>个目标&quot;</span>)</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>  ifShowUserMenu&#123;</span><br><span class="line">                <span class="comment">//下面是targetMenu,使用fetchPointRecordData()方法</span></span><br><span class="line">                <span class="keyword">if</span> userTimeP<span class="operator">==</span><span class="string">&quot;过去一周&quot;</span>&#123;</span><br><span class="line">                    <span class="type">VStack</span>&#123;</span><br><span class="line">                        <span class="type">Button</span>&#123;</span><br><span class="line">                            userTimeP<span class="operator">=</span><span class="string">&quot;过去一天&quot;</span></span><br><span class="line">                            fetchPointRecordData()</span><br><span class="line">                        &#125;label: &#123;</span><br><span class="line">                            <span class="type">Text</span>(<span class="string">&quot;过去一天&quot;</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="type">Button</span>&#123;</span><br><span class="line">                            userTimeP<span class="operator">=</span><span class="string">&quot;过去一月&quot;</span></span><br><span class="line">                            fetchPointRecordData()</span><br><span class="line">                        &#125;label: &#123;</span><br><span class="line">                            <span class="type">Text</span>(<span class="string">&quot;过去一月&quot;</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">fetchPointRecordData</span>() &#123;</span><br><span class="line">        userDataManager.fetchPointRecordData(userTimeP: userTimeP) &#123; fetchedData, error <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> fetchedData <span class="operator">=</span> fetchedData &#123;</span><br><span class="line">                pointRecordData<span class="operator">=</span>fetchedData</span><br><span class="line">                <span class="built_in">print</span>((pointRecordData<span class="operator">?</span>.pointAll)<span class="operator">!</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Error fetching data: <span class="subst">\(error<span class="operator">?</span>.localizedDescription <span class="operator">??</span> <span class="string">&quot;Unknown error&quot;</span>)</span>&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自定义文字弹窗提示"><a href="#自定义文字弹窗提示" class="headerlink" title="自定义文字弹窗提示"></a>自定义文字弹窗提示</h3><p>因为swiftui中只有alert，且这个视图在官方的规定下是必定要有按钮的，所以为了满足项目的需求，我进行了自定义的文字弹窗提示，该弹窗还会在几秒后自动消失</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要使用时只需要overlay在最外部的视图就行</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TextAlertView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="comment">//这里控制了视图的计时消失</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> isTextVisible <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> textContant:<span class="type">String</span></span><br><span class="line">    <span class="comment">//这里的变量ifshowTextAlert使得该视图能在需要时多次出现</span></span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> ifshowTextAlert:<span class="type">Bool</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> isTextVisible &#123;</span><br><span class="line">                <span class="type">Text</span>(textContant)</span><br><span class="line">                    .foregroundColor(<span class="type">Color</span>.white)</span><br><span class="line">                    .padding([.top,.bottom],<span class="number">10</span>)</span><br><span class="line">                    .padding([.leading,.trailing],<span class="number">15</span>)</span><br><span class="line">                    .background(<span class="type">Color</span>.secondary)</span><br><span class="line">                    .cornerRadius(<span class="number">10</span>)</span><br><span class="line">                    .onAppear &#123;</span><br><span class="line">                        <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class="operator">+</span> <span class="number">0.6</span>) &#123;</span><br><span class="line">                            withAnimation &#123;</span><br><span class="line">                                isTextVisible <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            ifshowTextAlert<span class="operator">=</span><span class="literal">false</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="foreach两种方式获得index"><a href="#foreach两种方式获得index" class="headerlink" title="foreach两种方式获得index"></a>foreach两种方式获得index</h3><p>1、利用Array包装数组获取到index,该方法获取元素使用类似target.targetName的方式</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ForEach</span>(<span class="type">Array</span>(targetNoTime.enumerated()), id: \.element.id) &#123; (index, target) <span class="keyword">in</span></span><br><span class="line">    <span class="type">TargetItemView</span>(targetName: target.targetName<span class="operator">!</span>,</span><br><span class="line">                   targetDescribe: target.targetDescribe<span class="operator">!</span>,</span><br><span class="line">                   targetId: target.targetId<span class="operator">!</span>,</span><br><span class="line">                   targetPoint:target.targetPoint<span class="operator">!</span> ,</span><br><span class="line">                   targetStatus: target.status<span class="operator">!</span>,</span><br><span class="line">                   targetTimeIndex:index</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、使用数组方法中的.indices，获取到index，该方法获取元素使用类似tagWithTime[index].tagName的方式</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ForEach</span>(tagWithTime.indices, id: \.<span class="keyword">self</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">    <span class="type">TagItemView</span>(tagName: tagWithTime[index].tagName<span class="operator">!</span>,</span><br><span class="line">                tagDescribe:tagWithTime[index].tagDescribe<span class="operator">!</span>,</span><br><span class="line">                tagWithTime:<span class="variable">$tagWithTime</span>,</span><br><span class="line">                tagTimeIndex:index)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义横向日期显示</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TargetNav1View</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> calendar <span class="operator">=</span> <span class="type">Calendar</span>.current</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> dateFormatter: <span class="type">DateFormatter</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> formatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">        formatter.dateFormat <span class="operator">=</span> <span class="string">&quot;E&quot;</span> <span class="comment">// 日期格式化器，用于获取星期几的缩写</span></span><br><span class="line">        <span class="keyword">return</span> formatter</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> selectedDayIndex <span class="operator">=</span> <span class="number">0</span> <span class="comment">// 当前选中的VStack索引</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ScrollView</span>(.horizontal, showsIndicators: <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="type">HStack</span>(spacing: <span class="number">18</span>) &#123;</span><br><span class="line">                <span class="type">ForEach</span>(<span class="number">0</span><span class="operator">..&lt;</span><span class="number">30</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">                    <span class="type">VStack</span> &#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="keyword">self</span>.dayName(for: index))</span><br><span class="line">                            .foregroundColor(<span class="keyword">self</span>.selectedDayIndex <span class="operator">==</span> index <span class="operator">?</span> .black : .secondary)</span><br><span class="line">                            .font(.system(size: <span class="number">12</span>)) <span class="comment">// 设置星期几文本的字体大小</span></span><br><span class="line">                        <span class="type">Text</span>(<span class="keyword">self</span>.dayNumber(for: index))</span><br><span class="line">                            .frame(width: <span class="number">36</span>, height: <span class="number">36</span>)</span><br><span class="line">                            .foregroundColor(<span class="type">Color</span>(rgba: (<span class="number">207</span>, <span class="number">200</span>, <span class="number">255</span>, <span class="number">1</span>)))</span><br><span class="line">                            .background(</span><br><span class="line">                                <span class="type">LinearGradient</span>(</span><br><span class="line">                                    gradient: <span class="type">Gradient</span>(</span><br><span class="line">                                        colors: <span class="keyword">self</span>.gradientColors(for: index)</span><br><span class="line">                                    ),</span><br><span class="line">                                    startPoint: .top,</span><br><span class="line">                                    endPoint: .bottom</span><br><span class="line">                                )</span><br><span class="line">                            )</span><br><span class="line">                            .cornerRadius(<span class="number">22.5</span>)</span><br><span class="line">                            .onTapGesture &#123; <span class="comment">// 添加点击手势</span></span><br><span class="line">                                <span class="keyword">self</span>.selectedDayIndex <span class="operator">=</span> index <span class="comment">// 更新选中的索引</span></span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    .cornerRadius(<span class="number">22.5</span>) <span class="comment">// 设置VStack的圆角</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .padding(.top, <span class="number">20</span>) <span class="comment">// 设置顶部内边距</span></span><br><span class="line">        &#125;.padding([.leading,.trailing],<span class="number">20</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">dayName</span>(<span class="params">for</span> <span class="params">index</span>: <span class="type">Int</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> currentDate <span class="operator">=</span> calendar.date(byAdding: .day, value: index, to: <span class="type">Date</span>()) <span class="operator">??</span> <span class="type">Date</span>()</span><br><span class="line">        <span class="keyword">return</span> dateFormatter.string(from: currentDate) <span class="comment">// 获取星期几的缩写文本</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">dayNumber</span>(<span class="params">for</span> <span class="params">index</span>: <span class="type">Int</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> currentDate <span class="operator">=</span> calendar.date(byAdding: .day, value: index, to: <span class="type">Date</span>()) <span class="operator">??</span> <span class="type">Date</span>()</span><br><span class="line">        <span class="keyword">let</span> day <span class="operator">=</span> calendar.component(.day, from: currentDate) <span class="comment">// 获取日期的天数部分</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;<span class="subst">\(day)</span>&quot;</span> <span class="comment">// 将天数转换为字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">gradientColors</span>(<span class="params">for</span> <span class="params">index</span>: <span class="type">Int</span>) -&gt; [<span class="type">Color</span>] &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.selectedDayIndex <span class="operator">==</span> index &#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="type">Color</span>(red: <span class="number">142</span><span class="operator">/</span><span class="number">255</span>, green: <span class="number">150</span><span class="operator">/</span><span class="number">255</span>, blue: <span class="number">255</span><span class="operator">/</span><span class="number">255</span>),</span><br><span class="line">                <span class="type">Color</span>(red: <span class="number">108</span><span class="operator">/</span><span class="number">255</span>, green: <span class="number">93</span><span class="operator">/</span><span class="number">255</span>, blue: <span class="number">211</span><span class="operator">/</span><span class="number">255</span>)</span><br><span class="line">            ] <span class="comment">// 如果选中，返回选中时的渐变色</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="type">Color</span>.clear,</span><br><span class="line">                <span class="type">Color</span>.clear</span><br><span class="line">            ] <span class="comment">// 如果未选中，返回透明颜色</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自定义日期比较器"><a href="#自定义日期比较器" class="headerlink" title="自定义日期比较器"></a>自定义日期比较器</h3><p>难点有两个，第一点是仅关注日期部分，忽略时间的影响，解决方法是把传进来的时间设置为0小时、0分钟、0秒，来忽略小时和分钟对日期差的干扰，并且用calendar.dateComponents(_:from:to:)来计算目标日期和选定日期的月份和日子的差异，第二点在于进入目标页面时间差的初值问题，解决方法是在获取数据时，直接调用求时间差的方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TargetNav1View.swift</span></span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TargetNav1View</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> selectedDate: <span class="type">Date</span><span class="operator">=</span><span class="type">Date</span>() <span class="comment">// 接收初始日期的参数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> calendar <span class="operator">=</span> <span class="type">Calendar</span>.current</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> dateFormatter: <span class="type">DateFormatter</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> formatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">        formatter.dateFormat <span class="operator">=</span> <span class="string">&quot;E&quot;</span> <span class="comment">// 日期格式化器，用于获取星期几的缩写</span></span><br><span class="line">        <span class="keyword">return</span> formatter</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> selectedDayIndex <span class="operator">=</span> <span class="number">0</span> <span class="comment">// 当前选中的VStack索引</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> onDateSelected: ((<span class="type">Date</span>) -&gt; <span class="type">Void</span>)<span class="operator">?</span> <span class="comment">// 用于接收选中日期的闭包</span></span><br><span class="line">    <span class="comment">// 初始化时执行计算逻辑</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ScrollView</span>(.horizontal, showsIndicators: <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="type">HStack</span>(spacing: <span class="number">18</span>) &#123;</span><br><span class="line">                <span class="type">ForEach</span>(<span class="number">0</span><span class="operator">..&lt;</span><span class="number">30</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">                    <span class="type">VStack</span> &#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="keyword">self</span>.dayName(for: index))</span><br><span class="line">                            .foregroundColor(</span><br><span class="line">                                <span class="keyword">self</span>.selectedDayIndex <span class="operator">==</span> index <span class="operator">?</span> .black : .secondary</span><br><span class="line">                            )</span><br><span class="line">                            .font(.system(size: <span class="number">12</span>)) <span class="comment">// 设置星期几文本的字体大小</span></span><br><span class="line">                        <span class="type">Text</span>(<span class="keyword">self</span>.dayNumber(for: index))</span><br><span class="line">                            .frame(width: <span class="number">36</span>, height: <span class="number">36</span>)</span><br><span class="line">                            .foregroundColor(<span class="type">Color</span>(rgba: (<span class="number">207</span>, <span class="number">200</span>, <span class="number">255</span>, <span class="number">1</span>)))</span><br><span class="line">                            .background(</span><br><span class="line">                                <span class="type">LinearGradient</span>(</span><br><span class="line">                                    gradient: <span class="type">Gradient</span>(</span><br><span class="line">                                        colors: <span class="keyword">self</span>.gradientColors(for: index)</span><br><span class="line">                                    ),</span><br><span class="line">                                    startPoint: .top,</span><br><span class="line">                                    endPoint: .bottom</span><br><span class="line">                                )</span><br><span class="line">                            )</span><br><span class="line">                            .cornerRadius(<span class="number">22.5</span>)</span><br><span class="line">                        </span><br><span class="line">                            <span class="comment">// 添加点击手势</span></span><br><span class="line">                            .onTapGesture &#123;</span><br><span class="line">                                <span class="keyword">self</span>.selectedDayIndex <span class="operator">=</span> index <span class="comment">// 更新选中的索引</span></span><br><span class="line">                                <span class="keyword">if</span> <span class="keyword">let</span> selectedDate <span class="operator">=</span> <span class="keyword">self</span>.calendar.date(byAdding: .day, value: index, to: <span class="type">Date</span>()) &#123;</span><br><span class="line">                                    <span class="keyword">self</span>.onDateSelected<span class="operator">?</span>(selectedDate) <span class="comment">// 调用闭包，并传递选中的日期</span></span><br><span class="line">                                &#125;</span><br><span class="line">                                </span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    .cornerRadius(<span class="number">22.5</span>) <span class="comment">// 设置VStack的圆角</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .padding(.top, <span class="number">20</span>) <span class="comment">// 设置顶部内边距</span></span><br><span class="line">        &#125;.padding([.leading,.trailing],<span class="number">20</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">dayName</span>(<span class="params">for</span> <span class="params">index</span>: <span class="type">Int</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> currentDate <span class="operator">=</span> calendar.date(byAdding: .day, value: index, to: <span class="type">Date</span>()) <span class="operator">??</span> <span class="type">Date</span>()</span><br><span class="line">        <span class="keyword">return</span> dateFormatter.string(from: currentDate) <span class="comment">// 获取星期几的缩写文本</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">dayNumber</span>(<span class="params">for</span> <span class="params">index</span>: <span class="type">Int</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> currentDate <span class="operator">=</span> calendar.date(byAdding: .day, value: index, to: <span class="type">Date</span>()) <span class="operator">??</span> <span class="type">Date</span>()</span><br><span class="line">        <span class="keyword">let</span> day <span class="operator">=</span> calendar.component(.day, from: currentDate) <span class="comment">// 获取日期的天数部分</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;<span class="subst">\(day)</span>&quot;</span> <span class="comment">// 将天数转换为字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">gradientColors</span>(<span class="params">for</span> <span class="params">index</span>: <span class="type">Int</span>) -&gt; [<span class="type">Color</span>] &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.selectedDayIndex <span class="operator">==</span> index &#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="type">Color</span>(red: <span class="number">142</span><span class="operator">/</span><span class="number">255</span>, green: <span class="number">150</span><span class="operator">/</span><span class="number">255</span>, blue: <span class="number">255</span><span class="operator">/</span><span class="number">255</span>),</span><br><span class="line">                <span class="type">Color</span>(red: <span class="number">108</span><span class="operator">/</span><span class="number">255</span>, green: <span class="number">93</span><span class="operator">/</span><span class="number">255</span>, blue: <span class="number">211</span><span class="operator">/</span><span class="number">255</span>)</span><br><span class="line">            ] <span class="comment">// 如果选中，返回选中时的渐变色</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="type">Color</span>.clear,</span><br><span class="line">                <span class="type">Color</span>.clear</span><br><span class="line">            ] <span class="comment">// 如果未选中，返回透明颜色</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//TargetView.swift</span></span><br><span class="line"><span class="comment">//这里只是部分代码，在网页一开始初始化的代码没有不一样，所以只给个关键部分</span></span><br><span class="line"><span class="type">TargetNav1View</span>(onDateSelected: &#123; selectedDate <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>targetWithTime.count &#123;</span><br><span class="line">        targetDateInfo.append(<span class="type">TargetDateInfo</span>(dayDifference: <span class="number">0</span>, timeString: <span class="string">&quot;&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> calendar <span class="operator">=</span> <span class="type">Calendar</span>.current</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="keyword">self</span>.targetWithTime.count &#123;</span><br><span class="line">        <span class="built_in">print</span>(index)</span><br><span class="line">        <span class="keyword">let</span> dateFormatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">        <span class="comment">// 给出将String类型转化为Date类型的格式</span></span><br><span class="line">        dateFormatter.dateFormat <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将deadline字符串转换为日期对象</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> deadlineDate <span class="operator">=</span> dateFormatter.date(from: <span class="keyword">self</span>.targetWithTime[index].deadline<span class="operator">!</span>),</span><br><span class="line">            <span class="keyword">let</span> startDate <span class="operator">=</span> calendar.date(bySettingHour: <span class="number">0</span>, minute: <span class="number">0</span>, second: <span class="number">0</span>, of: selectedDate) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;startDate:&quot;</span>,startDate)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 获取目标日期的月份和日子</span></span><br><span class="line">            <span class="keyword">let</span> deadlineComponents <span class="operator">=</span> calendar.dateComponents([.month, .day], from: deadlineDate)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 获取选定日期的月份和日子</span></span><br><span class="line">            <span class="keyword">let</span> selectedComponents <span class="operator">=</span> calendar.dateComponents([.month, .day], from: startDate)</span><br><span class="line">              </span><br><span class="line">            <span class="comment">// 用calendar.dateComponents(_:from:to:)来计算目标日期和选定日期的月份和日子的差异。这样，您就可以得到只有月份和日子的差异，而不考虑时间部分的影响。</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> dayDifference <span class="operator">=</span> calendar.dateComponents([.day], from: selectedComponents, to: deadlineComponents).day &#123;</span><br><span class="line">                <span class="keyword">self</span>.dayDifference <span class="operator">=</span> dayDifference</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;index:&quot;</span>,index)</span><br><span class="line">                targetDateInfo[index].dayDifference <span class="operator">=</span> dayDifference</span><br><span class="line">                targetDateInfo[index].timeString <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> dayDifference <span class="operator">&lt;</span> <span class="number">0</span> &#123;</span><br><span class="line">                    <span class="comment">// 相差小于0天，显示截止时间的月份和日子</span></span><br><span class="line">                    <span class="keyword">let</span> monthDayFormatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">                    monthDayFormatter.dateFormat <span class="operator">=</span> <span class="string">&quot;MM.dd&quot;</span></span><br><span class="line">                    <span class="keyword">let</span> monthDayString <span class="operator">=</span> monthDayFormatter.string(from: deadlineDate)</span><br><span class="line">                    <span class="keyword">self</span>.monthDayString <span class="operator">=</span> monthDayString</span><br><span class="line">                    targetDateInfo[index].timeString <span class="operator">=</span> monthDayString</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Month and Day: <span class="subst">\(monthDayString)</span>&quot;</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> dayDifference <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">                    <span class="comment">// 相差等于0天，显示截止时间的时间部分</span></span><br><span class="line">                    <span class="keyword">let</span> timeFormatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">                    timeFormatter.dateFormat <span class="operator">=</span> <span class="string">&quot;HH:mm&quot;</span></span><br><span class="line">                    <span class="keyword">let</span> timeString <span class="operator">=</span> timeFormatter.string(from: deadlineDate)</span><br><span class="line">                    <span class="keyword">self</span>.timeString <span class="operator">=</span> timeString</span><br><span class="line">                    targetDateInfo[index].timeString <span class="operator">=</span> timeString</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Time: <span class="subst">\(timeString)</span>&quot;</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> dayDifference <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Day difference: <span class="subst">\(dayDifference)</span>&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三种Picker"><a href="#三种Picker" class="headerlink" title="三种Picker"></a>三种Picker</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一列Picker</span></span><br><span class="line">.sheet(isPresented: <span class="variable">$showScorePicker</span>) &#123;</span><br><span class="line">    <span class="type">Picker</span>(<span class="string">&quot;分数&quot;</span>, selection: <span class="variable">$selectedScore</span>) &#123;</span><br><span class="line">        <span class="type">ForEach</span>(<span class="number">1</span><span class="operator">...</span><span class="number">8</span>, id: \.<span class="keyword">self</span>) &#123; score <span class="keyword">in</span></span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\(score)</span> Point&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .pickerStyle(<span class="type">WheelPickerStyle</span>())</span><br><span class="line">  <span class="comment">//控制sheet的弹出的高度和允许用户拖拽到的位置</span></span><br><span class="line">    .presentationDetents([.fraction(<span class="number">0.4</span>),.medium,.large])</span><br><span class="line">    .edgesIgnoringSafeArea(.all)</span><br><span class="line">    </span><br><span class="line">    <span class="type">Button</span> &#123;</span><br><span class="line">        showScorePicker.toggle()</span><br><span class="line">    &#125;label: &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;完成&quot;</span>)</span><br><span class="line">            .foregroundColor(<span class="type">Color</span>.white)</span><br><span class="line">    &#125;</span><br><span class="line">        .frame(width: <span class="number">100</span>,height: <span class="number">40</span>)</span><br><span class="line">        .background(<span class="type">Color</span>.indigo)</span><br><span class="line">        .cornerRadius(<span class="number">12</span>)</span><br><span class="line">        .padding(.top,<span class="number">30</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两列Picker</span></span><br><span class="line">.sheet(isPresented: <span class="variable">$showDatePicker</span>) &#123;</span><br><span class="line">    <span class="type">VStack</span> &#123;</span><br><span class="line">        <span class="type">DatePicker</span>(</span><br><span class="line">            selection: <span class="variable">$selectedDate</span>,</span><br><span class="line">            in: <span class="type">Date</span>()<span class="operator">...</span></span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;选择时间&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .datePickerStyle(<span class="type">GraphicalDatePickerStyle</span>())</span><br><span class="line">        .labelsHidden()</span><br><span class="line">        .presentationDetents([.fraction(<span class="number">0.6</span>), .large])</span><br><span class="line">        .edgesIgnoringSafeArea(.all)</span><br><span class="line">        </span><br><span class="line">        <span class="type">Button</span> &#123;</span><br><span class="line">            showDatePicker.toggle()</span><br><span class="line">            deadlineString <span class="operator">=</span> dateFormatter.string(from: selectedDate)</span><br><span class="line">        &#125; label: &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;完成&quot;</span>)</span><br><span class="line">                .foregroundColor(<span class="type">Color</span>.white)</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(width: <span class="number">100</span>, height: <span class="number">40</span>)</span><br><span class="line">        .background(<span class="type">Color</span>.indigo)</span><br><span class="line">        .cornerRadius(<span class="number">12</span>)</span><br><span class="line">        .padding(.top, <span class="number">30</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    .padding()</span><br><span class="line">    .background(<span class="type">Color</span>.white)</span><br><span class="line">    .cornerRadius(<span class="number">15</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DatePicker</span></span><br><span class="line">.sheet(isPresented: <span class="variable">$showDatePicker</span>) &#123;</span><br><span class="line">    <span class="type">VStack</span> &#123;</span><br><span class="line">        <span class="type">DatePicker</span>(</span><br><span class="line">            selection: <span class="variable">$selectedDate</span>,</span><br><span class="line">            in: <span class="type">Date</span>()<span class="operator">...</span></span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;选择时间&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//通过这个修饰符出来的样式是好看的</span></span><br><span class="line">        .datePickerStyle(<span class="type">GraphicalDatePickerStyle</span>())</span><br><span class="line">        .labelsHidden()</span><br><span class="line">        .presentationDetents([.fraction(<span class="number">0.6</span>),.large])</span><br><span class="line">            .edgesIgnoringSafeArea(.all)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="type">Button</span> &#123;</span><br><span class="line">            showDatePicker.toggle()</span><br><span class="line">        &#125;label: &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;完成&quot;</span>)</span><br><span class="line">                .foregroundColor(<span class="type">Color</span>.white)</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(width: <span class="number">100</span>,height: <span class="number">40</span>)</span><br><span class="line">        .background(<span class="type">Color</span>.indigo)</span><br><span class="line">        .cornerRadius(<span class="number">12</span>)</span><br><span class="line">        .padding(.top,<span class="number">30</span>)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    .padding()</span><br><span class="line">    .background(<span class="type">Color</span>.white)</span><br><span class="line">    .cornerRadius(<span class="number">15</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="崩溃总结"><a href="#崩溃总结" class="headerlink" title="崩溃总结"></a>崩溃总结</h3><p>因为swiftui的崩溃日志实在是难以读懂，所以根据经验总结了一下崩溃的原因</p><p>首先是数组越界问题，比如说常见的remove之后，还在用index去访问数组的元素，就会导致数组越界，所以看来还是避免使用index下标去访问数组元素，还要注意获取数据和使用数据的先后</p><p>其次是拆包问题，常见于处理后端数据的时候，后端传进来的数据可能为空，但是我们并没有使用可选型去接收这个参数，就会导致崩溃 的产生</p><h3 id="点击更换样式"><a href="#点击更换样式" class="headerlink" title="点击更换样式"></a>点击更换样式</h3><p>利用onTapGesture通过点击更换index，再使用三元运算符判断更改样式</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TargetNav1View</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> selectedDate: <span class="type">Date</span><span class="operator">=</span><span class="type">Date</span>() <span class="comment">// 接收初始日期的参数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> calendar <span class="operator">=</span> <span class="type">Calendar</span>.current</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> dateFormatter: <span class="type">DateFormatter</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> formatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">        formatter.dateFormat <span class="operator">=</span> <span class="string">&quot;E&quot;</span> <span class="comment">// 日期格式化器，用于获取星期几的缩写</span></span><br><span class="line">        <span class="keyword">return</span> formatter</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> selectedDayIndex <span class="operator">=</span> <span class="number">0</span> <span class="comment">// 当前选中的VStack索引</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> onDateSelected: ((<span class="type">Date</span>) -&gt; <span class="type">Void</span>)<span class="operator">?</span> <span class="comment">// 用于接收选中日期的闭包</span></span><br><span class="line">    <span class="comment">// 初始化时执行计算逻辑</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ScrollView</span>(.horizontal, showsIndicators: <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="type">HStack</span>(spacing: <span class="number">18</span>) &#123;</span><br><span class="line">                <span class="type">ForEach</span>(<span class="number">0</span><span class="operator">..&lt;</span><span class="number">30</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">                    <span class="type">VStack</span> &#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="keyword">self</span>.dayName(for: index))</span><br><span class="line">                            .foregroundColor(</span><br><span class="line">                                <span class="keyword">self</span>.selectedDayIndex <span class="operator">==</span> index <span class="operator">?</span> .black : .secondary</span><br><span class="line">                            )</span><br><span class="line">                            .font(.system(size: <span class="number">12</span>)) <span class="comment">// 设置星期几文本的字体大小</span></span><br><span class="line">                        <span class="type">Text</span>(<span class="keyword">self</span>.dayNumber(for: index))</span><br><span class="line">                            .frame(width: <span class="number">36</span>, height: <span class="number">36</span>)</span><br><span class="line">                            .foregroundColor(<span class="type">Color</span>(rgba: (<span class="number">207</span>, <span class="number">200</span>, <span class="number">255</span>, <span class="number">1</span>)))</span><br><span class="line">                            .background(</span><br><span class="line">                                <span class="type">LinearGradient</span>(</span><br><span class="line">                                    gradient: <span class="type">Gradient</span>(</span><br><span class="line">                                        colors: <span class="keyword">self</span>.gradientColors(for: index)</span><br><span class="line">                                    ),</span><br><span class="line">                                    startPoint: .top,</span><br><span class="line">                                    endPoint: .bottom</span><br><span class="line">                                )</span><br><span class="line">                            )</span><br><span class="line">                            .cornerRadius(<span class="number">22.5</span>)</span><br><span class="line">                        </span><br><span class="line">                            <span class="comment">// 添加点击手势</span></span><br><span class="line">                            .onTapGesture &#123;</span><br><span class="line">                                <span class="keyword">self</span>.selectedDayIndex <span class="operator">=</span> index <span class="comment">// 更新选中的索引</span></span><br><span class="line">                                <span class="keyword">if</span> <span class="keyword">let</span> selectedDate <span class="operator">=</span> <span class="keyword">self</span>.calendar.date(byAdding: .day, value: index, to: <span class="type">Date</span>()) &#123;</span><br><span class="line">                                    <span class="keyword">self</span>.onDateSelected<span class="operator">?</span>(selectedDate) <span class="comment">// 调用闭包，并传递选中的日期</span></span><br><span class="line">                                &#125;</span><br><span class="line">                                </span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    .cornerRadius(<span class="number">22.5</span>) <span class="comment">// 设置VStack的圆角</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .padding(.top, <span class="number">20</span>) <span class="comment">// 设置顶部内边距</span></span><br><span class="line">        &#125;.padding([.leading,.trailing],<span class="number">20</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">dayName</span>(<span class="params">for</span> <span class="params">index</span>: <span class="type">Int</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> currentDate <span class="operator">=</span> calendar.date(byAdding: .day, value: index, to: <span class="type">Date</span>()) <span class="operator">??</span> <span class="type">Date</span>()</span><br><span class="line">        <span class="keyword">return</span> dateFormatter.string(from: currentDate) <span class="comment">// 获取星期几的缩写文本</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">dayNumber</span>(<span class="params">for</span> <span class="params">index</span>: <span class="type">Int</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> currentDate <span class="operator">=</span> calendar.date(byAdding: .day, value: index, to: <span class="type">Date</span>()) <span class="operator">??</span> <span class="type">Date</span>()</span><br><span class="line">        <span class="keyword">let</span> day <span class="operator">=</span> calendar.component(.day, from: currentDate) <span class="comment">// 获取日期的天数部分</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;<span class="subst">\(day)</span>&quot;</span> <span class="comment">// 将天数转换为字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">gradientColors</span>(<span class="params">for</span> <span class="params">index</span>: <span class="type">Int</span>) -&gt; [<span class="type">Color</span>] &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.selectedDayIndex <span class="operator">==</span> index &#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="type">Color</span>(red: <span class="number">142</span><span class="operator">/</span><span class="number">255</span>, green: <span class="number">150</span><span class="operator">/</span><span class="number">255</span>, blue: <span class="number">255</span><span class="operator">/</span><span class="number">255</span>),</span><br><span class="line">                <span class="type">Color</span>(red: <span class="number">108</span><span class="operator">/</span><span class="number">255</span>, green: <span class="number">93</span><span class="operator">/</span><span class="number">255</span>, blue: <span class="number">211</span><span class="operator">/</span><span class="number">255</span>)</span><br><span class="line">            ] <span class="comment">// 如果选中，返回选中时的渐变色</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="type">Color</span>.clear,</span><br><span class="line">                <span class="type">Color</span>.clear</span><br><span class="line">            ] <span class="comment">// 如果未选中，返回透明颜色</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取到数据后再显示页面"><a href="#获取到数据后再显示页面" class="headerlink" title="获取到数据后再显示页面"></a>获取到数据后再显示页面</h3><p>这个例子运用的场景，在页面一加载就需要显示的数据，那么这个时候异步执行的网络请求方法，还没有获取到数据，这时候视图上获取数据就会获取不到，或者直接数据越界（因为我们一般数据设置为空数组[ ]），</p><p>有三种方法解决，第一种比如说为数据赋初值，这样项目就不会崩溃了，但是就像前面说的这时候还没有获取到数据，那么页面就会一闪而过一个奇怪的数据，</p><p>所以使用第二种方法，在异步执行的网络请求方法完成后，在方法里赋值isDataLoaded代表数据加载完成，并把isDataLoaded作为if的条件，为true再显示页面，虽然其实页面会显示的慢一点，但是这点时间用户看不出来，是比较好的选择，</p><p>还有第三种方法，比如说之前我在微信小程序里，通过在该页面的前一个页面，提前获取到数据，然后再传递给该页面，就可以到达一样的效果，唯一比较麻烦的是一般这样出现在登录界面，就需要进行多种数据的获取，会导致一定的卡顿</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> isDataLoaded&#123;</span><br><span class="line">  <span class="comment">//数据加载完成后显示页面</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">fetchTagData</span>() &#123;</span><br><span class="line">    tagDataManager.fetchTagData &#123; fetchedData, error <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> fetchedData <span class="operator">=</span> fetchedData &#123;</span><br><span class="line">            tagWithTime <span class="operator">=</span> fetchedData</span><br><span class="line">            tagNum<span class="operator">=</span>tagWithTime.count</span><br><span class="line">            <span class="keyword">if</span> tagWithTime[<span class="number">0</span>].ifTagNull<span class="operator">==</span><span class="string">&quot;1&quot;</span>&#123;</span><br><span class="line">                ifshowTagDetailBNull<span class="operator">=</span><span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">print</span>(tagWithTime)</span><br><span class="line">            isDataLoaded <span class="operator">=</span> <span class="literal">true</span>  <span class="comment">// 数据加载完成</span></span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error fetching data: <span class="subst">\(error<span class="operator">?</span>.localizedDescription <span class="operator">??</span> <span class="string">&quot;Unknown error&quot;</span>)</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义倒计时器"><a href="#自定义倒计时器" class="headerlink" title="自定义倒计时器"></a>自定义倒计时器</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">startCountdown</span>() &#123;</span><br><span class="line">    <span class="comment">// 计算初始的剩余时间（秒数）</span></span><br><span class="line">    <span class="keyword">let</span> hoursInSeconds <span class="operator">=</span> (<span class="type">Int</span>(tagWithTime[selectedTagIndex].tagHour<span class="operator">!</span>) <span class="operator">??</span> <span class="number">1</span>) <span class="operator">*</span> <span class="number">3600</span></span><br><span class="line">    <span class="keyword">let</span> minutesInSeconds <span class="operator">=</span> (<span class="type">Int</span>(tagWithTime[selectedTagIndex].tagMinute<span class="operator">!</span>) <span class="operator">??</span> <span class="number">30</span>) <span class="operator">*</span> <span class="number">60</span></span><br><span class="line">    remainingTimeInSeconds <span class="operator">=</span> <span class="type">TimeInterval</span>(hoursInSeconds <span class="operator">+</span> minutesInSeconds)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建定时器</span></span><br><span class="line">    countdownTimer <span class="operator">=</span> <span class="type">Timer</span>.scheduledTimer(withTimeInterval: <span class="number">1</span>, repeats: <span class="literal">true</span>) &#123; timer <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> remainingTimeInSeconds <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            remainingTimeInSeconds <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timer.invalidate() <span class="comment">// 倒计时结束，停止定时器</span></span><br><span class="line">            <span class="comment">// 进行倒计时结束后的操作，例如显示提示信息</span></span><br><span class="line">            time<span class="operator">=</span><span class="literal">true</span></span><br><span class="line">            timeStop<span class="operator">=</span><span class="literal">false</span></span><br><span class="line">            finishTag(tagName: tagWithTime[selectedTagIndex].tagName<span class="operator">!</span>)</span><br><span class="line">            userData.point<span class="operator">+=</span><span class="type">Int</span>(tagWithTime[selectedTagIndex].tagPoint<span class="operator">!</span>)<span class="operator">!</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="swiftui基础"><a href="#swiftui基础" class="headerlink" title="swiftui基础"></a>swiftui基础</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>可以通过[结构体]的方式，来定义数组</p><p>注意在通过targetDateInfo[index].dayDifference去添加数组的时候，需要先初始化好targetDateInfo，不然index会使targetDateInfo越界，之前在Vue里面经常直接使用push的方法，所以忘记了这点</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TargetDateInfo</span> &#123;</span><br><span class="line">     <span class="keyword">var</span> dayDifference: <span class="type">Int</span></span><br><span class="line">     <span class="keyword">var</span> timeString: <span class="type">String</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> targetDateInfo:[<span class="type">TargetDateInfo</span>]<span class="operator">=</span>[]</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数组</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>targetWithTime.count &#123;</span><br><span class="line">    targetDateInfo.append(<span class="type">TargetDateInfo</span>(dayDifference: <span class="number">0</span>, timeString: <span class="string">&quot;&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="keyword">self</span>.targetWithTime.count &#123;</span><br><span class="line">                    </span><br><span class="line">    <span class="keyword">let</span> dateFormatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">    <span class="comment">//给出将String类型转化为Date类型的格式</span></span><br><span class="line">    dateFormatter.dateFormat <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将deadline字符串转换为日期对象</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> deadlineDate <span class="operator">=</span> dateFormatter.date(from: <span class="keyword">self</span>.targetWithTime[index].deadline<span class="operator">!</span>),</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 将选中日期的时间部分设置为0小时、0分钟、0秒</span></span><br><span class="line">       <span class="comment">// 这样就可以忽略小时和分钟对日期差的干扰</span></span><br><span class="line">        <span class="keyword">let</span> startDate <span class="operator">=</span> <span class="type">Calendar</span>.current.date(bySettingHour: <span class="number">0</span>, minute: <span class="number">0</span>, second: <span class="number">0</span>, of: selectedDate) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;startDate:&quot;</span>,startDate)</span><br><span class="line">        <span class="keyword">let</span> calendar <span class="operator">=</span> <span class="type">Calendar</span>.current</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算日期差异，仅关注日期部分</span></span><br><span class="line">        <span class="comment">// 这里获取到的是包含天数的完整天数相差信息(components)</span></span><br><span class="line">        <span class="keyword">let</span> components <span class="operator">=</span> calendar.dateComponents([.day], from: startDate, to: deadlineDate)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 这里获取到的才是天数差(components.day)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> dayDifference <span class="operator">=</span> components.day &#123;</span><br><span class="line">            <span class="keyword">self</span>.dayDifference<span class="operator">=</span>dayDifference</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;index:&quot;</span>,index)</span><br><span class="line">            targetDateInfo[index].dayDifference<span class="operator">=</span>dayDifference</span><br><span class="line">            targetDateInfo[index].timeString<span class="operator">=</span><span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">if</span> dayDifference <span class="operator">&lt;=</span> <span class="number">0</span> &#123;</span><br><span class="line">                <span class="comment">// 相差小于0天，显示截止时间的时间部分</span></span><br><span class="line">                <span class="keyword">let</span> timeFormatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">                timeFormatter.dateFormat <span class="operator">=</span> <span class="string">&quot;HH:mm&quot;</span></span><br><span class="line">                <span class="keyword">let</span> timeString <span class="operator">=</span> timeFormatter.string(from: deadlineDate)</span><br><span class="line">                <span class="keyword">self</span>.timeString<span class="operator">=</span>timeString</span><br><span class="line">                targetDateInfo[index].timeString<span class="operator">=</span>timeString</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Time: <span class="subst">\(timeString)</span>&quot;</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Day difference: <span class="subst">\(dayDifference)</span>&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="状态（-State、-StateObject）"><a href="#状态（-State、-StateObject）" class="headerlink" title="状态（@State、@StateObject）"></a>状态（@State、@StateObject）</h3><p>@StateObject在跟踪类&#x2F;结构体内的属性变化时使用</p><p>SwiftUI的状态能够使body在状态改变时重新渲染（相当于Vue里）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> alertIsVisible:<span class="type">Bool</span><span class="operator">=</span><span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(action: &#123;</span><br><span class="line">                <span class="keyword">self</span>.alertIsVisible<span class="operator">=</span><span class="literal">true</span></span><br><span class="line">            &#125;) &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;点我&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">//注意这个$alertIsVisible前面的$意味着binding(双向绑定)</span></span><br><span class="line">           .alert(isPresented: <span class="variable">$alertIsVisible</span> , content: &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">&quot;你好&quot;</span>),message: </span><br><span class="line">                             <span class="type">Text</span>(<span class="string">&quot;这是弹窗&quot;</span>),dismissButton: .</span><br><span class="line">                             <span class="keyword">default</span>(<span class="type">Text</span>(<span class="string">&quot;好好好 &quot;</span>)))</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绑定（-Binding）"><a href="#绑定（-Binding）" class="headerlink" title="绑定（@Binding）"></a>绑定（@Binding）</h3><p>其实就是绑定传入的值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DrawerMenu</span>(isDrawerOpen: <span class="variable">$ifShowMenu</span>, ifShowTarget: <span class="variable">$ifShowTarget</span>)</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DrawerMenu</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> isDrawerOpen: <span class="type">Bool</span></span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> ifShowTarget:<span class="type">Bool</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">      <span class="comment">//DrawerMenu视图里的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全局变量（-EnvironmentObject）"><a href="#全局变量（-EnvironmentObject）" class="headerlink" title="全局变量（@EnvironmentObject）"></a>全局变量（@EnvironmentObject）</h3><p>定义一个实现ObservableObject协议的类，需要跟踪的数值使用@Published 修饰</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  UserDataManager.swift</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserData</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> userEmail: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过.envrionmentObject(对象)将一个对象放置到环境中</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  HabeetApp.swift</span></span><br><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HabeetApp</span>: <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="meta">@StateObject</span> <span class="keyword">private</span> <span class="keyword">var</span> userData <span class="operator">=</span> <span class="type">UserData</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">ContentView</span>()</span><br><span class="line">                .environmentObject(userData)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在view中使用这个对象,@EnvironmentObject修饰对象</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  HomeView.swift</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HomeView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">  <span class="meta">@EnvironmentObject</span> <span class="keyword">private</span> <span class="keyword">var</span> userData: <span class="type">UserData</span></span><br><span class="line">  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">TextField</span>(<span class="string">&quot;请输入邮箱&quot;</span>, text: <span class="variable">$userData</span>.userEmail)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，如果预览没有.envrionmentObject()设置环境中的对象，程序就会崩溃，包括导航到需要用的视图</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView_Previews</span>: <span class="title class_">PreviewProvider</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ContentView</span>().environmentObject(<span class="type">UserData</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HomeView_Previews</span>: <span class="title class_">PreviewProvider</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HomeView</span>().environmentObject(<span class="type">UserData</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="单元测试（Unit-Text）"><a href="#单元测试（Unit-Text）" class="headerlink" title="单元测试（Unit Text）"></a>单元测试（Unit Text）</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> XCTest</span><br><span class="line"><span class="keyword">@testable</span> <span class="keyword">import</span> Habeet</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">HabeetTests</span>: <span class="title class_">XCTestCase</span> &#123;</span><br><span class="line">    <span class="comment">//在一开始启动时，game可能为空，但是setup里game肯定是有值的，所以定义为可选类型（！）</span></span><br><span class="line">    <span class="keyword">var</span> game:<span class="type">Game</span>!</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">setUpWithError</span>() <span class="keyword">throws</span> &#123;</span><br><span class="line">        game<span class="operator">=</span><span class="type">Game</span>()</span><br><span class="line">        <span class="comment">// Put setup code here. This method is called before the invocation of each test method in the class.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">tearDownWithError</span>() <span class="keyword">throws</span> &#123;</span><br><span class="line">        game<span class="operator">=</span><span class="literal">nil</span></span><br><span class="line">        <span class="comment">// Put teardown code here. This method is called after the invocation of each test method in the class.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">testExample</span>() <span class="keyword">throws</span> &#123;</span><br><span class="line">      <span class="comment">//断言测试（Assert）</span></span><br><span class="line">        <span class="type">XCTAssertEqual</span>(game.points(sliderValue: <span class="number">50</span>), <span class="number">999</span>)</span><br><span class="line">        <span class="comment">// This is an example of a functional test case.</span></span><br><span class="line">        <span class="comment">// Use XCTAssert and related functions to verify your tests produce the correct results.</span></span><br><span class="line">        <span class="comment">// Any test you write for XCTest can be annotated as throws and async.</span></span><br><span class="line">        <span class="comment">// Mark your test throws to produce an unexpected failure when your test encounters an uncaught error.</span></span><br><span class="line">        <span class="comment">// Mark your test async to allow awaiting for asynchronous code to complete. Check the results with assertions afterwards.</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//性能实例一般用不到</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">testPerformanceExample</span>() <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="comment">// This is an example of a performance test case.</span></span><br><span class="line">        <span class="keyword">self</span>.measure &#123;</span><br><span class="line">            <span class="comment">// Put the code you want to measure the time of here.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ProjectRoot</span><br><span class="line">├── Views</span><br><span class="line">│   ├── ContentView.swift</span><br><span class="line">│   ├── MainContent.swift</span><br><span class="line">│   ├── DrawerMenu.swift</span><br><span class="line">│   ├── TargetView.swift</span><br><span class="line">│   └── ...other <span class="keyword">view</span> files</span><br><span class="line">├── Extensions</span><br><span class="line">│   ├── Color<span class="operator">+</span>Extensions.swift</span><br><span class="line">│   ├── <span class="keyword">View</span><span class="operator">+</span>Extensions.swift</span><br><span class="line">├──   └── ...other extension files</span><br><span class="line">├── Helpers</span><br><span class="line">│   ├── Constants.swift</span><br><span class="line">│   └── ...other helper files</span><br><span class="line">└── Models</span><br><span class="line">    ├── Target.swift</span><br><span class="line">    └── ...other model files</span><br></pre></td></tr></table></figure><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>建立新的 Swift 文件：command+N</p><p>将视图包含进 VStack、HStack、ZStack：选中视图+command（Embed in xxx）</p><p>要將存放代码的 VStack、HStack、ZStack 提取出来（新的stuck）：选中视图+command  (Extract Subview)</p><p>插入不同视图：command+Shift+L（选中后可以用鼠标拖拽到不同位置，同时不同位置也可以达成自动创建Stack的效果）</p><p>移动代码到 上一行&#x2F;下一行：option+command+[ &#x2F; ]</p><p>实机调试：command+R</p><p>刷新预览：option+command+P</p><p>查看视图内属性的详情：option+点击</p><p>只构建项目不调试：command+B</p><p>进行单元测试：command+U</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>项目过程学习</title>
      <link href="/posts/a1c54708.html"/>
      <url>/posts/a1c54708.html</url>
      
        <content type="html"><![CDATA[<h1 id="项目过程学习"><a href="#项目过程学习" class="headerlink" title="项目过程学习"></a>项目过程学习</h1><h2 id="Habeet"><a href="#Habeet" class="headerlink" title="Habeet"></a>Habeet</h2><h3 id="微信一键登陆"><a href="#微信一键登陆" class="headerlink" title="微信一键登陆"></a>微信一键登陆</h3><p>设计的知识点有微信api的使用方法</p><p>难点在于我一开始以往常见过的小程序为例子，希望同时获取到用户的姓名和头像以及手机号，结果在大量搜索后，才发现微信官方收回了获取信息的接口以及获取手机号需要企业认证的小程序，浪费了不少时间</p><p>1.前端设置按钮，并使用uni.login获取到code，然后将这个code传到后端来获取用户唯一标识openid</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class=&quot;NavIcon&quot;&gt;</span><br><span class="line">&lt;view class=&quot;NavIcon1&quot; @click=&quot;QQLogin&quot;&gt;</span><br><span class="line">&lt;image src=&quot;@\static\NavIcon1.png&quot; style=&quot;width: 40rpx;height: 40rpx;&quot;&lt;/image&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;view class=&quot;NavIcon2&quot; @click=&quot;WxLogin&quot;&gt;</span><br><span class="line">&lt;image src=&quot;@\static\NavIcon2.png&quot; style=&quot;width: 52.8rpx;height: 55.74rpx;&quot;&gt;&lt;/image&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const WxLogin = () =&gt; &#123;</span><br><span class="line">uni.login(&#123;</span><br><span class="line">provider: &#x27;weixin&#x27;, //使用微信登录</span><br><span class="line">success: (loginRes) =&gt; &#123;</span><br><span class="line">user.data.code = loginRes.code</span><br><span class="line">uni.request(&#123;</span><br><span class="line">url: url + &#x27;/user/wxLogin&#x27;,</span><br><span class="line">method: &quot;POST&quot;,</span><br><span class="line">data: user.data.code,</span><br><span class="line">success: (res) =&gt; &#123;</span><br><span class="line">user.data.userEmail = res.data.data.openId</span><br><span class="line">console.log(res.data.data.openId)</span><br><span class="line">uni.request(&#123;</span><br><span class="line">url: url + &#x27;/user/home&#x27;,</span><br><span class="line">method: &quot;POST&quot;,</span><br><span class="line">data: user.data.userEmail,</span><br><span class="line">success: (res) =&gt; &#123;</span><br><span class="line">if (res.data.code != null) &#123;</span><br><span class="line">uni.redirectTo(&#123;</span><br><span class="line">url: &#x27;../../pages/Login/Login&#x27;</span><br><span class="line">&#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">uni.redirectTo(&#123;</span><br><span class="line">url: &#x27;../../pages/Wx/Wx&#x27;</span><br><span class="line">&#125;);</span><br><span class="line">user.data.ifUpdate = 0</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">//弹出来的提示信息</span><br><span class="line">uni.showToast(&#123;</span><br><span class="line">icon: &quot;none&quot;,</span><br><span class="line">title: &#x27;微信登陆中...&#x27;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2.后端接收到code，并给出appId和secret到微信提供的接口返，得到penid</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> RestResp&lt;UserRespDto&gt; <span class="title function_">wxLogin</span><span class="params">(String code)</span> &#123;</span><br><span class="line">    String authUrl=<span class="string">&quot;https://api.weixin.qq.com/sns/jscode2session?grant_type=authorization_code&quot;</span>;</span><br><span class="line">    String appId=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    String secret=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    authUrl=authUrl+<span class="string">&quot;&amp;appid=&quot;</span>+appId+<span class="string">&quot;&amp;secret=&quot;</span>+secret+<span class="string">&quot;&amp;js_code=&quot;</span>+code;</span><br><span class="line"></span><br><span class="line">    String result= HttpUtil.get(authUrl);</span><br><span class="line">    JSONObject jsonObject= JSONUtil.parseObj(result);</span><br><span class="line"></span><br><span class="line">    String openId=jsonObject.getStr(<span class="string">&quot;openid&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> RestResp.ok(UserRespDto.builder()</span><br><span class="line">            .openId(openId)</span><br><span class="line">            .build());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用户上传图片并回显"><a href="#用户上传图片并回显" class="headerlink" title="用户上传图片并回显"></a>用户上传图片并回显</h3><p>涉及的知识点有java后端文件上传服务器的操作，以及将文件存储为二进制流进入数据库，而后在前端再通过转化来回显文件</p><p>难点在于一开始我的思路是将文件上传到服务器之后，直接通过链接来访问，但是因为我是前后端分离的项目，而且需要使用合法域名，这点无法实现</p><p>1.用户选择图片需要一个选择框，这里使用了微信小程序自带的按钮（open-type&#x3D;”chooseAvatar” 可以获取用户的微信头像，@chooseavatar则是选中后触发的方法），并嵌套一个图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class=&quot;SignI&quot;&gt;</span><br><span class="line">&lt;text&gt;头像&lt;/text&gt;</span><br><span class="line">&lt;button class=&quot;avatar-wrapper&quot; open-type=&quot;chooseAvatar&quot; @chooseavatar=&quot;onChooseAvatar&quot;&gt;</span><br><span class="line">&lt;image :src=&quot;state.avatarUrl&quot; style=&quot;width: 100rpx;height: 100rpx;&quot; /&gt;</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>2.用户选择好图片后触发chooseavatar，然后在uploadFile()方法里上传微信返回的临时链接，其中uni.uploadFile将链接转化为文件传给后端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const onChooseAvatar = (e) =&gt; &#123;</span><br><span class="line">state.avatarUrl = e.detail.avatarUrl;</span><br><span class="line">uploadFile()</span><br><span class="line">&#125;</span><br><span class="line">const uploadFile = () =&gt; &#123;</span><br><span class="line">uni.uploadFile(&#123;</span><br><span class="line">url: url + &#x27;/user/uploadFile&#x27;, //后台接口</span><br><span class="line">filePath: state.avatarUrl, // 上传图片 url</span><br><span class="line">name: &#x27;file&#x27;,</span><br><span class="line">// formData: this.formData,</span><br><span class="line">header: &#123;</span><br><span class="line">&#x27;content-type&#x27;: &#x27;multipart/form-data&#x27;</span><br><span class="line">&#125;, // header 值</span><br><span class="line">success: (res) =&gt; &#123;</span><br><span class="line">const responseData = JSON.parse(res.data); // 解析JSON字符串为对象</span><br><span class="line">user.data.picData = responseData.data.picData</span><br><span class="line">state.avatarUrl = `data:image/jpeg;base64,$&#123;user.data.picData&#125;`//转化为链接</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>3.后端实现层使用MultipartFile[]类接收前端传来的文件，转换为二进制数据流并存入数据库，然后把文件存入服务器指定的位置上（突然发现其实可以不用存入服务器）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> RestResp&lt;UserRespDto&gt; <span class="title function_">uploadFile</span><span class="params">(MultipartFile[] files)</span> &#123;</span><br><span class="line">    String filePath=<span class="literal">null</span>;</span><br><span class="line">    String fileName;</span><br><span class="line">    String filePathAll=<span class="literal">null</span>;</span><br><span class="line">    <span class="type">byte</span>[] imageData=<span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 遍历上传的多个文件</span></span><br><span class="line">    <span class="keyword">for</span> (MultipartFile file : files) &#123;</span><br><span class="line">        <span class="comment">// 生成文件名：userEmail.jpg</span></span><br><span class="line">        fileName = userEmailAll+ <span class="string">&quot;.&quot;</span> + <span class="string">&quot;jpeg&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成文件保存路径</span></span><br><span class="line">        filePath = serverRootPath + fileName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将图片转换为二进制数据流（注意这个语句要先于transferTo，否则获取不到文件）</span></span><br><span class="line">            imageData = file.getBytes();</span><br><span class="line">            <span class="comment">// 将文件保存到服务器指定目录</span></span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将二进制数据流存入数据库</span></span><br><span class="line">            QueryWrapper&lt;User&gt;queryWrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">            queryWrapper.eq(<span class="string">&quot;user_email&quot;</span>,userEmailAll);</span><br><span class="line"></span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setPicData(imageData);</span><br><span class="line">            userDao.update(user,queryWrapper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 处理文件上传失败的情况</span></span><br><span class="line">            System.out.println(<span class="string">&quot;文件上传失败&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理文件上传成功的情况</span></span><br><span class="line">    <span class="keyword">return</span> RestResp.ok(UserRespDto.builder().picData(imageData).build());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.前端收到picData的数据开始回显图片(success的后半部分)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const onChooseAvatar = (e) =&gt; &#123;</span><br><span class="line">state.avatarUrl = e.detail.avatarUrl;</span><br><span class="line">uploadFile()</span><br><span class="line">&#125;</span><br><span class="line">const uploadFile = () =&gt; &#123;</span><br><span class="line">uni.uploadFile(&#123;</span><br><span class="line">url: url + &#x27;/user/uploadFile&#x27;, //后台接口</span><br><span class="line">filePath: state.avatarUrl, // 上传图片 url</span><br><span class="line">name: &#x27;file&#x27;,</span><br><span class="line">// formData: this.formData,</span><br><span class="line">header: &#123;</span><br><span class="line">&#x27;content-type&#x27;: &#x27;multipart/form-data&#x27;</span><br><span class="line">&#125;, // header 值</span><br><span class="line">success: (res) =&gt; &#123;</span><br><span class="line">const responseData = JSON.parse(res.data); // 解析JSON字符串为对象</span><br><span class="line">user.data.picData = responseData.data.picData</span><br><span class="line">state.avatarUrl = `data:image/jpeg;base64,$&#123;user.data.picData&#125;`//转化为链接</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Html-school</title>
      <link href="/posts/34f09ce7.html"/>
      <url>/posts/34f09ce7.html</url>
      
        <content type="html"><![CDATA[<h1 id="Html-school"><a href="#Html-school" class="headerlink" title="Html-school"></a>Html-school</h1><h2 id="学习通"><a href="#学习通" class="headerlink" title="学习通"></a>学习通</h2><h3 id="第一章（html和css基础）"><a href="#第一章（html和css基础）" class="headerlink" title="第一章（html和css基础）"></a>第一章（html和css基础）</h3><p>(单选题)W3C（英文World Wide Web Consortium的缩写），中文译为“万维网联盟”是（  ）。</p><ul><li>A. 国际最著名的标准化组织</li><li>B. 欧洲计算机制造商协会</li><li>C. 中国计算机行业协会</li><li>D. 中国计算机学会</li></ul><p><em>我的答案:</em> A:国际最著名的标准化组织;<em>正确答案:</em> A:国际最著名的标准化组织;</p><p>(单选题)CSS的全称及中文译名分别是（ ）。</p><ul><li>A. Cading Style Sheet和层次样式表</li><li>B. Cascading Style Sheet和层次样式表</li><li>C. Cascading Style Sheet和层叠样式表</li><li>D. Cading Style Sheet和层叠样式表</li></ul><p><em>我的答案:</em> C:Cascading Style Sheet和层叠样式表;<em>正确答案:</em> C:Cascading Style Sheet和层叠样式表;</p><p>(单选题)我们一般所用的工作区布局方式是（ ）。</p><ul><li>A. 经典</li><li>B. 设计器</li><li>C. 流体布局</li><li>D. 编码器</li></ul><p><em>我的答案:</em> C:流体布局;<em>正确答案:</em> C:流体布局;</p><p>(单选题)次浏览器预览网页的快捷键是（ ）。 </p><ul><li>A. F12</li><li>B. Ctrl+F12</li><li>C. F10 </li><li>D. F11</li></ul><p> (多选题)Web标准并不是某一个标准，而是一系列标准的集合，主要包括（ ）。</p><ul><li>A. 结构标准</li><li>B. 表现标准</li><li>C. 行为标准</li><li>D. 制作标准</li></ul><p><em>我的答案:</em> ABC:结构标准; 表现标准; 行为标准;<em>正确答案:</em> ABC</p><p> (多选题)HTML响应式 Web 设计（Responsive Web Design）是一种网络页面设计布局的方法,其作用是（）。</p><ul><li>A. 能够以可变尺寸传递网页</li><li>B. 对于平板是必需的</li><li>C. 对于移动设备是必需的</li><li>D. 对于PC端是必需的</li></ul><p><em>我的答案:</em> ABC:能够以可变尺寸传递网页; 对于平板是必需的; 对于移动设备是必需的;<em>正确答案:</em> ABC:能够以可变尺寸传递网页; 对于平板是必需的; 对于移动设备是必需的;</p><h3 id="第二章（html基础）"><a href="#第二章（html基础）" class="headerlink" title="第二章（html基础）"></a>第二章（html基础）</h3><p> (单选题)以下方式哪个实现将水平线粗细设置为2，宽度设置为500px?</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A. <span class="tag">&lt;<span class="name">hr</span>  <span class="attr">font-size</span>=<span class="string">&quot;2&quot;</span>    <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> /&gt;</span></span><br><span class="line">B. <span class="tag">&lt;<span class="name">hr</span>  <span class="attr">size</span>=<span class="string">&quot;2&quot;</span>    <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> /&gt;</span></span><br><span class="line">C. <span class="tag">&lt;<span class="name">hr</span>  <span class="attr">font-size</span>=<span class="string">&quot;2&quot;</span>    <span class="attr">width</span>=<span class="string">&quot;500%&quot;</span> /&gt;</span></span><br><span class="line">D.<span class="tag">&lt;<span class="name">hr</span>  <span class="attr">size</span>=<span class="string">&quot;2&quot;</span>    <span class="attr">width</span>=<span class="string">&quot;500%&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><em>我的答案:</em> B</p><p>(单选题)如果想要使段落文本加粗倾斜，可以采用以下哪种方式？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- A. <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>一段文本<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">- B. <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>一段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">- C. <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>一段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">- D. <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>一段文本<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>我的答案:</em> D</p><p> (单选题)将某段文本应用font标记设置为微软雅黑，16px，是设置font标记中哪两个属性？（）</p><ul><li>A. face   font-size</li><li>B. font-family   font-size</li><li>C. font-family   size</li><li>D. face   size</li></ul><p><em>正确答案:</em> D</p><p> (单选题)HTML标记分为双标记和单标记，下面哪个选项中所有标记都属于单标记？（）</p><ul><li>A. 标题标记、图像标记、段落标记</li><li>B. 段落标记、图像标记、换行标记</li><li>C. 标题标记、换行标记、段落标记</li><li>D. 图像标记、换行标记、水平线标记</li></ul><p><em>我的答案:</em> D:图像标记、换行标记、水平线标记;</p><h3 id="单选题-以下哪个不是-img-x2F-标记的属性？"><a href="#单选题-以下哪个不是-img-x2F-标记的属性？" class="headerlink" title="(单选题)以下哪个不是 img&#x2F; 标记的属性？"></a>(单选题)以下哪个不是 img&#x2F; 标记的属性？</h3><ul><li>A. width</li><li>B. size</li><li>C. align</li><li>D. border</li></ul><p><em>我的答案:</em> B:size;</p><p>(单选题)(  )不属于元信息标记  meta&#x2F; 的属性。</p><ul><li>A. content</li><li>B. http-equiv</li><li>C. name</li><li>D. url</li></ul><p><em>我的答案:</em> D</p><p> (单选题)以下方式哪个能实现将<strong>段落</strong>设置为居中对齐？（）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- A. &lt; p align=&quot;left&quot;&gt;网页设计学院<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">- B. <span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>网页设计学院<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">- C.  <span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>网页设计学院<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">- D. <span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span>网页设计学院<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>我的答案:</em> C;</p><h3 id="单选题-下列哪些不属于图像标记-img-的属性？（）"><a href="#单选题-下列哪些不属于图像标记-img-的属性？（）" class="headerlink" title="(单选题)下列哪些不属于图像标记 img 的属性？（）"></a>(单选题)下列哪些不属于图像标记 img 的属性？（）</h3><ul><li>A. vspace</li><li>B. hspace</li><li>C. color</li><li>D. border</li></ul><p><em>我的答案:</em> C:color;</p><p>(单选题)文本”挥泪大甩卖，原价 260 ，现价 50 ！“中，“ 260 ”和“ 50“的效果可以用以下哪种方式实现？</p><ul><li>A. <del>260</del> <em>50</em></li><li>B. <del>260</del> <strong>50</strong></li><li>C. <ins>260</ins> <del>50</del> </li><li>D. <del>260</del> <ins>50</ins></li></ul><p><em>我的答案:</em> D;</p><p>(多选题)以下哪个标记能实现文本加下划线效果？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A. <span class="tag">&lt;<span class="name">s</span>&gt;</span><span class="tag">&lt;/<span class="name">s</span>&gt;</span> </span><br><span class="line">B. <span class="tag">&lt;<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line">C. <span class="tag">&lt;<span class="name">ins</span>&gt;</span>&lt;/ins &gt;</span><br><span class="line">D.<span class="tag">&lt;<span class="name">del</span>&gt;</span><span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>我的答案:</em> BC;</p><h3 id="文本格式化标记"><a href="#文本格式化标记" class="headerlink" title="文本格式化标记"></a>文本格式化标记</h3><table><thead><tr><th>语义</th><th>标签</th></tr></thead><tbody><tr><td>加粗</td><td>&lt; strong &gt;&lt; &#x2F;strong &gt;或者&lt; b&gt;&lt; &#x2F;b &gt;</td></tr><tr><td>倾斜</td><td>&lt; em &gt;&lt; &#x2F;em &gt;或者&lt; i &gt;&lt; &#x2F;i &gt;</td></tr><tr><td>删除线</td><td>&lt; del &gt;&lt; &#x2F;del &gt;或者&lt; s &gt;&lt; &#x2F;s &gt;</td></tr><tr><td>下划线</td><td>&lt; ins &gt;&lt; &#x2F;ins &gt;或者&lt; u &gt;&lt; &#x2F;u &gt;</td></tr></tbody></table><p>(多选题)以下哪些属于 meta&#x2F; 标记可以定义的页面参数？</p><ul><li>A. 内容的描述</li><li>B. 网页的刷新时间</li><li>C. 网页的关键字</li><li>D. 作者的姓名</li></ul><p><em>我的答案:</em> ACD:内容的描述; 网页的关键字; 作者的姓名;</p><h3 id="多选题-下面哪些是font标记的常用属性？"><a href="#多选题-下面哪些是font标记的常用属性？" class="headerlink" title="(多选题)下面哪些是font标记的常用属性？"></a>(多选题)下面哪些是font标记的常用属性？</h3><ul><li>A. color</li><li>B. size</li><li>C. align</li><li>D. face</li></ul><p><em>我的答案:</em> ABD:color; size; face;</p><h3 id="多选题-img-x2F-标记中align的属性值有以下哪几个？"><a href="#多选题-img-x2F-标记中align的属性值有以下哪几个？" class="headerlink" title="(多选题) img&#x2F; 标记中align的属性值有以下哪几个？"></a>(多选题) img&#x2F; 标记中align的属性值有以下哪几个？</h3><ul><li>A. top</li><li>B. bottom</li><li>C. middle</li><li>D. center</li><li>E. left</li><li>F. right</li></ul><p><em>我的答案:</em> ABCEF:top; bottom; middle; left; right;</p><h3 id="判断题-font-标记中可以再包含一个-font-标记，这个说法对吗？"><a href="#判断题-font-标记中可以再包含一个-font-标记，这个说法对吗？" class="headerlink" title="(判断题) font 标记中可以再包含一个 font 标记，这个说法对吗？"></a>(判断题) font 标记中可以再包含一个 font 标记，这个说法对吗？</h3><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 对</p><h3 id="【多选题】color属性用于定义文本的颜色，其正确取值有以下哪些方式-（）"><a href="#【多选题】color属性用于定义文本的颜色，其正确取值有以下哪些方式-（）" class="headerlink" title="【多选题】color属性用于定义文本的颜色，其正确取值有以下哪些方式?（）"></a>【多选题】color属性用于定义文本的颜色，其正确取值有以下哪些方式?（）</h3><ul><li><p>A、</p><p>red</p></li><li><p>B、</p><p>#FF0000</p></li><li><p>C、</p><p>rgb(255,0,0) </p></li><li><p>D、</p><p>rgb(100%,0%,0%)</p></li></ul><p>我的答案：ACD？ABC？</p><h2 id="第三章（css基础）"><a href="#第三章（css基础）" class="headerlink" title="第三章（css基础）"></a>第三章（css基础）</h2><p>【单选题】标签指定式选择器又称交集选择器，由两个选择器构成，其中第一个为标记选择器，第二个为class选择器或id选择器，以下合法的标签指定式选择器有（）？</p><ul><li><p>A、</p><p>h1.special </p></li><li><p>B、</p><p>p #one</p></li><li><p>C、</p><p> h1 #one </p></li><li><p>D、</p><p>p .special</p></li></ul><p>我的答案：A</p><h3 id="【单选题】下面（-）属性代表边框是单实线？"><a href="#【单选题】下面（-）属性代表边框是单实线？" class="headerlink" title="【单选题】下面（ ）属性代表边框是单实线？"></a>【单选题】下面（ ）属性代表边框是单实线？</h3><ul><li><p>A、</p><p>solid（单实线）</p></li><li><p>B、</p><p>dashed（虚线）</p></li><li><p>C、</p><p>dotted（点线）</p></li><li><p>D、</p><p>double（双实线）</p></li></ul><p>正确答案： A :solid;我的答案：A</p><h2 id="第四章（css盒模型）"><a href="#第四章（css盒模型）" class="headerlink" title="第四章（css盒模型）"></a>第四章（css盒模型）</h2><h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><p>【单选题】假设p标记盒子的width为210px，height为90px，边框宽度为8像素，设置盒子的内边距padding为15像素，外边距margin为20像素，则盒子的宽度是（）？</p><ul><li><p>A、</p><p>240px</p></li><li><p>B、</p><p>256px</p></li><li><p>C、</p><p>210px</p></li><li><p>D、</p><p>226px</p></li></ul><p>我的答案：B（实际上算出来应该是296px-40px&#x3D;256px,不用加margin）</p><p>【单选题】假设p标记盒子的width为210px，height为90px，边框宽度为8像素，设置盒子的内边距padding为15像素，外边距margin为20像素，则盒子在网页中所占的高度是（）？</p><ul><li><p>A、</p><p>106px</p></li><li><p>B、</p><p>146px</p></li><li><p>C、</p><p>176px</p></li><li><p>D、</p><p>90px</p></li></ul><p>我的答案：C</p><p>【单选题】假设p标记盒子的width为210px，height为90px，边框宽度为8像素，设置盒子的内边距padding为15像素，外边距margin为20像素，则盒子的高度是（）？</p><ul><li><p>A、</p><p>136px </p></li><li><p>B、</p><p>106px</p></li><li><p>C、</p><p>90px</p></li><li><p>D、</p><p>120px</p></li></ul><p>我的答案：A（不用加margin了）</p><p>【单选题】在普通文档流中（没有对元素应用浮动和定位），第一个盒子的下边距为20px，第二个盒子的上外边距为40px，则这两个盒子垂直间距是（  ）。</p><ul><li><p>A、</p><p>60px</p></li><li><p>B、</p><p>20px</p></li><li><p>C、</p><p>40px</p></li><li><p>D、</p><p>其他</p></li></ul><p>我的答案：A?</p><p>【单选题】当两个嵌套关系的块元素，设父元素无边框，上外边距为20px，子元素的上外边距为40px，在默认的情况下，父元素的上外边距为（  ）。</p><ul><li><p>A、</p><p>20px</p></li><li><p>B、</p><p>40px</p></li><li><p>C、</p><p>60px</p></li><li><p>D、</p><p>其他</p></li></ul><p>我的答案：A?</p><p>【单选题】当两个嵌套关系的块元素，设父元素无边框，上外边距为20px，子元素的上外边距为40px，当给父元素加上代码overflow:hidden;后，父元素的上外边距为（  ）。</p><ul><li><p>A、</p><p>20px</p></li><li><p>B、</p><p>40px</p></li><li><p>C、</p><p>60px</p></li><li><p>D、</p><p>其他</p></li></ul><p>我的答案：A</p><p>【多选题】如果希望嵌套块元素垂直外边距不合并，可以通过以下（  ）方法来解决这个问题。</p><ul><li><p>A、</p><p>给父盒子加边框（border）</p></li><li><p>B、</p><p>给父盒子样式加上overflow:hidden代码</p></li><li><p>C、</p><p>无法解决</p></li><li><p>D、</p><p>其他</p></li></ul><p>我的答案：AB</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>【单选题】下面哪一项不是网页中常用的列表（   ）？</p><ul><li><p>A、</p><p>无序列表</p></li><li><p>B、</p><p>有序列表</p></li><li><p>C、</p><p>排序列表</p></li><li><p>D、</p><p>定义列表</p></li></ul><p>我的答案：C</p><h4 id="【单选题】在CSS中，下面哪一项不属于list-style-position属性（-）"><a href="#【单选题】在CSS中，下面哪一项不属于list-style-position属性（-）" class="headerlink" title="【单选题】在CSS中，下面哪一项不属于list-style-position属性（   ）"></a>【单选题】在CSS中，下面哪一项不属于list-style-position属性（   ）</h4><ul><li><p>A、</p><p>用于控制列表项目符号的图像</p></li><li><p>B、</p><p>其取值有inside和outside两种</p></li><li><p>C、</p><p>inside：列表项目符号位于列表文本以内</p></li><li><p>D、</p><p>outside：列表项目符号位于列表文本以外</p></li></ul><p>我的答案：A</p><h4 id="【单选题】下面关于list-style哪一项描述是错误的（-）"><a href="#【单选题】下面关于list-style哪一项描述是错误的（-）" class="headerlink" title="【单选题】下面关于list-style哪一项描述是错误的（   ）"></a>【单选题】下面关于list-style哪一项描述是错误的（   ）</h4><ul><li><p>A、</p><p>list-style是用于综合设置列表样式</p></li><li><p>B、</p><p>其语法格式：list-style:列表项目符号 列表项目符号的位置 列表项目图像</p></li><li><p>C、</p><p>各个样式之间以冒号隔开</p></li><li><p>D、</p><p>不需要的样式可以省略</p></li></ul><p>我的答案：C</p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>【单选题】设置text-decoration属性的删除线的值为（    ）</p><ul><li><p>A、</p><p>underline</p></li><li><p>B、</p><p>overline</p></li><li><p>C、</p><p>line-through</p></li><li><p>D、</p><p>blink</p></li></ul><p>我的答案：C</p><p>【单选题】下列选项中，用于清除超链接默认的下划线的是（    ）</p><ul><li><p>A、</p><p>text-decoration:none </p></li><li><p>B、</p><p>text-decoration: underline </p></li><li><p>C、</p><p>text-decoration:overline </p></li><li><p>D、</p><p> text-decoration:line-through</p></li></ul><p>我的答案：A</p><h3 id="【单选题】下列选项中，属于“target”属性值的是（-）"><a href="#【单选题】下列选项中，属于“target”属性值的是（-）" class="headerlink" title="【单选题】下列选项中，属于“target”属性值的是（    ）"></a>【单选题】下列选项中，属于“target”属性值的是（    ）</h3><ul><li><p>A、</p><p>_double </p></li><li><p>B、</p><p>_self</p></li><li><p>C、</p><p>_new </p></li><li><p>D、</p><p> _black</p></li></ul><p>我的答案：B</p><p>target&#x3D;”view_window”：用于多个链接去同一个新页面中打开；打开一个新页面，所有使用这个属性值的链接在新页面中替换方式显示；<br>target&#x3D;”_blank”：用于每个链接在不同新空白页面中打开，互不影响；<br>target&#x3D;”_self”：用于在当前页（或iframe）展示；<br>target&#x3D;”_parent”：用于在上一级iframe中展示，没有就是当前页面；<br>target&#x3D;”_top”：用于在最外层iframe中展示没有就是当前页面；</p><p>【单选题】有关伪类的说法不正确的是(    )</p><ul><li><p>A、</p><p>并不是真正意义上的类，它的名称是由系统定义的</p></li><li><p>B、</p><p>通常由标记名、类名或id名加“：”构成</p></li><li><p>C、</p><p>在CSS中，通过链接伪类可以实现不同的链接状态</p></li><li><p>D、</p><p>伪类就是以#定义的超链接</p></li></ul><p>我的答案：D</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>【单选题】以下标记中，用于定义一个单元格的是（   ）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- A、 <span class="tag">&lt;<span class="name">caption</span>&gt;</span>…<span class="tag">&lt;/<span class="name">caption</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">- B、<span class="tag">&lt;<span class="name">tr</span>&gt;</span>…<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">- C、<span class="tag">&lt;<span class="name">table</span>&gt;</span>…<span class="tag">&lt;/<span class="name">table</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">- D、<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我的答案：D</p><h4 id="【单选题】使用-table-标记的属性美化表格时，可以通过-控制单元格内容与边框之间的距离"><a href="#【单选题】使用-table-标记的属性美化表格时，可以通过-控制单元格内容与边框之间的距离" class="headerlink" title="【单选题】使用  table 标记的属性美化表格时，可以通过(    )控制单元格内容与边框之间的距离"></a>【单选题】使用  table 标记的属性美化表格时，可以通过(    )控制单元格内容与边框之间的距离</h4><ul><li><p>A、</p><p>cellpadding </p></li><li><p>B、</p><p>cellspacing</p></li><li><p>C、</p><p>padding </p></li><li><p>D、</p><p>margin</p></li></ul><p>我的答案：A</p><h4 id="【单选题】行标记-tr-不具有的属性是（-）"><a href="#【单选题】行标记-tr-不具有的属性是（-）" class="headerlink" title="【单选题】行标记 tr 不具有的属性是（   ）"></a>【单选题】行标记 tr 不具有的属性是（   ）</h4><ul><li><p>A、</p><p>align </p></li><li><p>B、</p><p>bgcolor </p></li><li><p>C、</p><p>background </p></li><li><p>D、</p><p>padding</p></li></ul><p>我的答案：D</p><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><h4 id="【单选题】下列哪项不属于一个完整的表单所包含的信息是（-）"><a href="#【单选题】下列哪项不属于一个完整的表单所包含的信息是（-）" class="headerlink" title="【单选题】下列哪项不属于一个完整的表单所包含的信息是（    ）"></a>【单选题】下列哪项不属于一个完整的表单所包含的信息是（    ）</h4><ul><li><p>A、</p><p>表单控件 </p></li><li><p>B、</p><p>提示信息</p></li><li><p>C、</p><p>表格</p></li><li><p>D、</p><p>表单域</p></li></ul><p>我的答案：C</p><h4 id="【单选题】form与-x2F-form之间的表单控件是由用户自定义的。下列选项中，不属于表单标记form的常用属性的是（-）"><a href="#【单选题】form与-x2F-form之间的表单控件是由用户自定义的。下列选项中，不属于表单标记form的常用属性的是（-）" class="headerlink" title="【单选题】form与&#x2F;form之间的表单控件是由用户自定义的。下列选项中，不属于表单标记form的常用属性的是（   ）"></a>【单选题】form与&#x2F;form之间的表单控件是由用户自定义的。下列选项中，不属于表单标记form的常用属性的是（   ）</h4><ul><li><p>A、</p><p>action</p></li><li><p>B、</p><p>size</p></li><li><p>C、</p><p>method </p></li><li><p>D、</p><p>name</p></li></ul><p>我的答案：B</p><h4 id="【单选题】下列选项中，属于-textarea-标记的必须属性的是"><a href="#【单选题】下列选项中，属于-textarea-标记的必须属性的是" class="headerlink" title="【单选题】下列选项中，属于 textarea 标记的必须属性的是(  )"></a>【单选题】下列选项中，属于 textarea 标记的必须属性的是(  )</h4><ul><li><p>A、</p><p>size</p></li><li><p>B、</p><p>row</p></li><li><p>C、</p><p>value</p></li><li><p>D、</p><p>cols</p></li></ul><p>我的答案：B</p><h2 id="第五章（css页面布局）"><a href="#第五章（css页面布局）" class="headerlink" title="第五章（css页面布局）"></a>第五章（css页面布局）</h2><h3 id="元素浮动"><a href="#元素浮动" class="headerlink" title="元素浮动"></a>元素浮动</h3><h4 id="【单选题】float属性值不包括（-）。"><a href="#【单选题】float属性值不包括（-）。" class="headerlink" title="【单选题】float属性值不包括（  ）。"></a>【单选题】float属性值不包括（  ）。</h4><ul><li><p>A、</p><p>left</p></li><li><p>B、</p><p>right</p></li><li><p>C、</p><p>none</p></li><li><p>D、</p><p>center</p></li></ul><p>我的答案：D</p><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><h4 id="【单选题】在设置子元素定位时，一般需先设置父元素的定位模式为（-），然后不需要设置其边偏移量。"><a href="#【单选题】在设置子元素定位时，一般需先设置父元素的定位模式为（-），然后不需要设置其边偏移量。" class="headerlink" title="【单选题】在设置子元素定位时，一般需先设置父元素的定位模式为（ ），然后不需要设置其边偏移量。"></a>【单选题】在设置子元素定位时，一般需先设置父元素的定位模式为（ ），然后不需要设置其边偏移量。</h4><ul><li><p>A、</p><p>static</p></li><li><p>B、</p><p>relative</p></li><li><p>C、</p><p>absolute</p></li><li><p>D、</p><p>fixed</p></li></ul><p>我的答案：B</p><h4 id="【多选题】绝对定位是将元素依据最近的已经定位（-）的父元素进行定位，若所有父元素都没有定位，则依据body根元素（即浏览器窗口）进行定位。"><a href="#【多选题】绝对定位是将元素依据最近的已经定位（-）的父元素进行定位，若所有父元素都没有定位，则依据body根元素（即浏览器窗口）进行定位。" class="headerlink" title="【多选题】绝对定位是将元素依据最近的已经定位（  ）的父元素进行定位，若所有父元素都没有定位，则依据body根元素（即浏览器窗口）进行定位。"></a>【多选题】绝对定位是将元素依据最近的已经定位（  ）的父元素进行定位，若所有父元素都没有定位，则依据body根元素（即浏览器窗口）进行定位。</h4><ul><li><p>A、</p><p>绝对定位</p></li><li><p>B、</p><p>固定定位</p></li><li><p>C、</p><p>相对定位</p></li><li><p>D、</p><p>静态定位</p></li></ul><p>我的答案：CD</p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="【单选题】当用定义列表dl标记定义新闻模块时，dt标记用于（-）。"><a href="#【单选题】当用定义列表dl标记定义新闻模块时，dt标记用于（-）。" class="headerlink" title="【单选题】当用定义列表dl标记定义新闻模块时，dt标记用于（   ）。"></a>【单选题】当用定义列表dl标记定义新闻模块时，dt标记用于（   ）。</h4><ul><li><p>A、</p><p>标识词条</p></li><li><p>B、</p><p>标识解释</p></li><li><p>C、</p><p>表示列表元素</p></li><li><p>D、</p><p>表示父级元素</p></li></ul><p>我的答案：A:标识词条;</p><h4 id="【单选题】当用定义列表dd标记定义新闻模块时，dt标记用于（-）。"><a href="#【单选题】当用定义列表dd标记定义新闻模块时，dt标记用于（-）。" class="headerlink" title="【单选题】当用定义列表dd标记定义新闻模块时，dt标记用于（   ）。"></a>【单选题】当用定义列表dd标记定义新闻模块时，dt标记用于（   ）。</h4><ul><li><p>A、</p><p>标识词条</p></li><li><p>B、</p><p>标识解释</p></li><li><p>C、</p><p>表示列表元素</p></li><li><p>D、</p><p>表示父级元素</p></li></ul><p>我的答案：B</p><h4 id="【单选题】从电脑科技网主体（content）的效果图中可以看出，分成（-）部分。"><a href="#【单选题】从电脑科技网主体（content）的效果图中可以看出，分成（-）部分。" class="headerlink" title="【单选题】从电脑科技网主体（content）的效果图中可以看出，分成（  ）部分。"></a>【单选题】从电脑科技网主体（content）的效果图中可以看出，分成（  ）部分。</h4><ul><li><p>A、</p><p>上、下两部分</p></li><li><p>B、</p><p>上、中、下三部分</p></li><li><p>C、</p><p>左、右两部分</p></li><li><p>D、</p><p>左、中、右三部分</p></li></ul><p>我的答案：B</p><h4 id="【单选题】请问电脑科技网采用的是（-）方式进行布局。"><a href="#【单选题】请问电脑科技网采用的是（-）方式进行布局。" class="headerlink" title="【单选题】请问电脑科技网采用的是（  ）方式进行布局。"></a>【单选题】请问电脑科技网采用的是（  ）方式进行布局。</h4><ul><li><p>A、</p><p>单列布局</p></li><li><p>B、</p><p>两列布局</p></li><li><p>C、</p><p>三列布局</p></li><li><p>D、</p><p>通栏布局</p></li></ul><p>我的答案：D</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java-school</title>
      <link href="/posts/9e172920.html"/>
      <url>/posts/9e172920.html</url>
      
        <content type="html"><![CDATA[<h1 id="java-school"><a href="#java-school" class="headerlink" title="java-school"></a>java-school</h1><h2 id="课上程序"><a href="#课上程序" class="headerlink" title="课上程序"></a>课上程序</h2><p>1-1000中含有7或者7的倍数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">study</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> mod=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;=<span class="number">1000</span>;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span>i;</span><br><span class="line">            <span class="keyword">while</span>(num!=<span class="number">0</span>)&#123;</span><br><span class="line">                mod = num%<span class="number">10</span>;</span><br><span class="line">                num= num/<span class="number">10</span>;</span><br><span class="line">                <span class="keyword">if</span>(mod==<span class="number">7</span>)&#123;</span><br><span class="line">                    flag=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="number">1</span>||i%<span class="number">7</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断闰年</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">study</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="keyword">if</span>((year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>)||year%<span class="number">400</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(year+<span class="string">&quot;是闰月&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(year+<span class="string">&quot;不是闰月&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从52张卡中抽取4张随机卡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、数组的书写规范</span></span><br><span class="line"><span class="comment">//2、随机数组的方法Math.random()*52)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">study</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//52为开的数组的大小</span></span><br><span class="line">        <span class="type">int</span>[] array1=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">52</span>];</span><br><span class="line">        <span class="type">int</span> j,k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">52</span>;i++)&#123;</span><br><span class="line">            array1[i]=i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] array2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line">        array2[<span class="number">0</span>]=array1[(<span class="type">int</span>)(Math.random()*<span class="number">52</span>)];</span><br><span class="line">        <span class="keyword">while</span> (k&lt;<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="type">int</span> n=array1[(<span class="type">int</span>)(Math.random()*<span class="number">52</span>)];</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(n==array2[j])&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=<span class="number">4</span>)&#123;</span><br><span class="line">                array2[k+<span class="number">1</span>]=n;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> value:array2)&#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>判断回文数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、String输入</span></span><br><span class="line"><span class="comment">//2、比较逐个比较String函数s.charAt(i)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">study</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String str1;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        str1=sc.next();</span><br><span class="line">        <span class="type">boolean</span> flag=isPalindrome(str1);</span><br><span class="line">        System.out.println(flag?<span class="string">&quot;Yes&quot;</span>:<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="type">int</span> count=s.length(),i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;count/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i)!=s.charAt(count-<span class="number">1</span>-i))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==count/<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>判断输入的字母的数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、判断逻辑word&lt;=&#x27;z&#x27;&amp;&amp;word&gt;=&#x27;a&#x27;||word&lt;=&#x27;Z&#x27;&amp;&amp;word&gt;=&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">study</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String str1;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        str1=sc.next();</span><br><span class="line">        <span class="type">int</span> count= countLetters(str1);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">countLetters</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="type">int</span> len=s.length(),i,num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="type">char</span> word=s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(word&lt;=<span class="string">&#x27;z&#x27;</span>&amp;&amp;word&gt;=<span class="string">&#x27;a&#x27;</span>||word&lt;=<span class="string">&#x27;Z&#x27;</span>&amp;&amp;word&gt;=<span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印日历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">study</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      Scanner sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">      System.out.println(<span class="string">&quot;请输入一个年份：（2018）&quot;</span>);</span><br><span class="line">      <span class="type">int</span> year=sc.nextInt();</span><br><span class="line">      LocalDate dates=LocalDate.of(year, Month.JANUARY,<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">while</span>(dates.getYear()==year)&#123;</span><br><span class="line">         String monthName=dates.getMonth().getDisplayName(TextStyle.FULL,Locale.getDefault());</span><br><span class="line">         <span class="type">int</span> daysOfMonth=dates.lengthOfMonth();</span><br><span class="line">         System.out.println(year+<span class="string">&quot;年&quot;</span>+monthName);</span><br><span class="line">         System.out.println( <span class="string">&quot;-------------------------------------&quot;</span>);</span><br><span class="line">         System.out.printf(<span class="string">&quot;%8s%8s%8s%8s%8s%8s%8s%n&quot;</span>,<span class="string">&quot;一&quot;</span>,<span class="string">&quot;二&quot;</span>,<span class="string">&quot;三&quot;</span>,<span class="string">&quot;四&quot;</span>,<span class="string">&quot;五&quot;</span>,<span class="string">&quot;六&quot;</span>,<span class="string">&quot;日&quot;</span>);</span><br><span class="line">         <span class="type">int</span> dayOfWeek=dates.getDayOfWeek().getValue();</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=dayOfWeek;i++)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%4s&quot;</span>,<span class="string">&quot; &quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">1</span>;i&lt;=daysOfMonth;i++)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%9s&quot;</span>,i);</span><br><span class="line">            <span class="keyword">if</span>((dayOfWeek+i-<span class="number">1</span>)%<span class="number">7</span>==<span class="number">0</span>) &#123;</span><br><span class="line">               System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enum类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Traffic</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">TrafficLight</span> &#123;</span><br><span class="line">        RED, GREEN, BLUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行输出结果</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 调用 values()</span></span><br><span class="line">        TrafficLight[] arr = TrafficLight.values();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 迭代枚举</span></span><br><span class="line">        <span class="keyword">for</span> (TrafficLight TR : arr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 查看索引</span></span><br><span class="line">            System.out.println(TR + <span class="string">&quot; at index &quot;</span> + TR.ordinal());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="学习通易错题"><a href="#学习通易错题" class="headerlink" title="学习通易错题"></a>学习通易错题</h2><h3 id="项目一（Java入门）"><a href="#项目一（Java入门）" class="headerlink" title="项目一（Java入门）"></a>项目一（Java入门）</h3><ol start="6"><li>(单选题)安装好JDK后，在其bin目录下有许多.exe可执行文件，其中java.exe命令的作用是以下哪一种（）</li></ol><ul><li>A. Java编译器</li><li>B. Java启动器</li><li>C. Java解释器</li><li>D. Java文档制作工具</li></ul><p><em>我的答案:</em> B:Java启动器;<em>正确答案:</em> C</p><ol start="8"><li>(填空题)环境变量           用来存储Java的编译和运行工具所在的路径，而         环境变量则用来保存Java虚拟机要运行的“.class”文件路径</li></ol><ul><li><p>我的答案：</p><p>(1) JAVA_HOME </p><p>(2) CLASSPATH </p></li><li><p><em>正确答案：</em></p><p>(1) path</p><p>(2) classpath</p></li></ul><ol start="9"><li><p>(填空题)Java的三大体系分别是（）、（）、（）。</p><p><em>正确答案：</em></p><p>JavaEE;JavaSE;JavaME</p></li><li><p>(判断题)Java语言的源程序不是编译型，而是编译解释型的</p></li></ol><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 对</p><h3 id="项目二（Java语言基础）"><a href="#项目二（Java语言基础）" class="headerlink" title="项目二（Java语言基础）"></a>项目二（Java语言基础）</h3><p>(填空题)Java中的变量可分为两种数据类型，分别是（）、（）。</p><ul><li><p><em>我的答案：**4.3</em>分</p><p>(1) 基本数据类型 </p><p>(2) 引用数据类型 </p></li><li><p><em>正确答案：</em></p><p>(1) 基本数据类型</p><p>(2) 引用数据类型</p></li></ul><p>(填空题)在Java中，byte类型数据占（）个字节，short类型数据占（）个字节，int类型数据占（）个字节，long类型数据占（）个字节</p><ul><li><p><em>我的答案：**4.3</em>分</p><p>(1) 1 </p><p>(2) 2 </p><p>(3) 4 </p><p>(4) 8 </p></li><li><p><em>正确答案：</em></p><p>(1) 1</p><p>(2) 2</p><p>(3) 4</p><p>(4) 8</p></li></ul><p>(填空题)若x&#x3D;2，则表达式（x++）&#x2F;3的值是___。</p><ul><li><p><em>我的答案：**0</em>分</p><p>(1) 1  </p></li><li><p><em>正确答案：</em></p><p>(1) 0</p></li></ul><p>(填空题)Java中的注释可分为三种类型，分别是（）、（）、（）。</p><ul><li><p><em>我的答案：**1.4</em>分</p><p>(1) 单行注释 </p><p>(2) 单行注释 </p><p>(3) 单行注释 </p></li><li><p><em>正确答案：</em></p><p>(1) 单行注释</p><p>(2) 多行注释</p><p>(3) 文档注释</p></li></ul><p>(判断题)定义多个同名方法时，可以依靠返回值区别同名方法</p><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 错</p><p>(判断题)使用break语句可以跳出一个循环</p><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 对<em>正确答案:</em> 错</p><h3 id="项目三（方法）"><a href="#项目三（方法）" class="headerlink" title="项目三（方法）"></a>项目三（方法）</h3><ol><li>(填空题)Java中方法的三种调用方式分别是      、    、     。</li></ol><ul><li><p><em>我的答案：</em></p><p>(1) 普通调用方式</p><p>(2) 对象调用方式（当方法是非静态方法时，需要通过对象实例来调用）</p><p>(3) 类调用方式（当方法是静态方法时，可以直接使用类名调用，不需要创建对象实例）</p></li></ul><h3 id="项目四（数组和字符串）"><a href="#项目四（数组和字符串）" class="headerlink" title="项目四（数组和字符串）"></a>项目四（数组和字符串）</h3><ol start="6"><li>(单选题)Java中的数组存储在( )中。</li></ol><ul><li>A. 栈</li><li>B. 队列</li><li>C. 堆</li><li>D. 链表</li></ul><p><em>我的答案:</em> A;*正确答案:*A</p><ol start="8"><li>(填空题)数组复制时,”&#x3D;”将一个数组的___传递给另一个数组。</li></ol><ul><li><p>*我的答案：</p><p>(1) 元素值 </p></li><li><p><em>正确答案：</em></p><p>(1) 引用</p></li></ul><ol start="9"><li>(填空题)JVM将数组存储在___(堆或栈)中。</li></ol><ul><li><p><em>我的答案：**0</em>分</p><p>(1) 堆 </p></li><li><p><em>正确答案：</em></p><p>(1) 栈</p></li></ul><h3 id="项目五（类与对象）"><a href="#项目五（类与对象）" class="headerlink" title="项目五（类与对象）"></a>项目五（类与对象）</h3><ol start="3"><li>(单选题)在以下什么情况下，构造方法会被调用？( )</li></ol><ul><li>A. 类的定义时</li><li>B. 创建对象时</li><li>C. 调用对象方法时</li><li>D. 适用对象的变量时</li></ul><p><em>我的答案:</em> B:创建对象时;<em>正确答案:</em> B:创建对象时;</p><ol start="13"><li>(判断题)声明构造方法时，不能使用private关键字修饰。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 对</p><ol start="15"><li>(判断题)方法内部类中不能访问外部类的成员变量。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 对</p><h3 id="项目六（继承）"><a href="#项目六（继承）" class="headerlink" title="项目六（继承）"></a>项目六（继承）</h3><ol start="4"><li>(填空题)（）类是所有类的父类,该类中判断两个对象是否相等的方法是（）,取得对象完整信息的方法是（）。（注意大小写）</li></ol><ul><li><p>我的答案：</p><p>(1) Object </p><p>(2) equals </p><p>(3) toString </p></li><li><p><em>正确答案：</em></p><p>(1) Object</p><p>(2) equals( )</p><p>(3) toString( )</p></li></ul><ol start="12"><li>(判断题)构造方法可以有返回值类型的声明。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 错</p><ol start="15"><li>(判断题)一个类不能既是子类又是父类。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 错</p><h3 id="项目七（多态）"><a href="#项目七（多态）" class="headerlink" title="项目七（多态）"></a>项目七（多态）</h3><ol start="7"><li>(填空题)___是指,一个类中可以有多个具有相同名字和类型的方法,但这些方法的参数必须不同。</li></ol><ul><li><p>我的答案：</p><p>(1) 方法重载 </p></li><li><p><em>正确答案：</em></p><p>(1) 方法重载</p></li></ul><ol start="8"><li>(填空题)再Java语言中多态性体现在由方法重载实现静态多态性和___实现的动态多态性。</li></ol><ul><li><p>我的答案：</p><p>(1) 方法重写 </p></li><li><p><em>正确答案：</em></p><p>(1) 方法重写</p></li></ul><p>抽象类</p><h3 id="项目八（集合与泛型）"><a href="#项目八（集合与泛型）" class="headerlink" title="项目八（集合与泛型）"></a>项目八（集合与泛型）</h3><ol start="2"><li>(单选题)使用Iterator时,判断是否存在下一个元素可以使用哪一个方法？( )</li></ol><ul><li>A. next( )</li><li>B. hash( )</li><li>C. hasPrevious( )</li><li>D. hasNext( )</li></ul><p><em>我的答案:</em> D:hasNext( );<em>正确答案:</em> D:hasNext( );</p><ol start="3"><li>(单选题)在程序开发中,经常会使用以下哪个类来存储程序中所需的配置？( )</li></ol><ul><li>A. HashMap</li><li>B. TreeSet</li><li>C. Properties</li><li>D. TreeMap</li></ul><p><em>我的答案:</em> C:Properties;<em>正确答案:</em> C</p><ol start="4"><li>(单选题)要想按照集合中保存的元素没有重复且按照一定的顺序排列,可以使用以下哪个集合？( )</li></ol><ul><li>A. LinkedList</li><li>B. ArrayList</li><li>C. hashSet</li><li>D. TreeSet</li></ul><p><em>我的答案:</em> D:TreeSet;<em>正确答案:</em> D:TreeSet;</p><ol start="5"><li>(填空题)JDK中提供了一系列可以存储任意对象的类,统称为___。</li></ol><ul><li><p>我的答案：</p><p>(1) 集合类 </p></li><li><p><em>正确答案：</em></p><p>(1) 集合;集合类</p></li></ul><ol start="6"><li>(填空题)在创建TreeSet对象时,可以传入自定义的比较器,自定义比较器需要实现___接口。</li></ol><ul><li><p>我的答案：</p><p>(1) Comparator </p></li><li><p><em>正确答案：</em></p><p>(1) Comparator</p></li></ul><ol start="7"><li>(填空题)Collection有两个子接口,分别是List和Set,List集合的特点是有序,可重复,Set集合的特点是___。</li></ol><ul><li><p>我的答案：</p><p>(1) 有序、可重复 无序、不可重复 </p></li><li><p><em>正确答案：</em></p><p>(1) 无序存储;无序不重复;元素无序,不可重复;无序不可重复</p></li></ul><ol start="8"><li>(填空题)使用Iterator遍历集合时,首先需要调用()方法判断是否存在下一个元素,若存在下一个元素,则调用())方法取出该元素。</li></ol><ul><li><p>我的答案：</p><p>(1) hasNext()  </p><p>(2) next()  </p></li><li><p><em>正确答案：</em></p><p>(1) hasNext( )</p><p>(2) next( )</p></li></ul><ol start="9"><li>(填空题)集合按照存储接口的不同可分为单列集合和双列集合,单列集合的根接口是(),双列集合的根接口是()。</li></ol><ul><li><p>我的答案：</p><p>(1) Collection  </p><p>(2) Map </p></li><li><p><em>正确答案：</em></p><p>(1) Collection</p><p>(2) Map</p></li></ul><ol start="12"><li>(判断题)集合中不能存放基本数据类型,而只能存放引用数据类型。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><ol start="14"><li>(判断题)使用Iterator迭代集合元素时,可以调用集合对象的方法增删元素。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 错</p><h3 id="项目十一（多线程）"><a href="#项目十一（多线程）" class="headerlink" title="项目十一（多线程）"></a>项目十一（多线程）</h3><p> (单选题)Thread类位于下列哪个包中？( )</p><ul><li>A. java.io</li><li>B. java.lang</li><li>C. java.util</li><li>D. java.awt</li></ul><p><em>我的答案:</em> B:java.lang;<em>正确答案:</em> B:java.lang;</p><p> (单选题)对于调用sleep()方法后，该线程将进入以下哪种状态?()</p><ul><li>A. 就绪状态</li><li>B. 运行状态</li><li>C. 阻塞状态</li><li>D. 死亡状态</li></ul><p><em>我的答案:</em> C:阻塞状态;<em>正确答案:</em> C:阻塞状态;</p><p>(多选题)关于线程的创建过程，下面四种说法正确的有哪些?()(多选)</p><ul><li>A. 定义Thread类的在子类，重写Thread类的run( )方法，创建该子类的实例对象，调用对象的start( )方法</li><li>B. 定义Thread类的在子类，重写Thread类的run( )方法，创建该子类的实例对象，调用对象的run( )方法</li><li>C. 定义一个实现Runnable接口的类并实现run( )方法，创建该类的实例对象，将其作为参数传递给Thread类的构造方法来创建Thread对象，调用Thread对象的start( )方法。</li><li>D. 定义一个实现Runnable接口的类并实现run( )方法，创建该类对象，然后调用run( )方法。</li></ul><p><em>我的答案:</em> AC;<em>正确答案:</em> AC;</p><p>(多选题)对于通过实现Runnable接口创建线程，下面说法正确的有哪些?()(多选)</p><ul><li>A. 适合多个相同程序代码的线程去处理同一个资源的情况。</li><li>B. 把线程同步程序代码、数据有效地分离，很好的体现了面向对象的设计思想。</li><li>C. 可以避免由于Java的单继承带来的局限性。</li><li>D. 编写简单，可以不通过Thread类直接创建线程。</li></ul><p><em>我的答案:</em> ABCD;<em>正确答案:</em> ABC;</p><p> (多选题)对于线程的生命周期，下面四种说法正确的有哪些?()(多选)</p><ul><li>A. 调用了线程的start( )方法，该线程就进入运行状态。</li><li>B. 线程的run( )方法运行结束或未被catch的InterruptedException等异常终结，那么该线程进入死亡状态。</li><li>C. 线程进入是死亡状态，但是该线程对象仍然是一个Thread对象，在没有被垃圾回收器回收之前仍然可以像引用其他对象一样引用它。</li><li>D. 线程进入死亡状态后，调用它的start( )方法仍然可以重新启动。</li></ul><p><em>我的答案:</em> ABD;<em>正确答案:</em> BC;</p><p>(多选题)下面四个选项中，对线程同步的目的描述正确的有哪些?()(多选)</p><ul><li>A. 锁定资源，是同一时刻只有一个线程去访问它，防止多个线程操作同一个资源引发错误。</li><li>B. 提高线程的执行效率</li><li>C. 让线程独占一个资源</li><li>D. 让多个线程同时使用一个资源</li></ul><p><em>我的答案:</em> ABC;<em>正确答案:</em> AB</p><p>(填空题)一个应用程序中有多个并发执行的线索，每条线索都被称作一个（），它们会交替执行，彼此间可以进行（）。</p><ul><li><p>我的答案：</p><p>(1) 线程 </p><p>(2) 通信 </p></li><li><p><em>正确答案：</em></p><p>(1) 线程</p><p>(2) 通信</p></li></ul><p>(填空题)在实现多线程的程序时有两种方式，一是通过继承（）类，二是通过实现（）接口。</p><ul><li><p><em>我的答案：**5</em>分</p><p>(1) Thread </p><p>(2) Runnable </p></li><li><p><em>正确答案：</em></p><p>(1) Thread</p><p>(2) Runnable</p></li></ul><p> (填空题)在Java语言中，同步方法需要用到关键字（）对于同步方法而言无需指定同步锁，它的同步锁是方法所在的（），也就是（）(关键字)。</p><ul><li><p><em>我的答案：**5</em>分</p><p>(1) synchronized  </p><p>(2) 对象 </p><p>(3) this </p></li><li><p><em>正确答案：</em></p><p>(1) synchronized</p><p>(2) 当前对象;对象</p><p>(3) this</p></li></ul><p> (填空题)在多任务系统中，每个独立执行的程序称之为（）也就是”正在运行的程序”。</p><ul><li><p><em>我的答案：**5</em>分</p><p>(1) 进程 </p></li><li><p><em>正确答案：</em></p><p>(1) 进程</p></li></ul><p>(填空题)线程的整个生命周期分为五个阶段，分别是（），（），（），（）和（）。</p><ul><li><p><em>正确答案：</em></p><p>(1) 新建;新建状态</p><p>(2) 就绪;就绪状态</p><p>(3) 运行;运行状态</p><p>(4) 阻塞;阻塞状态</p><p>(5) 死亡;死亡状态</p></li></ul><p>(填空题)线程的优先级用1~10之间的整数来表示，其中（）代表优先级最高，（）代表优先级最低。</p><ul><li><p><em>我的答案：**5</em>分</p><p>(1) 10 </p><p>(2) 1 </p></li><li><p><em>正确答案：</em></p><p>(1) 10</p><p>(2) 1</p></li></ul><p>(填空题)在Thread类中，提供了一个start( )方法，该方法用于（），当新线程启动后，系统会自动调用一个（）方法。</p><ul><li><p><em>我的答案：**5</em>分</p><p>(1) 启动线程 </p><p>(2) run() </p></li><li><p><em>正确答案：</em></p><p>(1) 启动线程</p><p>(2) run()</p></li></ul><p>(判断题)如果前台线程全部死亡，后台线程也会自动死亡。</p><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 对</p><p>(判断题)同步代码块的锁对象可以是任意类型的对象。</p><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 对</p><p>(判断题)静态方法不能使用synchronized关键字来修饰。</p><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 错</p><p> (判断题)线程结束等待或者阻塞状态后，会进入运行状态。</p><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 错</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Uni-app</title>
      <link href="/posts/2e2abc46.html"/>
      <url>/posts/2e2abc46.html</url>
      
        <content type="html"><![CDATA[<h1 id="Uni-app"><a href="#Uni-app" class="headerlink" title="Uni-app"></a>Uni-app</h1><h2 id="uni-request"><a href="#uni-request" class="headerlink" title="uni.request"></a>uni.request</h2><p>使用中经常出现，赋不上初值的问题，需要在刷新时才能获取到数据，解决方法就是在需要该数据的前一个页面就要加上请求语句，获取到所有的数据（clock的bug QAQ）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">uni.<span class="title function_">request</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://localhost:8181/target/delete&#x27;</span>,</span><br><span class="line"><span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">targetName</span>: state.<span class="property">targetWithTime</span>[index].<span class="property">targetName</span>,</span><br><span class="line"><span class="attr">ifPoints</span>: <span class="number">1</span>,</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="comment">//请求成功后的操作，res为返回的数据</span></span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"><span class="comment">// 从targetWithTime数组中移除已删除的目标数据</span></span><br><span class="line">        <span class="comment">//这里的对state.targetWithTime和user.data.point的操作很关键</span></span><br><span class="line">        <span class="comment">//因为数据库操作成功了，但是前端数据并没有发送改变</span></span><br><span class="line">        <span class="comment">//这时候就需要对响应式数据进行相应的改变，来保证页面的改变</span></span><br><span class="line">state.<span class="property">targetWithTime</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">user.<span class="property">data</span>.<span class="property">point</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">targetPoint</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="uni-showToast"><a href="#uni-showToast" class="headerlink" title="uni.showToast"></a>uni.showToast</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//弹出来的提示信息</span></span><br><span class="line">uni.<span class="title function_">showToast</span>(&#123;</span><br><span class="line"><span class="attr">icon</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line"><span class="attr">title</span>: <span class="string">&#x27;密码错误&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="uni-redirectTo"><a href="#uni-redirectTo" class="headerlink" title="uni.redirectTo"></a>uni.redirectTo</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重定向，在函数中使用比较方便</span></span><br><span class="line">uni.<span class="title function_">redirectTo</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;../../pages/index/Time&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="scroll-view"><a href="#scroll-view" class="headerlink" title="scroll-view"></a>scroll-view</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!--enable-flex为允许设置flex布局--&gt;</span><br><span class="line">    &lt;scroll-view class=&quot;tagMenuList&quot; scroll-x=&quot;true&quot; enable-flex=&quot;true&quot;&gt;</span><br><span class="line">        &lt;view :class=&quot;item.className&quot; v-for=&quot;(item, index) in state.tagWithTime&quot; :key=&quot;index&quot; @click=&quot;classChange(index)&quot;&gt;</span><br><span class="line">            &lt;view class=&quot;tagMenuListDP&quot;&gt;</span><br><span class="line">                &lt;text&gt;&#123;&#123; item.tagName &#125;&#125;&lt;/text&gt;</span><br><span class="line">            &lt;/view&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">    &lt;/scroll-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="swiper"><a href="#swiper" class="headerlink" title="swiper"></a>swiper</h2><p>需要搭配swiper-item作为滑动的内容</p><p>注意该组件可能z-index有所设置，如果下面再加内容可能被覆盖</p><p>注意设置@change&#x3D;”changeswiper”和 :current&#x3D;”state.currentswiper”避免报错:[渲染层错误] [Component] <swiper>: current 属性无效，请修改 current 值的报错（不是很理解）</p><p>注意swiper大多数情况下都需要整体都比swiper-item的内容大一些</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!--easing-function为动画效果--&gt;</span><br><span class="line">    &lt;swiper class=&quot;swiper&quot; autoplay=&quot;true&quot; easing-function=&quot;easeInOutCubic&quot; @change=&quot;changeswiper&quot; :current=&quot;state.currentswiper&quot;&gt;</span><br><span class="line">        &lt;swiper-item v-for=&quot;(item, index) in state.storeWithTime&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">            &lt;view class=&quot;StoreDetail&quot;&gt;</span><br><span class="line">                &lt;view class=&quot;StoreDetailI&quot;&gt;</span><br><span class="line">                    &lt;image src=&quot;https://img1.imgtp.com/2023/05/23/d3gU1S46.svg&quot;</span><br><span class="line">                        style=&quot;width: 606rpx;height: 606rpx;position: absolute;&quot; /&gt;</span><br><span class="line">                &lt;/view&gt;</span><br><span class="line">                &lt;view class=&quot;StoreDetailP&quot;&gt;</span><br><span class="line">                    &lt;text&gt;&#123;&#123; item.storeName &#125;&#125;&lt;/text&gt;</span><br><span class="line">                    &lt;text&gt;&#123;&#123; item.storeDescribe &#125;&#125;&lt;/text&gt;</span><br><span class="line">                    &lt;text&gt;&#123;&#123; item.storeHour &#125;&#125;小时&#123;&#123; item.storeMinute &#125;&#125;分钟&lt;/text&gt;</span><br><span class="line">                &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">                &lt;view class=&quot;StoreDetailPrice&quot; @click=&quot;storeWithTimeDelete(index)&quot;&gt;</span><br><span class="line">                    &lt;image src=&quot;@/static/coin.svg&quot; style=&quot;width: 34rpx;height: 34rpx;&quot; /&gt;</span><br><span class="line">                    &lt;text&gt;X&#123;&#123; item.storePoint &#125;&#125;&lt;/text&gt;</span><br><span class="line">                &lt;/view&gt;</span><br><span class="line">            &lt;/view&gt;</span><br><span class="line">        &lt;/swiper-item&gt;</span><br><span class="line">    &lt;/swiper&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">//下面的代码是应对[渲染层错误] [Component] &lt;swiper&gt;: current 属性无效，请修改 current 值的报错（不是很理解）</span><br><span class="line">const currentswiper = () =&gt; &#123;</span><br><span class="line">state.currentswiper = this.detail.currentswiper</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="uni-popup"><a href="#uni-popup" class="headerlink" title="uni-popup"></a>uni-popup</h2><p>需要用ref进行整体响应化，并调用其中的方法来控制关闭和控制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;uni-popup ref=&quot;popup&quot; type=&quot;dialog&quot;&gt;</span><br><span class="line">        &lt;!--mode=&quot;base&quot;为对话框加两个按钮的形式--&gt;</span><br><span class="line">        &lt;!--before-close为是否拦截按钮事件，如为true，则不会关闭对话框，关闭需要手动执行 uni-popup 的 close 方法--&gt;</span><br><span class="line">        &lt;uni-popup-dialog type=&quot;error&quot; mode=&quot;base&quot; title=&quot;确定要放弃吗?&quot; content=&quot;本次计时将不会得到任何分数&quot; :duration=&quot;2000&quot; :before-close=&quot;true&quot;</span><br><span class="line">            @close=&quot;close&quot; @confirm=&quot;confirm&quot;&gt;&lt;/uni-popup-dialog&gt;</span><br><span class="line">    &lt;/uni-popup&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    </span><br><span class="line">let popup = ref(null); //记着赋初值，本质是reactive(&#123;value:null&#125;)</span><br><span class="line"></span><br><span class="line">const timeEnd = () =&gt; &#123;</span><br><span class="line">popup.value.open() //记得.value然后调用函数</span><br><span class="line">&#125;</span><br><span class="line">const confirm = () =&gt; &#123;</span><br><span class="line">popup.value.close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const close = () =&gt; &#123;</span><br><span class="line">popup.value.close()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="uni-uploadFile"><a href="#uni-uploadFile" class="headerlink" title="uni.uploadFile"></a>uni.uploadFile</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">uni.uploadFile(&#123;</span><br><span class="line">url: url + &#x27;/user/uploadFile&#x27;, //后台接口</span><br><span class="line">filePath: state.avatarUrl, // 上传图片 url</span><br><span class="line">name: &#x27;file&#x27;,</span><br><span class="line">// formData: this.formData,</span><br><span class="line">header: &#123;</span><br><span class="line">&#x27;content-type&#x27;: &#x27;multipart/form-data&#x27;</span><br><span class="line">&#125;, // header 值</span><br><span class="line">success: (res) =&gt; &#123;</span><br><span class="line">const responseData = JSON.parse(res.data); // 解析JSON字符串为对象</span><br><span class="line">user.data.picData = responseData.data.picData</span><br><span class="line">state.avatarUrl = `data:image/jpeg;base64,$&#123;user.data.picData&#125;`//转化为链接</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="uni-showLoading"><a href="#uni-showLoading" class="headerlink" title="uni.showLoading"></a>uni.showLoading</h2><p>必须配合uni.hideLoading()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">    const WxLogin = () =&gt; &#123;</span><br><span class="line">        uni.showLoading(&#123;</span><br><span class="line">title: &#x27;微信登录中...&#x27;</span><br><span class="line">&#125;);</span><br><span class="line">        uni.hideLoading();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/posts/79666db.html"/>
      <url>/posts/79666db.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>设单链表的结点结构为(data,next)，next为指针域，已知指针px指向单链表中data为x的结点，指针py指向data为y的新结点 , 若将结点y插入结点x之后，则需要执行以下语句:</p><p>X  (2)-&gt; Y (1)-&gt;  Z</p><p>1、首先这是一个插入的方法，而第一步就是把将要插入的y结点的下一个结点变为x原来的下一个结点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py-&gt;next = px-&gt;next;</span><br></pre></td></tr></table></figure><p>2、把x结点的下一个结点变为x结点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">px-&gt;next = py;</span><br></pre></td></tr></table></figure><p>对线性表L&#x3D;（a1…an）</p><p>(1)如L为顺序表，请设计算法将L就地逆置。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXSIZE = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">int</span> data[MAXSIZE];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125; SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将顺序表L就地逆置</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(SqList &amp;L)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        temp = L.data[i];</span><br><span class="line">        L.data[i] = L.data[L.length - i - <span class="number">1</span>];</span><br><span class="line">        L.data[L.length - i - <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqList L = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, <span class="number">6</span>&#125;; <span class="comment">// 初始化顺序表L</span></span><br><span class="line">    <span class="built_in">reverse</span>(L); <span class="comment">// 就地逆置L</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        cout &lt;&lt; L.data[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)若L为带头结点的单链表，设计算法将L就地逆置。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line"></span><br><span class="line">    ListNode* next;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverseList</span><span class="params">(ListNode* L)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ListNode* cur = L-&gt;next;</span><br><span class="line"></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ListNode* next = cur-&gt;next;</span><br><span class="line"></span><br><span class="line">    cur-&gt;next = L-&gt;next;</span><br><span class="line"></span><br><span class="line">    L-&gt;next = cur;</span><br><span class="line"></span><br><span class="line">    cur = next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试编写在带头结点的单链表L中删除（一个）最小值结点的（高效）算法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125; LNode, *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建带头结点的单链表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createList</span><span class="params">(LinkList &amp;L, <span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    L = <span class="keyword">new</span> LNode;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        LNode *p = <span class="keyword">new</span> LNode;</span><br><span class="line">        p-&gt;data = a[i];</span><br><span class="line">        p-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除带头结点的单链表L中最小值结点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deleteMin</span><span class="params">(LinkList &amp;L)</span> </span>&#123;</span><br><span class="line">    LNode *pre = L, *p = L-&gt;next, *minpre = pre, *minp = p;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;data &lt; minp-&gt;data) &#123;</span><br><span class="line">            minp = p;</span><br><span class="line">            minpre = pre;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    minpre-&gt;next = minp-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> minp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[] = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    LinkList L;</span><br><span class="line">    <span class="built_in">createList</span>(L, a, <span class="number">5</span>); <span class="comment">// 创建带头结点的单链表L</span></span><br><span class="line">    <span class="built_in">deleteMin</span>(L); <span class="comment">// 删除L中最小值结点</span></span><br><span class="line">    LNode *p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设有一个带头结点的单链表，其结点的数据值均为正整数，编写完成下列功能的算法：</p><p>(1)找出最小值结点，且输出该数值；</p><p>(2)若该数值是奇数，则将其与直接后继结点的数值交换；</p><p>(3)若该数值是偶数，则将其直接后继结点删除。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line"></span><br><span class="line">    ListNode* next;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swapdataue</span><span class="params">(ListNode* a, ListNode* b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> temp = a-&gt;data;</span><br><span class="line"></span><br><span class="line">    a-&gt;data = b-&gt;data;</span><br><span class="line"></span><br><span class="line">    b-&gt;data = temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deleteNextNode</span><span class="params">(ListNode* node)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ListNode* del = node-&gt;next;</span><br><span class="line"></span><br><span class="line">    node-&gt;next = del-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> del;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operateList</span><span class="params">(ListNode* L)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ListNode* pre = L;</span><br><span class="line"></span><br><span class="line">    ListNode* cur = L-&gt;next;</span><br><span class="line"></span><br><span class="line">    ListNode* min_pre = pre;</span><br><span class="line"></span><br><span class="line">    ListNode* min = cur;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cur-&gt;data &lt; min-&gt;data) &#123;</span><br><span class="line"></span><br><span class="line">        min_pre = pre;</span><br><span class="line"></span><br><span class="line">        min = cur;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pre = cur;</span><br><span class="line"></span><br><span class="line">    cur = cur-&gt;next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;最小值为：&quot;</span> &lt;&lt; min-&gt;data &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (min-&gt;data % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; min-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">swapdataue</span>(min, min-&gt;next);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (min-&gt;data % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; min-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">deleteNextNode</span>(min);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设有两个按元素值非递减次序排列的线性表，均以单链表形式存储。请编写算法将这两个单链表归并为一个按元素值非递增次序排列的单链表，并要求利用原来两个单链表的结点存放归并后的单链表。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义链表结点结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并两个单链表并返回合并后的链表头节点</span></span><br><span class="line"><span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">    <span class="function">ListNode <span class="title">dummy</span><span class="params">(<span class="number">0</span>)</span></span>;  <span class="comment">// 哑结点</span></span><br><span class="line">    ListNode* tail = &amp;dummy;  <span class="comment">// 合并后链表的尾结点</span></span><br><span class="line">    <span class="keyword">while</span> (l1 &amp;&amp; l2) &#123;</span><br><span class="line">        <span class="comment">// 选择两个链表中较小的结点接入合并后的链表尾部</span></span><br><span class="line">        <span class="keyword">if</span> (l1-&gt;val &lt;= l2-&gt;val) &#123;</span><br><span class="line">            tail-&gt;next = l1;</span><br><span class="line">            l1 = l1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tail-&gt;next = l2;</span><br><span class="line">            l2 = l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = tail-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将剩余的链表结点接入合并后的链表尾部</span></span><br><span class="line">    <span class="keyword">if</span> (l1) &#123;</span><br><span class="line">        tail-&gt;next = l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        tail-&gt;next = l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 反转合并后的链表，使其变为非递增次序排列</span></span><br><span class="line">    ListNode* prev = <span class="literal">NULL</span>;</span><br><span class="line">    ListNode* curr = dummy.next;</span><br><span class="line">    <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">        ListNode* next = curr-&gt;next;</span><br><span class="line">        curr-&gt;next = prev;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化两个按元素值非递减次序排列的单链表</span></span><br><span class="line">    ListNode* l1 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">    l1-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">3</span>);</span><br><span class="line">    l1-&gt;next-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">5</span>);</span><br><span class="line">    l1-&gt;next-&gt;next-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">7</span>);</span><br><span class="line">    l1-&gt;next-&gt;next-&gt;next-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">9</span>);</span><br><span class="line">    ListNode* l2 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">2</span>);</span><br><span class="line">    l2-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">4</span>);</span><br><span class="line">    l2-&gt;next-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">6</span>);</span><br><span class="line">    l2-&gt;next-&gt;next-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">8</span>);</span><br><span class="line">    l2-&gt;next-&gt;next-&gt;next-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 归并两个单链表并输出合并后的链表元素</span></span><br><span class="line">    ListNode* merged = <span class="built_in">mergeTwoLists</span>(l1, l2);</span><br><span class="line">    <span class="keyword">while</span> (merged) &#123;</span><br><span class="line">        cout &lt;&lt; merged-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        merged = merged-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ListNode(int x) : val(x), next(NULL) &#123;&#125; 是一个 C++ 类的构造函数。它的作用是创建一个新的 ListNode 对象，并初始化 val 和 next 属性。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//具体地，: val(x), next(NULL) 是 C++ 中的成员初始化列表，用于给对象的成员变量进行初始化。在这里，val 成员变量被初始化为参数 x 的值，而 next 成员变量被初始化为 NULL。然后，在函数体内部，由于该构造函数不需要进行额外的操作，所以函数体为空。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//总之，这行代码的作用是创建一个新的 ListNode 对象，并将它的 val 属性设置为 x，next 属性设置为 NULL</span></span><br></pre></td></tr></table></figure><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><p>利用栈和队列，判断键盘上输入的n个数是否构成回文序列。(算法设计题)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在代码中，输入序列中的元素通过stack和queue两个数据结构依次入栈和入队。然后，使用top()和front()方法依次从栈和队列中取出元素，并比较它们的值是否相等，如果有不相等的，则说明输入序列不是回文序列，返回false。如果比较到栈和队列都为空，说明输入序列是回文序列，返回true。最后，在main()函数中调用is_palindrome()函数，根据其返回值输出结果。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span>  <span class="comment">// 包含栈所在的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span>  <span class="comment">// 包含队列所在的头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断输入的n个数是否构成回文序列</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_palindrome</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s;  <span class="comment">// 定义一个整型栈s</span></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;  <span class="comment">// 定义一个整型队列q</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        cin &gt;&gt; num;  <span class="comment">// 输入第i个数</span></span><br><span class="line">        s.<span class="built_in">push</span>(num);  <span class="comment">// 将第i个数入栈</span></span><br><span class="line">        q.<span class="built_in">push</span>(num);  <span class="comment">// 将第i个数入队</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; !q.<span class="built_in">empty</span>()) &#123;  <span class="comment">// 当栈和队列都不为空时</span></span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">top</span>() != q.<span class="built_in">front</span>()) &#123;  <span class="comment">// 如果栈顶元素和队首元素不相等</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 返回false，输入的数不是回文序列</span></span><br><span class="line">        &#125;</span><br><span class="line">        s.<span class="built_in">pop</span>();  <span class="comment">// 将栈顶元素弹出</span></span><br><span class="line">        q.<span class="built_in">pop</span>();  <span class="comment">// 将队首元素弹出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">// 如果比较完毕栈和队列都为空，则输入的数是回文序列，返回true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter the number of elements: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; n;  <span class="comment">// 输入元素个数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">is_palindrome</span>(n)) &#123;  <span class="comment">// 如果输入的数是回文序列</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The sequence is a palindrome.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 如果输入的数不是回文序列</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The sequence is not a palindrome.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// 程序结束，返回0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查表达式中括号是否匹配</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在代码中，输入的表达式字符串通过stack栈结构进行括号匹配检查。当遇到左括号时，将其入栈；当遇到右括号时，从栈中弹出一个元素并比较其是否匹配。如果不匹配，则表达式中的括号不匹配，返回false；如果栈中元素都已匹配完毕，表明表达式中的括号匹配，返回true。最后，在main()函数中调用is_matching()函数，根据其返回值输出结果。</span></span><br><span class="line"></span><br><span class="line">值得注意的是，代码中默认输入的表达式中只包含括号，如果输入的表达式中包含其他字符，则需要做相应的处理。</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断表达式中的括号是否匹配</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_matching</span><span class="params">(string exp)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; s; <span class="comment">// 声明一个栈s</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; exp.<span class="built_in">length</span>(); i++) &#123; <span class="comment">// 循环遍历表达式中的每个字符</span></span><br><span class="line">        <span class="type">char</span> ch = exp[i]; <span class="comment">// 获取当前字符</span></span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span> || ch == <span class="string">&#x27;&#123;&#x27;</span> || ch == <span class="string">&#x27;[&#x27;</span>) &#123; <span class="comment">// 如果当前字符是左括号，则入栈</span></span><br><span class="line">            s.<span class="built_in">push</span>(ch);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;)&#x27;</span> || ch == <span class="string">&#x27;&#125;&#x27;</span> || ch == <span class="string">&#x27;]&#x27;</span>) &#123; <span class="comment">// 如果当前字符是右括号，则弹出栈顶元素进行匹配</span></span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">empty</span>()) &#123; <span class="comment">// 如果栈为空，则说明右括号没有匹配的左括号，表达式中的括号不匹配，返回false</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">char</span> top_ch = s.<span class="built_in">top</span>(); <span class="comment">// 获取栈顶元素</span></span><br><span class="line">            s.<span class="built_in">pop</span>(); <span class="comment">// 弹出栈顶元素</span></span><br><span class="line">            <span class="keyword">if</span> ((ch == <span class="string">&#x27;)&#x27;</span> &amp;&amp; top_ch != <span class="string">&#x27;(&#x27;</span>) || <span class="comment">// 如果当前字符是右括号，但栈顶元素不是对应的左括号，则表达式中的括号不匹配，返回false</span></span><br><span class="line">                (ch == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; top_ch != <span class="string">&#x27;&#123;&#x27;</span>) || </span><br><span class="line">                (ch == <span class="string">&#x27;]&#x27;</span> &amp;&amp; top_ch != <span class="string">&#x27;[&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="built_in">empty</span>(); <span class="comment">// 如果栈中没有剩余元素，则说明表达式中的括号全部匹配，返回true；否则返回false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string exp;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter an expression: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; exp;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">is_matching</span>(exp)) &#123; <span class="comment">// 调用is_matching()函数判断表达式中的括号是否匹配，并输出结果</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The parentheses in the expression are matched.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The parentheses in the expression are not matched.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用栈的基本操作实现将十进制整数N转换为r（2≤r≤16）进制数，并输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将十进制整数N转换为r进制数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">convert</span><span class="params">(<span class="type">int</span> N, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s; <span class="comment">// 声明一个栈s</span></span><br><span class="line">    <span class="keyword">while</span> (N &gt; <span class="number">0</span>) &#123; <span class="comment">// 循环将N转换为r进制数</span></span><br><span class="line">        <span class="type">int</span> remainder = N % r; <span class="comment">// 计算N除以r的余数</span></span><br><span class="line">        s.<span class="built_in">push</span>(remainder); <span class="comment">// 将余数入栈</span></span><br><span class="line">        N /= r; <span class="comment">// 将N除以r的商作为新的N</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将栈中的元素依次弹出并输出，即为r进制表示的N</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The converted number is: &quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> digit = s.<span class="built_in">top</span>(); <span class="comment">// 获取栈顶元素</span></span><br><span class="line">        s.<span class="built_in">pop</span>(); <span class="comment">// 弹出栈顶元素</span></span><br><span class="line">        <span class="keyword">if</span> (digit &lt; <span class="number">10</span>) &#123; <span class="comment">// 如果是0-9的数字，则直接输出</span></span><br><span class="line">            cout &lt;&lt; digit;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则输出对应的字母</span></span><br><span class="line">            cout &lt;&lt; <span class="built_in">char</span>(digit - <span class="number">10</span> + <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> N, r;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter a decimal integer N: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter a base r (2 &lt;= r &lt;= 16): &quot;</span>;</span><br><span class="line">    cin &gt;&gt; r;</span><br><span class="line">    <span class="built_in">convert</span>(N, r); <span class="comment">// 调用convert()函数进行转换并输出结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="学习通"><a href="#学习通" class="headerlink" title="学习通"></a>学习通</h2><h3 id="第一章-基础概念"><a href="#第一章-基础概念" class="headerlink" title="第一章(基础概念)"></a>第一章(基础概念)<img src="https://gitee.com/TECNB/pic-demo/raw/master/image-20230612193237000.png" alt="image-20230612193237000"></h3><ol><li>(单选题) 以下关于数据的<strong>存储结构</strong>的叙述中哪一条是正确的（  ）。</li></ol><ul><li>A. 数据的存储结构是逻辑结构在<strong>计算机存储器中的实现</strong></li><li>B. 数据的存储结构对数据运算的具体实现没有影响</li><li>C. 数据的存储结构是数据间关系的抽象描述</li><li>D. 数据的存储结构分为线性结构和非线性结构</li></ul><p>（数据的<strong>逻辑结构</strong>分为线性结构和非线性结构两大类，线性结构包括数组、链表、 栈、队列等; 非线性结构包括树、图等）</p><p><em>我的答案:</em> A:数据的存储结构是逻辑结构在计算机存储器中的实现;<em>正确答案:</em> A:数据的存储结构是逻辑结构在计算机存储器中的实现;</p><p>B. 数据的存储结构对数据运算的具体实现没有影响：这个选项是错误的。数据的存储结构会对数据的运算和操作产生影响。不同的存储结构会影响数据的访问效率、插入和删除操作的复杂度等。</p><p>C. 数据的存储结构是数据间关系的抽象描述：这个选项是不准确的。数据的存储结构描述的是数据在计算机存储器中的组织方式，它并不仅仅是对数据间关系的抽象描述，还包括数据的物理存储方式和访问方式等。</p><p>D. 数据的存储结构分为线性结构和非线性结构：这个选项是不准确的。数据的存储结构可以更细分为线性结构、树形结构、图形结构等多种类型，而非线性结构只是其中的一种。</p><ol start="6"><li>(单选题) 下面说法<strong>错误</strong>的是（  ）</li></ol><ul><li>A. 在相同的规模n下，复杂度O(n)的算法在时间上总是优于复杂度O(2n)的算法 </li><li>B. 同一个算法，实现语言的级别越高，执行效率就越低</li><li>C. 算法原地工作的含义是指不需要任何额外的辅助空间</li><li>D. 所谓时间复杂度是指最坏情况下估算算法执行时间的一个上界</li></ul><p><em>我的答案:</em> B:同一个算法，实现语言的级别越高，执行效率就越低;<em>正确答案:</em> C:算法原地工作的含义是指不需要任何额外的辅助空间;（和AI有歧义）</p><ol start="10"><li>(填空题) 数据的（）在计算机中的表示（映像）称为存储结构，需要考虑数据元素的表示和数据元素间关系的表示。数据的存储结构分为（）、（）、索引和散列存储结构。</li></ol><ul><li><p>我的答案：</p><p>(1) 存储结构 </p><p>(2) 顺序存储结构 </p><p>(3) 链式存储结构 </p></li><li><p><em>正确答案：</em></p><p>(1) 逻辑结构</p><p>(2) 顺序</p><p>(3) 链式</p></li></ul><p>数据的逻辑结构是指    。</p><ul><li><p>我的答案：</p><p>(1) 逻辑结构在计算机存储器中的实现 </p></li><li><p><em>正确答案：</em></p><p>(1) 数据的组织形式，即数据元素之间逻辑关系的总体</p></li></ul><p>（数据的逻辑结构分为线性结构和非线性结构两大类，线性结构包括数组、链表、 栈、队列等; 非线性结构包括树、图等）</p><h4 id="填空题-一个算法具有5个特性：-，有零个或多个输入、有一个或多个输出。"><a href="#填空题-一个算法具有5个特性：-，有零个或多个输入、有一个或多个输出。" class="headerlink" title="(填空题) 一个算法具有5个特性：     ,      ,      ，有零个或多个输入、有一个或多个输出。"></a>(填空题) 一个算法具有5个特性：     ,      ,      ，有零个或多个输入、有一个或多个输出。</h4><ul><li><p>我的答案：</p><p>(1) <strong>有穷性</strong> </p><p>(2) <strong>确定性</strong> </p><p>(3) <strong>可行性</strong> </p></li><li><p><em>正确答案：</em></p><p>(1) 有穷性</p><p>(2) 确定性</p><p>(3) 可行性</p></li></ul><p>下面程序段中带下划线的语句的执行次数的数量级是       。i&#x3D;1；while( i&lt;n) i&#x3D;i*2; </p><ul><li><p><em>我的答案：**0</em>分</p><p>(1) O（log₂n） </p></li><li><p><em>正确答案：</em></p><p>(1) O(log2n)</p></li></ul><p>(填空题) 下面程序段中x++的语句的执行次数的数量级是       。i&#x3D;1；while( i&lt;n) {for (j&#x3D;1;j&lt;&#x3D;n;j++) x++i&#x3D;i*2;} </p><ul><li><p>我的答案：</p><p>(1) O（nlog₂n） </p></li><li><p><em>正确答案：</em></p><p>(1) O(nlog2n)</p></li></ul><h4 id="判断题-算法可以用不同的语言描述，如果用C-语言或C-语言等高级语言来描述，则算法实际上就是程序了。"><a href="#判断题-算法可以用不同的语言描述，如果用C-语言或C-语言等高级语言来描述，则算法实际上就是程序了。" class="headerlink" title="(判断题) 算法可以用不同的语言描述，如果用C 语言或C++语言等高级语言来描述，则算法实际上就是程序了。"></a>(判断题) 算法可以用不同的语言描述，如果用C 语言或C++语言等高级语言来描述，则算法实际上就是程序了。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> <strong>对</strong></p><h4 id="数据结构的操作的定义与具体实现有关。"><a href="#数据结构的操作的定义与具体实现有关。" class="headerlink" title="数据结构的操作的定义与具体实现有关。"></a>数据结构的操作的定义与具体实现有关。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 对<em>正确答案:</em> <strong>错</strong></p><h4 id="判断题-数据项是数据不可分割的最小单位。"><a href="#判断题-数据项是数据不可分割的最小单位。" class="headerlink" title="(判断题) 数据项是数据不可分割的最小单位。"></a>(判断题) 数据项是数据不可分割的最小单位。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 对<em>正确答案:</em> <strong>对</strong></p><h3 id="第二章（线性表）"><a href="#第二章（线性表）" class="headerlink" title="第二章（线性表）"></a>第二章（线性表）</h3><ol start="6"><li>(单选题) 设一个链表最常用的操作是在末尾插入结点和删除尾结点，则选用（  ）最节省时间。</li></ol><ul><li>A. 单链表</li><li>B. 单循环链表</li><li>C. 带尾指针的单循环链表</li><li>D. 带头指针的单循环链表</li></ul><p><em>我的答案:</em> D:带头指针的单循环链表;</p><h4 id="单选题-若长度为n的线性表采用顺序存储结构，在其第i个位置插入一个新元素的算法的时间复杂度为（-）-1≤i≤n-1-。"><a href="#单选题-若长度为n的线性表采用顺序存储结构，在其第i个位置插入一个新元素的算法的时间复杂度为（-）-1≤i≤n-1-。" class="headerlink" title="(单选题) 若长度为n的线性表采用顺序存储结构，在其第i个位置插入一个新元素的算法的时间复杂度为（  ）(1≤i≤n+1)。"></a>(单选题) 若长度为n的线性表采用顺序存储结构，在其第i个位置<strong>插入</strong>一个新元素的算法的时间复杂度为（  ）(1≤i≤n+1)。</h4><ul><li>A. O(0)</li><li>B. O(1)</li><li>C. O(n)</li><li>D. O(<img src="https://mooc1.chaoxing.com/ananas/latex/p/576" alt="img">)</li></ul><p><em>我的答案:</em> C</p><ol start="11"><li>(单选题) 线性表（a1,a2,…,an）以<strong>链接方式</strong>存储时，访问第i位置元素的时间复杂度为（  ）。</li></ol><ul><li>A. O（i）</li><li>B. O（1）</li><li>C. O（n）</li><li>D. O（i-1）</li></ul><p><em>我的答案:</em> C:O（n）;</p><ol start="12"><li>(单选题) 非空的循环单链表head的尾结点p满足（  ）。</li></ol><ul><li>A. p-&gt;next&#x3D;&#x3D;head</li><li>B. p-&gt;next&#x3D;&#x3D;NULL</li><li>C. p&#x3D;&#x3D;NULL</li><li>D. p&#x3D; head</li></ul><p><em>我的答案:</em> A:p-&gt;next&#x3D;&#x3D;head;</p><ol start="13"><li>(单选题) 在单链表指针为p的结点之后插入指针为s的结点，正确的操作是（  ）。</li></ol><ul><li>A. p-&gt;next&#x3D;s;s-&gt;next&#x3D;p-&gt;next;</li><li>B. s-&gt;next&#x3D;p-&gt;next;p-&gt;next&#x3D;s;</li><li>C. p-&gt;next&#x3D;s;p-&gt;next&#x3D;s-&gt;next;</li><li>D. p-&gt;next&#x3D;s-&gt;next;p-&gt;next&#x3D;s;</li></ul><p><em>我的答案:</em> B:s-&gt;next&#x3D;p-&gt;next;p-&gt;next&#x3D;s;；</p><ol start="14"><li>(单选题) 对于一个头指针为head的带头结点的单链表，判定该表为空表的条件是（  ）。</li></ol><ul><li>A. head&#x3D;&#x3D;NULL</li><li>B. head-&gt;next&#x3D;&#x3D;NULL</li><li>C. Head-&gt;next&#x3D;&#x3D;head</li><li>D. head!&#x3D;NULL</li></ul><p><em>我的答案:</em> B:head-&gt;next&#x3D;&#x3D;NULL;</p><ol start="15"><li>(单选题) 完成在非空双向循环链表结点p之后插入s的操作是（  ）。</li></ol><ul><li>A. p-&gt;next&#x3D;s ; s-&gt;prior&#x3D;p; p-&gt;next-&gt;prior&#x3D;s ; s-&gt;next&#x3D;p-&gt;next;</li><li>B. p-&gt;next-&gt;prior&#x3D;s; p-&gt;next&#x3D;s; s-&gt;prior&#x3D;p; s-&gt;next&#x3D;p-&gt;next;</li><li>C. s-&gt;prior&#x3D;p; s-&gt;next&#x3D;p-&gt;next; p-&gt;next&#x3D;s; p-&gt;next-&gt;prior&#x3D;s ;</li><li>D. s-&gt;next&#x3D;p-&gt;next; p-&gt;next-&gt;prior&#x3D;s ; s-&gt;prior&#x3D;p; p-&gt;next&#x3D;s;</li></ul><p><em>我的答案:</em> C:s-&gt;prior&#x3D;p; s-&gt;next&#x3D;p-&gt;next; p-&gt;next&#x3D;s; p-&gt;next-&gt;prior&#x3D;s ;;</p><ol start="16"><li>(单选题) 在双向循环链表中，删除p所指的结点时须修改指针（  ）。</li></ol><ul><li>A. p-&gt;prior-&gt;next&#x3D;p-&gt;next；   p-&gt;next-&gt;prior&#x3D;p-&gt;prior;</li><li>B. p-&gt;prior&#x3D;p-&gt;prior-&gt;prior ；  p-&gt;prior-&gt;next&#x3D;p;</li><li>C. p-&gt;next-&gt;prior&#x3D;p；      p-&gt;next&#x3D;p-&gt;next-&gt;next;</li><li>D. p-&gt;next&#x3D;p-&gt;prior-&gt;prior；   p-&gt;prior&#x3D;p-&gt;next-&gt;next;</li></ul><p><em>我的答案:</em> A:p-&gt;prior-&gt;next&#x3D;p-&gt;next； p-&gt;next-&gt;prior&#x3D;p-&gt;prior;;</p><h4 id="线性表L-x3D-（a1-a2-…-an）用数组表示，假定删除表中任一元素的概率相同，则删除一个元素平均需要移动元素的个数是（）。"><a href="#线性表L-x3D-（a1-a2-…-an）用数组表示，假定删除表中任一元素的概率相同，则删除一个元素平均需要移动元素的个数是（）。" class="headerlink" title="线性表L&#x3D;（a1,a2,…,an）用数组表示，假定删除表中任一元素的概率相同，则删除一个元素平均需要移动元素的个数是（）。"></a>线性表L&#x3D;（a1,a2,…,an）用数组表示，假定删除表中任一元素的概率相同，则删除一个元素平均需要移动元素的个数是（）。</h4><ul><li><p>我的答案：</p><p>(1) <strong>(n-1)&#x2F;2</strong></p></li></ul><h4 id="填空题-在一个长度为n的顺序表中第i个位置（1≤i≤n-1）插入一个元素时，需向后移动（）个元素。"><a href="#填空题-在一个长度为n的顺序表中第i个位置（1≤i≤n-1）插入一个元素时，需向后移动（）个元素。" class="headerlink" title="(填空题) 在一个长度为n的顺序表中第i个位置（1≤i≤n+1）插入一个元素时，需向后移动（）个元素。"></a>(填空题) 在一个长度为n的顺序表中第i个位置（1≤i≤n+1）插入一个元素时，需向后移动（）个元素。</h4><ul><li><p>我的答案：</p><p>(1) <strong>n - i + 1</strong></p></li></ul><h3 id="第三章-1"><a href="#第三章-1" class="headerlink" title="第三章"></a>第三章</h3><p>全是算法</p><h3 id="第四章（栈和队列）"><a href="#第四章（栈和队列）" class="headerlink" title="第四章（栈和队列）"></a>第四章（栈和队列）</h3><ol><li>(单选题)栈和队列的共同点是( )。</li></ol><ul><li>A. 没有共同点</li><li>B. 只允许在端点处插入和删除元素</li><li>C. 都是先进后出</li><li>D. 都是先进先出</li></ul><p><em>我的答案:</em> B:只允许在端点处插入和删除元素;</p><h4 id="单选题-循环队列占用的空间-。"><a href="#单选题-循环队列占用的空间-。" class="headerlink" title="(单选题) 循环队列占用的空间( )。"></a>(单选题) 循环队列占用的空间( )。</h4><ul><li><strong>A. 必须连续</strong></li><li>B. 不必连续</li><li>C. 不能连续</li><li>D. 可以不连续</li></ul><p>***的答案: A <em>正确答案:</em> A</p><p>4.(单选题) 若用一个大小为6的数组来实现循环队列,且当前front和rear的值分别为3和0,当从队列中删除一个元素,再加入两个元素后,front和rear的值分别为( )。</p><ul><li>A. 5和1</li><li>B. 4和2</li><li>C. 2和4</li><li>D. 1和5</li></ul><p>***的答案: B <em>正确答案:</em> B</p><ol start="8"><li>(单选题) 对于队列操作数据的原则是( )。</li></ol><ul><li><strong>A. 先进先出</strong></li><li>B. 后进先出</li><li>C. 先进后出</li><li>D. 不分顺序</li></ul><p>***的答案: A <em>正确答案:</em> A</p><ol start="13"><li>(单选题) 设链栈中结点的结构:data为数据域,next为指针域,且top是栈顶指针。若想在链栈的栈顶插入一个由指针s所指的结点,则应执行下列( )操作。</li></ol><ul><li><strong>A. s-&gt;next&#x3D;top-&gt;next;top-&gt;next&#x3D;s;</strong></li><li>B. top-&gt;next&#x3D;s;</li><li>C. s-&gt;next&#x3D;top;top&#x3D;top-&gt;next;</li><li>D. s-&gt;next&#x3D;top;top&#x3D;s;</li></ul><p>***的答案: D  <em>正确答案:</em> A</p><ol start="16"><li>(单选题) 队列中的元素个数是( )。</li></ol><ul><li>A. 不变的</li><li>B. 可变的</li><li>C. 任意的</li><li>D. 0</li></ul><p>***的答案: B <em>正确答案:</em> B</p><p>17.(单选题) 循环队列SQ队满的条件是( )。</p><ul><li>A. SQ-&gt;rear&#x3D;&#x3D;SQ-&gt;front</li><li>B. (SQ-&gt;rear+1)%MAXLEN&#x3D;&#x3D;SQ-&gt;front</li><li>C. SQ-&gt;rear&#x3D;&#x3D;O</li><li>D. SQ-&gt;front&#x3D;&#x3D;0</li></ul><p>***的答案: B <em>正确答案:</em> B</p><h4 id="填空题-顺序队列初始化后-front-x3D-rear-x3D-。"><a href="#填空题-顺序队列初始化后-front-x3D-rear-x3D-。" class="headerlink" title="(填空题) 顺序队列初始化后, front&#x3D;rear&#x3D;___。"></a>(填空题) 顺序队列初始化后, front&#x3D;rear&#x3D;___。</h4><ul><li><p>***的答案：</p><p>(1) 1</p></li><li><p><em>正确答案：</em></p><p>(1) <strong>-1</strong></p></li></ul><ol start="21"><li>(填空题) 在队列中,允许插入的一端称为___。</li></ol><ul><li><p>***的答案：</p><p>(1) 队尾</p></li><li><p><em>正确答案：</em></p><p>(1) 队尾</p></li></ul><ol start="27"><li>(填空题) 在队列中,允许删除的一端称为___。</li></ol><ul><li><p>***的答案：</p><p>(1) 队首</p></li><li><p><em>正确答案：</em></p><p>(1) 队头</p></li></ul><h4 id="判断题-栈和队列都是顺序存储的线性结构。"><a href="#判断题-栈和队列都是顺序存储的线性结构。" class="headerlink" title="(判断题) 栈和队列都是顺序存储的线性结构。"></a>(判断题) 栈和队列都是顺序存储的线性结构。</h4><ul><li>A. 对</li><li><strong>B. 错</strong></li></ul><p>***的答案:  错  正确答案: 错</p><h3 id="第五章（串和广义表）"><a href="#第五章（串和广义表）" class="headerlink" title="第五章（串和广义表）"></a>第五章（串和广义表）</h3><p>(单选题)广义表(a,b,c,d,e)的表尾是( )。</p><ul><li>A. (e)</li><li>B. ( )</li><li>C. (b,c,d,e)</li><li>D. (a,b,c,d,e)</li></ul><p><em>我的答案:</em> C</p><p>(单选题)广义表是线性表的推广,它们之间的区别在千( )。</p><ul><li>A. 能否使用子表</li><li>B. 能否使用原子项</li><li>C. 是否能为空</li><li>D. 表的长度</li></ul><p><em>我的答案:</em> A:能否使用子表;</p><h4 id="单选题-设有一个字符串S-x3D-”abcdefgh”-问该串的最大子串个数为-。"><a href="#单选题-设有一个字符串S-x3D-”abcdefgh”-问该串的最大子串个数为-。" class="headerlink" title="(单选题)设有一个字符串S&#x3D;”abcdefgh”,问该串的最大子串个数为( )。"></a>(单选题)设有一个字符串S&#x3D;”abcdefgh”,问该串的最大子串个数为( )。</h4><p>37&#x3D;(8*9)&#x2F;2+1</p><ul><li>A. 9</li><li>B. 37</li><li>C. 36</li><li>D. 8</li></ul><p><em>我的答案:</em> B:37;</p><h4 id="串的最大子串个数计算"><a href="#串的最大子串个数计算" class="headerlink" title="串的最大子串个数计算"></a>串的最大子串个数计算</h4><p><strong>字串： n（n+1）&#x2F;2 + 1</strong></p><p><strong>非空子串：n（n+1）&#x2F;2</strong></p><p><strong>非空真子串：n（n+1）&#x2F;2 - 1</strong></p><p>(单选题)若Strlndex(S,T)表示求T在S中的位置的操作,则对于S&#x3D;”Beijing and Nanjing”,T&#x3D;”jing”,Strlndex(S,T)的结果为( )。</p><ul><li>A. 4</li><li>B. 2</li><li>C. 3</li><li>D. 16</li></ul><p><em>正确答案:</em> A</p><h4 id="填空题-串链接存储的优点是（）-缺点是（）。"><a href="#填空题-串链接存储的优点是（）-缺点是（）。" class="headerlink" title="(填空题)串链接存储的优点是（）,缺点是（）。"></a>(填空题)串链接存储的优点是（）,缺点是（）。</h4><ul><li><p><em>我的答案：</em></p><p>(1) 可以任意地插入和删除子串，不需要移动其他子串</p><p>(2) 存储密度低，每个字符都需要一个指针来指向下一个字符，因此浪费了大量的存储空间</p></li></ul><h4 id="填空题-串顺序存储紧凑格式的缺点是对串的字符处理-。"><a href="#填空题-串顺序存储紧凑格式的缺点是对串的字符处理-。" class="headerlink" title="(填空题)串顺序存储紧凑格式的缺点是对串的字符处理___。"></a>(填空题)串顺序存储紧凑格式的缺点是对串的字符处理___。</h4><ul><li><p><em>我的答案：</em></p><p>(1) 比较困难</p></li></ul><h4 id="填空题-空格串的长度等于-。"><a href="#填空题-空格串的长度等于-。" class="headerlink" title="(填空题)空格串的长度等于___。"></a>(填空题)空格串的长度等于___。</h4><ul><li><p><em>我的答案：</em></p><p>(1) 空格的个数</p></li></ul><p>(填空题)在C语言中,以字符___表示串值的终结。</p><ul><li><p><em>我的答案：</em></p><p>(1) ’\0’</p></li></ul><h4 id="串的函数"><a href="#串的函数" class="headerlink" title="串的函数"></a>串的函数</h4><p><strong>ConcatStr(S1,S2)直接拼接S1和S2</strong></p><p><strong>SubStr(S1,2,LenStr(S2))选取</strong></p><p><strong>Strlndex(S,T)返回字符串t在字符串s中出现的开始位置或索引。</strong></p><p>(填空题)两个串相等是指两个串长度相等,且对应位置的___相等。</p><ul><li><p><em>我的答案：</em></p><p>(1) 字符</p></li></ul><h4 id="填空题-串顺序存储非紧凑格式的缺点是-。"><a href="#填空题-串顺序存储非紧凑格式的缺点是-。" class="headerlink" title="(填空题)串顺序存储非紧凑格式的缺点是___。"></a>(填空题)串顺序存储非紧凑格式的缺点是___。</h4><ul><li><p><em>我的答案：</em></p><p>(1) 空间利用率低</p></li></ul><ol start="29"><li>(填空题)字符串按存储方式可以分为：顺序存储,链接存储和___。</li></ol><ul><li><p><em>我的答案：</em></p><p>(1) 堆分配存储</p></li></ul><p>(判断题)在链串中为了提高存储密度,应该增大结点的大小。</p><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 对</p><h4 id="判断题-串是n个字母的有限序列-n≥0-。"><a href="#判断题-串是n个字母的有限序列-n≥0-。" class="headerlink" title="(判断题)串是n个字母的有限序列(n≥0)。"></a>(判断题)串是n个字母的有限序列(n≥0)。</h4><ul><li>A. 对</li><li><strong>B. 错</strong></li></ul><p><em>我的答案:</em> 错</p><h4 id="判断题-广义表不能递归。"><a href="#判断题-广义表不能递归。" class="headerlink" title="(判断题)广义表不能递归。"></a>(判断题)广义表不能递归。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错</p><h3 id="第六章（树）"><a href="#第六章（树）" class="headerlink" title="第六章（树）"></a>第六章（树）</h3><h4 id="单选题-在一棵度为3的树中-度为3的结点数为2个-度为2的结点数为1个-度为1的结点数为2个-那么度为0的结点数有-个。"><a href="#单选题-在一棵度为3的树中-度为3的结点数为2个-度为2的结点数为1个-度为1的结点数为2个-那么度为0的结点数有-个。" class="headerlink" title="(单选题) 在一棵度为3的树中,度为3的结点数为2个,度为2的结点数为1个,度为1的结点数为2个,那么度为0的结点数有( )个。"></a><strong>(单选题) 在一棵度为3的树中,度为3的结点数为2个,度为2的结点数为1个,度为1的结点数为2个,那么度为0的结点数有( )个。</strong></h4><ul><li>A. 4</li><li>B. 5</li><li><strong>C. 6</strong></li><li>D. 7</li></ul><p>我的答案: A 正确答案: <strong>C</strong></p><p>（第一种解法： 没看懂，叶子的度数为0；那么设叶子数为x，则此树的总分叉数为1* 4+ 2 * 2+ 3* 1+ 4* 1&#x3D;15；此树的节点个数为16（此处涉及到一个公式;节点 数&#x3D;分叉数+1，由图形便可以观察出来）。又根据题目可以知道顶点数目还可以列出一个式子：4+2+1+1+x便可以得到等 式：4+2+1+1+x&#x3D;16；x&#x3D;8为叶子数。）</p><p>（第二种解法：设该树总共有n个节点,则n&#x3D;n0+n1+n2+n3. </p><p> 该树中除了根节点没有前驱以外,每个节点有且只有一个前驱,因此有n个节点的树的总边数为n-1条.根据度的定义,总边数与度之间的关系为：n-1&#x3D;0<em>n0+1</em>n1+2<em>n2+3</em>n3.</p><p>  联立两个方程求解,可以得到n0&#x3D;6）</p><h4 id="单选题-某二又树的后序遍历序列为DABEC-中序遍历序列为DEBAC-则先序遍历序列为-。-过程写在课本上"><a href="#单选题-某二又树的后序遍历序列为DABEC-中序遍历序列为DEBAC-则先序遍历序列为-。-过程写在课本上" class="headerlink" title="(单选题) 某二又树的后序遍历序列为DABEC,中序遍历序列为DEBAC,则先序遍历序列为()。(过程写在课本上)"></a>(单选题) 某二又树的后序遍历序列为DABEC,中序遍历序列为DEBAC,则先序遍历序列为()。(过程写在课本上)</h4><ul><li>A. ACBED</li><li>B. DECAB</li><li>C. DEABC</li><li>D**. CEDBA**</li></ul><p> 正确答案: D</p><h4 id="单选题-已知一棵完全二叉树的结点总数为9个-则最后一层的结点数为-。"><a href="#单选题-已知一棵完全二叉树的结点总数为9个-则最后一层的结点数为-。" class="headerlink" title="(单选题) 已知一棵完全二叉树的结点总数为9个,则最后一层的结点数为( )。"></a>(单选题) 已知一棵完全二叉树的结点总数为9个,则最后一层的结点数为( )。</h4><ul><li>A. 1</li><li>B. 2</li><li>C. 3</li><li>D. 4</li></ul><p>***的答案: B 正确答案: B</p><p>（完全二叉树<strong>最大结点数是2的k次方 - 1</strong>，k表示深度，所以，总数9的结点数，深度应该是4，前3层共结点数2的3次方 -1 &#x3D; 7， 9 - 7 等于2，所以最后一层结点数是2）</p><ol start="6"><li><strong>(单选题) 假设在一棵二叉树中,双分支结点数为15,单分支结点数为30个,则叶子结点数为( )个。</strong></li></ol><ul><li>A. 15</li><li>B. 16</li><li>C. 17</li><li>D. 47</li></ul><p>***的答案: B <em>正确答案:</em> B</p><p>在数据结构中一般常用的 公式为：二叉树：度为0的节点数&#x3D;度为2的节点数+1（n0&#x3D;15+1&#x3D;16）此公式可由上述计算思想推导）</p><ol start="8"><li>(单选题) 具有35个结点的完全二叉树的深度为( )。</li></ol><ul><li>A. 5</li><li>B. 6</li><li>C. 7</li><li>D. 8</li></ul><p>***的答案: B <em>正确答案:</em> B</p><h4 id="节点个树n和树深k的关系"><a href="#节点个树n和树深k的关系" class="headerlink" title="节点个树n和树深k的关系"></a>节点个树n和树深k的关系</h4><p>所以节点个树n和树深k的关系为：2^k-1&#x3D;n<br>所以树深：k&#x3D;log_2(n+1)或者⌊log₂n⌋+1 ?</p><h4 id="单选题-用顺序存储的方法将完全二叉树中所有结点逐层存放在数组a-1-a-n-中-结点a-i-若有左孩子-其左孩子的编号为结点-。"><a href="#单选题-用顺序存储的方法将完全二叉树中所有结点逐层存放在数组a-1-a-n-中-结点a-i-若有左孩子-其左孩子的编号为结点-。" class="headerlink" title="(单选题) 用顺序存储的方法将完全二叉树中所有结点逐层存放在数组a[1]~a[n]中,结点a[i]若有左孩子,其左孩子的编号为结点( )。"></a>(单选题) 用顺序存储的方法将完全二叉树中所有结点逐层存放在数组a[1]~a[n]中,结点a[i]若有左孩子,其左孩子的编号为结点( )。</h4><ul><li>A. a[2i+1]</li><li>B. a[2i-1]</li><li>C. a[i&#x2F;2]</li><li><strong>D. a[2i]</strong></li></ul><p>***的答案: D <em>正确答案:</em> D</p><p><strong>因为在完全二叉树中，左孩子的位置是当前结点的位置乘以2。</strong></p><h4 id="单选题-二叉树的先序遍历序列为ABC的不同二叉树有-种形态。"><a href="#单选题-二叉树的先序遍历序列为ABC的不同二叉树有-种形态。" class="headerlink" title="(单选题) 二叉树的先序遍历序列为ABC的不同二叉树有( )种形态。"></a>(单选题) 二叉树的先序遍历序列为ABC的不同二叉树有( )种形态。</h4><ul><li>A. 3</li><li>B. 4</li><li><strong>C. 5</strong></li><li>D. 6</li></ul><p>***的答案: C <em>正确答案:</em> C</p><h4 id="填空题-一棵深度为k的满二叉树的结点总数为（）-一棵深度为k的完全二叉树的结点总数的最小值为（）-最大值为（）。"><a href="#填空题-一棵深度为k的满二叉树的结点总数为（）-一棵深度为k的完全二叉树的结点总数的最小值为（）-最大值为（）。" class="headerlink" title="(填空题) 一棵深度为k的满二叉树的结点总数为（）,一棵深度为k的完全二叉树的结点总数的最小值为（）,最大值为（）。"></a>(填空题) 一棵深度为k的满二叉树的结点总数为（）,一棵深度为k的完全二叉树的结点总数的最小值为（）,最大值为（）。</h4><ul><li><p>***的答案：</p><p>(1)2^k-1  </p><p>(2) 2^(k-1) </p><p>(3) 2^k-1</p></li><li><p><em>正确答案：</em></p><p>(1) <strong>2^k-1</strong></p><p>(2) <strong>2^(k-1)</strong></p><p>(3) <strong>2^k-1</strong></p></li></ul><h4 id="填空题-先序序列和中序序列相同的二叉树为-。"><a href="#填空题-先序序列和中序序列相同的二叉树为-。" class="headerlink" title="(填空题) 先序序列和中序序列相同的二叉树为___。"></a>(填空题) 先序序列和中序序列相同的二叉树为___。</h4><ul><li><p>***的答案：</p><p>(1) 没有左孩子</p></li><li><p><em>正确答案：</em></p><p>(1) <strong>单右枝二叉树或孤立结点</strong></p></li></ul><ol start="19"><li>(填空题) 由三个结点构成的二叉树,共有___种不同的结构。</li></ol><ul><li><p>***的答案：</p><p>(1) 5</p></li><li><p><em>正确答案：</em></p><p>(1) 5</p></li></ul><ol start="20"><li>(填空题) 假定一棵树的广义表表示法为A(B(E),C(F(H,I,J),G),D),则该树的度为（）,树的深度为（）,终端结点的个数为（）,单分支结点的个数为（）,双分支的结点个数为（）,三分支的结点个数为（）,C结点的双亲结点为（）,其孩子结点为（）和（）结点。</li></ol><ul><li><p>***的答案：</p><p>(1) 3</p><p>(2) 4</p><p>(3) 6</p><p>(4) 1</p><p>(5) 1</p><p>(6) 2</p><p>(7) A</p><p>(8) F</p><p>(9) G</p></li><li><p><em>正确答案：</em></p><p>(1) 3</p><p>(2) 4</p><p>(3) 6</p><p>(4) 1</p><p>(5) 1</p><p>(6) 2</p><p>(7) A</p><p>(8) F</p><p>(9) G</p></li></ul><h4 id="填空题-哈夫曼树是指-的二叉树。"><a href="#填空题-哈夫曼树是指-的二叉树。" class="headerlink" title="(填空题) 哈夫曼树是指___的二叉树。"></a>(填空题) 哈夫曼树是指___的二叉树。</h4><ul><li><p>***的答案：</p><p>(1) 最优</p></li><li><p><em>正确答案：</em></p><p>(1) <strong>带权路径长度最小</strong></p></li></ul><h4 id="填空题-设一棵二叉树共有50个叶子结点-终端结点-则有-个度为2的结点。"><a href="#填空题-设一棵二叉树共有50个叶子结点-终端结点-则有-个度为2的结点。" class="headerlink" title="(填空题) 设一棵二叉树共有50个叶子结点(终端结点),则有___个度为2的结点。"></a>(填空题) 设一棵二叉树共有50个叶子结点(终端结点),则有___个度为2的结点。</h4><ul><li><p>***的答案：</p><p>(1) 49</p></li><li><p><em>正确答案：</em></p><p>(1) 49</p></li></ul><p>在数据结构中一般常用的 公式为：二叉树：度为2的节点数&#x3D;度为0的节点数-1（n0&#x3D;50-1&#x3D;49）此公式可由上述计算思想推导）</p><h4 id="填空题-对于一个具有n个结点的二叉树-当它为一棵（）二叉树时-具有最小高度-即为（）-当它为一棵单支树时具有（）高度-即为（）。"><a href="#填空题-对于一个具有n个结点的二叉树-当它为一棵（）二叉树时-具有最小高度-即为（）-当它为一棵单支树时具有（）高度-即为（）。" class="headerlink" title="(填空题) 对于一个具有n个结点的二叉树,当它为一棵（）二叉树时,具有最小高度,即为（）,当它为一棵单支树时具有（）高度,即为（）。"></a>(填空题) 对于一个具有n个结点的二叉树,当它为一棵（）二叉树时,具有最小高度,即为（）,当它为一棵单支树时具有（）高度,即为（）。</h4><ul><li><p>***的答案：</p><p>(1) 完全</p><p>(2) log2n+1 </p><p>(3) n</p><p>(4) 线性表</p></li><li><p><em>正确答案：</em></p><p>(1) <strong>完全</strong></p><p>(2) <strong>⌊log₂n⌋+1</strong></p><p>(3) <strong>最大</strong></p><p>(4) <strong>线性表</strong></p></li></ul><h4 id="填空题-对于二叉树来说-第i层上最多有-个结点。"><a href="#填空题-对于二叉树来说-第i层上最多有-个结点。" class="headerlink" title="(填空题) 对于二叉树来说,第i层上最多有___个结点。"></a>(填空题) 对于二叉树来说,第i层上最多有___个结点。</h4><ul><li><p>***的答案：</p><p>(1) 2</p></li><li><p><em>正确答案：</em></p><p>(1) <strong>2^(i-1)</strong></p></li></ul><h4 id="填空题-由带权为3-6-2-5的4个叶子结点构成的一棵哈夫曼树-则带权路径长度为-。"><a href="#填空题-由带权为3-6-2-5的4个叶子结点构成的一棵哈夫曼树-则带权路径长度为-。" class="headerlink" title="(填空题) 由带权为3,6,2,5的4个叶子结点构成的一棵哈夫曼树,则带权路径长度为___。"></a>(填空题) 由带权为3,6,2,5的4个叶子结点构成的一棵哈夫曼树,则带权路径长度为___。</h4><ul><li><p>***的答案：</p><p>(1) 31</p></li><li><p><em>正确答案：</em></p><p>(1) <strong>31</strong></p></li></ul><p>构建哈夫曼树：</p><p>1、给其排序，2，3，5，6</p><p>2、找到其中最小的两数，开始画树，2，3</p><p>3、计算两数之和，并将该和加入到待找最小两数的数组里，跟着一起被选</p><p>如果选中的是两个原数组的数，则在旁边重开一个全新的分支</p><p>如果权值与一个原数组的数相同，则选择最小的这两个数，但是计算带权路径长度时不能带上它</p><p>4、算带权路径长度 2* 3（深度）+3* 3+6* 1&#x3D;31</p><h4 id="填空题-设F是森林-B是由F转换得到的二叉树-F中有n个非终端结点-B中右指针域为空的结点有-。"><a href="#填空题-设F是森林-B是由F转换得到的二叉树-F中有n个非终端结点-B中右指针域为空的结点有-。" class="headerlink" title="(填空题) 设F是森林,B是由F转换得到的二叉树,F中有n个非终端结点,B中右指针域为空的结点有___。"></a>(填空题) 设F是森林,B是由F转换得到的二叉树,F中有n个非终端结点,B中右指针域为空的结点有___。</h4><ul><li><p>***的答案：</p><p>(1) n+1</p></li><li><p><em>正确答案：</em></p><p>(1) <strong>n+1</strong></p></li></ul><p>在将森林F转换为二叉树B时，每个非终端节点都会转换为一个二叉树节点。由于B是二叉树，每个节点最多只有两个指针域，即左指针和右指针。在转换过程中，每个非终端节点都会在B中生成一个包含自身的二叉树节点，而这个节点的右指针域为空。</p><ol start="30"><li>(判断题) 由树转换成二叉树,其根结点的右子树一定为空。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><p>***的答案: 对 <em>正确答案:</em> 对</p><ol start="33"><li>(判断题) 树结构中的每个结点最多只有一个直接前驱。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><p>***的答案: 对 <em>正确答案:</em> 对</p><h3 id="第七章（图）"><a href="#第七章（图）" class="headerlink" title="第七章（图）"></a>第七章（图）</h3><h4 id="单选题-下列说法不正确的是-。"><a href="#单选题-下列说法不正确的是-。" class="headerlink" title="(单选题) 下列说法不正确的是( )。"></a>(单选题) 下列说法不正确的是( )。</h4><ul><li>A. 图的遍历是从给定的源点出发每一个顶点仅被访问一次</li><li>B. 遍历的基本算法有两种：深度优先遍历和广度优先遍历</li><li>C. 图的深度优先遍历不适用于有向图</li><li>D. 图的深度优先遍历是一个递归过程</li></ul><p>我的答案:C<em>正确答案:</em> C</p><p>(单选题) 一个n个顶点的连通<strong>无向图</strong>,其边的个数至少为( )。</p><ul><li>A. n-1</li><li>B. n</li><li>C. n+1</li><li>D. nlog₂n</li></ul><p>我的答案: A<em>正确答案:</em> A</p><p>(单选题) 要连通具有n个顶点的<strong>有向图</strong>,至少需要( )条边。</p><ul><li>A. n-1</li><li>B. n</li><li>C. n+1</li><li>D. 2n</li></ul><p>我的答案: B<em>正确答案:</em> B</p><p>(单选题) 无向图G&#x3D;(V,E),其中：v&#x3D;{a,b,c,d,e,f},E&#x3D;{(a,b),(a,e),(a,c),(b,e),(c,f),(f,d),(e,d)｝,对该图进行深度优先遍历,得到的顶点序列正确的是( )。</p><ul><li>A. a,b,e,c,d,f</li><li>B. a,c,f,e,b,d</li><li>C. a,e,b,c,f,d</li><li>D. a,e,d,f,c,b</li></ul><p>我的答案: D<em>正确答案:</em> D</p><h4 id="DFS的原理"><a href="#DFS的原理" class="headerlink" title="DFS的原理"></a>DFS的原理</h4><p>DFS算法的特点是从根顶点出发， </p><p>​    \1. 访问所到达的顶点v。 </p><p>​    \2. 前往v的未被访问的邻接点。</p><p>​      若v的所有邻接点均被访问过，则回溯到访问历史中v的上一个顶点v’，对其进行第2步，即访问v’除v之外的其他邻接点；这种回溯可以一直到根顶点；若回溯到根顶点后仍有节点未被访问，且不与根顶点邻接，则更换根节点。</p><p>解析：</p><p>A. a, b, e, c, d, f </p><p>  a-&gt;b, 没问题；到b后，b的邻接点中只剩下e未被访问，b-&gt;e没问题 </p><p>  e-&gt;c，不行，e此时仍有未被访问的邻接点d, 且e没有跟c连通，答案错误 </p><p>  B. a, c, f, e, b, d </p><p>  a-&gt;c-&gt;f, 没问题；f-&gt;e，不行，f此时仍有未被访问的邻接点d，且f没有跟e连通，答案错误 </p><p>  C. a, e, b, c, f, d </p><p>  a-&gt;e-&gt;b，没问题；到b后，b的邻接点均被访问，应回溯到e，然后访问e其他未被访问的邻接点（只剩d），且b没有跟c连通，答案错误 </p><p>  D. a, e, d, f, c, b </p><p>  a-&gt;e-&gt;d-&gt;f-&gt;c，没问题；到c后，其两个邻接点a与f均已被访问，按c-&gt;f-&gt;d-&gt;e-&gt;a回溯时候发现，e顶点仍有未被访问的顶点b，于是a-&gt;e-&gt;d-&gt;f-&gt;c-&gt;b</p><p>(单选题) 用邻接表表示图进行<strong>广度</strong>优先遍历时,通常采用( )来实现算法。</p><ul><li>A. 栈</li><li>B. 队列</li><li>C. 树</li><li>D. 图</li></ul><p>我的答案: B<em>正确答案:</em> B</p><p>(单选题) 用邻接表表示图进行<strong>深度</strong>优先遍历时,通常采用( )来实现算法。</p><ul><li>A. 栈</li><li>B. 队列</li><li>C. 树</li><li>D. 图</li></ul><p>我的答案: A<em>正确答案:</em> A</p><p>(单选题) 无向图顶点V的度是关联于该顶点( )的数目。</p><ul><li>A. 顶点</li><li>B. 边</li><li>C. 序号</li><li>D. 下标</li></ul><p>我的的答案:B<em>正确答案:</em> B</p><p>每个顶点所拥有的边的个数叫作<strong>度</strong></p><p>(单选题) 图中有关路径的定义是( )。</p><ul><li>A. 由顶点和相邻顶点序偶构成的边所形成的序列</li><li>B. 由不同顶点所形成的序列</li><li>C. 由不同边所形成的序列</li><li>D. 上述定义都不是</li></ul><p>我的答案: A<em>正确答案:</em> A</p><p>(单选题) n个结点的<strong>完全有向图</strong>含有边的数目( )。</p><ul><li>A. n*n</li><li>B. n(n+1)</li><li>C. n&#x2F;2</li><li>D. n*(n-1)</li></ul><p>我的答案: D<em>正确答案:</em> D</p><p>(单选题) 设<strong>无向图</strong>的顶点个数为n,则该图<strong>最多</strong>有( )条边。</p><ul><li>A. n-1</li><li>B. n(n-1)&#x2F;2</li><li>C. n+1</li><li>D. 0</li><li>E. n²</li></ul><p>我的答案: B<em>正确答案:</em> B</p><p>(单选题) 一个无向图有5个顶点、8条边,则其生成树将要去掉( )条边。</p><p><strong>边至少为5-1条</strong></p><ul><li>A. 3</li><li><strong>B. 4</strong></li><li>C. 5</li><li>D. 6</li></ul><p>我的答案: B<em>正确答案:</em> B</p><h4 id="单选题-任何一个无向连通图的最小生成树-。"><a href="#单选题-任何一个无向连通图的最小生成树-。" class="headerlink" title="(单选题) 任何一个无向连通图的最小生成树( )。"></a>(单选题) 任何一个无向连通图的最小生成树( )。</h4><ul><li>A. 只有一棵</li><li>B. 一棵或多棵</li><li>C. 一定有多棵</li><li>D. 可能不存在</li></ul><p><em>正确答案:</em> A</p><h4 id="多选题-在一个无向图中-所有顶点的度数之和等于所有边数-倍-在一个有向图中-所有顶点的入度之和等千所有顶点出度之和的-倍。"><a href="#多选题-在一个无向图中-所有顶点的度数之和等于所有边数-倍-在一个有向图中-所有顶点的入度之和等千所有顶点出度之和的-倍。" class="headerlink" title="(多选题) 在一个无向图中,所有顶点的度数之和等于所有边数( )倍,在一个有向图中,所有顶点的入度之和等千所有顶点出度之和的( )倍。"></a>(多选题) 在一个无向图中,所有顶点的度数之和等于所有边数( )倍,在一个有向图中,所有顶点的入度之和等千所有顶点出度之和的( )倍。</h4><ul><li>A. 1&#x2F;2</li><li>B. 2</li><li>C. 1</li><li>D. 4</li></ul><p>我的答案: BC<em>正确答案:</em> BC</p><h4 id="多选题-一个有n个结点的图-最少有-个连通分量-最多有-个连通分量。"><a href="#多选题-一个有n个结点的图-最少有-个连通分量-最多有-个连通分量。" class="headerlink" title="(多选题) 一个有n个结点的图,最少有( )个连通分量,最多有( )个连通分量。"></a>(多选题) 一个有n个结点的图,最少有( )个连通分量,最多有( )个连通分量。</h4><ul><li>A. 0</li><li>B. 1</li><li>C. n-1</li><li>D. n</li></ul><p><em>正确答案:</em> BD</p><h4 id="填空题-G是一个非连通无向图-共有28条边-则该图至少有-个顶点。"><a href="#填空题-G是一个非连通无向图-共有28条边-则该图至少有-个顶点。" class="headerlink" title="(填空题) G是一个非连通无向图,共有28条边,则该图至少有___个顶点。"></a>(填空题) G是一个非连通无向图,共有28条边,则该图至少有___个顶点。</h4><p>用到无向图公式n(n-1)&#x2F;2，n为顶点数，而最后因为是<strong>非连通图</strong>所以还要n+1为9</p><ul><li><p>我的答案：</p><p>(1) 9</p></li><li><p><em>正确答案：</em></p><p>(1) 9</p></li></ul><p>(填空题) 具有10个顶点的无向图,边的总数最多为___。</p><ul><li><p>我的答案：</p><p>(1) 45</p></li><li><p><em>正确答案：</em></p><p>(1) 45</p></li></ul><h4 id="填空题-一个连通图的-是一个极小连通子图。"><a href="#填空题-一个连通图的-是一个极小连通子图。" class="headerlink" title="(填空题) 一个连通图的___是一个极小连通子图。"></a>(填空题) 一个连通图的___是一个极小连通子图。</h4><ul><li><p>我的答案：</p><p>(1) 生成树</p></li><li><p><em>正确答案：</em></p><p>(1) 生成树</p></li></ul><h4 id="填空题-如果含n个顶点的图形形成一个环-则它有-棵生成树。"><a href="#填空题-如果含n个顶点的图形形成一个环-则它有-棵生成树。" class="headerlink" title="(填空题) 如果含n个顶点的图形形成一个环,则它有___棵生成树。"></a>(填空题) 如果含n个顶点的图形形成一个环,则它有___棵生成树。</h4><ul><li><p>我的答案：</p><p>(1) n</p></li><li><p><em>正确答案：</em></p><p>(1) n</p></li></ul><h4 id="填空题-有向图的强连通分量是指-。"><a href="#填空题-有向图的强连通分量是指-。" class="headerlink" title="(填空题) 有向图的强连通分量是指___。"></a>(填空题) 有向图的强连通分量是指___。</h4><ul><li><p>我的答案：</p><p>(1) 有向图的极大强连通子图</p></li><li><p><em>正确答案：</em></p><p>(1) 有向图的极大强连通子图</p></li></ul><h4 id="填空题-在有n个顶点的有向图中-每个顶点的度最大可达-。"><a href="#填空题-在有n个顶点的有向图中-每个顶点的度最大可达-。" class="headerlink" title="(填空题) 在有n个顶点的有向图中,每个顶点的度最大可达___。"></a>(填空题) 在有n个顶点的有向图中,每个顶点的度最大可达___。</h4><p>一个出度一个入度，所以*2</p><ul><li><p>我的答案：</p><p>(1) 2(n-1)</p></li><li><p><em>正确答案：</em></p><p>(1) 2(n-1)</p></li></ul><h4 id="填空题-N个顶点的连通图的生成树含有-条边。"><a href="#填空题-N个顶点的连通图的生成树含有-条边。" class="headerlink" title="(填空题) N个顶点的连通图的生成树含有___条边。"></a>(填空题) N个顶点的连通图的生成树含有___条边。</h4><ul><li><p>我的答案：</p><p>(1) N-1</p></li><li><p><em>正确答案：</em></p><p>(1) N-1</p></li></ul><h4 id="填空题-判断一个无向图是一棵树的条件是-。"><a href="#填空题-判断一个无向图是一棵树的条件是-。" class="headerlink" title="(填空题) 判断一个无向图是一棵树的条件是___。"></a>(填空题) 判断一个无向图是一棵树的条件是___。</h4><ul><li><p>我的答案：</p><p>(1) 有n个顶点,n-1条边的无向连通图</p></li><li><p><em>正确答案：</em></p><p>(1) 有n个顶点,n-1条边的无向连通图</p></li></ul><h4 id="填空题-若用n表示图中顶点数目-则有-条边的无向图成为完全图。"><a href="#填空题-若用n表示图中顶点数目-则有-条边的无向图成为完全图。" class="headerlink" title="(填空题) 若用n表示图中顶点数目,则有___条边的无向图成为完全图。"></a>(填空题) 若用n表示图中顶点数目,则有___条边的无向图成为完全图。</h4><p>注意这里是题目是完全图，一般如果是有向或者连通图就n，无向则为n-1</p><ul><li><p>我的答案：</p><p>(1) n(n-1)&#x2F;2</p></li><li><p><em>正确答案：</em></p><p>(1) n(n-1)&#x2F;2</p></li></ul><h4 id="判断题-有向图不能进行广度优先遍历。"><a href="#判断题-有向图不能进行广度优先遍历。" class="headerlink" title="(判断题) 有向图不能进行广度优先遍历。"></a>(判断题) 有向图不能进行广度优先遍历。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p>我的答案:错<em>正确答案:</em> 错</p><h4 id="判断题-带权图最小生成树是唯一的。"><a href="#判断题-带权图最小生成树是唯一的。" class="headerlink" title="(判断题) 带权图最小生成树是唯一的。"></a>(判断题) 带权图最小生成树是唯一的。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p>我的答案: 错<em>正确答案:</em> 错</p><h4 id="判断题-若以某个顶点开始-对有n个顶点的有向图G进行深度优先遍历-所得的遍历序列唯一-则可以断定其弧数为n-1。"><a href="#判断题-若以某个顶点开始-对有n个顶点的有向图G进行深度优先遍历-所得的遍历序列唯一-则可以断定其弧数为n-1。" class="headerlink" title="(判断题) 若以某个顶点开始,对有n个顶点的有向图G进行深度优先遍历,所得的遍历序列唯一,则可以断定其弧数为n-1。"></a>(判断题) 若以某个顶点开始,对有n个顶点的有向图G进行深度优先遍历,所得的遍历序列唯一,则可以断定其弧数为n-1。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p>我的答案:错<em>正确答案:</em> 错</p><h3 id="第八章（查找）"><a href="#第八章（查找）" class="headerlink" title="第八章（查找）"></a>第八章（查找）</h3><p>(单选题)顺序查找法适合于存储结构为( )的线性表。</p><ul><li>A. 散列存储</li><li>B. 顺序存储或是链式存储</li><li>C. 压缩存储</li><li>D. 索引存储</li></ul><p><em>我的答案:</em> B:顺序存储或是链式存储;</p><p>(单选题)用折半查找表的元素的速度比用顺序法( )。</p><ul><li>A. 必然快</li><li>B. 必然慢</li><li>C. 相等</li><li>D. 不能确定</li></ul><p><em>我的答案:</em> D:不能确定;</p><p>(单选题)当在一个有序的顺序存储表上查找一个数据时,即可用折半查找,也可用顺序查找,但前者比后者的查找速度( )。</p><ul><li>A. 必定快</li><li>B. 不一定</li><li>C. 在大部分情况下要快</li><li>D. 取决于表递增还是递减</li></ul><p><em>我的答案:</em> C:在大部分情况下要快;</p><p>(单选题)下面关于哈希(Hash,杂凑)查找的说法正确的是( )</p><ul><li>A. 哈希函数构造的越复杂越好,因为这样随机性好,冲突小</li><li>B. 除留余数法是所有哈希函数中最好的</li><li>C. 不存在特别好与坏的哈希函数,要视情况而定</li><li>D. 若需在哈希表中删去一个元素,不管用何种方法解决冲突都只要简单的将该元素删去即可</li></ul><p><em>我的答案:</em> C:不存在特别好与坏的哈希函数,要视情况而定;</p><p>(单选题)如果要求一个线性表既能较快地查找,又能适应动态变化的要求,可以采用( )查找方法。</p><ul><li>A. 分块</li><li>B. 顺序</li><li>C. 折半</li><li>D. 散列</li></ul><p><em>我的答案:</em> A</p><h4 id="填空题-在分块查找方法中-首先查找-然后再查找相应的-。"><a href="#填空题-在分块查找方法中-首先查找-然后再查找相应的-。" class="headerlink" title="(填空题)在分块查找方法中,首先查找(),然后再查找相应的___。"></a>(填空题)在分块查找方法中,首先查找(),然后再查找相应的___。</h4><ul><li><p><em>我的答案：</em></p><p>(1) 索引</p><p>(2) 块</p></li></ul><h4 id="填空题-在分块查找方法中-表中每块内的元素可以-块与块之间必须按-存放。"><a href="#填空题-在分块查找方法中-表中每块内的元素可以-块与块之间必须按-存放。" class="headerlink" title="(填空题)在分块查找方法中,表中每块内的元素可以(),块与块之间必须按___存放。"></a>(填空题)在分块查找方法中,表中每块内的元素可以(),块与块之间必须按___存放。</h4><ul><li><p><em>我的答案：</em></p><p>(1) 任意存放</p><p>(2) 关键字有序</p></li></ul><h4 id="填空题-顺序查找、折半查找、分块查找都属于-查找。"><a href="#填空题-顺序查找、折半查找、分块查找都属于-查找。" class="headerlink" title="(填空题)顺序查找、折半查找、分块查找都属于___查找。"></a>(填空题)顺序查找、折半查找、分块查找都属于___查找。</h4><ul><li><p><em>我的答案：</em></p><p>(1) 静态</p></li></ul><h4 id="填空题-在线性表的哈希存储中-装填因子ɑ又称为装填系数-若用m表示哈希表的长度-n表示线性表中的元素的个数-则ɑ等于-。"><a href="#填空题-在线性表的哈希存储中-装填因子ɑ又称为装填系数-若用m表示哈希表的长度-n表示线性表中的元素的个数-则ɑ等于-。" class="headerlink" title="(填空题)在线性表的哈希存储中,装填因子ɑ又称为装填系数,若用m表示哈希表的长度,n表示线性表中的元素的个数,则ɑ等于___。"></a>(填空题)在线性表的哈希存储中,装填因子ɑ又称为装填系数,若用m表示哈希表的长度,n表示线性表中的元素的个数,则ɑ等于___。</h4><ul><li><p><em>我的答案：</em></p><p>(1) n&#x2F;m</p></li></ul><h4 id="判断题-在二叉排序树中-根结点的值都小于孩子结点的值。"><a href="#判断题-在二叉排序树中-根结点的值都小于孩子结点的值。" class="headerlink" title="(判断题)在二叉排序树中,根结点的值都小于孩子结点的值。"></a>(判断题)在二叉排序树中,根结点的值都小于孩子结点的值。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错</p><h4 id="判断题-直接插入排序时-关键字的比较次数与记录的初始排列无关。"><a href="#判断题-直接插入排序时-关键字的比较次数与记录的初始排列无关。" class="headerlink" title="(判断题)直接插入排序时,关键字的比较次数与记录的初始排列无关。"></a>(判断题)直接插入排序时,关键字的比较次数与记录的初始排列无关。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 对</p><p>(判断题)排序要求数据一定要按顺序方式存储。</p><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错</p><h4 id="判断题-对千两棵具有相同关键字但形状不同的二叉排序树-按中序遍历它们得到的序列的顺序是一样的。"><a href="#判断题-对千两棵具有相同关键字但形状不同的二叉排序树-按中序遍历它们得到的序列的顺序是一样的。" class="headerlink" title="(判断题)对千两棵具有相同关键字但形状不同的二叉排序树,按中序遍历它们得到的序列的顺序是一样的。"></a>(判断题)对千两棵具有相同关键字但形状不同的二叉排序树,按中序遍历它们得到的序列的顺序是一样的。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 对</p><h4 id="单选题-二叉排序树的查找效率与二叉树的-1-有关，在-2-时其查找效率最低。"><a href="#单选题-二叉排序树的查找效率与二叉树的-1-有关，在-2-时其查找效率最低。" class="headerlink" title="(单选题)二叉排序树的查找效率与二叉树的 (1) 有关，在 (2) 时其查找效率最低。"></a>(单选题)二叉排序树的查找效率与二叉树的 (1) 有关，在 (2) 时其查找效率最低。</h4><p>(1) (单选题) 1</p><ul><li>A. 高度</li><li>B. 结点的多少</li><li>C. 树型</li><li>D. 结点的位置</li></ul><p><em>我的答案:</em> C</p><p>(2) (单选题) 2</p><ul><li>A. 结点太多</li><li>B. 完全二叉树</li><li>C. 呈单枝树</li><li>D. 结点太复杂。</li></ul><p><em>我的答案:</em> C</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++算法</title>
      <link href="/posts/6e93dd78.html"/>
      <url>/posts/6e93dd78.html</url>
      
        <content type="html"><![CDATA[<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="高精度算法"><a href="#高精度算法" class="headerlink" title="高精度算法"></a>高精度算法</h2><h3 id="高精度-高精度"><a href="#高精度-高精度" class="headerlink" title="高精度+高精度"></a>高精度+高精度</h3><p>1、建立两个整型数组、设立初值、设定长度（给定数字的情况下，直接用length，不是给定的话，在if（x）里也会对长度进行自增，直接设定为1也可以）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">200</span>],b[<span class="number">200</span>];  </span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="comment">//给定数字</span></span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">int</span> lenb = num2.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//多个数字，或者未给定</span></span><br><span class="line"><span class="type">int</span> lena = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> lenb = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>2、输入高精度数（根据题目要求来进行,有时还需要先去除前导零（倒序））</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//去除前导零</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num1[lena<span class="number">-1</span>-i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、核心代码，将两者相加（那就是题目要求有多个高精度数相加），或者使用另一个数组c来接收结果,还是看题目要求怎么加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//x为进位</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">max</span>(lena, lenb);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">c[i] = a[i]+b[i] + x;</span><br><span class="line">x = c[i] / <span class="number">10</span>;</span><br><span class="line">c[i] = c[i] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">c[len] = x;</span><br><span class="line">    <span class="comment">//这里的x = x / 10;可以不加，因为如果是加法的话，是不会存在加到最高位时，x超过两位数的情况</span></span><br><span class="line">    x = x / <span class="number">10</span>;</span><br><span class="line">len++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、去除前导0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (c[len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; len - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//倒序输出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num1;</span><br><span class="line">string num2 ;</span><br><span class="line"><span class="type">int</span> a[<span class="number">200</span>],b[<span class="number">200</span>],c[<span class="number">200</span>];</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line"><span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in">sizeof</span>(c));</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//为什么倒序取该数组 </span></span><br><span class="line"><span class="comment">//因为num前面会有0出现，这样才能从a[0]开始取各个位置与b相加</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num1[lena<span class="number">-1</span>-i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="type">int</span> lenb = num2.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//为什么倒序取该数组 </span></span><br><span class="line"><span class="comment">//因为num前面会有0出现，这样才能从a[0]开始取各个位置与b相加</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lenb; i++) &#123;</span><br><span class="line">b[i] = num2[lenb - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">max</span>(lena, lenb);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//高精度+高精度核心代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">c[i] = a[i]+b[i] + x;</span><br><span class="line">x = c[i] / <span class="number">10</span>;</span><br><span class="line">c[i] = c[i] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断最高位</span></span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">c[len] = x;</span><br><span class="line">len++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (c[len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; len - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1173：阶乘和（估计考）"><a href="#1173：阶乘和（估计考）" class="headerlink" title="1173：阶乘和（估计考）"></a>1173：阶乘和（估计考）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chen</span><span class="params">(<span class="type">int</span> b[], <span class="type">int</span>&amp; lenb, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lenb; i++) &#123;</span><br><span class="line">b[i] = b[i] * n + x;</span><br><span class="line">x = b[i] / <span class="number">10</span>;</span><br><span class="line">b[i] = b[i] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">b[lenb] = x % <span class="number">10</span>;</span><br><span class="line">x = x / <span class="number">10</span>;</span><br><span class="line">lenb++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">jia</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span>&amp; lena, <span class="type">int</span> b[], <span class="type">int</span> lenb)</span> </span>&#123;</span><br><span class="line">lena = <span class="built_in">max</span>(lena, lenb);</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = a[i] +b[i] + x;</span><br><span class="line">x = a[i] / <span class="number">10</span>;</span><br><span class="line">a[i] = a[i] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x) &#123;</span><br><span class="line">a[lena] = x;</span><br><span class="line">lena++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10000</span>];</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> lena = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> b[<span class="number">10000</span>];</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line">b[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> lenb = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;=n; i++) &#123;</span><br><span class="line"><span class="built_in">chen</span>(b, lenb, i);</span><br><span class="line"><span class="built_in">jia</span>(a, lena, b,lenb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (a[lena - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lena - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">lena--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lena - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="高精度-低精度"><a href="#高精度-低精度" class="headerlink" title="高精度+低精度"></a>高精度+低精度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num = <span class="string">&quot;00000000000011111111112321321312312312321&quot;</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">1234</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="type">int</span> lena = num.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//为什么倒序取该数组 </span></span><br><span class="line"><span class="comment">//因为num前面会有0出现，这样才能从a[0]开始取各个位置与b相加</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num[lena<span class="number">-1</span>-i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">a[<span class="number">0</span>] = a[<span class="number">0</span>] + b;</span><br><span class="line"></span><br><span class="line"><span class="comment">//做进位，以及把各个位置相加，流程结束会得到num与b相加的结果，只对低精度部分进行变化</span></span><br><span class="line"><span class="comment">//更高位，直接逆序输出即可</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = a[i] + x;</span><br><span class="line">x = a[i] / <span class="number">10</span>;</span><br><span class="line">a[i] = a[i] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为了意外的情况，高精度的位数没有低精度的位数高，比如1（高精度）+10000（低精度）</span></span><br><span class="line"><span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">a[lena] = x % <span class="number">10</span>;</span><br><span class="line">x = x / <span class="number">10</span>;</span><br><span class="line">lena++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (a[lena - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lena - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">lena--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lena - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="高精度-低精度-1"><a href="#高精度-低精度-1" class="headerlink" title="高精度-低精度"></a>高精度-低精度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num1 = <span class="string">&quot;11111111111111111111111112&quot;</span>;</span><br><span class="line"><span class="type">int</span> num2 = <span class="number">112</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">200</span>], b[<span class="number">200</span>], c[<span class="number">200</span>];</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//倒序取得数组a</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num1[lena - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一位减去低精度数后，后续的位数就只需要减去所借的x</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">a[<span class="number">0</span>] = a[<span class="number">0</span>] - num2 - x;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">////以下是高精度-低精度数乘法的核心代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line"><span class="comment">//该位数减去所借的x</span></span><br><span class="line">a[i] = a[i] - x;</span><br><span class="line"><span class="comment">//上面已经把所借的x减去，所以x要归零</span></span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//借位，如果不够减，就需要多借一位</span></span><br><span class="line"><span class="keyword">while</span> (a[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">x++;</span><br><span class="line"><span class="comment">//该位得到所借得的10</span></span><br><span class="line">a[i] = a[i] + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (a[lena - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lena - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">lena--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lena - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="高精度-高精度-1"><a href="#高精度-高精度-1" class="headerlink" title="高精度-高精度"></a>高精度-高精度</h3><p>1、建立两个整型数组、设立初值、设定长度（给定数字的情况下，直接用length，不是给定的话，在if（x）里也会对长度进行自增，直接设定为1也可以）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">200</span>],b[<span class="number">200</span>];  </span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="comment">//给定数字</span></span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">int</span> lenb = num2.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//多个数字，或者未给定</span></span><br><span class="line"><span class="type">int</span> lena = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> lenb = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>2、输入高精度数（根据题目要求来进行,有时还需要先去除前导零（倒序））</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//去除前导零</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num1[lena<span class="number">-1</span>-i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、核心代码，将两者相加（那就是题目要求有多个高精度数相加），或者使用另一个数组c来接收结果,还是看题目要求怎么加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//x为进位</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">max</span>(lena, lenb);</span><br><span class="line"><span class="comment">//当第一次减去的值为负数时，则需要减去进位，比如第二位要还第一位的向它借的1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">c[i] = a[i] - b[i] - x;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//以下借位的步骤，每次循环如果a[i]还是小于0，则需要继续往前一位借1</span></span><br><span class="line"><span class="keyword">while</span> (c[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">x++;</span><br><span class="line">c[i] = c[i] + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、去除前导0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (c[len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; len - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//倒序输出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num1;</span><br><span class="line">string num2;</span><br><span class="line"><span class="type">int</span> a[<span class="number">200</span>], b[<span class="number">200</span>], c[<span class="number">201</span>];</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in">sizeof</span>(c));</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//倒序取得数组a</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num1[lena - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//倒序取得数组b</span></span><br><span class="line"><span class="type">int</span> lenb = num2.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lenb; i++) &#123;</span><br><span class="line">b[i] = num2[lenb - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先取得第一次所减去的值</span></span><br><span class="line"><span class="comment">//a[0]=2,减去num2之后就是-1，要进行借位</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//len=等于lena与lenb之主的最大值</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">max</span>(lena, lenb);</span><br><span class="line"><span class="comment">//当第一次减去的值为负数时，则需要减去进位，比如第二位要还第一位的向它借的1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">c[i] = a[i] - b[i] - x;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//以下借位的步骤，每次循环如果a[i]还是小于0，则需要继续往前一位借1</span></span><br><span class="line"><span class="keyword">while</span> (c[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">x++;</span><br><span class="line">c[i] = c[i] + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (c[len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; len - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//倒序输出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="高精度-低精度-2"><a href="#高精度-低精度-2" class="headerlink" title="高精度*低精度"></a>高精度*低精度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num = <span class="string">&quot;00000000000011111111112321321312312312321&quot;</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="type">int</span> lena = num.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//倒序取数组a</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num[lena - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下是高精度*低精度数乘法的核心代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = a[i] * b + x;</span><br><span class="line">x = a[i] / <span class="number">10</span>;</span><br><span class="line">a[i] = a[i] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一定要用while，因为可能a[i]的位数大于一位，比如200，那就得一直进位</span></span><br><span class="line"><span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">a[lena] = x % <span class="number">10</span>;</span><br><span class="line">x = x / <span class="number">10</span>;</span><br><span class="line">lena++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (a[lena - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lena - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">lena--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lena - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1170：计算2的N次方-估计考"><a href="#1170：计算2的N次方-估计考" class="headerlink" title="1170：计算2的N次方(估计考)"></a>1170：计算2的N次方(估计考)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; b;</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="type">int</span> lena = num.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//倒序取数组a</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num[lena - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> s = <span class="number">0</span>; s &lt; b; s++) &#123;</span><br><span class="line"><span class="comment">//以下是高精度*低精度数乘法的核心代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = a[i] * <span class="number">2</span> + x;</span><br><span class="line">x = a[i] / <span class="number">10</span>;</span><br><span class="line">a[i] = a[i] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一定要用while，因为可能a[i]的位数大于一位，比如200，那就得一直进位</span></span><br><span class="line"><span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">a[lena] = x % <span class="number">10</span>;</span><br><span class="line">x = x / <span class="number">10</span>;</span><br><span class="line">lena++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (a[lena - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lena - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">lena--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lena - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求10000以内n的阶乘（考过）"><a href="#求10000以内n的阶乘（考过）" class="headerlink" title="求10000以内n的阶乘（考过）"></a>求10000以内n的阶乘（考过）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化数组,数组要开的足够大</span></span><br><span class="line">    <span class="type">int</span> num[<span class="number">100000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    num[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">1</span>; <span class="comment">// len 表示当前数组中存储的数的位数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算阶乘</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> carry = <span class="number">0</span>; <span class="comment">// 进位标志</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="type">int</span> temp = num[j] * i + carry; <span class="comment">// 当前位乘以i并加上进位</span></span><br><span class="line">            num[j] = temp % <span class="number">10</span>; <span class="comment">// 更新当前位的值</span></span><br><span class="line">            carry = temp / <span class="number">10</span>; <span class="comment">// 计算进位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理剩余进位，进位没有处理完，就继续处理+1</span></span><br><span class="line">        <span class="keyword">while</span> (carry) &#123;</span><br><span class="line">            <span class="comment">//此处增加了num的长度len</span></span><br><span class="line">            num[len++] = carry % <span class="number">10</span>;</span><br><span class="line">            carry /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从高位向低位输出数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        cout &lt;&lt; num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度-高精度-不考"><a href="#高精度-高精度-不考" class="headerlink" title="高精度*高精度(不考)"></a>高精度*高精度(不考)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num1;</span><br><span class="line">string num2;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>], b[<span class="number">100</span>], c[<span class="number">400</span>];</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line"><span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in">sizeof</span>(c));</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//倒序取数组a</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num1[lena - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="type">int</span> lenb = num2.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//倒序取数组b</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lenb; i++) &#123;</span><br><span class="line">b[i] = num2[lenb - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len = lena + lenb;</span><br><span class="line"><span class="comment">//以下是高精度*高精度数乘法的核心代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line"><span class="comment">//每一趟，x都要清零</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; lenb; j++) &#123;</span><br><span class="line"><span class="comment">//每一个得到的数都来自于多趟数字相加</span></span><br><span class="line">c[i + j] = c[i + j] + a[i] * b[j] + x;</span><br><span class="line"><span class="comment">//x为下一个数字的进位</span></span><br><span class="line">x = c[i + j] / <span class="number">10</span>;</span><br><span class="line"><span class="comment">//此处的c[i + j]为该位的输出</span></span><br><span class="line">c[i + j] = c[i + j] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第i趟结束时，进位存在本趟的最高位</span></span><br><span class="line">c[i + lenb] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (c[len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; len - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="高精度-x2F-单精度"><a href="#高精度-x2F-单精度" class="headerlink" title="高精度&#x2F;单精度"></a>高精度&#x2F;单精度</h3><p>1、建立两个整型数组、设立初值、设定长度（给定数字的情况下，直接用length，不是给定的话，在if（x）里也会对长度进行自增，直接设定为1也可以）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">200</span>],b[<span class="number">200</span>];  </span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="comment">//给定数字</span></span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">int</span> lenb = num2.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//多个数字，或者未给定</span></span><br><span class="line"><span class="type">int</span> lena = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> lenb = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>2、输入高精度数（根据题目要求来进行,有时还需要先去除前导零（倒序））</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//除法的高精度是唯一不需要倒序取的算法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、核心代码，将两者相加（那就是题目要求有多个高精度数相加），或者使用另一个数组c来接收结果,还是看题目要求怎么加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//t为新的被除数，c[i]为商的每一位，x为余数</span></span><br><span class="line"><span class="comment">//比如我们130除以13，第一次循环a[0]为0*10+1=1，c[0]=1/13=0,x=1%13=0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">t = x * <span class="number">10</span> + a[i];</span><br><span class="line">c[i] = t / b;</span><br><span class="line">x = t % b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、去除前导0+输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面的代码作用为将前导0删除</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="comment">//首先使用一个for循环遍历结果数组c，如果当前位不为0或者之前已经输出过一位数字（flag为1），则输出该位数字，并将flag设置为1，表示最高位已经输出。</span></span><br><span class="line"><span class="keyword">if</span> (c[i] != <span class="number">0</span> || flag == <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num ;</span><br><span class="line"><span class="type">int</span> b = <span class="number">13</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>],c[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="type">int</span> lena = num.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//除法的高精度是唯一不需要倒序取的算法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in">sizeof</span>(c));</span><br><span class="line"><span class="type">int</span> len = lena;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//t为新的被除数，c[i]为商的每一位，x为余数</span></span><br><span class="line">    <span class="comment">//比如我们130除以13，第一次循环a[0]为0*10+1=1，c[0]=1/13=0,x=1%13=0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">t = x * <span class="number">10</span> + a[i];</span><br><span class="line">c[i] = t / b;</span><br><span class="line">x = t % b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面的代码作用为将前导0删除</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="comment">//首先使用一个for循环遍历结果数组c，如果当前位不为0或者之前已经输出过一位数字（flag为1），则输出该位数字，并将flag设置为1，表示最高位已经输出。</span></span><br><span class="line"><span class="keyword">if</span> (c[i] != <span class="number">0</span> || flag == <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//最后需要判断flag的值，如果为0，说明结果为0，需要输出一个0。否则就已经将结果输出完毕了，直接结束程序即可。</span></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; x;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1171：大整数的因子-估计考，可能性最大"><a href="#1171：大整数的因子-估计考，可能性最大" class="headerlink" title="1171：大整数的因子(估计考，可能性最大)"></a>1171：大整数的因子(估计考，可能性最大)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string a;</span><br><span class="line"><span class="type">int</span> c[<span class="number">31</span>],len,t,x,flag;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line">len = a.<span class="built_in">size</span>();</span><br><span class="line"><span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in">sizeof</span>(c));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">c[i] = a[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> s = <span class="number">2</span>; s &lt;= <span class="number">9</span>; s++) &#123;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"></span><br><span class="line">t = x * <span class="number">10</span> + c[i];</span><br><span class="line">x = t % s;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; s &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;none&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度-x2F-高精度（不考）"><a href="#高精度-x2F-高精度（不考）" class="headerlink" title="高精度&#x2F;高精度（不考）"></a>高精度&#x2F;高精度（不考）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果余数d比除数b大，则返回true</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">big</span><span class="params">(<span class="type">int</span> d[], <span class="type">int</span> lend, <span class="type">int</span> b[], <span class="type">int</span> lenb)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//下面是lenb、lend相等的情况</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = lend - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">////这里的条件很关键，d[lend - 1]!=0这个条件如果不加，就会出现d数组取值=&#123;0,0&#125;，但是lend为2大于lenb为1，返回了ture，而不断减去b，导致错误（QAQ这个条件卡了三个半小时）</span></span><br><span class="line"><span class="keyword">if</span> (lend &gt; lenb&amp;&amp;d[lend - <span class="number">1</span>]!=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (lend &lt; lenb) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (d[i] &gt; b[i]) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (d[i] &lt; b[i]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//重复循环</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//每一位相等的情况下，则返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将余数d-除数b，执行减法后，d的长度将改变，必须通过引用(&amp;)传递出来</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">jianfa</span><span class="params">(<span class="type">int</span> d[], <span class="type">int</span>&amp; lend, <span class="type">int</span> b[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//x是借位，初始第0位是没有借位的</span></span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//这里是正序的因为减法从原本数字的最低位开始，而数组是逆序存放数字的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lend; i++) &#123;</span><br><span class="line">        d[i] = d[i] - b[i] - x;</span><br><span class="line">        <span class="keyword">if</span> (d[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            d[i] += <span class="number">10</span>;</span><br><span class="line">            x = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改余数d的长度</span></span><br><span class="line">    <span class="keyword">while</span> (d[lend - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lend - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        lend--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num1;</span><br><span class="line">string num2;</span><br><span class="line"><span class="comment">//a数组是被除数，b数组是除数，c数组是商，d数组是余数</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">300</span>], b[<span class="number">300</span>], c[<span class="number">300</span>],d[<span class="number">300</span>];</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">int</span> lenb = num2.<span class="built_in">length</span>();</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in">sizeof</span>(c));</span><br><span class="line"><span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line"><span class="comment">//倒序取数组a</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num1[lena - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//倒序取数组b</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lenb; i++) &#123;</span><br><span class="line">b[i] = num2[lenb - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//余数长度为0</span></span><br><span class="line"><span class="type">int</span> lend = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//从被除数的最高位开始</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lena - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="comment">//1.将余数全部位数向右移动一位,因为一次循环后，相当于有一位已经完成了除法，所以有余数的话，向后退一位，而先前的那一位，后面会塞下新的a[i]，相当于把余数放大10倍（等同于高精度除单精度中的x*10步骤）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = lend - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">d[j + <span class="number">1</span>] = d[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.获得余数的新第0位</span></span><br><span class="line">d[<span class="number">0</span>] = a[i];</span><br><span class="line"><span class="comment">//3.余数的位数多加一位，因为上面最前面多加了一位</span></span><br><span class="line">lend++;</span><br><span class="line"><span class="comment">//4.将余数d和除数b相减，每减一次，则第i位商+1</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">big</span>(d, lend, b, lenb)) &#123;</span><br><span class="line"><span class="built_in">jianfa</span>(d, lend, b);</span><br><span class="line">c[i]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//商c的长度不超过被除数a的长度</span></span><br><span class="line"><span class="type">int</span> lenc = lena;</span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="keyword">while</span> (c[lenc - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lenc - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">lenc--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (d[lend - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lend - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">lend--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lenc - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lend - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; d[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>核心代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡算法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//j从0开始，但是要小于n-i-1，是因为无序区元素个数为n-i，而一共要比较n-i-1次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="comment">//此处为小于，所以为递增</span></span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j], a[j + <span class="number">1</span>]);  </span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//全程无交换，则说明本来就是有序的，不需要浪费时间进行循环，直接跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//冒泡算法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j], a[j + <span class="number">1</span>]);  </span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//全程无交换，则说明本来就是有序的，不需要浪费时间进行循环，直接跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>] ;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt;  a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bubble_sort</span>(a,n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(a,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="整数奇偶排序（考过）"><a href="#整数奇偶排序（考过）" class="headerlink" title="整数奇偶排序（考过）"></a>整数奇偶排序（考过）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j], a[j + <span class="number">1</span>]);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//全程无交换，跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort2</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j], a[j + <span class="number">1</span>]);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//全程无交换，跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>], b[<span class="number">10</span>], c[<span class="number">10</span>], cnt = <span class="number">0</span>, cntc = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            b[cnt++] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            c[cntc++] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bubble_sort</span>(b, cnt);</span><br><span class="line">    <span class="built_in">bubble_sort2</span>(c, cntc);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(b, cnt);</span><br><span class="line">    <span class="built_in">print</span>(c, cntc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="奇数单增序列"><a href="#奇数单增序列" class="headerlink" title="奇数单增序列"></a>奇数单增序列</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//为了题目格式要求，对输出函数做一点改变</span></span><br><span class="line">    cout &lt;&lt; a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j], a[j + <span class="number">1</span>]);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//全程无交换，跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">500</span>], b[<span class="number">500</span>], cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            b[cnt++] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bubble_sort</span>(b, cnt);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(b, cnt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>核心代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertsort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注意这个循环范围，因为第一个无序区的元素下标为1，而最后一个下标为n-1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//t为需要排序的数组a的元素</span></span><br><span class="line">        <span class="type">int</span> t = a[i];</span><br><span class="line">        <span class="comment">//t找位置的过程，在过程中数组t前面的元素位置往后撤</span></span><br><span class="line">        <span class="comment">//此处大于，所以为递增</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; a[j] &gt; t) &#123;</span><br><span class="line">            a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//t通过不断前移找到正确的位置</span></span><br><span class="line">        <span class="comment">//而a[j+1]要么是第一个位置，j=-1时,a[j+1]=a[0]</span></span><br><span class="line">        <span class="comment">//要么此时a[j]&lt;t了，排序就已经按照递增来排序了</span></span><br><span class="line">        a[j + <span class="number">1</span>] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt;  a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertsort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//t为需要排序的数组a的元素</span></span><br><span class="line">        <span class="type">int</span> t = a[i];</span><br><span class="line">        <span class="comment">//t找位置的过程，在过程中数组t前面的元素位置往后撤</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; a[j] &gt; t) &#123;</span><br><span class="line">            a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//t找到正确的位置</span></span><br><span class="line">        a[j + <span class="number">1</span>] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">500</span>], b[<span class="number">500</span>], cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">insertsort</span>(a, n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(a, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求逆序对（模拟考过）"><a href="#求逆序对（模拟考过）" class="headerlink" title="求逆序对（模拟考过）"></a>求逆序对（模拟考过）</h4><p>不会，直接过</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Max = <span class="number">1e6</span> + <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> a[Max] = &#123;&#125;; <span class="comment">// 存储输入序列的数组</span></span><br><span class="line"><span class="type">int</span> b[Max]; <span class="comment">// 存储归并排序过程中的临时数组</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> num = <span class="number">0</span>; <span class="comment">// 用于存储逆序对的数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序中的归并操作，将两个已排序的数组合并成一个有序的数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> mid, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = l; <span class="comment">// 左半部分数组的下标</span></span><br><span class="line">    <span class="type">int</span> j = mid + <span class="number">1</span>; <span class="comment">// 右半部分数组的下标</span></span><br><span class="line">    <span class="type">int</span> k = l; <span class="comment">// 临时数组的下标</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123; <span class="comment">// 比较左右两部分数组中的元素，合并为一个有序的数组</span></span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; a[j]) &#123; <span class="comment">// 如果左边元素大于右边元素，说明存在逆序对</span></span><br><span class="line">            b[k++] = a[j++]; <span class="comment">// 将右边元素存储在临时数组中</span></span><br><span class="line">            num += mid - i + <span class="number">1</span>; <span class="comment">// 统计逆序对数量，注意这里的统计方式</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// 如果左边元素小于等于右边元素，不需要统计逆序对</span></span><br><span class="line">            b[k++] = a[i++]; <span class="comment">// 将左边元素存储在临时数组中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123; <span class="comment">// 如果左半部分数组有剩余元素，将其存储在临时数组中</span></span><br><span class="line">        b[k++] = a[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) &#123; <span class="comment">// 如果右半部分数组有剩余元素，将其存储在临时数组中</span></span><br><span class="line">        b[k++] = a[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = l; i &lt;= r; i++) &#123; <span class="comment">// 将归并排序过程中得到的有序数组覆盖原始数组</span></span><br><span class="line">        a[i] = b[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序，对序列进行排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> mid;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; r) &#123; <span class="comment">// 递归终止条件，当左右下标相等时表示已经排好序</span></span><br><span class="line">        mid = l + ((r - l) /<span class="number">2</span>); <span class="comment">// 计算中间位置，避免溢出</span></span><br><span class="line">        <span class="built_in">mergeSort</span>(l, mid); <span class="comment">// 对左半部分数组进行归并排序</span></span><br><span class="line">        <span class="built_in">mergeSort</span>(mid + <span class="number">1</span>, r); <span class="comment">// 对右半部分数组进行归并排序</span></span><br><span class="line">        <span class="built_in">merge</span>(l, mid, r); <span class="comment">// 归并操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n; <span class="comment">// 输入序列长度</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">// 输入序列</span></span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mergeSort</span>(<span class="number">0</span>, n - <span class="number">1</span>); <span class="comment">// 对序列进行归并排序</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; num ; <span class="comment">// 输出逆序对数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序-结构体-考"><a href="#快速排序-结构体-考" class="headerlink" title="快速排序+结构体(考)"></a>快速排序+结构体(考)</h3><h4 id="1176：谁考了第k名"><a href="#1176：谁考了第k名" class="headerlink" title="1176：谁考了第k名"></a><strong>1176：谁考了第k名</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">float</span> score;</span><br><span class="line">&#125;s[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照分数由小到大排序</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(student a,student b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果前面学生的分数大于后面学生的分数，则不交换</span></span><br><span class="line">    <span class="keyword">if</span> (a.score &gt; b.score) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//也可以这么写，理解为前面的始终大于后面的</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Student a, Student b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.grade &gt; b.grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; s[i].id &gt;&gt; s[i].score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(s,s+n,cmp);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; s[k<span class="number">-1</span>].id &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s[k<span class="number">-1</span>].score;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1178：成绩排序"><a href="#1178：成绩排序" class="headerlink" title="1178：成绩排序"></a><strong>1178：成绩排序</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> &#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">float</span> score;</span><br><span class="line">&#125;s[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照分数由小到大排序</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(student a,student b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果前面学生的分数大于后面学生的分数，则是正确的排序方法（true），则不交换</span></span><br><span class="line">    <span class="keyword">if</span> (a.score &gt; b.score) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果前面学生的分数等于后面学生的分数，则比较名字的大小</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.score == b.score) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.name &lt; b.name) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.score &lt; b.score) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; s[i].name &gt;&gt; s[i].score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(s,s+n,cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; s[i].name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s[i].score &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1182：合影效果"><a href="#1182：合影效果" class="headerlink" title="1182：合影效果"></a>1182：合影效果</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、cmp结构体的优化写法：直接返回：return a.height &lt; b.height;</span></span><br><span class="line"><span class="comment">//2、string类型的字符可以直接通过：a.gender == &quot;male&quot;进行比较</span></span><br><span class="line"><span class="comment">//3、流操作符 fixed，它表示浮点输出应该以固定点或小数点表示法显示，当它与 setprecision 操作符一起使用时，它将指定浮点数字的小数点后要显示的位数：cout&lt;&lt;fixed &lt;&lt; setprecision(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个结构体表示每个人的信息</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    string gender; <span class="comment">// 性别</span></span><br><span class="line">    <span class="type">double</span> height; <span class="comment">// 身高</span></span><br><span class="line">&#125;people[<span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序规则：男生从矮到高，女生从高到矮</span></span><br><span class="line"><span class="comment">// 这里的a和b就比较像左边和右边的关系了，实际上a和b根据题目还可以引申为先后之类的关系</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> Person&amp; a, <span class="type">const</span> Person&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.gender == <span class="string">&quot;male&quot;</span> &amp;&amp; b.gender == <span class="string">&quot;male&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.height &lt; b.height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.gender == <span class="string">&quot;female&quot;</span> &amp;&amp; b.gender == <span class="string">&quot;female&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.height &gt; b.height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.gender == <span class="string">&quot;male&quot;</span> &amp;&amp; b.gender == <span class="string">&quot;female&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 男生在左边，女生在右边</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个数组存储每个人的信息</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; people[i].gender &gt;&gt; people[i].height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    <span class="built_in">sort</span>(people, people + n, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出每个人的身高</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; people[i].height &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1183：病人排队"><a href="#1183：病人排队" class="headerlink" title="1183：病人排队"></a>1183：病人排队</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、如果在cmp函数中没有覆盖所有的情况，就会导致报错：无效的比较器</span></span><br><span class="line"><span class="comment">//2、可以用过order变量记录前后顺序，避免了用string类型的id来进行前后顺序比较</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个结构体表示每个人的信息</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    string id;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span> order; <span class="comment">// 记录每个人的登记顺序，这个变量是因为id为string类型，可能存在英文，不能用id大小来比较前后顺序</span></span><br><span class="line">&#125;people[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序规则：</span></span><br><span class="line"><span class="comment">// 1、老年人（年龄 &gt;= 60岁）比非老年人优先看病。</span></span><br><span class="line"><span class="comment">// 2、老年人按年龄从大到小的顺序看病，年龄相同的按登记的先后顺序排序。</span></span><br><span class="line"><span class="comment">// 3、非老年人按登记的先后顺序看病。</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> Person&amp; a, <span class="type">const</span> Person&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、</span></span><br><span class="line">    <span class="keyword">if</span> (a.age &gt;= <span class="number">60</span> &amp;&amp; b.age &lt; <span class="number">60</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.age &lt; <span class="number">60</span> &amp;&amp; b.age &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2、</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.age &gt;= <span class="number">60</span> &amp;&amp; b.age &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.age == b.age) &#123;</span><br><span class="line">            <span class="keyword">return</span> a.order &lt; b.order;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a.age &gt; b.age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3、</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a.order &lt; b.order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个数组存储每个人的信息</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; people[i].id &gt;&gt; people[i].age;</span><br><span class="line">        people[i].order = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    <span class="built_in">sort</span>(people, people + n, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出每个人的ID</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; people[i].id &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分数线划定"><a href="#分数线划定" class="headerlink" title="分数线划定"></a>分数线划定</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span><span class="comment">//建立结构体</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> name, mark;<span class="comment">//name为编号、mark为成绩</span></span><br><span class="line">&#125;pp[<span class="number">5005</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span><span class="comment">//建立结构体a和b;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.mark == b.mark)<span class="comment">//如果成绩相同</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.name &lt; b.name;<span class="comment">//编号小的靠前</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.mark &gt; b.mark;<span class="comment">//否则成绩高的靠前</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, need, sum = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; pp[i].name &gt;&gt; pp[i].mark;<span class="comment">//输入编号和成绩</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(pp, pp + n, cmp);</span><br><span class="line">    need = m * <span class="number">1.5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; pp[need - <span class="number">1</span>].mark &lt;= pp[i].mark; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; pp[need - <span class="number">1</span>].mark &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; sum &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; pp[i].name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; pp[i].mark &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递推"><a href="#递推" class="headerlink" title="递推"></a>递推</h2><p>做递推的关键在于找到递推式</p><h3 id="1190：上台阶"><a href="#1190：上台阶" class="headerlink" title="1190：上台阶"></a>1190：上台阶</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、使用大数组来进行递推（推荐递推变量）</span></span><br><span class="line"><span class="comment">//2、输入时碰到0则停止：while (cin &gt;&gt; n &amp;&amp; n != 0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">72</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">zlt</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//走第0级有1种方法</span></span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//走第1级有1种方法</span></span><br><span class="line">    a[<span class="number">1</span>] = a[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//走第2级有2种方法</span></span><br><span class="line">    a[<span class="number">2</span>] = a[<span class="number">1</span>]+a[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//走第3级有4种方法</span></span><br><span class="line">    a[<span class="number">3</span>] = a[<span class="number">2</span>]+a[<span class="number">1</span>]+a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">4</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        a[i] = a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>] + a[i - <span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="comment">//输入到0停止</span></span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n &amp;&amp; n != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="built_in">zlt</span>(n);</span><br><span class="line">        cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1661-递推求斐波那契数列（高精度，感觉不可能结合考）"><a href="#1661-递推求斐波那契数列（高精度，感觉不可能结合考）" class="headerlink" title="1661: 递推求斐波那契数列（高精度，感觉不可能结合考）"></a>1661: 递推求斐波那契数列（高精度，感觉不可能结合考）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、数组作为递推变量的使用方法</span></span><br><span class="line"><span class="comment">//2、将一个数组赋值给另一个数组的方法，用于：memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="comment">//3、复习一遍高精度加高精度</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">10010</span>;  <span class="comment">// 数组的大小</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[MAXN], b[MAXN], c[MAXN];  <span class="comment">// 数组，用于存储斐波那契数列中的三个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加法函数，将数组 a 和 b 相加，结果存储在数组 c 中</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> c[])</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> carry = <span class="number">0</span>;  <span class="comment">// 进位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXN; i++) &#123;</span><br><span class="line">        c[i] = a[i] + b[i] + carry;  <span class="comment">// 计算 c[i]，等于 a[i] + b[i] + 进位</span></span><br><span class="line">        carry = c[i] / <span class="number">10</span>;  <span class="comment">// 计算进位，即 c[i] 除以 10 的商</span></span><br><span class="line">        c[i] %= <span class="number">10</span>;  <span class="comment">// 取个位数，即 c[i] 除以 10 的余数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算斐波那契数列的第 n 项</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fbnq</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化，将数组 a 和 b 的所有元素都赋值为 0，数组 c 的第一个元素赋值为 1</span></span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in">sizeof</span>(c));</span><br><span class="line">    a[<span class="number">0</span>] = b[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从第三项开始计算，依次计算出第 3 到第 n 项</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">add</span>(a, b, c);  <span class="comment">// 计算下一个数，将 a 和 b 相加，结果存储在数组 c 中</span></span><br><span class="line">        <span class="built_in">memcpy</span>(a, b, <span class="built_in">sizeof</span>(b));  <span class="comment">// 用 b 更新 a，将数组 b 的所有元素复制到数组 a 中</span></span><br><span class="line">        <span class="built_in">memcpy</span>(b, c, <span class="built_in">sizeof</span>(c));  <span class="comment">// 用 c 更新 b，将数组 c 的所有元素复制到数组 b 中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果，逆序输出数组 c 中的元素，即为斐波那契数列的第 n 项</span></span><br><span class="line">    <span class="type">int</span> pos = MAXN - <span class="number">1</span>;  <span class="comment">// pos 初始值为数组的最后一个元素的下标</span></span><br><span class="line">    <span class="keyword">while</span> (pos &gt; <span class="number">0</span> &amp;&amp; c[pos] == <span class="number">0</span>) pos--;  <span class="comment">// 找到最高位，即从后往前第一个非零元素的下标</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = pos; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        cout &lt;&lt; c[i];  <span class="comment">// 逆序输出数组 c 中的元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">fbnq</span>(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1196：踩方格"><a href="#1196：踩方格" class="headerlink" title="1196：踩方格"></a>1196：踩方格</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这种走方位的题目，当然也可以用递归或者深搜来做</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//找规律做法：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">21</span>];</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">    a[<span class="number">2</span>] = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//找规律</span></span><br><span class="line">        a[i] = <span class="number">2</span> * a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; a[n] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正常递推做法：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f[<span class="number">21</span>];</span><br><span class="line"><span class="type">int</span> l[<span class="number">21</span>], r[<span class="number">21</span>], u[<span class="number">21</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    l[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    r[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    u[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//最后一步向左走的走法</span></span><br><span class="line">        l[i] = l[i - <span class="number">1</span>] + u[i - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//最后一步向右的走法</span></span><br><span class="line">        r[i] = r[i - <span class="number">1</span>] + u[i - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//最后一步向上走的走法</span></span><br><span class="line">        u[i] = l[i - <span class="number">1</span>] + u[i - <span class="number">1</span>]+r[i - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//总的走法</span></span><br><span class="line">        f[i] = l[i ] + u[i]+ r[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[n];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1314：过河卒（模拟考过）"><a href="#1314：过河卒（模拟考过）" class="headerlink" title="1314：过河卒（模拟考过）"></a>1314：过河卒（模拟考过）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、先找到递推式（dp[i][j]=dp[i-1][j]+dp[i][j-1]），再找到递推式的多种初始值（边界初始化），最后再找需要排除的条件（马的控制点）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[<span class="number">21</span>][<span class="number">21</span>]=&#123;<span class="number">0</span>&#125;,g[<span class="number">21</span>][<span class="number">21</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m,x,y,i,j;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; x &gt;&gt; y;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;<span class="comment">//初始化出发点 </span></span><br><span class="line">g[x][y]=<span class="number">1</span>;<span class="comment">//标注卒</span></span><br><span class="line"><span class="comment">//判断卒可走的点是否越界 并标注不能走的马的控制点</span></span><br><span class="line"><span class="keyword">if</span>(x<span class="number">-2</span>&gt;=<span class="number">0</span>&amp;&amp;y<span class="number">-1</span>&gt;=<span class="number">0</span>)g[x<span class="number">-2</span>][y<span class="number">-1</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(x<span class="number">-1</span>&gt;=<span class="number">0</span>&amp;&amp;y<span class="number">-2</span>&gt;=<span class="number">0</span>)g[x<span class="number">-1</span>][y<span class="number">-2</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(x+<span class="number">1</span>&lt;=n&amp;&amp;y<span class="number">-2</span>&gt;=<span class="number">0</span>)g[x+<span class="number">1</span>][y<span class="number">-2</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(x+<span class="number">2</span>&lt;=n&amp;&amp;y<span class="number">-1</span>&gt;=<span class="number">0</span>)g[x+<span class="number">2</span>][y<span class="number">-1</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(x+<span class="number">2</span>&lt;=n&amp;&amp;y+<span class="number">1</span>&lt;=m)g[x+<span class="number">2</span>][y+<span class="number">1</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(x+<span class="number">1</span>&lt;=n&amp;&amp;y+<span class="number">2</span>&lt;=m)g[x+<span class="number">1</span>][y+<span class="number">2</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(x<span class="number">-1</span>&gt;=<span class="number">0</span>&amp;&amp;y+<span class="number">2</span>&lt;=m)g[x<span class="number">-1</span>][y+<span class="number">2</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(x<span class="number">-2</span>&gt;=<span class="number">0</span>&amp;&amp;y+<span class="number">1</span>&lt;=m)g[x<span class="number">-2</span>][y+<span class="number">1</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="comment">//初始化边界，按照边界走就只有一种走法，所以初始化为1</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(g[i][<span class="number">0</span>]==<span class="number">0</span>) dp[i][<span class="number">0</span>]=dp[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="keyword">if</span>(g[<span class="number">0</span>][i]==<span class="number">0</span>) dp[<span class="number">0</span>][i]=dp[<span class="number">0</span>][i<span class="number">-1</span>];</span><br><span class="line"><span class="comment">//递推公式</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(g[i][j]==<span class="number">1</span>)dp[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(g[i][j]==<span class="number">0</span>)dp[i][j]=dp[i<span class="number">-1</span>][j]+dp[i][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; dp[n][m];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//老师的方法，但是疑惑的是我必须用!in(c)才能正确，但是老师是in(c)正确，不过就逻辑上来讲也应该是in(c)，但是找不到我不同的原因</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> b[<span class="number">100</span>][<span class="number">100</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从马点前进的距离方位</span></span><br><span class="line"><span class="type">int</span> dir[<span class="number">8</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">-2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-2</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-2</span>&#125;,&#123;<span class="number">1</span>,<span class="number">-2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">-1</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">in</span><span class="params">(point p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p.x &gt;= <span class="number">0</span> &amp;&amp; p.x &lt;= n &amp;&amp; p.y &gt;= <span class="number">0</span> &amp;&amp; p.y &lt;= m) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">horse</span><span class="params">(point c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">in</span>(c)) &#123;</span><br><span class="line">b[c.x][c.y] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">point t;</span><br><span class="line">t.x = c.x + dir[i][<span class="number">0</span>];</span><br><span class="line">t.y = c.y + dir[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">in</span>(t)) &#123;</span><br><span class="line">b[t.x][t.y] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m, x, y;</span><br><span class="line">point p;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; p.x &gt;&gt; p.y;</span><br><span class="line"></span><br><span class="line"><span class="built_in">horse</span>(p);</span><br><span class="line"></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//初始化出发点 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化边界，按照边界走就只有一种走法，所以初始化为1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!b[i][<span class="number">0</span>]) &#123;</span><br><span class="line">dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!b[<span class="number">0</span>][j]) &#123;</span><br><span class="line">dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dp[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递推公式</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!b[i][j]) &#123;</span><br><span class="line">                <span class="comment">//到达位置 (i, j) 的方案数量等于到达其上方位置 (i - 1, j) 的方案数量与到达其左方位置 (i, j - 1) 的方案数量之和。</span></span><br><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dp[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; dp[n][m];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1194：移动路线-考过"><a href="#1194：移动路线-考过" class="headerlink" title="1194：移动路线(考过)"></a>1194：移动路线(考过)</h3><p>上面过河卒题目的没有条件的简单版本</p><p>注意这个循环的起始点，我一开始做的时候没有考虑我决定以dp1,1为起点，导致双重循环起点都写为了1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m, n,dp[<span class="number">21</span>][<span class="number">21</span>];</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="comment">//起点的初始条件别忘了</span></span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++) &#123;</span><br><span class="line">        dp[i][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        dp[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[n][m];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1191：流感传染-模拟考过"><a href="#1191：流感传染-模拟考过" class="headerlink" title="1191：流感传染(模拟考过)"></a>1191：流感传染(模拟考过)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,count=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> num[<span class="number">101</span>][<span class="number">101</span>],b[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            cin &gt;&gt;num[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            b[i][j]= num[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(count &lt; m<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (num[i][j] == <span class="string">&#x27;@&#x27;</span> ) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j + <span class="number">1</span> &lt; n &amp;&amp; num[i][j+<span class="number">1</span>] != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                        <span class="comment">//引入第二个数组储存结果，防止一直感染下去</span></span><br><span class="line">                        b[i][j + <span class="number">1</span>] = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (j - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; num[i][j<span class="number">-1</span>] != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                        b[i][j - <span class="number">1</span>] = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (i + <span class="number">1</span> &lt; n &amp;&amp; num[i+<span class="number">1</span>][j] != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                        b[i + <span class="number">1</span>][j] = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (i - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; num[i<span class="number">-1</span>][j] != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                        b[i - <span class="number">1</span>][j] = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                num[i][j] = b[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num[i][j] == <span class="string">&#x27;@&#x27;</span>) &#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; sum;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一种新的变量类型：节点node类型 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//data是节点的数据域 </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//lchild是节点的左指针（可以理解为左绳子） </span></span><br><span class="line"></span><br><span class="line">node* lchild;</span><br><span class="line"></span><br><span class="line"><span class="comment">//rchild是节点的左指针（可以理解为右绳子） </span></span><br><span class="line"></span><br><span class="line">node* rchild;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//创建一个节点变量 </span></span><br><span class="line"></span><br><span class="line"><span class="function">node* <span class="title">createNode</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从内存系统申请一个匿名node对象，并用绳子p牵着这个匿名node对象 </span></span><br><span class="line"></span><br><span class="line">node* p = <span class="keyword">new</span> node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绳子p所牵对象的data域赋值 </span></span><br><span class="line"></span><br><span class="line">p-&gt;data = v;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绳子p所牵对象的lchild域为NULL，表示不牵其他匿名node对象 </span></span><br><span class="line"></span><br><span class="line">p-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绳子p所牵对象的rchild域为NULL，表示不牵其他匿名node对象 </span></span><br><span class="line"></span><br><span class="line">p-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义二叉树的根节点 </span></span><br><span class="line"></span><br><span class="line">node* root = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成第1个node内存单元，并用绳子root牵着第1个node内存单元 </span></span><br><span class="line"></span><br><span class="line">root = <span class="built_in">createNode</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成第2个node内存单元，并用绳子l牵着第2个node内存单元</span></span><br><span class="line"></span><br><span class="line">node* l = <span class="built_in">createNode</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成第3个node内存单元，并用绳子r牵着第3个node内存单元 </span></span><br><span class="line"></span><br><span class="line">node* r = <span class="built_in">createNode</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将根节点变量root的左节点绳子牵向绳子l所牵的内存单元，即两根绳子都牵着第2个node内存单元 </span></span><br><span class="line"></span><br><span class="line">root-&gt;lchild = l;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将根节点变量root的右节点绳子牵向绳子r所牵的内存单元，即两根绳子都牵着第3个node内存单元 </span></span><br><span class="line"></span><br><span class="line">root-&gt;rchild = r;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成第4个node内存单元，并用绳子l重新牵着第4个node内存单元，注意：绳子l不再牵着第2个node内存单元 </span></span><br><span class="line"></span><br><span class="line">l = <span class="built_in">createNode</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成第5个node内存单元，并用绳子r重新牵着第5个node内存单元，注意：绳子r不再牵着第3个node内存单元 </span></span><br><span class="line"></span><br><span class="line">r = <span class="built_in">createNode</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将根节点变量root的左节点的左节点绳子牵向绳子l所牵的内存单元，即两根绳子都牵着第4个node内存单元 </span></span><br><span class="line"></span><br><span class="line">root-&gt;lchild-&gt;lchild = l;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将根节点变量root的左节点的右节点绳子牵向绳子r所牵的内存单元，即两根绳子都牵着第5个node内存单元 </span></span><br><span class="line"></span><br><span class="line">root-&gt;lchild-&gt;rchild = r;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成第6个node内存单元，并用绳子l重新牵着第6个node内存单元，注意：绳子l不再牵着第4个node内存单元 </span></span><br><span class="line"></span><br><span class="line">l = <span class="built_in">createNode</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成第7个node内存单元，并用绳子r重新牵着第7个node内存单元，注意：绳子r不再牵着第5个node内存单元 </span></span><br><span class="line"></span><br><span class="line">r = <span class="built_in">createNode</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将根节点变量root的右节点的左节点绳子牵向绳子l所牵的内存单元，即两根绳子都牵着第6个node内存单元 </span></span><br><span class="line"></span><br><span class="line">root-&gt;rchild-&gt;lchild = l;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将根节点变量root的右节点的右节点绳子牵向绳子r所牵的内存单元，即两根绳子都牵着第7个node内存单元 </span></span><br><span class="line"></span><br><span class="line">root-&gt;rchild-&gt;rchild = r;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1316：数的计数（模拟考过）"><a href="#1316：数的计数（模拟考过）" class="headerlink" title="1316：数的计数（模拟考过）"></a>1316：数的计数（模拟考过）</h3><p>此题的关键是通过数组ans节约了时间和空间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//csdn写法</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n)</span> <span class="comment">//统计m所扩展出的数据个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">ans++;      <span class="comment">//每出现一个原数，累加器加 1;</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n / <span class="number">2</span>; i++)  <span class="comment">//左边添加不超过原数一半的自然数，作为新原数,终止条件为i=1</span></span><br><span class="line"><span class="built_in">dfs</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">dfs</span>(n);</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//老师写法</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//此处是防止超时的如果计算过，则直接返回结果 ans[n]，节约了时间和空间</span></span><br><span class="line"><span class="keyword">if</span> (ans[n]) &#123;</span><br><span class="line"><span class="keyword">return</span> ans[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根节点自己是一个数</span></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="comment">//剪枝(超过前一个自然数一半的情况)</span></span><br><span class="line"><span class="keyword">if</span> (i &gt; n / <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//叶子结点</span></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非叶子结点</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> j = <span class="built_in">dfs</span>(i);</span><br><span class="line">cnt += j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用于保存已计算的数的拆分数量，节约了时间和空间</span></span><br><span class="line">ans[n] = cnt;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> cnt = <span class="built_in">dfs</span>(n);</span><br><span class="line">cout &lt;&lt; cnt;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1200：分解因数-模拟考过"><a href="#1200：分解因数-模拟考过" class="headerlink" title="1200：分解因数(模拟考过)"></a>1200：分解因数(模拟考过)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面的写法在模拟给的数据中会出现内存超限</span></span><br><span class="line"><span class="comment">//叶子写在for循环外面</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//叶子结点,分解方式ans+1，直接返回，不再执行</span></span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = s; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="comment">//非叶子结点(通过dfs(n / i, i)进行递归)</span></span><br><span class="line"><span class="keyword">if</span> (n%i==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">dfs</span>(n / i, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//剪枝(n%i!=0的情况)</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="built_in">dfs</span>(m, <span class="number">2</span>);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1204：爬楼梯-考过"><a href="#1204：爬楼梯-考过" class="headerlink" title="1204：爬楼梯(考过)"></a>1204：爬楼梯(考过)</h3><p>想复杂了，这类题还是找规律</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> n)</span>   <span class="comment">//递归算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">f</span>(n - <span class="number">1</span>) + <span class="built_in">f</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">f</span>(n) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1199：全排列-模拟考过"><a href="#1199：全排列-模拟考过" class="headerlink" title="1199：全排列(模拟考过)"></a>1199：全排列(模拟考过)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> b[<span class="number">1001</span>];<span class="comment">//标记 </span></span><br><span class="line"><span class="type">char</span> s[<span class="number">1001</span>], as[<span class="number">1001</span>]; <span class="comment">//s存储原字符串 as存储排序方案 </span></span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!b[s[j]]) &#123;<span class="comment">//判断是否用过 </span></span><br><span class="line">b[s[j]] = <span class="number">1</span>;</span><br><span class="line">as[i] = s[j];</span><br><span class="line"><span class="keyword">if</span> (i == len - <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; as&lt;&lt;endl;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">dfs</span>(i + <span class="number">1</span>);<span class="comment">//否则取下一个长度 </span></span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">//实际上下面的这行代码只有在i == len - 1后才会运行，因为不满足长度时，会一直进行dfs的递归</span></span><br><span class="line">b[s[j]] = <span class="number">0</span>;<span class="comment">//标记取消 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">len = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>);<span class="comment">//从长度0开始搜索 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h2><h3 id="归并排序（递归）"><a href="#归并排序（递归）" class="headerlink" title="归并排序（递归）"></a>归并排序（递归）</h3><p>这个原题目找不到了，看的不是很懂</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> tmp[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> L1, <span class="type">int</span> R1, <span class="type">int</span> L2, <span class="type">int</span> R2)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> i = L1;</span><br><span class="line"><span class="type">int</span> j = L2;</span><br><span class="line"><span class="type">int</span> k = L1;</span><br><span class="line"><span class="keyword">while</span> (i&lt;=R1&amp;&amp;j&lt;=R2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;=a[j])&#123;</span><br><span class="line">tmp[k++] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">tmp[k++] = a[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//男生多</span></span><br><span class="line"><span class="keyword">while</span> (i&lt;=R1)</span><br><span class="line">&#123;</span><br><span class="line">tmp[k++] = a[i++];</span><br><span class="line">&#125;<span class="keyword">while</span> (j &lt;= R2)</span><br><span class="line">&#123;</span><br><span class="line">tmp[k++] = a[i++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = L1; i &lt;= R2; i++) &#123;</span><br><span class="line">a[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergesort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">mergesort</span>(l, m);</span><br><span class="line"><span class="built_in">mergesort</span>(m+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">merge</span>(l, m, m + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;排序前:&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>();</span><br><span class="line"><span class="built_in">mergesort</span>(<span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;排序后:&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求逆序对（模拟考过）-1"><a href="#求逆序对（模拟考过）-1" class="headerlink" title="求逆序对（模拟考过）"></a>求逆序对（模拟考过）</h4><p>不会，直接过</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Max = <span class="number">1e6</span> + <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> a[Max] = &#123;&#125;; <span class="comment">// 存储输入序列的数组</span></span><br><span class="line"><span class="type">int</span> b[Max]; <span class="comment">// 存储归并排序过程中的临时数组</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> num = <span class="number">0</span>; <span class="comment">// 用于存储逆序对的数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序中的归并操作，将两个已排序的数组合并成一个有序的数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> mid, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = l; <span class="comment">// 左半部分数组的下标</span></span><br><span class="line">    <span class="type">int</span> j = mid + <span class="number">1</span>; <span class="comment">// 右半部分数组的下标</span></span><br><span class="line">    <span class="type">int</span> k = l; <span class="comment">// 临时数组的下标</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123; <span class="comment">// 比较左右两部分数组中的元素，合并为一个有序的数组</span></span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; a[j]) &#123; <span class="comment">// 如果左边元素大于右边元素，说明存在逆序对</span></span><br><span class="line">            b[k++] = a[j++]; <span class="comment">// 将右边元素存储在临时数组中</span></span><br><span class="line">            num += mid - i + <span class="number">1</span>; <span class="comment">// 统计逆序对数量，注意这里的统计方式</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// 如果左边元素小于等于右边元素，不需要统计逆序对</span></span><br><span class="line">            b[k++] = a[i++]; <span class="comment">// 将左边元素存储在临时数组中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123; <span class="comment">// 如果左半部分数组有剩余元素，将其存储在临时数组中</span></span><br><span class="line">        b[k++] = a[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) &#123; <span class="comment">// 如果右半部分数组有剩余元素，将其存储在临时数组中</span></span><br><span class="line">        b[k++] = a[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = l; i &lt;= r; i++) &#123; <span class="comment">// 将归并排序过程中得到的有序数组覆盖原始数组</span></span><br><span class="line">        a[i] = b[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序，对序列进行排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> mid;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; r) &#123; <span class="comment">// 递归终止条件，当左右下标相等时表示已经排好序</span></span><br><span class="line">        mid = l + ((r - l) /<span class="number">2</span>); <span class="comment">// 计算中间位置，避免溢出</span></span><br><span class="line">        <span class="built_in">mergeSort</span>(l, mid); <span class="comment">// 对左半部分数组进行归并排序</span></span><br><span class="line">        <span class="built_in">mergeSort</span>(mid + <span class="number">1</span>, r); <span class="comment">// 对右半部分数组进行归并排序</span></span><br><span class="line">        <span class="built_in">merge</span>(l, mid, r); <span class="comment">// 归并操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n; <span class="comment">// 输入序列长度</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">// 输入序列</span></span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mergeSort</span>(<span class="number">0</span>, n - <span class="number">1</span>); <span class="comment">// 对序列进行归并排序</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; num ; <span class="comment">// 输出逆序对数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并查找（就是回溯算法）"><a href="#归并查找（就是回溯算法）" class="headerlink" title="归并查找（就是回溯算法）"></a>归并查找（就是回溯算法）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;dfs(&quot;</span> &lt;&lt; l &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; r &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (l &gt; r) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (a[m] &lt; k) &#123;</span><br><span class="line"><span class="built_in">dfs</span>(m + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[m] &gt; k) &#123;</span><br><span class="line"><span class="built_in">dfs</span>(l, m - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[m] == k) &#123;</span><br><span class="line">cout &lt;&lt; m;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h2><h3 id="1213：八皇后问题"><a href="#1213：八皇后问题" class="headerlink" title="1213：八皇后问题"></a>1213：八皇后问题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面是四皇后</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> hx[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> sx[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> zxx[<span class="number">7</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> fxx[<span class="number">7</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> maze[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No.&quot;</span> &lt;&lt; cnt++ &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">cout &lt;&lt; maze[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;行放置皇后&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!hx[i] &amp;&amp; !sx[j] &amp;&amp; zxx[i + j] &amp;&amp; !fxx[i - j + <span class="number">3</span>]) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; 第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;行，第(&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;列位置&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;)放置皇后&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">maze[i][j] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line"><span class="built_in">print</span>();</span><br><span class="line">maze[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">hx[i] = <span class="number">1</span>;</span><br><span class="line">sx[j] = <span class="number">1</span>;</span><br><span class="line">zxx[i+j] = <span class="number">1</span>;</span><br><span class="line">fxx[i-j+<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">maze[i][j] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(i+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">hx[i] = <span class="number">0</span>;</span><br><span class="line">sx[j] = <span class="number">0</span>;</span><br><span class="line">zxx[i + j] = <span class="number">0</span>;</span><br><span class="line">fxx[i - j + <span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">maze[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; 第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;行，第(&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;列位置&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;)剪枝，不能放置皇后&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;行全部4列位置已经遍历&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1215：迷宫"><a href="#1215：迷宫" class="headerlink" title="1215：迷宫"></a>1215：迷宫</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CSDN:</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m, n1, m1, n2, m2, d = <span class="number">0</span>;<span class="comment">//n行m列 </span></span><br><span class="line"><span class="type">char</span> a[<span class="number">100</span>][<span class="number">100</span>];<span class="comment">//保存二维数组</span></span><br><span class="line"><span class="type">int</span> e[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125; &#125;;<span class="comment">//分别表示上下左右</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x == n2 &amp;&amp; y == m2)</span><br><span class="line">&#123;</span><br><span class="line">d = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)<span class="comment">//循环判断上下左右 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x1 = x + e[i][<span class="number">0</span>];<span class="comment">//计算下一个点的坐标 </span></span><br><span class="line"><span class="type">int</span> y1 = y + e[i][<span class="number">1</span>];<span class="comment">//计算下一个点的坐标 </span></span><br><span class="line"><span class="keyword">if</span> (x1 &gt;= <span class="number">0</span> &amp;&amp; y1 &gt;= <span class="number">0</span> &amp;&amp; x1 &lt; n &amp;&amp; y1 &lt; n &amp;&amp; a[x1][y1] != <span class="string">&#x27;#&#x27;</span>)<span class="comment">//判断边界，判断是否访问过，判断是否可以通过 </span></span><br><span class="line">&#123;</span><br><span class="line">a[x1][y1] = <span class="string">&#x27;#&#x27;</span>;<span class="comment">//走过就标记为不能走 </span></span><br><span class="line"><span class="built_in">fun</span>(x1, y1);<span class="comment">//进入下一个点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; n1 &gt;&gt; m1 &gt;&gt; n2 &gt;&gt; m2;</span><br><span class="line">d = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (a[n1][m1] == <span class="string">&#x27;#&#x27;</span> || a[n2][m2] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fun</span>(n1, m1);</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">1</span>)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//老师的dfs：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> a[<span class="number">101</span>][<span class="number">101</span>];<span class="comment">//保存二维数组</span></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125; &#125;;<span class="comment">//分别表示上下左右</span></span><br><span class="line"><span class="type">bool</span> vis[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x; </span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line">point a1;</span><br><span class="line">point a2;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">in</span><span class="params">(point k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (k.x &lt; n &amp;&amp; k.x &gt;= <span class="number">0</span> &amp;&amp; k.y &lt; n &amp;&amp; k.y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(point k)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)<span class="comment">//循环判断上下左右 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//终止条件，剪枝,防止超时</span></span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">point t;</span><br><span class="line">t.x = k.x + dir[i][<span class="number">0</span>];<span class="comment">//计算下一个点的坐标 </span></span><br><span class="line">t.y = k.y + dir[i][<span class="number">1</span>];<span class="comment">//计算下一个点的坐标 </span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">in</span>(t)&amp;&amp;!vis[t.x][t.y]&amp;&amp;a[t.x][t.y]==<span class="string">&#x27;.&#x27;</span>)&#123;<span class="comment">//判断边界，判断是否访问过，判断是否可以通过 </span></span><br><span class="line">vis[t.x][t.y] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (t.x == a2.x &amp;&amp; t.y == a2.y) &#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">dfs</span>(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t;i++)&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">cin &gt;&gt; a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; a1.x &gt;&gt; a1.y &gt;&gt; a2.x &gt;&gt; a2.y;</span><br><span class="line"></span><br><span class="line">flag=<span class="literal">false</span>;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a[a1.x][a1.y] == <span class="string">&#x27;#&#x27;</span> || a[a2.x][a2.y] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">dfs</span>(a1);</span><br><span class="line"><span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据老师改的bfs：</span></span><br><span class="line"><span class="comment">//bfs:</span></span><br><span class="line"><span class="comment">//1、建立队列queue&lt;point&gt; q;</span></span><br><span class="line"><span class="comment">//2、队尾插入传入元素q.push(k);</span></span><br><span class="line"><span class="comment">//3、队列不为空while (!q.empty())</span></span><br><span class="line"><span class="comment">//4、队首元素传入point k = q.front();</span></span><br><span class="line"><span class="comment">//5、队尾插入新的元素q.push(t);（相当于dfs的dfs（t））</span></span><br><span class="line"><span class="comment">//6、队首元素删除q.pop();（放在while层的下一级与for同级）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> a[<span class="number">101</span>][<span class="number">101</span>];<span class="comment">//保存二维数组</span></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125; &#125;;<span class="comment">//分别表示上下左右</span></span><br><span class="line"><span class="type">bool</span> vis[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line">point a1;</span><br><span class="line">point a2;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">in</span><span class="params">(point k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (k.x &lt; n &amp;&amp; k.x &gt;= <span class="number">0</span> &amp;&amp; k.y &lt; n &amp;&amp; k.y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(point k)</span> </span>&#123;</span><br><span class="line">queue&lt;point&gt;q;</span><br><span class="line">q.<span class="built_in">push</span>(k);</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">point k = q.<span class="built_in">front</span>();</span><br><span class="line"><span class="comment">//循环判断上下左右</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line"><span class="comment">//终止条件，剪枝,防止超时</span></span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">point t;</span><br><span class="line">t.x = k.x + dir[i][<span class="number">0</span>];<span class="comment">//计算下一个点的坐标 </span></span><br><span class="line">t.y = k.y + dir[i][<span class="number">1</span>];<span class="comment">//计算下一个点的坐标 </span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">in</span>(t) &amp;&amp; !vis[t.x][t.y] &amp;&amp; a[t.x][t.y] == <span class="string">&#x27;.&#x27;</span>) &#123;<span class="comment">//判断边界，判断是否访问过，判断是否可以通过 </span></span><br><span class="line">vis[t.x][t.y] = <span class="literal">true</span>;</span><br><span class="line">q.<span class="built_in">push</span>(t);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (t.x == a2.x &amp;&amp; t.y == a2.y) &#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; t; i++) &#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">cin &gt;&gt; a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; a1.x &gt;&gt; a1.y &gt;&gt; a2.x &gt;&gt; a2.y;</span><br><span class="line"></span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a[a1.x][a1.y] == <span class="string">&#x27;#&#x27;</span> || a[a2.x][a2.y] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">bfs</span>(a1);</span><br><span class="line"><span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1216：红与黑"><a href="#1216：红与黑" class="headerlink" title="1216：红与黑"></a><strong>1216：红与黑</strong></h3><p>下面有深搜法和广搜法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自己写的dfs：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a[<span class="number">21</span>][<span class="number">21</span>];<span class="comment">//保存二维数组</span></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125; &#125;;<span class="comment">//分别表示上下左右</span></span><br><span class="line"><span class="type">bool</span> vis[<span class="number">21</span>][<span class="number">21</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="type">int</span> x; </span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">point a1;</span><br><span class="line">point a2;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否在棋盘的界内</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">in</span><span class="params">(point k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (k.x &lt; y &amp;&amp; k.x &gt;= <span class="number">0</span> &amp;&amp; k.y &lt; x &amp;&amp; k.y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(point k)</span></span>&#123;</span><br><span class="line"><span class="comment">//循环判断上下左右 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">point t;</span><br><span class="line">t.x = k.x + dir[i][<span class="number">0</span>];<span class="comment">//计算下一个点的x坐标 </span></span><br><span class="line">t.y = k.y + dir[i][<span class="number">1</span>];<span class="comment">//计算下一个点的y坐标 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断边界，判断是否访问过，判断是否可以通过 </span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">in</span>(t)&amp;&amp;!vis[t.x][t.y]&amp;&amp;a[t.x][t.y]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line"><span class="comment">//走过的就不能再走一遍了，所以数组标记true</span></span><br><span class="line">vis[t.x][t.y] = <span class="literal">true</span>;</span><br><span class="line">num++;</span><br><span class="line"><span class="built_in">dfs</span>(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外层的while循环是因为可能存在多组数据，需要持续输出</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cin &gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="comment">//当在一行中读入的是两个零时，表示输入结束，这里的return 0来跳出while循环</span></span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//循环输入棋盘的具体情况，这里注意i&lt;y而不是i&lt;x，原因是i指代的应该是列数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; y; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; x; j++) &#123;</span><br><span class="line">cin &gt;&gt; a[i][j];</span><br><span class="line"><span class="comment">//遇到&#x27;@&#x27;，记录出现的位置，进行深度搜索</span></span><br><span class="line"><span class="keyword">if</span> (a[i][j] == <span class="string">&#x27;@&#x27;</span>) &#123;</span><br><span class="line">a1.x = i;</span><br><span class="line">a1.y = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意重置vis语句的位置，因为后续还可能有新一组的输入</span></span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="comment">//这里是因为题目中要求：记数时包括初始位置的瓷砖</span></span><br><span class="line">num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(a1);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; num&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自己改的bfs：</span></span><br><span class="line"><span class="comment">//bfs:</span></span><br><span class="line"><span class="comment">//1、建立队列queue&lt;point&gt; q;</span></span><br><span class="line"><span class="comment">//2、队尾插入传入元素q.push(k);</span></span><br><span class="line"><span class="comment">//3、队列不为空while (!q.empty())</span></span><br><span class="line"><span class="comment">//4、队首元素传入point k = q.front();</span></span><br><span class="line"><span class="comment">//5、队尾插入新的元素q.push(t);（相当于dfs的dfs（t））</span></span><br><span class="line"><span class="comment">//6、队首元素删除q.pop();（放在while层的下一级与for同级）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a[<span class="number">21</span>][<span class="number">21</span>];<span class="comment">//保存二维数组</span></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125; &#125;;<span class="comment">//分别表示上下左右</span></span><br><span class="line"><span class="type">bool</span> vis[<span class="number">21</span>][<span class="number">21</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span> &#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">point a1;</span><br><span class="line">point a2;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否在棋盘的界内</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">in</span><span class="params">(point k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (k.x &lt; y &amp;&amp; k.x &gt;= <span class="number">0</span> &amp;&amp; k.y &lt; x &amp;&amp; k.y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(point k)</span> </span>&#123;</span><br><span class="line">queue&lt;point&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(k);</span><br><span class="line"><span class="comment">//循环判断上下左右 </span></span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">point k = q.<span class="built_in">front</span>();</span><br><span class="line">point t;</span><br><span class="line">t.x = k.x + dir[i][<span class="number">0</span>];<span class="comment">//计算下一个点的x坐标 </span></span><br><span class="line">t.y = k.y + dir[i][<span class="number">1</span>];<span class="comment">//计算下一个点的y坐标 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断边界，判断是否访问过，判断是否可以通过 </span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">in</span>(t) &amp;&amp; !vis[t.x][t.y] &amp;&amp; a[t.x][t.y] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">//走过的就不能再走一遍了，所以数组标记true</span></span><br><span class="line">vis[t.x][t.y] = <span class="literal">true</span>;</span><br><span class="line">num++;</span><br><span class="line">q.<span class="built_in">push</span>(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外层的while循环是因为可能存在多组数据，需要持续输出</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="comment">//当在一行中读入的是两个零时，表示输入结束，这里的return 0来跳出while循环</span></span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//循环输入棋盘的具体情况，这里注意i&lt;y而不是i&lt;x，原因是i指代的应该是列数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; y; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; x; j++) &#123;</span><br><span class="line">cin &gt;&gt; a[i][j];</span><br><span class="line"><span class="comment">//遇到&#x27;@&#x27;，记录出现的位置，进行广度搜索</span></span><br><span class="line"><span class="keyword">if</span> (a[i][j] == <span class="string">&#x27;@&#x27;</span>) &#123;</span><br><span class="line">a1.x = i;</span><br><span class="line">a1.y = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意重置vis语句的位置，因为后续还可能有新一组的输入</span></span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="comment">//这里是因为题目中要求：记数时包括初始位置的瓷砖</span></span><br><span class="line">num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bfs</span>(a1);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1219：马走日（考过）"><a href="#1219：马走日（考过）" class="headerlink" title="1219：马走日（考过）"></a>1219：马走日（考过）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dir[<span class="number">8</span>][<span class="number">2</span>]=&#123; &#123;<span class="number">2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">-2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-2</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-2</span>&#125;,&#123;<span class="number">1</span>,<span class="number">-2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">-1</span>&#125; &#125;;</span><br><span class="line"><span class="type">int</span> n, m,sum=<span class="number">0</span>,visit[<span class="number">11</span>][<span class="number">11</span>],flag,step=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">horse</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x; </span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">in</span><span class="params">(horse h3)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (h3.x &gt;= <span class="number">0</span> &amp;&amp; h3.x &lt; n &amp;&amp; h3.y &gt;= <span class="number">0</span> &amp;&amp; h3.y &lt; m) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(horse h2,<span class="type">int</span> step)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (step==n*m) &#123;</span><br><span class="line">        sum++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        horse t;</span><br><span class="line">        t.x = h2.x + dir[i][<span class="number">0</span>];</span><br><span class="line">        t.y = h2.y + dir[i][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">in</span>(t)&amp;&amp;visit[t.x][t.y]==<span class="number">0</span>) &#123;</span><br><span class="line">            visit[t.x][t.y] = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(t,step+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//这里的visit[t.x][t.y] = 0;很关键，不然整个棋盘只能走一次,这点与1216:红与黑不同,红与黑是给定了起点和终点，只需要走一次</span></span><br><span class="line">            visit[t.x][t.y] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    horse h1;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> s = <span class="number">0</span>; s &lt; T; s++) &#123;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(visit, <span class="number">0</span>, <span class="built_in">sizeof</span>(visit));</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m &gt;&gt; h1.x &gt;&gt; h1.y;</span><br><span class="line"></span><br><span class="line">        visit[h1.x][h1.y] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(h1,<span class="number">1</span>);</span><br><span class="line">        cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1217：棋盘问题（模拟考过）"><a href="#1217：棋盘问题（模拟考过）" class="headerlink" title="1217：棋盘问题（模拟考过）"></a>1217：棋盘问题（模拟考过）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关键在于结束条件的构建，以及循环初值的设立</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line"><span class="type">int</span> n, k,sum=<span class="number">0</span>,vis[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (y==k) &#123;</span><br><span class="line">        sum++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i][j] == <span class="string">&#x27;#&#x27;</span> &amp;&amp; vis[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                vis[j] = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(i + <span class="number">1</span>, y + <span class="number">1</span>);</span><br><span class="line">                vis[j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n &gt;&gt; k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">-1</span> &amp;&amp; k == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    cin &gt;&gt; a[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            cout &lt;&lt; sum &lt;&lt; endl;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="1267：【例9-11】01背包问题"><a href="#1267：【例9-11】01背包问题" class="headerlink" title="1267：【例9.11】01背包问题"></a>1267：【例9.11】01背包问题</h3><p>记住下面的图，物品为i行，重量为j列</p><p>关键步：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; ++j)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span> (j &gt;= w[i])</span><br><span class="line">              <span class="comment">//当前物品能够装进背包的情况下，还需要比较装上该物品后，和上一次i-1行对应的最优解的价值大小，如果更大，则更新新的更大的价值，反之维持上一步的最优解</span></span><br><span class="line">               dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - w[i]] + c[i]);</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">               <span class="comment">//当前物品不能够装进背包的情况下，维持上一步的最优解</span></span><br><span class="line">               dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//未优化版本：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;----</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 35</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 250</span></span><br><span class="line"><span class="type">int</span> dp[N][M], w[N], c[N];<span class="comment">//dp[i][j]:在前i个物品中选择物品放入大小为j的背包能获得的最大价值 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        cin &gt;&gt; w[i] &gt;&gt; c[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= w[i])</span><br><span class="line">                <span class="comment">//当前物品能够装进背包的情况下，还需要比较装上该物品后，和上一次i-1行对应的最优解的价值大小，如果更大，则更新新的更大的价值，反之维持上一步的最优解</span></span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - w[i]] + c[i]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">//当前物品不能够装进背包的情况下，维持上一步的最优解</span></span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//最后答案就在所有循环结束后的最后一个数组里</span></span><br><span class="line">    cout &lt;&lt; dp[n][m];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(58).png" alt="屏幕截图(58)"></p><h3 id="最长连续字段和"><a href="#最长连续字段和" class="headerlink" title="最长连续字段和"></a>最长连续字段和</h3><p>关键步：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> maxsum = <span class="number">-1000</span>;</span><br><span class="line">dp[<span class="number">0</span>] = w[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="comment">//如果上一个dp是正数，就直接加上当前的w，不管w是不是负数</span></span><br><span class="line"><span class="keyword">if</span> (dp[i - <span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">dp[i] = dp[i - <span class="number">1</span>] + w[i];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//如果上一个dp是负数，就直接抛弃上一个dp，从这个dp开始重新计算</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dp[i] = w[i];</span><br><span class="line">&#125;</span><br><span class="line">maxsum = <span class="built_in">max</span>(maxsum, dp[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dp[<span class="number">101</span>],w[<span class="number">101</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> maxsum = <span class="number">-1000</span>;</span><br><span class="line">dp[<span class="number">0</span>] = w[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="comment">//如果上一个dp是正数，就直接加上当前的w，不管w是不是负数</span></span><br><span class="line"><span class="keyword">if</span> (dp[i - <span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">dp[i] = dp[i - <span class="number">1</span>] + w[i];</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//如果上一个dp是负数，就直接抛弃上一个dp，从这个dp开始重新计算</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dp[i] = w[i];</span><br><span class="line">&#125;</span><br><span class="line">maxsum = <span class="built_in">max</span>(maxsum, dp[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> maxsum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt;  n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; w[i];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="type">int</span> sumup=<span class="built_in">sum</span>();</span><br><span class="line">cout &lt;&lt; sumup;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长上升子序列-模拟考过"><a href="#最长上升子序列-模拟考过" class="headerlink" title="最长上升子序列(模拟考过)"></a>最长上升子序列(模拟考过)</h3><p>关键步：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意下面j终点是i</span></span><br><span class="line"><span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//枚举子序列的终点</span></span><br><span class="line">&#123;</span><br><span class="line">    dp[i] = <span class="number">1</span>;<span class="comment">// 初始化为1，长度最短为自身9</span></span><br><span class="line">    <span class="comment">//注意下面j终点是i</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++)<span class="comment">//从头向终点检查每一个元素</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; a[j])</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>);  <span class="comment">// 状态转移方程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="built_in">max</span>(ans, dp[i]);  <span class="comment">// 比较每一个dp[i],最大值为答案</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">10001</span>], dp[<span class="number">10001</span>];</span><br><span class="line"><span class="comment">// a数组为数据，dp[i]表示以a[i]结尾的最长递增子序列长度</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LIS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//枚举子序列的终点</span></span><br><span class="line">    &#123;</span><br><span class="line">        dp[i] = <span class="number">1</span>;<span class="comment">// 初始化为1，长度最短为自身9</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++)<span class="comment">//从头向终点检查每一个元素</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[j])</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>);  <span class="comment">// 状态转移方程</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, dp[i]);  <span class="comment">// 比较每一个dp[i],最大值为答案</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">         cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">LIS</span>();</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(64).png" alt="屏幕截图(64)"></p><h3 id="最长公共子串"><a href="#最长公共子串" class="headerlink" title="最长公共子串"></a>最长公共子串</h3><p>关键步：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= lena; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= lenb; j++)&#123;</span><br><span class="line">        <span class="comment">//如果相等，则将表格斜上角的数据dp[i - 1][j - 1]+1</span></span><br><span class="line">        <span class="keyword">if</span> (a[i - <span class="number">1</span>] == b[j - <span class="number">1</span>]) &#123;</span><br><span class="line">            dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果不相等，则选择表格左边dp[i][j - 1]和上边dp[i - 1][j]最大的dp数据放入dp[i][j]</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a[<span class="number">201</span>], b[<span class="number">201</span>];</span><br><span class="line"><span class="type">int</span> dp[<span class="number">201</span>][<span class="number">201</span>], lena, lenb,i,j;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lcs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= lena; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= lenb; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果相等，则将表格斜上角的数据dp[i - 1][j - 1]+1</span></span><br><span class="line">            <span class="keyword">if</span> (a[i - <span class="number">1</span>] == b[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果不相等，则选择表格左边dp[i][j - 1]和上边dp[i - 1][j]最大的dp数据放入dp[i][j]</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; a)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; b;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">        lena = <span class="built_in">strlen</span>(a);</span><br><span class="line">        lenb = <span class="built_in">strlen</span>(b);</span><br><span class="line">        <span class="built_in">lcs</span>();</span><br><span class="line">        cout &lt;&lt; dp[lena][lenb] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1296：开餐馆"><a href="#1296：开餐馆" class="headerlink" title="1296：开餐馆"></a>1296：开餐馆</h3><p>关键步</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">cin &gt;&gt; w[i];   <span class="comment">// n 个地点位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; c[i]; <span class="comment">// n个地点的餐馆利润</span></span><br><span class="line">dp[i] = c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// j为逆序，防止部分数据被冲掉（不清楚原因）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (w[i] - w[j] &gt; k)</span><br><span class="line">&#123;  <span class="comment">// 餐馆之间的距离必须大于k</span></span><br><span class="line">dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + c[i]); <span class="comment">// dp[i]表示前i个地点开餐馆的最大利润</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里的排序是为了找到利益的最大值</span></span><br><span class="line"><span class="comment">// 也可以使用for循环加max函数来求最大值</span></span><br><span class="line"><span class="built_in">sort</span>(dp + <span class="number">1</span>, dp + n + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> w[<span class="number">1001</span>], c[<span class="number">1001</span>], dp[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin &gt;&gt; t;<span class="comment">//测试数据组数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> s=<span class="number">1</span>;s&lt;=t;s++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k; <span class="comment">//输入总数n和距离限制K</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">cin &gt;&gt; w[i];   <span class="comment">// n 个地点位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">cin &gt;&gt; c[i];<span class="comment">// n个地点的餐馆利润</span></span><br><span class="line">dp[i] = c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="comment">//j为逆序，防止部分数据被冲掉（不清楚原因）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (w[i] - w[j] &gt; k) &#123;<span class="comment">//餐馆之间的距离必须大于k</span></span><br><span class="line">dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + c[i]);<span class="comment">//dp[i]表示前i个地点开餐馆的最大利润</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//这里的排序是为了找到利益的最大值</span></span><br><span class="line">        <span class="comment">//也可以使用for循环加max函数来求最大值</span></span><br><span class="line"><span class="built_in">sort</span>(dp + <span class="number">1</span>, dp + n + <span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; dp[n] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1293：买书"><a href="#1293：买书" class="headerlink" title="1293：买书"></a>1293：买书</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此方法省略步骤较多</span></span><br><span class="line"><span class="comment">//还没认真看</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span>  dp[<span class="number">1001</span>], c[<span class="number">5</span>] = &#123; <span class="number">0</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">100</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//初始条件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = c[i]; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (dp[j-c[i]]) &#123;</span><br><span class="line">dp[j] = dp[j] + dp[j - c[i]];  <span class="comment">//状态转移方程</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">cout &lt;&lt; dp[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1259：【例9-3】求最长不下降序列（模拟考过"><a href="#1259：【例9-3】求最长不下降序列（模拟考过" class="headerlink" title="1259：【例9.3】求最长不下降序列（模拟考过)"></a>1259：【例9.3】求最长不下降序列（模拟考过)</h3><p>这个比较有意思的是最长不下降序列的输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (dp[i] == ans)</span><br><span class="line">&#123;</span><br><span class="line">b[cnt] = a[i];</span><br><span class="line">cnt++;</span><br><span class="line">ans--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = cnt - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; b[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,ans=<span class="number">1</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">201</span>],dp[<span class="number">201</span>],b[<span class="number">201</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt;= a[j]) &#123;</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;max=&quot;</span>&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] == ans) &#123;</span><br><span class="line">            b[cnt] = a[i];</span><br><span class="line">            cnt++;</span><br><span class="line">            ans--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = cnt - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; b[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1284：摘花生"><a href="#1284：摘花生" class="headerlink" title="1284：摘花生"></a>1284：摘花生</h3><p>关键在于这个dp的改变,从上一步推演而来，就是左边和上面</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j] ,dp[i][j<span class="number">-1</span>])+M[i][j];</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> T,R,C,M[<span class="number">101</span>][<span class="number">101</span>],dp[<span class="number">101</span>][<span class="number">101</span>], res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> s = <span class="number">0</span>; s &lt; T; s++) &#123;</span><br><span class="line">        cin &gt;&gt; R &gt;&gt; C;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;=R; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= C; j++) &#123;</span><br><span class="line">                cin &gt;&gt; M[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= R; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= C; j++) &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j] ,dp[i][j<span class="number">-1</span>])+M[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; dp[R][C] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1258：【例9-2】数字金字塔"><a href="#1258：【例9-2】数字金字塔" class="headerlink" title="1258：【例9.2】数字金字塔"></a>1258：【例9.2】数字金字塔</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此做法为自上而下</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="type">int</span> dp[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//输入数塔</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++)&#123;</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">1</span>][<span class="number">1</span>] = a[<span class="number">1</span>][<span class="number">1</span>];<span class="comment">//粘贴过来</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) + a[i][j];</span><br><span class="line"><span class="comment">//cout &lt;&lt; dp[i][j]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">//状态转移方程：比较这一层dp的正上方与最上方右边一个哪个大</span></span><br><span class="line"><span class="comment">//大的与正下方a相加，作为dp正下方的值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> maxv = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">maxv = <span class="built_in">max</span>(maxv, dp[n][i]);<span class="comment">//比较最后一行结果值</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; maxv;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java爬虫</title>
      <link href="/posts/ade80941.html"/>
      <url>/posts/ade80941.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java爬虫"><a href="#Java爬虫" class="headerlink" title="Java爬虫"></a>Java爬虫</h1><h2 id="实现目标："><a href="#实现目标：" class="headerlink" title="实现目标："></a>实现目标：</h2><p>1、要求爬到该站点的所有小说，（且具有定时去查看小说更新的功能）<br>2、爬到的内容要求包含简介、作者名称、封面图片、小说名称、具体小说章节、最新更新章节、完结状态<br>3、上述要求内容还必须存到数据库中<br>4、小说内容应该以怎么样的形式存到数据库中</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>1、框架：seimicrawler、jsoup、WebMagic（决定采用jsoup）</p><p>2、采用selenium这类谷歌测试工具来爬取动态加载的网页</p><h2 id="python思路"><a href="#python思路" class="headerlink" title="python思路"></a>python思路</h2><p>先摆上python的<strong>静态</strong>爬虫提供相似思路(使用Xpath的方法找到标签)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;https://www.zwwx.com/book/67/67510/&#x27;</span></span><br><span class="line"><span class="comment"># header</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/&#x27;</span></span><br><span class="line">                         <span class="string">&#x27;537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/&#x27;</span></span><br><span class="line">                         <span class="string">&#x27;537.36 Edg/103.0.1264.49&#x27;</span>&#125;    <span class="comment"># 伪装headers</span></span><br><span class="line">response = requests.get(url=url, headers=headers)</span><br><span class="line">response.encoding = response.apparent_encoding  <span class="comment"># 转中文码(自动分析解码)</span></span><br><span class="line"><span class="comment"># re的正则表达式的方法</span></span><br><span class="line"><span class="comment"># print(response.text)</span></span><br><span class="line">href = re.findall(<span class="string">&#x27;&lt;dd&gt;&lt;a href=&quot;(.*?)&quot;&gt;.*?&lt;/a&gt;&lt;/dd&gt;&#x27;</span>, response.text)    <span class="comment"># 需要的用（.*?）代替，不需要的用.*?代替</span></span><br><span class="line">name = re.findall(<span class="string">&#x27;&lt;dt&gt;(.*?)&lt;/dt&gt;&#x27;</span>, response.text)[<span class="number">0</span>]   <span class="comment"># 同上,而[i] i代表第几个数据，从第0个开始</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> href:</span><br><span class="line">    index_url = <span class="string">&#x27;https://www.zwwx.com&#x27;</span> + index  <span class="comment"># 循环有点意思，实际上变量index就是href中的每一个链接</span></span><br><span class="line">    res = requests.get(url=index_url, headers=headers)</span><br><span class="line">    res.encoding = res.apparent_encoding</span><br><span class="line">    <span class="comment"># 有标签时用css和xpath(无法直接提取字符串数据，需要加.text),无标签用re正则(无需加.text)</span></span><br><span class="line">    selector = parsel.Selector(res.text)</span><br><span class="line">    title = selector.css(<span class="string">&#x27;.bookname &gt; h1::text&#x27;</span>).get()</span><br><span class="line">    <span class="comment"># 复杂版：#wrapper &gt; div.content_read &gt; div &gt; div.bookname &gt; h1::text</span></span><br><span class="line">    <span class="comment"># h1::text是提取标签内的文本,.get获取内容</span></span><br><span class="line">    content_list = selector.css(<span class="string">&#x27;#content::text&#x27;</span>).getall()</span><br><span class="line">    content = <span class="string">&#x27;\n&#x27;</span>.join(content_list)     <span class="comment"># 列表转为字符串</span></span><br><span class="line">    <span class="comment"># .get()是取一个 .getall()是提取全部！！！！！！！！！！提取出来是列表，而非字符串</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;novel\\<span class="subst">&#123;name&#125;</span>.txt&#x27;</span>, mode=<span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:  <span class="comment"># as f是将这个文件命名为f</span></span><br><span class="line">        <span class="comment"># 配置文件 文件路径 名字 保存方式（mode w写入数据(会覆盖) a追加保存 ） 编码格式</span></span><br><span class="line">        <span class="comment"># open()需要末尾加上f.close,而with open()则会自动关闭不需要加f.close</span></span><br><span class="line">        f.write(title)  <span class="comment"># 写入f文件中</span></span><br><span class="line">        f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.write(content)</span><br><span class="line">        f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;正在保存：&#x27;</span>, title)   <span class="comment"># 直接文字需双引号，变量不用，用 , 连接</span></span><br></pre></td></tr></table></figure><p><strong>动态</strong>爬虫</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">opt = Options()</span><br><span class="line">opt.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">opt.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">driver = Chrome(options=opt)</span><br><span class="line">url = <span class="string">&#x27;https://www.maofly.com/manga/6996/451102.html&#x27;</span></span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3</span>)  <span class="comment"># 这是为了让网页能够完全加载出来</span></span><br><span class="line"></span><br><span class="line">driver.get(url=url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10000</span>):</span><br><span class="line">    result = es.alert_is_present()(driver)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result:</span><br><span class="line">        <span class="built_in">print</span>(result.text)</span><br><span class="line">        result.accept()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;没有警告窗&#x27;</span>)</span><br><span class="line">        res = driver.page_source</span><br><span class="line">        selector = parsel.Selector(res)</span><br><span class="line">        <span class="comment"># //*[@id=&quot;all&quot;]/div/div[2]/div[1]/img</span></span><br><span class="line">        img_url = selector.xpath(<span class="string">&#x27;//*[@id=&quot;all&quot;]/div/div[2]/div[1]/img/@src&#x27;</span>).get()</span><br><span class="line">        pic_title = selector.xpath(<span class="string">&#x27;/html/body/div/h2/text()&#x27;</span>).get()</span><br><span class="line">        pic_name = selector.xpath(<span class="string">&#x27;/html/body/div/h1/a/text()&#x27;</span>).get()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;img\\&#x27;</span> + pic_name):  <span class="comment"># 如果该路径下没有这个文件夹，那就创建这个文件夹</span></span><br><span class="line">            os.mkdir(<span class="string">&#x27;img\\&#x27;</span> + pic_name)</span><br><span class="line">        img = requests.get(url=img_url).content</span><br><span class="line">        name = pic_title, i     <span class="comment"># 不能用pic_title + i</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;正在保存:&#x27;</span>, name, img_url)  <span class="comment"># 直接文字需双引号，变量不用，用 , 连接</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;img\\<span class="subst">&#123;pic_name&#125;</span>\\<span class="subst">&#123;name&#125;</span>.jpg&#x27;</span>, mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:  <span class="comment"># as f是将这个文件命名为f,变量需要加进&#123; &#125;\\内，定值直接输入\\</span></span><br><span class="line">            <span class="comment"># 配置文件 文件路径 名字 保存方式（mode w写入数据(会覆盖) a追加保存 ） 编码格式</span></span><br><span class="line">            <span class="comment"># open()需要末尾加上f.close,而with open()则会自动关闭不需要加f.close</span></span><br><span class="line">            f.write(img)  <span class="comment"># 写入f文件中</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;保存完成:&#x27;</span>, name)  <span class="comment"># 直接文字需双引号，变量不用，用 , 连接</span></span><br><span class="line"></span><br><span class="line">        button = driver.find_element(By.XPATH, <span class="string">&#x27;/html/body/div/div[2]/nav/div/a[4]&#x27;</span>)</span><br><span class="line">        button.click()</span><br></pre></td></tr></table></figure><p>在爬取数据方面我觉得在看完狂神的视频后问题不大，最大的问题是数据库写入的实现，以及不定期爬取更新资源的实现（可以等网站测试做完再说）</p><h2 id="Jsoup"><a href="#Jsoup" class="headerlink" title="Jsoup"></a>Jsoup</h2><h3 id="爬取小说地址具体代码"><a href="#爬取小说地址具体代码" class="headerlink" title="爬取小说地址具体代码"></a>爬取小说地址具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getBookUrl1</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ArrayList&lt;String&gt; bookUrlList1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//count用于计数完成了多少BookUrl的获取</span></span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//一共有5页</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=max;i++)&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlEver</span> <span class="operator">=</span> <span class="string">&quot;https://www.9biqu.com/class/1/&quot;</span>+i+<span class="string">&quot;.html&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(urlEver)</span><br><span class="line">                    .userAgent(ua)</span><br><span class="line">                    .proxy(currentProxy)</span><br><span class="line">                    .timeout(<span class="number">1000000000</span>)</span><br><span class="line">                    .get();</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            <span class="type">Elements</span> <span class="variable">NameUrlList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#newscontent &gt; div.update-list &gt; div &gt; div &gt; ul&gt;li&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Element el : NameUrlList)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">BookUrlPart</span> <span class="operator">=</span> el.select(<span class="string">&quot;span.s2 &gt; a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">BookUrl</span> <span class="operator">=</span><span class="string">&quot;https://www.9biqu.com&quot;</span>+ BookUrlPart;</span><br><span class="line">                bookUrlList1.add(BookUrl);</span><br><span class="line">                count++;</span><br><span class="line">                System.out.println(<span class="string">&quot;玄幻小说地址采集完成&quot;</span>+count+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            i--;</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说地址时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;玄幻小说已经全部采集完成&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bookUrlList1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="爬取小说信息具体代码"><a href="#爬取小说信息具体代码" class="headerlink" title="爬取小说信息具体代码"></a>爬取小说信息具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;BookInfo&gt; <span class="title function_">listBookDetails</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    BUrl1 = getBookUrl1();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt; BUrl1.size();i++)&#123;</span><br><span class="line">        String urlEverBook=BUrl1.get(i);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            count++;</span><br><span class="line">            <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(urlEverBook)</span><br><span class="line">                    .userAgent(ua)</span><br><span class="line">                    <span class="comment">// 将代理服务器对象传递给Jsoup</span></span><br><span class="line">                    .proxy(currentProxy)</span><br><span class="line">                    .timeout(<span class="number">1000000000</span>)</span><br><span class="line">                    .get();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">bookName</span> <span class="operator">=</span> document.select(<span class="string">&quot;#info &gt; h1&quot;</span>).text();</span><br><span class="line">            <span class="type">String</span> <span class="variable">authorName</span> <span class="operator">=</span> document.select(<span class="string">&quot;#info &gt; p:nth-child(2) &gt; a&quot;</span>).text();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">picUrl</span> <span class="operator">=</span> <span class="string">&quot;https://www.9biqu.com&quot;</span> + document.select(<span class="string">&quot;#fmimg &gt; img&quot;</span>).attr(<span class="string">&quot;src&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">lastChapterName</span> <span class="operator">=</span> document.select(<span class="string">&quot;#info &gt; p:nth-child(5) &gt; a&quot;</span>).text();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(authorName.equals(<span class="string">&quot;小说免费阅读&quot;</span>))&#123;</span><br><span class="line">                authorName=<span class="string">&quot;Tec&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">bookIntro</span> <span class="operator">=</span> document.select(<span class="string">&quot;#intro&quot;</span>).text();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本书名:&quot;</span>+bookName);</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本作者名:&quot;</span>+authorName);</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本介绍:&quot;</span>+bookIntro);</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本图片链接:&quot;</span>+picUrl);</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本最新章名:&quot;</span>+lastChapterName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            QueryWrapper&lt;BookInfo&gt;BookInfoNameQueryWrapper =<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">            BookInfoNameQueryWrapper.eq(<span class="string">&quot;book_name&quot;</span>, bookName);</span><br><span class="line">            <span class="type">BookInfo</span> <span class="variable">bookInfo</span> <span class="operator">=</span> bookInfoMapper.selectOne(BookInfoNameQueryWrapper);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(bookInfo==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">BookInfo</span> <span class="variable">bookInfo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookInfo</span>();</span><br><span class="line">                bookInfo1.setWorkDirection(<span class="number">0</span>);</span><br><span class="line">                bookInfo1.setCategoryId(<span class="number">1L</span>);</span><br><span class="line">                bookInfo1.setCategoryName(<span class="string">&quot;玄幻奇幻&quot;</span>);</span><br><span class="line">                bookInfo1.setPicUrl(picUrl);</span><br><span class="line">                bookInfo1.setBookName(bookName);</span><br><span class="line">                bookInfo1.setAuthorId(<span class="number">0L</span>);</span><br><span class="line">                bookInfo1.setAuthorName(authorName);</span><br><span class="line">                bookInfo1.setBookDesc(bookIntro);</span><br><span class="line">                bookInfo1.setScore(<span class="number">6</span>);</span><br><span class="line">                bookInfo1.setBookStatus(<span class="number">0</span>);</span><br><span class="line">                bookInfo1.setVisitCount(<span class="number">100L</span>);</span><br><span class="line">                <span class="comment">//bookInfo1.setWordCount();</span></span><br><span class="line">                bookInfo1.setCommentCount(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">//bookInfo1.setLastChapterId();</span></span><br><span class="line">                bookInfo1.setLastChapterName(lastChapterName);</span><br><span class="line">                bookInfo1.setLastChapterUpdateTime(LocalDateTime.now());</span><br><span class="line">                bookInfo1.setCreateTime(LocalDateTime.now());</span><br><span class="line">                bookInfo1.setUpdateTime(LocalDateTime.now());</span><br><span class="line">                bookInfo1.setIsVip(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                bookInfoMapper.insert(bookInfo1);</span><br><span class="line">                System.out.println(<span class="string">&quot;数据表bookInfo数据存入成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;在数据表bookInfo中书名为&quot;</span>+bookName+<span class="string">&quot;的小说在数据库中已经存在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说信息时，IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说信息时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="爬取小说章节内容具体代码"><a href="#爬取小说章节内容具体代码" class="headerlink" title="爬取小说章节内容具体代码"></a>爬取小说章节内容具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getBookContent</span><span class="params">(String BookContentUrl)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">bookContent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (bookContent == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(BookContentUrl)</span><br><span class="line">                    .userAgent(ua)</span><br><span class="line">                    .proxy(currentProxy)</span><br><span class="line">                    .timeout(<span class="number">1000000000</span>)</span><br><span class="line">                    .get();</span><br><span class="line">            Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">            <span class="type">Elements</span> <span class="variable">bookContentList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#content &gt; *:not(p:first-child)&quot;</span>);</span><br><span class="line"></span><br><span class="line">            bookContent = bookContentList.toString();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (SocketException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bookContent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**统记中文字数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countChineseCharacters</span><span class="params">(String bookContent)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (bookContent == <span class="literal">null</span> || bookContent.trim().isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    String[] words = bookContent.trim().split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : word.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isChineseCharacter(c)) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**判断是否是中文</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isChineseCharacter</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">    Character.<span class="type">UnicodeScript</span> <span class="variable">script</span> <span class="operator">=</span> Character.UnicodeScript.of(c);</span><br><span class="line">    <span class="keyword">return</span> script == Character.UnicodeScript.HAN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="爬取小说章节具体代码"><a href="#爬取小说章节具体代码" class="headerlink" title="爬取小说章节具体代码"></a>爬取小说章节具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;BookInfo&gt; <span class="title function_">listBookContent</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">countChapter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    BUrl1 = getBookUrl1();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt; BUrl1.size();i++)&#123;</span><br><span class="line">        String urlEverBook=BUrl1.get(i);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(urlEverBook)</span><br><span class="line">                    .userAgent(ua)</span><br><span class="line">                    <span class="comment">// 将代理服务器对象传递给Jsoup</span></span><br><span class="line">                    .proxy(currentProxy)</span><br><span class="line">                    .timeout(<span class="number">1000000000</span>)</span><br><span class="line">                    .get();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">bookName</span> <span class="operator">=</span> document.select(<span class="string">&quot;#info &gt; h1&quot;</span>).text();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//以下代码是取得每本书的每个章节名以及链接还有章节内容</span></span><br><span class="line">            String bookChapterName;</span><br><span class="line">            String bookChapterUrlPart;</span><br><span class="line">            String bookChapterUrl;</span><br><span class="line"></span><br><span class="line">            String bookContent;</span><br><span class="line"></span><br><span class="line">            Long bookId= <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">Elements</span> <span class="variable">bookChapter</span> <span class="operator">=</span> document.select(<span class="string">&quot;#list &gt; dl &gt; dd:gt(13)&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span>(Element el:bookChapter)&#123;</span><br><span class="line">                countChapter++;</span><br><span class="line">                bookChapterName = el.select(<span class="string">&quot;a&quot;</span>).text();</span><br><span class="line">                bookChapterUrlPart = el.select(<span class="string">&quot;a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">                bookChapterUrl = <span class="string">&quot;https://www.9biqu.com&quot;</span>+ bookChapterUrlPart;</span><br><span class="line">                bookContent = getBookContent(bookChapterUrl);</span><br><span class="line">                <span class="type">int</span> <span class="variable">chineseCharCount</span> <span class="operator">=</span> countChineseCharacters(bookContent);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本的第&quot;</span>+countChapter+<span class="string">&quot;章名&quot;</span>+bookChapterName);</span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本的第&quot;</span>+countChapter+<span class="string">&quot;章链接:&quot;</span>+bookChapterUrl);</span><br><span class="line">                <span class="comment">//System.out.println(&quot;第&quot;+count+&quot;本的第&quot;+countChapter+&quot;章内容:&quot;+bookContent);</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//查找是否有该小说的存在</span></span><br><span class="line">                QueryWrapper&lt;BookInfo&gt;BookInfoNameQueryWrapper =<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">                BookInfoNameQueryWrapper.eq(<span class="string">&quot;book_name&quot;</span>, bookName);</span><br><span class="line">                <span class="type">BookInfo</span> <span class="variable">bookInfoText</span> <span class="operator">=</span> bookInfoMapper.selectOne(BookInfoNameQueryWrapper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="type">BookInfo</span> <span class="variable">bookInfoId</span> <span class="operator">=</span> bookInfoMapper.selectOne(BookInfoNameQueryWrapper);</span><br><span class="line">                bookId = bookInfoId.getId();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//查找是否有重复章节内容的存在</span></span><br><span class="line">                QueryWrapper&lt;BookChapter&gt;BookChapterTextQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">                BookChapterTextQueryWrapper.eq(<span class="string">&quot;chapter_name&quot;</span>,bookChapterName);</span><br><span class="line">                BookChapterTextQueryWrapper.eq(<span class="string">&quot;book_id&quot;</span>,bookId);</span><br><span class="line">                <span class="type">BookChapter</span> <span class="variable">bookChapterText</span> <span class="operator">=</span> bookChapterMapper.selectOne(BookChapterTextQueryWrapper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 如果不存在相同的章节名字，则插入书籍信息</span></span><br><span class="line">                <span class="keyword">if</span>(bookInfoText != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (bookChapterText == <span class="literal">null</span> ) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        <span class="comment">//将数据存入bookChapter</span></span><br><span class="line">                        <span class="type">BookChapter</span> <span class="variable">bookChapter1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookChapter</span>();</span><br><span class="line">                        bookChapter1.setBookId(bookId);</span><br><span class="line">                        bookChapter1.setChapterNum(countChapter);</span><br><span class="line">                        bookChapter1.setChapterName(bookChapterName);</span><br><span class="line">                        bookChapter1.setWordCount(chineseCharCount);</span><br><span class="line">                        bookChapter1.setIsVip(<span class="number">0</span>);</span><br><span class="line">                        bookChapter1.setCreateTime(LocalDateTime.now());</span><br><span class="line">                        bookChapter1.setUpdateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">                        bookChapterMapper.insert(bookChapter1);</span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">&quot;数据表bookChapter数据存入成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 如果已经存在相同的书籍信息，则直接使用已存在的书籍信息的id</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;在数据表bookChapter中章节名为&quot;</span>+bookChapterName+<span class="string">&quot;的小说&quot;</span>+bookName+<span class="string">&quot;在数据库中已经存在&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;在数据表bookChapter中书名为&quot;</span>+bookName+<span class="string">&quot;的小说在数据库中不存在&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="type">Long</span> <span class="variable">chapterId</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 查询是否存在该章节和该书名</span></span><br><span class="line">                QueryWrapper&lt;BookChapter&gt; bookChapterQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">                bookChapterQueryWrapper.eq(<span class="string">&quot;book_id&quot;</span>, bookId);</span><br><span class="line">                bookChapterQueryWrapper.eq(<span class="string">&quot;chapter_name&quot;</span>, bookChapterName);</span><br><span class="line">                <span class="type">BookChapter</span> <span class="variable">bookChapterText2</span> <span class="operator">=</span> bookChapterMapper.selectOne(bookChapterQueryWrapper);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果章节存在，则获取其 ID</span></span><br><span class="line">                <span class="keyword">if</span> ( bookChapterText2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                    chapterId = bookChapterText2.getId();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                QueryWrapper&lt;BookContent&gt;BookContentQueryWrapper =<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">                BookContentQueryWrapper.eq(<span class="string">&quot;chapter_id&quot;</span>,chapterId);</span><br><span class="line">                <span class="type">BookContent</span> <span class="variable">bookContentText</span> <span class="operator">=</span> bookContentMapper.selectOne(BookContentQueryWrapper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果不存在相同的章节内容，则插入书籍信息</span></span><br><span class="line">                <span class="keyword">if</span> (bookContentText==<span class="literal">null</span> &amp;&amp; bookInfoText !=<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">BookContent</span> <span class="variable">bookContent1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookContent</span>();</span><br><span class="line">                    bookContent1.setChapterId(chapterId);</span><br><span class="line">                    bookContent1.setContent(bookContent);</span><br><span class="line">                    bookContent1.setCreateTime(LocalDateTime.now());</span><br><span class="line">                    bookContent1.setUpdateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">                    bookContentMapper.insert(bookContent1);</span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">&quot;数据表bookContent数据存入成功&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果已经存在相同的书籍信息，则直接使用已存在的书籍信息的id</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;在数据表bookContent中书名为&quot;</span>+bookName+<span class="string">&quot;的小说在数据库中已经存在&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说章节时，IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说章节时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h3><h4 id="解析html的两种方式"><a href="#解析html的两种方式" class="headerlink" title="解析html的两种方式"></a>解析html的两种方式</h4><p>1、Jsoup.parse</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Document document= Jsoup.parse(<span class="keyword">new</span> <span class="title class_">URL</span>(urlEver), <span class="number">300000</span>);</span><br></pre></td></tr></table></figure><p>2、Jsoup.connect</p><p>userAgent更换访问头</p><p>proxy更换IP</p><p>timeout防止超时异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(urlEverBook)</span><br><span class="line">        .userAgent(ua)</span><br><span class="line">        .proxy(currentProxy)</span><br><span class="line">        .timeout(<span class="number">1000000000</span>)</span><br><span class="line">        .get();</span><br></pre></td></tr></table></figure><h4 id="获取元素的方式"><a href="#获取元素的方式" class="headerlink" title="获取元素的方式"></a>获取元素的方式</h4><h5 id="DOM解析"><a href="#DOM解析" class="headerlink" title="DOM解析"></a>DOM解析</h5><p>.getElementsByTag(“h1”)——标签名</p><p>getElementById(“intro”)——id名</p><p>.text()获取文字</p><p>.attr(“href”)获取元素的某个属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">bookName</span> <span class="operator">=</span> document.getElementsByTag(<span class="string">&quot;h1&quot;</span>).get(<span class="number">0</span>).text();</span><br><span class="line"><span class="type">String</span> <span class="variable">src</span> <span class="operator">=</span> el.getElementsByTag(<span class="string">&quot;a&quot;</span>).eq(<span class="number">0</span>).attr(<span class="string">&quot;href&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h5><p>.select（”#info &gt; h1”）——selector地址</p><p>.text()获取文字</p><p>.attr(“href”)获取元素的某个属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取单条数据：</span></span><br><span class="line"><span class="type">String</span> <span class="variable">bookName</span> <span class="operator">=</span> document.select(<span class="string">&quot;#info &gt; h1&quot;</span>).text();</span><br><span class="line"></span><br><span class="line"><span class="comment">//取多条数据：</span></span><br><span class="line"><span class="comment">//注意这个select取得的位置一定要看清楚</span></span><br><span class="line"><span class="comment">//select(&quot;span.s2 &gt; a&quot;)</span></span><br><span class="line"><span class="type">Elements</span> <span class="variable">NameUrlList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#newscontent &gt; div.update-list &gt; div &gt; div &gt; ul&gt;li&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Element el : NameUrlList)&#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">BookUrlPart</span> <span class="operator">=</span> el.select(<span class="string">&quot;span.s2 &gt; a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">BookUrl</span> <span class="operator">=</span><span class="string">&quot;https://www.9biqu.com&quot;</span>+ BookUrlPart;</span><br><span class="line">      bookUrlList1.add(BookUrl);</span><br><span class="line">      count++;</span><br><span class="line">      System.out.println(<span class="string">&quot;小说地址采集完成&quot;</span>+count+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照条件取多条数据：</span></span><br><span class="line"><span class="comment">//从第13个数据开始取</span></span><br><span class="line"><span class="comment">//#list &gt; dl &gt; dd:gt(13)</span></span><br><span class="line"><span class="type">Elements</span> <span class="variable">bookChapter</span> <span class="operator">=</span> document.select(<span class="string">&quot;#list &gt; dl &gt; dd:gt(13)&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(Element el:bookChapter)&#123;</span><br><span class="line">     countChapter++;</span><br><span class="line">     bookChapterName = el.select(<span class="string">&quot;a&quot;</span>).text();</span><br><span class="line">     bookChapterUrlPart = el.select(<span class="string">&quot;a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">     bookChapterUrl = <span class="string">&quot;https://www.9biqu.com&quot;</span>+ bookChapterUrlPart;</span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本的第&quot;</span>+countChapter+<span class="string">&quot;章名&quot;</span>+bookChapterName);</span><br><span class="line">     System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本的第&quot;</span>+countChapter+<span class="string">&quot;章链接&quot;</span>+bookChapterUrl);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     chapterNameList.add(bookChapterName);</span><br><span class="line">     chapterUrlList.add(bookChapterUrl);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//选择除了第一个以外的所有数据：</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getBookContent</span><span class="params">(String BookContentUrl)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">     String bookContent;</span><br><span class="line">     <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(BookContentUrl)</span><br><span class="line">             .userAgent(ua)</span><br><span class="line">             .proxy(proxy)</span><br><span class="line">             .get();</span><br><span class="line">     Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">    <span class="comment">//#content &gt; *:not(p:first-child)</span></span><br><span class="line">     <span class="comment">//选择id为content的元素下除第一个p元素外的所有元素</span></span><br><span class="line">     <span class="type">Elements</span> <span class="variable">bookContentList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#content &gt; *:not(p:first-child)&quot;</span>);</span><br><span class="line"> <span class="comment">//toString()</span></span><br><span class="line">     <span class="comment">//将Elements对象转化为String对象</span></span><br><span class="line">     bookContent = bookContentList.toString();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> bookContent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Jsoup的选择器"><a href="#Jsoup的选择器" class="headerlink" title="Jsoup的选择器"></a>Jsoup的选择器</h4><h5 id="伪选择器selectors"><a href="#伪选择器selectors" class="headerlink" title="伪选择器selectors"></a>伪选择器selectors</h5><p>:lt(n): 查找哪些元素的同级索引值（它的位置在DOM树中是相对于它的父节点）小于n，比如：td:lt(3) 表示小于三列的元素</p><p>:gt(n):查找哪些元素的同级索引值大于n，比如： div p:gt(2)表示哪些div中有包含2个以上的p元素</p><p>:eq(n): 查找哪些元素的同级索引值与n相等，比如：form input:eq(1)表示包含一个input标签的Form元素</p><p>:has(seletor): 查找匹配选择器包含元素的元素，比如：div:has(p)表示哪些div包含了p元素</p><p>:not(selector): 查找与选择器不匹配的元素，比如： div:not(.logo) 表示不包含 class&#x3D;logo 元素的所有 div 列表</p><p>:contains(text): 查找包含给定文本的元素，搜索不区分大不写，比如： p:contains(jsoup)</p><p>:containsOwn(text): 查找直接包含给定文本的元素</p><p>:matches(regex): 查找哪些元素的文本匹配指定的正则表达式，比如：div:matches((?i)login)</p><p>:matchesOwn(regex): 查找自身包含文本匹配指定正则表达式的元素</p><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>使用try、catch来进行异常处理，一般在第一次出现异常后，根据异常提示，来进行进一步操作，比如输出信息或者线程休眠（这里注意try是否在循环语句里，可以通过类似**i–**的方法来保证循环的正常进行）</p><p>也可以在try语句中主动抛出异常，这里如果bookContentList&#x3D;&#x3D;null直接存入数据库中，会有空指针的异常。所以提前报错到catch语句里，再一次获取bookContentList</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(BookContentUrl)</span><br><span class="line">                .userAgent(ua)</span><br><span class="line">                .proxy(currentProxy)</span><br><span class="line">                .timeout(<span class="number">1000000000</span>)</span><br><span class="line">                .get();</span><br><span class="line">        Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        <span class="type">Elements</span> <span class="variable">bookContentList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#content &gt; *:not(p:first-child)&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(bookContentList!=<span class="literal">null</span>)&#123;</span><br><span class="line">            bookContent = bookContentList.toString();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SocketException</span>(<span class="string">&quot;获取书籍内容失败，将再次尝试获取&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (SocketException e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="IP代理池的创建"><a href="#IP代理池的创建" class="headerlink" title="IP代理池的创建"></a>IP代理池的创建</h4><p>先创建一个List存放IP以及端口以及定义currentProxyIndex存放位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Proxy&gt; proxies = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Proxy</span>(Proxy.Type.HTTP, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;139.200.74.178&quot;</span>, <span class="number">4283</span>)),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Proxy</span>(Proxy.Type.HTTP, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;60.169.245.20&quot;</span>, <span class="number">4215</span>)),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Proxy</span>(Proxy.Type.HTTP, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;183.147.27.251&quot;</span>, <span class="number">4231</span>))</span><br><span class="line">    );</span><br><span class="line"><span class="type">int</span> <span class="variable">currentProxyIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>从List中获取到一个IP以及地址，赋值给currentProxy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br></pre></td></tr></table></figure><p>然后使用proxy方法使用连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(urlEverBook)</span><br><span class="line">                        .proxy(currentProxy)</span><br><span class="line">                        .get();</span><br></pre></td></tr></table></figure><p>最后是根据情况来更换IP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;在爬取小说信息时，IP地址被禁止，将更换IP...&quot;</span>);</span><br><span class="line">    <span class="comment">//下面是换IP的逻辑计算</span></span><br><span class="line">    currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="存入数据库时需要的处理"><a href="#存入数据库时需要的处理" class="headerlink" title="存入数据库时需要的处理"></a>存入数据库时需要的处理</h4><h5 id="防止重复数据"><a href="#防止重复数据" class="headerlink" title="防止重复数据"></a>防止重复数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先通过QueryWrapper来约束条件</span></span><br><span class="line">QueryWrapper&lt;BookInfo&gt;BookInfoNameQueryWrapper =<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">      BookInfoNameQueryWrapper.eq(<span class="string">&quot;book_name&quot;</span>, bookName);</span><br><span class="line">      <span class="type">BookInfo</span> <span class="variable">bookInfo</span> <span class="operator">=</span> bookInfoMapper.selectOne(BookInfoNameQueryWrapper);</span><br><span class="line"><span class="comment">//通过selectOne后为空，可以判断不存在该数据，则存入数据库</span></span><br><span class="line">      <span class="keyword">if</span>(bookInfo==<span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="type">BookInfo</span> <span class="variable">bookInfo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookInfo</span>();</span><br><span class="line">      bookInfo1.setBookName(bookName);</span><br><span class="line"><span class="comment">//·········</span></span><br><span class="line">          </span><br><span class="line">      bookInfoMapper.insert(bookInfo1);</span><br><span class="line">      System.out.println(<span class="string">&quot;数据表bookInfo数据存入成功&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;在数据表bookInfo中书名为&quot;</span>+bookName+<span class="string">&quot;的小说在数据库中已经存在&quot;</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h5 id="获取其他表的数据存入另一张表"><a href="#获取其他表的数据存入另一张表" class="headerlink" title="获取其他表的数据存入另一张表"></a>获取其他表的数据存入另一张表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先通过QueryWrapper来约束条件</span></span><br><span class="line">QueryWrapper&lt;BookInfo&gt;BookInfoNameQueryWrapper =<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">      BookInfoNameQueryWrapper.eq(<span class="string">&quot;book_name&quot;</span>, bookName);</span><br><span class="line">      <span class="type">BookInfo</span> <span class="variable">bookInfoId</span> <span class="operator">=</span> bookInfoMapper.selectOne(BookInfoNameQueryWrapper);</span><br><span class="line"><span class="comment">//获取到这个ID（这是一个自增的数据，所以需要在其其他数据存入之后，再进行getId来获取）</span></span><br><span class="line">      bookId = bookInfoId.getId();</span><br><span class="line"><span class="comment">//存入数据到另外一张数据表book_capter中</span></span><br><span class="line"><span class="type">BookChapter</span> <span class="variable">bookChapter1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookChapter</span>();</span><br><span class="line">      bookChapter1.setBookId(bookId);</span><br><span class="line">bookChapterMapper.insert(bookChapter1);</span><br></pre></td></tr></table></figure><h5 id="防止数据为空"><a href="#防止数据为空" class="headerlink" title="防止数据为空"></a>防止数据为空</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">bookContent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//如果数据bookContent一直为空，则一直进行try的语句</span></span><br><span class="line">      <span class="keyword">while</span> (bookContent == <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">      <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(BookContentUrl)</span><br><span class="line">      .userAgent(ua)</span><br><span class="line">      .proxy(currentProxy)</span><br><span class="line">      .timeout(<span class="number">1000000000</span>)</span><br><span class="line">      .get();</span><br><span class="line">      Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">      <span class="type">Elements</span> <span class="variable">bookContentList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#content &gt; *:not(p:first-child)&quot;</span>);</span><br><span class="line"></span><br><span class="line">      bookContent = bookContentList.toString();</span><br><span class="line"></span><br><span class="line">      &#125;<span class="keyword">catch</span> (SocketException e)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">      Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">      currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">      &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">      Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">      currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> bookContent;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/posts/ee69e452.html"/>
      <url>/posts/ee69e452.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h2><p>开启 Flexbox 布局：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: flex;</span><br></pre></td></tr></table></figure><p>主轴（水平轴）对齐方式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">justify-content</span>: flex-start;<span class="comment">/*默认*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: center;<span class="comment">/*居中对齐*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: space-between;<span class="comment">/*两端对齐*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: flex-end <span class="comment">/*靠右对齐*/</span></span><br></pre></td></tr></table></figure><p>交叉轴（竖轴）对称方式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-items</span>: stretch; <span class="comment">/*默认,自动把子元素拉伸成容器的高度*/</span></span><br><span class="line"><span class="attribute">align-items</span>: flex-start; <span class="comment">/*靠上对齐，在交叉轴开始的最上方，可以看到子元素不再占满容器高度：*/</span></span><br><span class="line"><span class="attribute">align-items</span>: center; <span class="comment">/*居中对齐*/</span></span><br><span class="line"><span class="attribute">align-items</span>: flex-end; <span class="comment">/*靠下对齐：*/</span></span><br></pre></td></tr></table></figure><p>空间占比：</p><p>子元素可以通过设置<code>flex</code>属性来调整空间的占比，例如让 <code>flex2</code> 在水平方向上占据其他子元素的 2 倍大小，可以设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex1</span>,</span><br><span class="line"><span class="selector-class">.flex3</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex2</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收缩(当它们的宽度超过 flex 容器之后，该如何进行收缩)：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*flex-grow*/</span></span><br><span class="line"><span class="selector-class">.flex2</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;<span class="comment">/*其它的元素保持默认的宽度（即内容的宽度，flex-basis 为 auto)，那么 .flex2 就会自动增长并占据整个剩余空间*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*flex-shrink*/</span></span><br><span class="line"><span class="selector-class">.flex1</span>,</span><br><span class="line"><span class="selector-class">.flex3</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex2</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">2</span>;</span><br><span class="line">&#125;<span class="comment">/*通过 flex-shrink 来设置一个数值，数值越大，收缩程度也越大，比如flex-shrink: 2的元素会比flex-shrink:1收缩的值大 2 倍：*/</span></span><br></pre></td></tr></table></figure><p>flex属性:</p><p>说完<code>flex-grow</code>、<code>flex-shrink</code> 和 <code>flex-basis</code> 之后，再来看一下这个 <code>flex</code> 属性，它其实是前边三个属性的缩写，默认值是 <code>0 1 auto</code>，即不增长，但收缩，收缩比例为 1，flex-basis 为 auto，即取自用户定义的宽度或内容的宽度。</p><p>换行：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-wrap</span>: nowrap; <span class="comment">/*默认，不换行*/</span></span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap; <span class="comment">/*来让元素进行折行排列，使得每行的元素都不超过容器的宽度*/</span></span><br></pre></td></tr></table></figure><p>开启换行后，控制各行布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-content</span>: center; <span class="comment">/*居中对齐*/</span></span><br><span class="line"><span class="attribute">align-content</span>: space-between; <span class="comment">/*两端对齐*/</span></span><br></pre></td></tr></table></figure><h2 id="html基础"><a href="#html基础" class="headerlink" title="html基础"></a>html基础</h2><h3 id="ol、ul、li"><a href="#ol、ul、li" class="headerlink" title="ol、ul、li"></a>ol、ul、li</h3><p>li标签（全称为list item）是HTML语言中的一个元素标签。属于列表标签。以 li 开始 &#x2F;li 结束，li 标签可用在<strong>有序</strong>列表 (ol) 和<strong>无序</strong>列表 (ul) 中。</p><p>li标签则用的范围<strong>比较少</strong>，通常用在<strong>导航栏、列表栏、图片</strong>显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>有序列表：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>打开冰箱门<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>把大象放进去<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>关上冰箱门<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>无序列表：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>雪碧<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>可乐<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>凉茶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>去除无需列表前的原点</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dl、dt、dd"><a href="#dl、dt、dd" class="headerlink" title="dl、dt、dd"></a>dl、dt、dd</h3><p>只有当你<strong>需要对列表项进行解释</strong>的时候, 你才需要 使用 dl, 否则就没有必要使用dl, 或者说使用dl就不是那么 恰当了，主要是html要求最好见名知意.</p><p>dt（define list title）是用于生成定义列表中各列表项的标题，重复使用可以定义多个列表项的标题。</p><ul><li>dl —— define list——定义列表</li><li>dt—— define list title —— 用于生成定义列表中各列表项的标题，重复使用可以定义多个列表项的标题。用来创建列表中的上层项目。</li><li>dd —— define list define —— 用于生成定义列表各列表项的说明文字段，重复使用可以定义多个说明文字段。dd是对应dt的简短说明或解释。用来创建列表中最下层项目。默认存在两格缩进</li></ul><p>dl 列表中有较为强烈的“描述”、“解释”、“补充”意义。 dt 和 dd 有明显的逻辑关系，dd 从属于 dt，dd 中的内容是对 dt 的“描述”、“解释”、“补充”。另外，dd 之间虽然是平行关系，但是其描述的内容是多角度的，不同于单纯的 li。</p><h3 id="div"><a href="#div" class="headerlink" title="div"></a>div</h3><p>div标签总是从新行开始显示，它包含的元素会自动换行；span标签是行内元素，拥有行内元素的特点。但是可以通过flex改变div的作为块状元素的属性</p><h3 id="span"><a href="#span" class="headerlink" title="span"></a>span</h3><p>span标签元素会和其他标签元素会在一行显示</p><p>使用 span来组合行内元素，以便通过样式来格式化它们。</p><p>span标签通常使用来将文本的一部分或者文档的一部分独立出来，从而对独立出来的内容设置单独的样式。span本身没有任何属性，也没有固定的格式表现，当对它应用样式时，它会产生视觉上的变化。</p><h3 id="href-x3D-”-”与javascript：void（0）的区别"><a href="#href-x3D-”-”与javascript：void（0）的区别" class="headerlink" title="href&#x3D;”#”与javascript：void（0）的区别"></a><strong>href&#x3D;”#”与javascript：void（0）的区别</strong></h3><p>href&#x3D;”#”方法其实也是空连接的意思，但是点击之后会自动跳转到页面的最上面，因为用了这个方法就相当于点击了一个锚记，但是这个锚记又没写ID，所以就默认跳转到页面顶部。从上面的例子也可以看出，当要执行某些处理，但是不整体刷新页面的情况下，可以使用void(0),但是在需要对页面进行refresh的情况下，那就要仔细了。<br>其实我们可以这样用，这句话会进行一次submit操作。那什么情况下用void(0)比较多呢，无刷新，当然是Ajax了，看一下Ajax的web页面的话，一般都会看到有很多的void(0)，所以在使用void(0)之前,最好先想一想,这个页面是否需要整体刷新。<br>说白了，href&#x3D;”#”这种形式会整体刷新页面，而href&#x3D;”javascript:void(0)” 则不会。所以如果是空连接的话，还是推荐javascript:void(0)。</p><p>而且href&#x3D;”javascript:void(0)”最好写在@click&#x3D;”nextChapter(data.chapterInfo.bookId)”<strong>后面</strong>这样就不会导致一直在最底端的情况QAQ</p><h2 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h2><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><p>id 选择器：要选择具有特定 id 的元素，请写一个井号（＃），后跟该元素的 id。</p><p>类选择器：如需选择拥有特定 class 的元素，请写一个句点（.）字符，后面跟类名。</p><p>伪类选择器、伪元素选择器</p><h4 id="CSS-组合器"><a href="#CSS-组合器" class="headerlink" title="CSS 组合器"></a>CSS 组合器</h4><p>后代选择器<br>后代选择器匹配属于指定元素后代的所有元素。</p><p>子选择器<br>子选择器匹配属于指定元素子元素的所有元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-content</span>: center; <span class="comment">/*居中对齐*/</span></span><br><span class="line"><span class="attribute">align-content</span>: space-between; <span class="comment">/*两端对齐*/</span></span><br></pre></td></tr></table></figure><p>nth-child(n) 选择器</p><p>:nth-child(<em>n</em>) 选择器匹配属于其父元素的第 N 个子元素，不论元素的类型</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el-menu-item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">260px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS类"><a href="#CSS类" class="headerlink" title="CSS类"></a>CSS类</h3><p>CSS 伪类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 未访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FF0000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 已访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00FF00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标悬停链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FF00FF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 已选择的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0000FF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>CSS 伪元素：</p><p>::first-line 伪元素<br>::first-line 伪元素用于向文本的首行添加特殊样式。</p><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>当我们在HTML中定义一个元素时，它会自动创建一个盒子，这个盒子包含了这个元素的所有内容（包括文本、图片等）以及一些与元素相关的属性（例如宽度、高度、边框、内边距和外边距）。CSS盒子模型描述了这个盒子是如何构造的。</p><p>在CSS盒子模型中，一个盒子有4个部分：</p><p>1.内容区（Content）：元素的文本内容、图像和其他子元素都在这里。</p><p>2.内边距区（Padding）：这是内容区和边框之间的空间，可以使用padding属性设置。</p><p>3.边框区（Border）：边框围绕着内边距和内容区。可以使用border属性设置。</p><p>4.外边距区（Margin）：这是边框和周围元素之间的空间。可以使用margin属性设置。</p><p>这些部分的宽度和高度会受到相应的属性的影响。例如，元素的宽度&#x3D;左边距+左边框+左内边距+内容宽度+右内边距+右边框+右边距。</p><p>在默认的盒子模型中，盒子的宽度和高度不包括内边距和边框，只包括内容区。但是，我们可以通过CSS中的box-sizing属性来改变这种行为。例如，将box-sizing设置为border-box可以让盒子的宽度和高度包括内边距和边框。</p><p>一般推荐将box-sizing属性设置为border-box</p><h2 id="Vue相关"><a href="#Vue相关" class="headerlink" title="Vue相关"></a>Vue相关</h2><p>element-ui的样式可以通过F12看到类名直接改到喜欢的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el-menu--horizontal</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#79bbff</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>element-ui菜单跳转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;Nav&quot;&gt;</span><br><span class="line">        &lt;el-menu :router=&#x27;true&#x27; class=&quot;el-menu-demo&quot; mode=&quot;horizontal&quot; &gt;</span><br><span class="line">            &lt;el-menu-item index=&quot;/&quot;&gt;首页&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index=&quot;/about&quot; &gt;我的书架&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;!--router=&#x27;true&#x27;必须开启 index=&quot;路由的地址&quot;--&gt;</span><br><span class="line">        &lt;/el-menu&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>el-button的引用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*&lt;el-button type=&quot;primary&quot; round&gt;Primary&lt;/el-button&gt;在写css时实际上应该用类选择器*/</span></span><br><span class="line"><span class="selector-class">.lijizhuce-content</span>&gt;<span class="selector-class">.el-button</span>&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>element-plus el-button图标的添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top-button&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">style</span>=<span class="string">&quot;vertical-align: middle&quot;</span>&gt;</span>/**/</span><br><span class="line">            <span class="tag">&lt;<span class="name">Search</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;vertical-align: middle&quot;</span>&gt;</span> 搜索 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/css-button.png" alt="css-button"></p><p>element-plus el-input图标的添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;input&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入验证码&quot;</span> <span class="attr">clearable</span> <span class="attr">prefix-icon</span>=<span class="string">&quot;Message&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- prefix-icon是在前面的图标，suffix-icon是在后面的图标 --&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/css-input.png" alt="css-input"></p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="小说项目"><a href="#小说项目" class="headerlink" title="小说项目"></a>小说项目</h3><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/css-%E6%8E%92%E7%89%88%E7%BB%83%E4%B9%A0.png" alt="css-排版练习"></p><p>首先是分析html元素首先是外层有一个整体的div并且存在boder,内部排布需要flex布局，且需要分成两排，使用flex-wrap: wrap换行,</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hot-list</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">700px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">350px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#c3dfea</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap; <span class="comment">/*来让元素进行折行排列，使得每行的元素都不超过容器的宽度*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后观察内部可以分为图片以及介绍两大板块包含在一起所以还有一个div，因为两个板块在同一条线上，所以此处的div也需要flex布局,同时考虑到美观层面，将每一个书籍的左侧和上部增加间距，再加上整体的局部增加了内间距刚好可以实现，全部书籍之间存在间隙，书籍与整体盒子之间也有一定的距离</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.itemList</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="图片板块"><a href="#图片板块" class="headerlink" title="图片板块:"></a>图片板块:</h4><p>作为图片外层的div可以与图片的尺寸相同，也可以像下面一样，多出一部分，省去了写magin，而且使用百分比（%）使得整体的布局更加清晰，但是要预留出书本详情的版块</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.items_img</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">45%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">158px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="图片："><a href="#图片：" class="headerlink" title="图片："></a>图片：</h5><p>按照两本书同一行的大小，进行width和height的尝试，这里不能使用百分比（%）的话，则是按照上一层div的大小来进行缩放，所以此处的height的值可以是100%，并无差别</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.items_img</span>&gt;<span class="selector-tag">a</span>&gt;<span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">116px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">158px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="书籍详情板块："><a href="#书籍详情板块：" class="headerlink" title="书籍详情板块："></a>书籍详情板块：</h4><p>确定板块的大小，同时也可以先指定好整体的字所需要的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.items_txt</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">52%</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: small;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="书名："><a href="#书名：" class="headerlink" title="书名："></a>书名：</h5><p>因为<dt>为行类型的标签，所以这里先指定好display为块状放置，以免和作者的名字处于同一个水平线上</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.home-bookName</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">font-size</span>: medium;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h5><p>intro为div，指定盒子的大小后，因为介绍的长度，所以将超出的部分直接隐藏，达到更好看的效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.intro</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适配练习"><a href="#适配练习" class="headerlink" title="适配练习"></a>适配练习</h3><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E9%80%82%E9%85%8D%E7%BB%83%E4%B9%A0.png" alt="适配练习"></p><p>该练习是因为在上面的小说项目之后，我发现不同设备无法进行适配，该练习是为了能够适配各种设备，相同的办法应该会经常用到</p><h4 id="HomeView部分："><a href="#HomeView部分：" class="headerlink" title="HomeView部分："></a>HomeView部分：</h4><p>最外层的部分直接用display：flex会导致整个页面随着缩放随意的变动，但是又需要达到整体处于界面水平中心的样式，所以选择在最外层再加一个div把整体包裹进去，再使用margin：0  auto；(使用这个样式必须要有width存在，否则水平居中的效果消失，同时在这个界面中width基本就确定了其他部分的width)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.home-center</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Navbar部分："><a href="#Navbar部分：" class="headerlink" title="Navbar部分："></a>Navbar部分：</h4><p>需要多加两个div，一个div和HomeView部分的思路是一样的固定width以及magin来实现水平居中，再在里面的子元素中使用display：flex来调整样式</p><p>另一个再加一个最外层的div来保证底层的颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Nav的Css样式 */</span></span><br><span class="line"><span class="selector-class">.el-menu-item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Nav</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Nav-center</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#79bbff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Nav-color</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#79bbff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Top部分"><a href="#Top部分" class="headerlink" title="Top部分"></a>Top部分</h4><p>最外层同样思路，内层的top-center要使用width: 100%;和height: 100%;保证与外层的top相同</p><p>其中headr里的min-width: 1100px;需要注意，否则header会随着缩放不断缩小，而里面的top则保持在1100px的width，那background-color就会有部分不一样</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 组件header里的Css样式 */</span></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">1100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.top</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.top-center</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="comment">/*居中对齐*/</span></span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="comment">/*居中对齐*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.input</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">342px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.top-a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.user</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.top-input</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>在最外层加上width: 1100px;和margin: 0 auto;保持水平居中，内层则使用flex布局，外层的width和height多使用具体的数值，内层的width和height多使用百分比，在部分元素因为缩放变样时，min-width可以很好的解决这个问题</p><h2 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h2><p>1、文字垂直居中：使line-height等于该区域的height</p><p>2、在写网页之前一般都需要去除各种的margin,padding防止边框的产生</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;<span class="comment">/*忽略边框的盒装模型*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、导航栏高度铺满网页</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“100vh”是指大小为“100”单位为“vh”的一个相对长度值；“vh”是css中的一个相对长度单位，是相对于视窗的高度，“100vh”就是指元素的高度等于当前浏览器的视窗高度，即浏览器内部的可视区域的高度大小</p><p> min-height 属性设置元素的最小高度。该属性值会对元素的高度设置一个最低限制。因此，元素可以比指定值高，但不能比其矮。不允许指定负值。</p><p>4、裁剪 div 元素中内容的左&#x2F;右边缘 - 如果溢出元素的内容区域的话</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">overflow-x</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、通过动态边长实现缩进导航栏</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/image-20221217214444893.png" alt="image-20221217214444893"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;HomeView&#x27;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    collapse() &#123;  // 点击收缩按钮触发</span><br><span class="line">      this.isCollapse = !this.isCollapse</span><br><span class="line">      if (this.isCollapse) &#123;  // 收缩</span><br><span class="line">        this.sideWidth = 64</span><br><span class="line">        this.collapseBtnClass = &#x27;el-icon-s-unfold&#x27;</span><br><span class="line">        this.logoTextShow = false</span><br><span class="line">      &#125; else &#123;   // 展开</span><br><span class="line">        this.sideWidth = 200</span><br><span class="line">        this.collapseBtnClass = &#x27;el-icon-s-fold&#x27;</span><br><span class="line">        this.logoTextShow = true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/image-20221217214451740.png" alt="image-20221217214451740"></p><p>6、将搜索栏input框与按钮button边框分开</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、内边距padding</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">5px</span> <span class="number">15px</span> <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">5px</span> <span class="number">15px</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span>;</span><br></pre></td></tr></table></figure><p>8、居中对齐元素<br>要使块元素（例如 <div> ）水平和垂直方向上都居中对齐，请使用 margin: auto;将某个元素在水平方向上居中对齐：margin: 0 auto;</p><p>9、居中对齐文本<br>如果仅需在元素内居中文本，请使用 text-align: center;</p><p>10、居中对齐图像<br>如需居中图像，请将左右外边距设置为 auto，并将其设置为块元素：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">  <span class="attribute">margin-right</span>: auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>11、整体放大缩小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleX</span>(x);         <span class="comment">/*沿X轴方向缩放*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleY</span>(y);         <span class="comment">/*沿Y轴方向缩放*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(x, y);        <span class="comment">/*沿X轴和Y轴同时缩放*/</span></span><br></pre></td></tr></table></figure><p>12、在遇到利用width无法缩放的情况时(可能是子元素的大小大于父元素)可以使用min-width或者max-width</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el-menu-item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">260px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>13、border</p><p>border（可加方向）: border-width（可加auto（方便居中），只写两个则是先上下&#x2F;再左右距离）  border-style（dotted（点状） solid（实线） double（双线） dashed（虚线）; ）  border-color;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tuijian-list</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">5px</span> solid red;<span class="comment">/*边框的宽度5px,边框的样式实线,边框的颜色红色*/</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>14、段落样式：</p><p>大小：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.footer-content</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: small;<span class="comment">/*也可以是5px、80%*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行高：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.footer-content</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;<span class="comment">/*也可以是90%*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文字居中（不用margin来凑）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.footer</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/posts/9ea13874.html"/>
      <url>/posts/9ea13874.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="SpringBoot项目建立"><a href="#SpringBoot项目建立" class="headerlink" title="SpringBoot项目建立"></a>SpringBoot项目建立</h2><p>新建项目，勾选依赖项,如：</p><p>Developer Tools中的Lombok(通过注释简化java开发)</p><p>Web中的Spring Web（相当于SpringMVC）</p><p>SQL中的Mybatis Framework(Mybatis的框架)和MySQL Driver（MySQL的驱动）</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/image-20221221201317655.png" alt="image-20221221201317655"></p><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>通过Navicat创造新的MySQL数据库，并设计表格的名称，类型，以便于后端拿数据</p><h2 id="SpringBoot各级设计"><a href="#SpringBoot各级设计" class="headerlink" title="SpringBoot各级设计"></a>SpringBoot各级设计</h2><h3 id="配置类编写"><a href="#配置类编写" class="headerlink" title="配置类编写"></a>配置类编写</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#--------------------------通用配置-------------------------</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 应用名</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">novel</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="string">---</span> <span class="comment">#---------------------数据库配置---------------------------</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/novel?useUnicode=true&amp;characterEncoding=utf-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">Tec@258011</span></span><br><span class="line"><span class="string">---</span> <span class="comment">#---------------------自定义配置----------------------------</span></span><br><span class="line"><span class="attr">novel:</span></span><br><span class="line">  <span class="comment"># 跨域配置</span></span><br><span class="line">  <span class="attr">cors:</span></span><br><span class="line">    <span class="comment"># 允许跨域的域名</span></span><br><span class="line">    <span class="attr">allow-origins:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http://localhost:1024</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http://localhost:8888</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http://localhost:8080</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">---</span> <span class="comment">#配置mapper xml文件的路径（找不到xml的问题，最后是用config层的MybatisPlusConfig的相关配置来解决的）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="string">mapUnderscoreToCamelCase=true:</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># JSON 序列化时，将所有 Number 类型的属性都转为 String 类型返回，避免前端数据精度丢失的问题。(Long类型最多17位，超过的部分会变成相同数量的0，卡了一个下午加一个过了考试周的晚上QAQ，问题一开始在前端收到的id与数据库不一致，然后发现F12中的预览和响应不同，而响应是对的)</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">generator:</span></span><br><span class="line">      <span class="attr">write_numbers_as_strings:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="Dao层编写"><a href="#Dao层编写" class="headerlink" title="Dao层编写"></a>Dao层编写</h3><p>数据访问对象，负责封装对数据库的CRUD操作，与数据库进行交互，一般是mapper写接口，xml文件写sql语句的形式。</p><p>包括<strong>entity层（实体层）</strong>编写以及<strong>Mapper层</strong>编写</p><h4 id="entity层（实体层）"><a href="#entity层（实体层）" class="headerlink" title="entity层（实体层）"></a>entity层（实体层）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@TableName：如果数据库的表名是home_book，但是实体类的名字不同，那么就需要借助TableName去做绑定  implements Serializable：一个对象序列化的接口，一个类只有实现了Serializable接口，它的对象才是可序列化的。因此如果要序列化某些类的对象，这些类就必须实现Serializable接口。而实际上，Serializable是一个空接口，没有什么具体内容，它的目的只是简单的标识一个类的对象可以被序列化。</span></span><br><span class="line"><span class="meta">@TableName(&quot;home_book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeBook</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"><span class="comment">//@TableId：主键专属比如数据中的表中的字段是id，但是实体类是userId，那么就需要在userId上打上这个注解，用法：设置主键映射 value映射主键字段的名字</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long bookId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mapper层"><a href="#Mapper层" class="headerlink" title="Mapper层"></a>Mapper层</h4><p>不要忘了在启动类下@MapperScan(“com.tec.vuepractice.dao.mapper”)，这样在包扫描的时候就不会漏掉mapper层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//extends BaseMapper&lt;HomeBook&gt;是mybaits-plus的组件，用来进行基础的增删改查</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HomeBookMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;HomeBook&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service层编写-Impl-实现层"><a href="#Service层编写-Impl-实现层" class="headerlink" title="Service层编写+Impl(实现层)"></a>Service层编写+Impl(实现层)</h3><p>更加关注业务逻辑，是业务处理层，将manager组合过的操作和业务逻辑组合在一起，再封装成业务操作。</p><h4 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HomeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询首页小说推荐列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 首页小说推荐列表的 rest 响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RestResp&lt;List&lt;HomeBookRespDto&gt;&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="serviceImpl层"><a href="#serviceImpl层" class="headerlink" title="serviceImpl层"></a>serviceImpl层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="comment">//implements:一个类通过关键字implements声明自己使用一个或者多个接口。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">HomeService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeBookCacheManager homeBookCacheManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RestResp&lt;List&lt;HomeBookRespDto&gt;&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RestResp.ok(homeBookCacheManager.listHomeBooks());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller层编写"><a href="#Controller层编写" class="headerlink" title="Controller层编写"></a>Controller层编写</h3><p>主要负责接受前台的数据和请求，并且在底层处理完之后把结果返回回去，一般不能写业务逻辑在这一层，因为第一造成了不可复用，第二以后的维护困难，第三这一层没有上层，如果给用户返回了奇怪的错误信息将会非常丑陋。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RestController：作用等同于@Controller + @ResponseBody</span></span><br><span class="line"><span class="comment">//@Controller：在一个类上添加@Controller注解，表明了这个类是一个控制器类</span></span><br><span class="line"><span class="comment">//@RestController：用其实是将java对象转为json格式的数据</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="comment">//@RequestMapping：映射URL</span></span><br><span class="line"><span class="meta">@RequestMapping(ApiRouterConsts.API_FRONT_HOME_URL_PREFIX)</span><span class="comment">//（/home）</span></span><br><span class="line"><span class="comment">//在springboot项目中，controller或service层中需要注入多个mapper接口或者另外的service接口，这时候代码中就会有多个@AutoWired注解，使得代码看起来非常的混乱。</span></span><br><span class="line"><span class="comment">//@RequiredArgsConstructor写在类上面可以代替@AutoWired注解，需要注意的是：在注入的时候需要用final定义，或者使用@notnull注解</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeController</span> &#123;</span><br><span class="line"><span class="comment">//注入service</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeService homeService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首页小说推荐查询接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;books&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RestResp&lt;List&lt;HomeBookRespDto&gt;&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> homeService.listHomeBooks();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//@PathVariable(&quot;chapterId&quot;）（卡了3.1一整晚加上3.2早上一小时QAQ）</span></span><br><span class="line"><span class="comment">//@PathVariable 映射 URL 绑定的占位符</span></span><br><span class="line"><span class="comment">//通过 @PathVariable 可以将 URL 中占位符参数绑定到控制器处理方法的入参中:URL 中的 &#123;xxx&#125; 占位符可以通过</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;content/&#123;chapterId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RestResp&lt;BookContentAboutRespDto&gt;  <span class="title function_">getBookContentAbout</span><span class="params">(<span class="meta">@PathVariable(&quot;chapterId&quot;)</span> Long chapterId)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;查询方法调用之前，参数id=&#123;&#125;&quot;</span>, chapterId);</span><br><span class="line">        <span class="keyword">return</span> bookService.getBookContentAbout(chapterId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Dto层编写"><a href="#Dto层编写" class="headerlink" title="Dto层编写"></a>Dto层编写</h3><p>传输对象，一般是把数据库表封装成对象，表的各个字段就是该对象的各个变量</p><p>包括<strong>req层</strong>(Http 请求数据封装)<strong>resp层</strong>（Http 响应数据封装）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小说信息 响应DTO</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiongxiaoyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/5/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@Data:@Data ： 注在类上，提供类的get、set、equals、hashCode、canEqual、toString方法</span></span><br><span class="line"><span class="comment">//@AllArgsConstructor ： 注在类上，提供类的全参构造</span></span><br><span class="line"><span class="comment">//@NoArgsConstructor ： 注在类上，提供类的无参构造</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookInfoRespDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Schema:Swagger3的注解，用于输出api文档，此处提供了描述</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;小说ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类别ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;类别ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类别名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;类别名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小说封面地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;小说封面地址&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String picUrl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小说名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;小说名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作家id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;作家id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long authorId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作家名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;作家名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String authorName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 书籍描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;书籍描述&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bookDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 书籍状态;0-连载中 1-已完结</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;书籍状态;0-连载中 1-已完结&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer bookStatus;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;点击量&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long visitCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总字数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;总字数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer wordCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 评论数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;评论数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer commentCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首章节ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;首章节ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long firstChapterId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新章节ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;最新章节ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long lastChapterId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新章节名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;最新章节名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lastChapterName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新章节更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;最新章节更新时间&quot;)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="manager层编写"><a href="#manager层编写" class="headerlink" title="manager层编写"></a>manager层编写</h3><p>负责将Dao层中的数据库操作组合复用，主要是一些缓存方案，中间件的处理，以及对第三方平台封装的层。</p><h4 id="cache层编写"><a href="#cache层编写" class="headerlink" title="cache层编写"></a>cache层编写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeBookCacheManager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeBookMapper homeBookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookInfoMapper bookInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询首页小说推荐，并放入缓存中（此处没有采用缓存策略）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;HomeBookRespDto&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 从首页小说推荐表中查询出需要推荐的小说</span></span><br><span class="line">        QueryWrapper&lt;HomeBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//orderByAsc：按照DatabaseConsts.CommonColumnEnum.SORT.getName()排序</span></span><br><span class="line">        queryWrapper.orderByAsc(DatabaseConsts.CommonColumnEnum.SORT.getName());</span><br><span class="line">        List&lt;HomeBook&gt; homeBooks = homeBookMapper.selectList(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取推荐小说ID列表</span></span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(homeBooks)) &#123;</span><br><span class="line">            List&lt;Long&gt; bookIds = homeBooks.stream()</span><br><span class="line">                    .map(HomeBook::getBookId)</span><br><span class="line">                    .toList();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据小说ID列表查询相关的小说信息列表</span></span><br><span class="line">            QueryWrapper&lt;BookInfo&gt; bookInfoQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">            bookInfoQueryWrapper.in(DatabaseConsts.CommonColumnEnum.ID.getName(), bookIds);</span><br><span class="line">            List&lt;BookInfo&gt; bookInfos = bookInfoMapper.selectList(bookInfoQueryWrapper);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 组装 HomeBookRespDto 列表数据并返回</span></span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(bookInfos)) &#123;</span><br><span class="line">                Map&lt;Long, BookInfo&gt; bookInfoMap = bookInfos.stream()</span><br><span class="line">                        .collect(Collectors.toMap(BookInfo::getId, Function.identity()));</span><br><span class="line">                <span class="keyword">return</span> homeBooks.stream().map(v -&gt; &#123;</span><br><span class="line">                    <span class="type">BookInfo</span> <span class="variable">bookInfo</span> <span class="operator">=</span> bookInfoMap.get(v.getBookId());</span><br><span class="line">                    <span class="type">HomeBookRespDto</span> <span class="variable">bookRespDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HomeBookRespDto</span>();</span><br><span class="line">                    bookRespDto.setType(v.getType());</span><br><span class="line">                    bookRespDto.setBookId(v.getBookId());</span><br><span class="line">                    bookRespDto.setBookName(bookInfo.getBookName());</span><br><span class="line">                    bookRespDto.setPicUrl(bookInfo.getPicUrl());</span><br><span class="line">                    bookRespDto.setAuthorName(bookInfo.getAuthorName());</span><br><span class="line">                    bookRespDto.setBookDesc(bookInfo.getBookDesc());</span><br><span class="line">                    <span class="keyword">return</span> bookRespDto;</span><br><span class="line">                &#125;).toList();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一般的业务的写法"><a href="#一般的业务的写法" class="headerlink" title="一般的业务的写法"></a>一般的业务的写法</h4><p>（自己写的，对以后的业务编写挺有参考意义的，感动QAQ）</p><p>上面的manager层编写业务的写法主要是在<strong>使用缓存</strong>时使用</p><p>一般在写业务逻辑的时候还是在service层下的<strong>Impl层</strong>比较常用，下面是该业务的常规写法</p><h5 id="mapper层"><a href="#mapper层" class="headerlink" title="mapper层"></a>mapper层</h5><p>先准备好需要的mapper接口</p><h6 id="HomeBookMapper"><a href="#HomeBookMapper" class="headerlink" title="HomeBookMapper"></a>HomeBookMapper</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HomeBookMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;HomeBook&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="BookInfoMapper"><a href="#BookInfoMapper" class="headerlink" title="BookInfoMapper"></a>BookInfoMapper</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookInfoMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;BookInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="service层-1"><a href="#service层-1" class="headerlink" title="service层"></a>service层</h5><p>然后在service层下定义好方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HomeService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;HomeBook&gt; &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;HomeBookRespDto&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="impl层"><a href="#impl层" class="headerlink" title="impl层"></a>impl层</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;HomeBookMapper, HomeBook&gt; <span class="keyword">implements</span> <span class="title class_">HomeService</span> &#123;</span><br><span class="line">    <span class="comment">//@Autowired可能会导致找不到Mapper的bean（常见错误），而使用@Resource则会按照名字来搜素，可以解决找不到Mapper的bean的问题</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeBookMapper homeBookMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookInfoMapper bookInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;HomeBookRespDto&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 从首页小说推荐表中查询出需要推荐的小说</span></span><br><span class="line">        QueryWrapper&lt;HomeBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// orderByAsc（实现递增排序）</span></span><br><span class="line">        <span class="comment">// orderByDesc（实现递减排序）</span></span><br><span class="line">        queryWrapper.orderByAsc(DatabaseConsts.CommonColumnEnum.SORT.getName());</span><br><span class="line">        <span class="comment">//selectlist:根据 entity 条件，查询全部记录</span></span><br><span class="line">        <span class="comment">//selectOne:根据 entity 条件，查询一条记录</span></span><br><span class="line">        List&lt;HomeBook&gt; homeBooks = homeBookMapper.selectList(queryWrapper);</span><br><span class="line"><span class="comment">//CollectionUtils.isEmpty(list): false</span></span><br><span class="line">        <span class="comment">//CollectionUtils.isNotEmpty(list): true</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//这段代码的功能是将一个名为homeBooks的集合中的HomeBook对象的bookId属性取出来，并将它们组成一个Long类型的List集合bookIds。</span></span><br><span class="line">        <span class="comment">//代码的执行过程如下：</span></span><br><span class="line"><span class="comment">//1、判断homeBooks集合是否为空，使用了CollectionUtils.isEmpty()方法来判断，该方法是Spring框架提供的一个工具类方法，用于判断集合是否为空。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、如果homeBooks集合不为空，则使用Java 8中的Stream流对集合进行处理，调用map()方法将HomeBook对象中的bookId属性取出来，然后使用toList()方法将结果转换为List集合。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、最终得到一个名为bookIds的List集合，其中包含了homeBooks集合中所有HomeBook对象的bookId属性值。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取推荐小说ID列表</span></span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(homeBooks)) &#123;</span><br><span class="line">            List&lt;Long&gt; bookIds = homeBooks.stream()</span><br><span class="line">                    .map(HomeBook::getBookId)</span><br><span class="line">                    .toList();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//这段代码的功能是根据给定的bookIds列表，从数据库中查询对应的BookInfo记录，并将查询结果存储在一个名为bookInfos的List集合中。</span></span><br><span class="line"><span class="comment">//代码的执行过程如下：</span></span><br><span class="line"><span class="comment">//1、创建一个QueryWrapper对象bookInfoQueryWrapper，该对象是MyBatis-Plus框架提供的一个查询条件构造器，可以通过该对象构建查询条件。</span></span><br><span class="line"><span class="comment">//2、调用QueryWrapper对象的in()方法，该方法用于构建一个in查询条件，查询的是数据库中名为ID的列，该列的值必须包含在bookIds列表中。</span></span><br><span class="line"><span class="comment">//3、创建一个名为bookInfos的List集合，用于存储查询结果。</span></span><br><span class="line"><span class="comment">//4、调用bookInfoMapper对象的selectList()方法，该方法用于执行查询操作，查询符合指定条件的BookInfo记录，并将查询结果存储在bookInfos集合中。</span></span><br><span class="line"><span class="comment">//5、最终得到一个名为bookInfos的List集合，其中包含了数据库中所有ID值在bookIds列表中的BookInfo记录。</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 根据小说ID列表查询相关的小说信息列表</span></span><br><span class="line">            QueryWrapper&lt;BookInfo&gt; bookInfoQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">            bookInfoQueryWrapper.in(DatabaseConsts.CommonColumnEnum.ID.getName(), bookIds);</span><br><span class="line">            List&lt;BookInfo&gt; bookInfos = bookInfoMapper.selectList(bookInfoQueryWrapper);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//这段代码的功能是将查询出来的BookInfo记录与给定的HomeBook集合进行关联，并将结果组成一个名为bookRespDto的List集合返回。</span></span><br><span class="line"><span class="comment">//代码的执行过程如下：</span></span><br><span class="line"><span class="comment">//1、判断查询结果bookInfos是否为空，如果为空，则直接返回一个空的List集合。</span></span><br><span class="line"><span class="comment">//2、如果bookInfos不为空，则将查询结果转换为一个Map集合bookInfoMap，以BookInfo记录的id作为key，BookInfo对象本身作为value，使用Java 8中的Stream流对查询结果进行处理，调用collect()方法和toMap()方法实现转换。</span></span><br><span class="line"><span class="comment">//3、使用Java 8中的Stream流和Lambda表达式对给定的HomeBook集合进行处理，调用map()方法将每个HomeBook对象映射为一个HomeBookRespDto对象，其中的属性值从关联的BookInfo对象中获取。</span></span><br><span class="line"><span class="comment">//4、使用Map集合bookInfoMap中的get()方法获取每个HomeBook对象关联的BookInfo对象，然后将获取到的属性值设置到HomeBookRespDto对象中，最终得到一个名为bookRespDto的List集合。</span></span><br><span class="line"><span class="comment">//5、返回名为bookRespDto的List集合，其中包含了与HomeBook集合关联的BookInfo记录的属性信息。</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 组装 HomeBookRespDto 列表数据并返回</span></span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(bookInfos)) &#123;</span><br><span class="line">                Map&lt;Long, BookInfo&gt; bookInfoMap = bookInfos.stream()</span><br><span class="line">                        .collect(Collectors.toMap(BookInfo::getId, Function.identity()));</span><br><span class="line">                <span class="keyword">return</span> homeBooks.stream().map(v -&gt; &#123;</span><br><span class="line">                    <span class="type">BookInfo</span> <span class="variable">bookInfo</span> <span class="operator">=</span> bookInfoMap.get(v.getBookId());</span><br><span class="line">                    <span class="type">HomeBookRespDto</span> <span class="variable">bookRespDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HomeBookRespDto</span>();</span><br><span class="line">                    bookRespDto.setType(v.getType());</span><br><span class="line">                    bookRespDto.setBookId(v.getBookId());</span><br><span class="line">                    bookRespDto.setBookName(bookInfo.getBookName());</span><br><span class="line">                    bookRespDto.setPicUrl(bookInfo.getPicUrl());</span><br><span class="line">                    bookRespDto.setAuthorName(bookInfo.getAuthorName());</span><br><span class="line">                    bookRespDto.setBookDesc(bookInfo.getBookDesc());</span><br><span class="line">                    <span class="keyword">return</span> bookRespDto;</span><br><span class="line">                &#125;).toList();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="衍生QueryWrapper的知识点"><a href="#衍生QueryWrapper的知识点" class="headerlink" title="衍生QueryWrapper的知识点"></a>衍生QueryWrapper的知识点</h6><p>orderByAsc：实现递增排序</p><p>orderByDesc：实现递减排序</p><h6 id="衍生BaseMapper接口CRUD的知识点"><a href="#衍生BaseMapper接口CRUD的知识点" class="headerlink" title="衍生BaseMapper接口CRUD的知识点"></a>衍生BaseMapper接口CRUD的知识点</h6><p>引入：extends<code> </code>BaseMapper<UserBean></p><p>selectlist:根据 entity 条件，查询全部记录<br>selectOne:根据 entity 条件，查询一条记录</p><h6 id="衍生Service接口CRUD"><a href="#衍生Service接口CRUD" class="headerlink" title="衍生Service接口CRUD"></a>衍生Service接口CRUD</h6><p>引入implements<code> </code>IService<T>（T：实体层）</p><h6 id="衍生的工具类"><a href="#衍生的工具类" class="headerlink" title="衍生的工具类"></a>衍生的工具类</h6><p>CollectionUtils.isEmpty(list): false</p><p>CollectionUtils.isNotEmpty(list): true</p><p>上面的!CollectionUtils.isEmpty(bookInfos)其实相当于第二种，也同时是第一种判断为flase后相反（！）为true</p><h6 id="衍生的final的作用"><a href="#衍生的final的作用" class="headerlink" title="衍生的final的作用"></a>衍生的final的作用</h6><p>在这里将 HomeBookMapper 声明为 final 主要是出于两个原因：<br>    1、线程安全：当我们将一个对象声明为 final 时，它的引用就不能再指向其他对象，也就是说这个对象是不可变的，这可以避免多线程访问时发生冲突。在Spring中，@Autowired 自动注入的属性默认是可变的，将其声明为 final 可以使其不可变，从而提高线程安全性。<br>    2、提高可读性：使用 final 关键字来声明变量，可以让人们更加明确地知道这个变量不会被修改，也可以让编译器进行更多的优化，提高代码的性能。此外，通过将类中的属性声明为 final，可以让读者更容易地看出这个属性是类的“特征”，不会在运行过程中被修改。<br>    总的来说，将 HomeBookMapper 声明为 final 可以提高代码的可读性和线程安全性。</p><h6 id="衍生的stream的知识点："><a href="#衍生的stream的知识点：" class="headerlink" title="衍生的stream的知识点："></a>衍生的stream的知识点：</h6><pre><code> .stream是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。 .stream.map(方法)：其中的方法获取了小说ID，而map是一种键值对存储结构，用于存储一组不重复的键和对应的值，例如此处的ID键和它所对应的值</code></pre><p>​.toList():将数组转化为List</p><h6 id="衍生的Lambda表达式的知识点："><a href="#衍生的Lambda表达式的知识点：" class="headerlink" title="衍生的Lambda表达式的知识点："></a>衍生的Lambda表达式的知识点：</h6><p>Lambda表达式：（方法参数） -&gt;{方法实现}<br>            （单个参数可以省略括号）</p><pre><code>  lambda遍历List集合          集合的遍历，采用lambda表达式会更简洁：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 8之前：</span></span><br><span class="line"><span class="type">List</span> <span class="variable">features</span> <span class="operator">=</span> Arrays.asList(<span class="string">&quot;Lambdas&quot;</span>, <span class="string">&quot;Default Method&quot;</span>, <span class="string">&quot;Stream API&quot;</span>, <span class="string">&quot;Date and Time API&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String feature : features) &#123;</span><br><span class="line">System.out.println(feature);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java 8之后：</span></span><br><span class="line"><span class="type">List</span> <span class="variable">features</span> <span class="operator">=</span> Arrays.asList(<span class="string">&quot;Lambdas&quot;</span>, <span class="string">&quot;Default Method&quot;</span>, <span class="string">&quot;Stream API&quot;</span>, <span class="string">&quot;Date and Time API&quot;</span>);</span><br><span class="line">features.forEach(n -&gt; System.out.println(n));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Java 8的方法引用更方便，方法引用由::双冒号操作符标示，</span></span><br><span class="line">features.forEach(System.out::println);</span><br><span class="line"><span class="comment">//方法引用是使用两个冒号::这个操作符号。</span></span><br></pre></td></tr></table></figure><h6 id="衍生的toMap-BookInfo-getId-Function-identity-解释："><a href="#衍生的toMap-BookInfo-getId-Function-identity-解释：" class="headerlink" title="衍生的toMap(BookInfo::getId, Function.identity())解释："></a>衍生的toMap(BookInfo::getId, Function.identity())解释：</h6><p>​            Function.identity() 是一个静态方法，它返回一个函数，这个函数接收一个参数并返回其自身。也就是说，它返回一个标识函数，将输入对象直接返回，不做任何处理。<br>​在这个例子中，Function.identity() 方法用作 toMap() 方法的第二个参数。toMap() 方法期望一个将键映射到值的函数，所以使用 Function.identity() 将对象自身作为键的映射值。因此，对于一个 BookInfo 对象 bookInfo，bookInfo.getId() 作为键，bookInfo 自身作为值。<br>​简而言之，这里使用 Function.identity() 是为了将 BookInfo 对象本身作为值，方便后续从 Map 中获取对象并使用其属性。</p><p>stream流（List<Long> bookIds &#x3D; homeBooks.stream()）\</p><p>在 Java8 之前，我们通常是通过 for 循环或者 Iterator 迭代来重新排序合并数据，又或者通过重新定义 Collections.sorts 的 Comparator 方法来实现，这两种方式对于大数据量系统来说，效率并不是很理想。Stream 的<strong>聚合操作</strong>与数据库 SQL 的聚合操作 sorted、filter、map 等类似。我们在应用层就可以高效地实现类似数据库 SQL 的 聚合操作了，而在数据操作方面，Stream 不仅可以通过串行的方式实现数据操作，还可以<strong>通过并行的方式处理大批量数据，提高数据 的处理效率</strong></p><h6 id="总结的方法："><a href="#总结的方法：" class="headerlink" title="总结的方法："></a>总结的方法：</h6><p>1、List类型的数据库查找方法</p><p>主要是return部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;BookInfoRespDto&gt; <span class="title function_">listHomeCategory</span><span class="params">()</span> &#123;</span><br><span class="line">        QueryWrapper&lt;BookInfo&gt;CategoryQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> bookInfoMapper.selectList(CategoryQueryWrapper).stream()</span><br><span class="line">                .map(v -&gt; BookInfoRespDto.builder()</span><br><span class="line">                        .id(v.getId())</span><br><span class="line">                        .categoryId(v.getCategoryId())</span><br><span class="line">                        .categoryName(v.getCategoryName())</span><br><span class="line">                        .bookDesc(v.getBookDesc())</span><br><span class="line">                        .bookName(v.getBookName())</span><br><span class="line">                        .build()).toList();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2、Dto类型的数据库查找方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BookChapterRespDto <span class="title function_">getChapter</span><span class="params">(Long chapterId)</span>&#123;</span><br><span class="line">        QueryWrapper&lt;BookChapter&gt;chapterQueryWrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        chapterQueryWrapper.eq(<span class="string">&quot;id&quot;</span>, chapterId);</span><br><span class="line">        <span class="type">BookChapter</span> <span class="variable">bookChapter</span> <span class="operator">=</span> bookChapterMapper.selectOne(chapterQueryWrapper);</span><br><span class="line">        <span class="keyword">return</span> BookChapterRespDto.builder()</span><br><span class="line">            <span class="comment">//.BookChapterRespDto的属性(bookChapter的get方法)，这样就把筛选过的数据存入Dto中</span></span><br><span class="line">                .id(chapterId)</span><br><span class="line">                .bookId(bookChapter.getBookId())</span><br><span class="line">                .chapterNum(bookChapter.getChapterNum())</span><br><span class="line">                .chapterName(bookChapter.getChapterName())</span><br><span class="line">                .chapterWordCount(bookChapter.getWordCount())</span><br><span class="line">                .chapterUpdateTime(bookChapter.getUpdateTime())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(ApiRouterConsts.API_FRONT_HOME_URL_PREFIX)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//final的作用：同impl层</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeBookMapper homeBookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookInfoMapper bookInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeService homeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;books&quot;)</span></span><br><span class="line">    <span class="comment">//因为前端axios作检验的时候要看code，所以这里必须要用通用返回类RestResp&lt;T&gt;</span></span><br><span class="line">    <span class="keyword">public</span> RestResp&lt;List&lt;HomeBookRespDto&gt;&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//这里使用了通用返回类RestResp的方法RestResp&lt;T&gt;（T data）</span></span><br><span class="line">        <span class="keyword">return</span> RestResp.ok(homeService.listHomeBooks());</span><br><span class="line">        <span class="comment">//直接这么写会报错，刚好点击报错，就可以直接帮你在service层写出这个方法，算小技巧吧，同样，直接这么在service层创建也会报错，同样的方式，会帮你在serviceIpl层创建好方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="core层编写"><a href="#core层编写" class="headerlink" title="core层编写"></a>core层编写</h3><h4 id="config层"><a href="#config层" class="headerlink" title="config层"></a>config层</h4><h5 id="MybatisPlusConfig"><a href="#MybatisPlusConfig" class="headerlink" title="MybatisPlusConfig"></a><strong>MybatisPlusConfig</strong></h5><p>卡了我两个下午QAQ</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 兼容 mybatis-plus 3.5.1</span></span><br><span class="line"><span class="comment"> * mybatis-plus 的 MybatisSqlSessionFactoryBean 中使用到了这个异常</span></span><br><span class="line"><span class="comment"> * Spring 6 开始移除了该异常</span></span><br><span class="line"><span class="comment"> *mybatis puls的坑：使用mybatis-plus时不能使用自带的SqlSessionFactory，要使用</span></span><br><span class="line"><span class="comment"> *MybatisSqlSessionFactory，在配置类中加入如下配置（springboot）</span></span><br><span class="line"><span class="comment"> *啊啊啊啊啊啊啊卡我两个下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(&quot;db1SqlSessionFactory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">db1SqlSessionFactory</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使用 mybatis plus 配置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">MybatisSqlSessionFactoryBean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisSqlSessionFactoryBean</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;dataSourceLyz&quot;</span>+dataSource.toString());</span><br><span class="line">        b1.setDataSource(dataSource);</span><br><span class="line">        b1.setMapperLocations(<span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>().getResources(<span class="string">&quot;classpath:mapper/*.xml&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> b1.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CorsProperties"><a href="#CorsProperties" class="headerlink" title="CorsProperties"></a>CorsProperties</h5><p>解决跨域问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;novel.cors&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">CorsProperties</span><span class="params">(List&lt;String&gt; allowOrigins)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CorsConfig"><a href="#CorsConfig" class="headerlink" title="CorsConfig"></a>CorsConfig</h5><p>解决跨域问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(CorsProperties.class)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CorsProperties corsProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">// 允许的域,不要写*，否则cookie就无法使用了</span></span><br><span class="line">        <span class="keyword">for</span> (String allowOrigin : corsProperties.allowOrigins()) &#123;</span><br><span class="line">            config.addAllowedOrigin(allowOrigin);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 允许的头信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 允许的请求方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 是否允许携带Cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">configurationSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        <span class="comment">// 添加映射路径，拦截一切请求</span></span><br><span class="line">        configurationSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(configurationSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="common层"><a href="#common层" class="headerlink" title="common层"></a>common层</h3><h4 id="comstant层（通用常量层）"><a href="#comstant层（通用常量层）" class="headerlink" title="comstant层（通用常量层）"></a>comstant层（通用常量层）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="comment">//提供类的全参构造，减少了@Autowired的书写</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="comment">//enum:通常用于常量类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ErrorCodeEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正确执行后的返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    OK(<span class="string">&quot;00000&quot;</span>, <span class="string">&quot;一切 ok&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一级宏观错误码，用户端错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_ERROR(<span class="string">&quot;A0001&quot;</span>, <span class="string">&quot;用户端错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二级宏观错误码，用户注册错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REGISTER_ERROR(<span class="string">&quot;A0100&quot;</span>, <span class="string">&quot;用户注册错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户未同意隐私协议</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_NO_AGREE_PRIVATE_ERROR(<span class="string">&quot;A0101&quot;</span>, <span class="string">&quot;用户未同意隐私协议&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册国家或地区受限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REGISTER_AREA_LIMIT_ERROR(<span class="string">&quot;A0102&quot;</span>, <span class="string">&quot;注册国家或地区受限&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户验证码错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_VERIFY_CODE_ERROR(<span class="string">&quot;A0240&quot;</span>, <span class="string">&quot;用户验证码错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名已存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_NAME_EXIST(<span class="string">&quot;A0111&quot;</span>, <span class="string">&quot;用户名已存在&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户账号不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_ACCOUNT_NOT_EXIST(<span class="string">&quot;A0201&quot;</span>, <span class="string">&quot;用户账号不存在&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户密码错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_PASSWORD_ERROR(<span class="string">&quot;A0210&quot;</span>, <span class="string">&quot;用户密码错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二级宏观错误码，用户请求参数错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REQUEST_PARAM_ERROR(<span class="string">&quot;A0400&quot;</span>, <span class="string">&quot;用户请求参数错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录已过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_LOGIN_EXPIRED(<span class="string">&quot;A0230&quot;</span>, <span class="string">&quot;用户登录已过期&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问未授权</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_UN_AUTH(<span class="string">&quot;A0301&quot;</span>, <span class="string">&quot;访问未授权&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户请求服务异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REQ_EXCEPTION(<span class="string">&quot;A0500&quot;</span>, <span class="string">&quot;用户请求服务异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求超出限制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REQ_MANY(<span class="string">&quot;A0501&quot;</span>, <span class="string">&quot;请求超出限制&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户评论异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_COMMENT(<span class="string">&quot;A2000&quot;</span>, <span class="string">&quot;用户评论异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户评论异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_COMMENTED(<span class="string">&quot;A2001&quot;</span>, <span class="string">&quot;用户已发表评论&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作家发布异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AUTHOR_PUBLISH(<span class="string">&quot;A3000&quot;</span>, <span class="string">&quot;作家发布异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小说名已存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AUTHOR_BOOK_NAME_EXIST(<span class="string">&quot;A3001&quot;</span>, <span class="string">&quot;小说名已存在&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户上传文件异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_UPLOAD_FILE_ERROR(<span class="string">&quot;A0700&quot;</span>, <span class="string">&quot;用户上传文件异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户上传文件类型不匹配</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_UPLOAD_FILE_TYPE_NOT_MATCH(<span class="string">&quot;A0701&quot;</span>, <span class="string">&quot;用户上传文件类型不匹配&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一级宏观错误码，系统执行出错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SYSTEM_ERROR(<span class="string">&quot;B0001&quot;</span>, <span class="string">&quot;系统执行出错&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二级宏观错误码，系统执行超时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SYSTEM_TIMEOUT_ERROR(<span class="string">&quot;B0100&quot;</span>, <span class="string">&quot;系统执行超时&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一级宏观错误码，调用第三方服务出错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    THIRD_SERVICE_ERROR(<span class="string">&quot;C0001&quot;</span>, <span class="string">&quot;调用第三方服务出错&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一级宏观错误码，中间件服务出错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MIDDLEWARE_SERVICE_ERROR(<span class="string">&quot;C0100&quot;</span>, <span class="string">&quot;中间件服务出错&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中文描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="resp层"><a href="#resp层" class="headerlink" title="resp层"></a>resp层</h4><p>Http Rest 响应工具及数据格式封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestResp</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;错误码，00000-没有错误&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;响应消息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;响应数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = ErrorCodeEnum.OK.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = ErrorCodeEnum.OK.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">(ErrorCodeEnum errorCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = errorCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = errorCode.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理成功,无数据返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理成功，有数据返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RestResp&lt;T&gt; <span class="title function_">ok</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">fail</span><span class="params">(ErrorCodeEnum errorCode)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(errorCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(ErrorCodeEnum.SYSTEM_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(<span class="built_in">this</span>.code, ErrorCodeEnum.OK.getCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="req层"><a href="#req层" class="headerlink" title="req层"></a>req层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestResp</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ErrorCodeEnum为常量层下的类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = ErrorCodeEnum.OK.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = ErrorCodeEnum.OK.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">(ErrorCodeEnum errorCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = errorCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = errorCode.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理成功,无数据返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理成功，有数据返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RestResp&lt;T&gt; <span class="title function_">ok</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">fail</span><span class="params">(ErrorCodeEnum errorCode)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(errorCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(ErrorCodeEnum.SYSTEM_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(<span class="built_in">this</span>.code, ErrorCodeEnum.OK.getCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//mapper包扫描</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.tec.vuepractice.dao.mapper&quot;)</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VuePracticeApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(VuePracticeApplication.class, args);</span><br><span class="line">        log.info(<span class="string">&quot;项目启动成功！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/posts/f8e09374.html"/>
      <url>/posts/f8e09374.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="Vuecil脚手架安装"><a href="#Vuecil脚手架安装" class="headerlink" title="Vuecil脚手架安装"></a>Vuecil脚手架安装</h3><p>依次安装Node.js、Vue、Vuecli</p><p>安装脚手架</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install -g <span class="variable">@vue</span>/cli</span><br></pre></td></tr></table></figure><p>检查版本</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vue</span> --version</span><br></pre></td></tr></table></figure><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vue</span> create hello-world</span><br></pre></td></tr></table></figure><h3 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vue</span> ui</span><br></pre></td></tr></table></figure><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/image-20221216142020026.png" alt="image-20221216142020026"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── node_modules </span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico: 页签图标</span><br><span class="line">│   └── index.html: 主页面</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets: 存放静态资源</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   │── component: 存放组件</span><br><span class="line">│   │   └── HelloWorld.vue</span><br><span class="line">│   │── App.vue: 汇总所有组件</span><br><span class="line">│   │── main.js: 入口文件</span><br><span class="line">├── .gitignore: git版本管制忽略的配置</span><br><span class="line">├── babel.config.js: babel的配置文件</span><br><span class="line">├── package.json: 应用包配置文件 </span><br><span class="line">├── README.md: 应用描述文件</span><br><span class="line">├── package-lock.json：包版本控制文件</span><br></pre></td></tr></table></figure><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>Vue为只有一个index.html作为单页面，会用路由实现多页面的跳转，路由则将路径和页面进行映射</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(53).png" alt="屏幕截图(53)"></p><p>路由：router包下面写index.js文件并附上path和name(<strong>注意！！！path: ‘&#x2F;‘也就代表了网页的第一个页面是什么</strong>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomeView</span> <span class="keyword">from</span> <span class="string">&#x27;../views/HomeView.vue&#x27;</span><span class="comment">/* 1、引入AboutView.vue，一般不使用这种 */</span> </span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeView</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">    <span class="comment">// route level code-splitting</span></span><br><span class="line">    <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">    <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="comment">/* 2、引入AboutView.vue，一般建议使用这种 */</span> <span class="string">&#x27;../views/AboutView.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>路由在组件中的使用：<router-link to></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;router-link :to=&quot;&#123; name: &#x27;home&#x27; &#125;&quot;&gt;首页&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">  &lt;router-link :to=&quot;&#123; name: &#x27;bookclass&#x27; &#125;&quot;&gt; 全部作品 &lt;/router-link&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;router-link :to=&quot;&#123; name: &#x27;bookRank&#x27; &#125;&quot;&gt;排行榜&lt;/router-link&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>当你点击 <code>&lt;router-link&gt;</code> 时， <code>router.push</code> 方法会在内部调用，所以说，点击<code>&lt;router-link :to=&quot;...&quot;&gt;</code> 等同于调用 <code>router.push(...)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 字符串</span><br><span class="line">router.push(&#x27;home&#x27;)</span><br><span class="line"> </span><br><span class="line">// 对象</span><br><span class="line">this.$router.push(&#123;path: &#x27;/login?url=&#x27; + this.$route.path&#125;);</span><br><span class="line"> </span><br><span class="line">// 命名的路由</span><br><span class="line">router.push(&#123; name: &#x27;user&#x27;, params: &#123; userId: 123 &#125;&#125;)</span><br></pre></td></tr></table></figure><p>路由在父组件App.vue的<router-view></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default  &#123;</span><br><span class="line">  name:  &#x27;App&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在views包下写主要页面，再在如Home.vue里引入components(当然组件自己也可以引用自己)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">    &lt;Top /&gt;</span><br><span class="line">    &lt;Navbar /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>引用组件时要记得注册组件,并引入文件位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import Navbar from &quot;@/components/common/Navbar&quot;;</span><br><span class="line">import Top from &quot;@/components/common/Top&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Header&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Navbar,</span><br><span class="line">    Top,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Css的引入"><a href="#Css的引入" class="headerlink" title="Css的引入"></a>Css的引入</h3><p>在assets包（静态资源管理包）下建立css包并命名global.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后在main.js中引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/assets/css/global.css&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>Axios 是一个基于 <em><a href="https://javascript.info/promise-basics">promise</a></em> 网络请求库,这不是一种新技术，本质上还是对原生XMLHttpRequest的封装,用来实现Ajax(异步网络请求。Ajax能够让页面无刷新的请求数据，由来是浏览器页面在向服务器请求数据时，因为返回的是整个页面的数据，页面都会强制刷新一下，这对于用户来讲并不是很友好。并且我们只是需要修改页面的部分数据，但是从服务器端发送的却是整个页面的数据，十分消耗网络资源。而我们只是需要修改页面的部分数据，也希望不刷新页面，因此异步网络请求就应运而生。)</p><p>安装</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install axios</span><br></pre></td></tr></table></figure><p>最基础需要写比较长的配置来使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">&lt;!-- 方法一 --&gt;   </span><br><span class="line">axios(&#123;</span><br><span class="line">            method:&quot;get&quot;,</span><br><span class="line">            url:&quot;https://www.baidu.com&quot;，</span><br><span class="line">            data:user_id=7</span><br><span class="line">        &#125;).then(res =&gt; &#123;</span><br><span class="line">            console.log(res.data);</span><br><span class="line">        &#125;)</span><br><span class="line">&lt;!-- 方法二 --&gt; </span><br><span class="line">axios.get(&quot;https://www.baidu.com&quot;).then(res =&gt; &#123;</span><br><span class="line">            this.obj= res.data[0];</span><br><span class="line">            console.log(res.data);</span><br><span class="line">        &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/axios-1.png" alt="axios-1"></p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/axios-2.png" alt="axios-2"></p><p>也可以全局注册后使用（这里不展开）</p><p>但是一般在请求数量增多时会需要来进行封装axios来简化开发</p><p>在utils下创建request.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken, removeToken, removeNickName, setToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API_URL</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">10000</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">withCredentials</span> = <span class="literal">true</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>[<span class="string">&#x27;X-Requested-With&#x27;</span>] = <span class="string">&#x27;XMLHttpRequest&#x27;</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="title function_">getToken</span>()</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> res.<span class="property">data</span> !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;服务端异常！&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> != <span class="string">&quot;00000&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">message</span>) &#123;</span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">message</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 登录已过期</span></span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> == <span class="string">&#x27;A0230&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 移除 token </span></span><br><span class="line">            <span class="title function_">removeToken</span>();</span><br><span class="line">            <span class="title function_">removeNickName</span>();</span><br><span class="line">            router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;网络异常！&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure><p>在main.js中注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;./util/axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(store)</span><br><span class="line">   .<span class="title function_">use</span>(router)</span><br><span class="line">   .<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$axios</span> = axios;</span><br></pre></td></tr></table></figure><p>封装api在api包下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;../utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">listHomeBooks</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">get</span>(<span class="string">&#x27;/front/home/books&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//动态传入用$&#123;bookId&#125;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getBookById</span>(<span class="params">bookId</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">get</span>(<span class="string">`/front/book/<span class="subst">$&#123;bookId&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在vue的生命周期函数里调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">&lt;!--导入--&gt;    </span><br><span class="line">import &#123; reactive, toRefs, onMounted &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useRouter, useRoute &#125; from &quot;vue-router&quot;;</span><br><span class="line">import &#123; listHomeBooks &#125; from &quot;@/api/home&quot;;</span><br><span class="line">&lt;!--注册组件--&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;home&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Header,</span><br><span class="line">    LatestNews,</span><br><span class="line">    FriendLink,</span><br><span class="line">    BookVisitRank,</span><br><span class="line">    BookNewestRank,</span><br><span class="line">    BookUpdateRank,</span><br><span class="line">    Footer,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">&lt;!--route是一个跳转的路由对象，每一个路由都会有一个route对象，是一个局部的对象，可以获取对应的name,path,params,query等：--&gt;</span><br><span class="line">    const route = useRoute();</span><br><span class="line">&lt;!--router是VueRouter的一个对象，通过Vue.use(VueRouter)和VueRouter构造函数得到一个router的实例对象，这个对象中是一个全局的对象，包含了所有的路由包含了许多关键的对象和属性。例如history对象$router.push(&#123;path:’/path’&#125;); 本质是向history栈中添加一个路由，在我们看来是 切换路由，但本质是在添加一个history记录--&gt;</span><br><span class="line">    const router = useRouter();</span><br><span class="line">&lt;!--reactive（）函数接收一个普通对象，返回一个响应式的数据对象。访问： state.参数名--&gt;</span><br><span class="line">    const state = reactive(&#123;</span><br><span class="line">      // 轮播图</span><br><span class="line">      sliderContent: [],</span><br><span class="line">      // 顶部栏</span><br><span class="line">      topBooks1: [],</span><br><span class="line">      //本周强推</span><br><span class="line">      weekcommend: [],</span><br><span class="line">      // 热门推荐</span><br><span class="line">      hotRecommend: [],</span><br><span class="line">      // 精品推荐</span><br><span class="line">      goodRecommend: [],</span><br><span class="line">      imgBaseUrl: process.env.VUE_APP_BASE_IMG_URL,</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;!--生命周期函数--&gt;</span><br><span class="line">    onMounted(async () =&gt; &#123;</span><br><span class="line">      const loadingInstance = ElLoading.service(&#123;</span><br><span class="line">        target: &quot;#topBooks2&quot;,</span><br><span class="line">        text: &quot;加载中。。。&quot;,</span><br><span class="line">      &#125;);</span><br><span class="line">&lt;!--等待listHomeBooks()方法传来数据给data--&gt;</span><br><span class="line">      const &#123; data &#125; = await listHomeBooks();</span><br><span class="line"></span><br><span class="line">&lt;!--可能book和v-for的item相似，属于别名，这段的意思就是从--&gt;</span><br><span class="line">      await data.forEach((book) =&gt; &#123;</span><br><span class="line">        if (book.type == 0) &#123;</span><br><span class="line">          // 轮播图</span><br><span class="line">          state.sliderContent[state.sliderContent.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 1) &#123;</span><br><span class="line">          // 顶部栏</span><br><span class="line">          state.topBooks1[state.topBooks1.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 2) &#123;</span><br><span class="line">          //本周强推</span><br><span class="line">          state.weekcommend[state.weekcommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 3) &#123;</span><br><span class="line">          //热门推荐</span><br><span class="line">          state.hotRecommend[state.hotRecommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 4) &#123;</span><br><span class="line">          //精品推荐</span><br><span class="line">          state.goodRecommend[state.goodRecommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">        </span><br><span class="line">&lt;!--push就是在浏览器的历史记录中追加一个新的记录，你可以通过window.history看到这个记录。而replace则是将当前的路由记录替换掉，替换后你如果回退，会发现上一个路由地址已经消失了。此处是点击链接后触发的方法，将跳转到小说的详情页--&gt;</span><br><span class="line">    const bookDetail = (bookId) =&gt; &#123;</span><br><span class="line">      router.push(&#123; path: `/book/$&#123;bookId&#125;` &#125;);</span><br><span class="line">    &#125;；</span><br><span class="line">&lt;!--toRefs将一个响应式对象，转换为普通对象，并且将其中的属性转换为 Ref 对象，与reactive搭配使用，reactive将数据变成响应式数据，当数据发生变化时state也会自动更新--&gt;        </span><br><span class="line">    return &#123;</span><br><span class="line">      ...toRefs(state),</span><br><span class="line">      bookDetail,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue3与Vue2的不同"><a href="#Vue3与Vue2的不同" class="headerlink" title="Vue3与Vue2的不同"></a>Vue3与Vue2的不同</h2><h3 id="Vite脚手架的安装"><a href="#Vite脚手架的安装" class="headerlink" title="Vite脚手架的安装"></a>Vite脚手架的安装</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line"><span class="attribute">npm</span> init vite-app vue3_test-vite</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line">cd vue3_test-vite</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="分析文件目录"><a href="#分析文件目录" class="headerlink" title="分析文件目录"></a>分析文件目录</h3><h4 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h4><p>Vue2项目的main.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  render: h =&gt; h(App),</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><p>我们再来看看Vue3项目中的main.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">createApp(App).mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><p>分析一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 引入的不再是Vue构造函数了，引入的是一个名为createApp的工厂函数</span><br><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">// 创建应用实例对象——app(类似于之前Vue2中的vm，但app比vm更“轻”)</span><br><span class="line">const app = createApp(App)</span><br><span class="line">console.log(app)</span><br><span class="line">// 挂载</span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><h4 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h4><p>我们再来看看组件</p><p>在<code>template</code>标签里可以没有根标签了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- Vue3组件中的模板结构可以没有根标签 --&gt;</span><br><span class="line">&lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot;&gt;</span><br><span class="line">&lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="setup函数"><a href="#setup函数" class="headerlink" title="setup函数"></a>setup函数</h3><p>代替了Vue2的data（）以及method</p><h2 id="vue基础"><a href="#vue基础" class="headerlink" title="vue基础"></a>vue基础</h2><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p><strong>一、ref函数的引入</strong></p><p>　　import { ref } from ‘vue’</p><p><strong>二、什么是 ref</strong></p><p>​1、ref 和 reactive 一样都是实现响应式数据的方法</p><p>​2、由于 reactive 必须传递一个对象，所以导致我们再企业开发中，如果我们只想让某个变量实现响应式的时候非常麻烦，所以 Vue3 就提供了 ref 方法，实现对简单值的监听</p><p><strong>三、ref 的本质</strong></p><p>​<strong>const input &#x3D; ref(‘’)</strong></p><p>　　ref 底层的本质还是 reactive 系统会自动根据我们给 ref 传入的值将他转换成 ref(xx) —— reactive({value: xx})</p><p><strong>四、ref 注意点</strong></p><p>　1、在 VUE 的模板中使用 ref 的值不需要通过 value 获取 （Vue 会通过自动给 ref 的值加上 .value）</p><p>　2、在 js 中使用 ref 的值必须使用 .value 获取’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;uni-popup ref=&quot;popup&quot; type=&quot;dialog&quot;&gt;</span><br><span class="line">        &lt;!--mode=&quot;base&quot;为对话框加两个按钮的形式--&gt;</span><br><span class="line">        &lt;uni-popup-dialog mode=&quot;base&quot; title=&quot;确定要放弃吗?&quot; content=&quot;本次计时将不会得到任何分数&quot; :duration=&quot;2000&quot; :before-close=&quot;true&quot;</span><br><span class="line">            @close=&quot;close&quot; @confirm=&quot;confirm&quot;&gt;&lt;/uni-popup-dialog&gt;</span><br><span class="line">    &lt;/uni-popup&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    </span><br><span class="line">let popup = ref(null); //记着赋初值，本质是reactive(&#123;value:null&#125;)</span><br><span class="line"></span><br><span class="line">const timeEnd = () =&gt; &#123;</span><br><span class="line">popup.value.open() //记得.value然后调用函数</span><br><span class="line">&#125;</span><br><span class="line">const confirm = () =&gt; &#123;</span><br><span class="line">popup.value.close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const close = () =&gt; &#123;</span><br><span class="line">popup.value.close()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p><strong>在v-for中使用字符串</strong></p><p>string：data中的源数据字符串，</p><p>str：data数据string字符串的每一个，</p><p>index：string字符串索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 这里表示被vue控制的区域 --&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;(str, index) in string&quot;&gt;</span><br><span class="line">            &#123;&#123; index &#125;&#125;---&#123;&#123; str &#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#app&#x27;, // 控制id为app的元素</span><br><span class="line">        data: &#123;</span><br><span class="line">            // 存放所需要的数据</span><br><span class="line">            string: &#x27;abcdefgh&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/v-for.png"></p><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;sliderContent&quot;&gt;</span><br><span class="line">          &lt;dl class=&quot;scBigImg&quot; id=&quot;carouseBig&quot;&gt;</span><br><span class="line">            &lt;dd v-for=&quot;(item, index) in sliderContent&quot; :key=&quot;index&quot; :class=&quot;&#123; on: index == 0 &#125;&quot;&gt;</span><br><span class="line">                &lt;!-- 点击触发bookDetail函数，传入sliderContent.bookid,并在最后使用push来跳转到小说的详情页 --&gt;</span><br><span class="line">              &lt;a href=&quot;javascript:void(0)&quot; @click=&quot;bookDetail(item.bookId)&quot;&gt;</span><br><span class="line">                &lt;img :src=&quot;`$&#123;imgBaseUrl&#125;` + `$&#123;item.picUrl&#125;`&quot; :alt=&quot;item.bookName&quot;</span><br><span class="line">                  onerror=&quot;this.src=&#x27;default.gif&#x27;;this.onerror=null&quot; /&gt;</span><br><span class="line">              &lt;/a&gt;</span><br><span class="line">            &lt;/dd&gt;</span><br><span class="line">          &lt;/dl&gt;</span><br><span class="line">    &lt;/div&gt;    </span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>其中</p><p>sliderContent：data中的源数据数组（会从数据库中获得），</p><p>item：data数据list数组的别名，</p><p>index：list数组索引,即为数据数字的多少</p><h3 id="函数传入数据："><a href="#函数传入数据：" class="headerlink" title="函数传入数据："></a>函数传入数据：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//targetNoTimeDelete(index)来传入数据index,方便下面接收</span><br><span class="line">&lt;view class=&quot;targetMenuDetailD&quot; v-for=&quot;(item, index) in state.targetNoTime&quot; :key=&quot;index&quot;</span><br><span class="line">@click=&quot;targetNoTimeDelete(index)&quot;&gt;</span><br><span class="line">&lt;text&gt;&#123;&#123;item.targetName&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;view class=&quot;targetMenuDetailDI&quot;&gt;</span><br><span class="line">&lt;img src=&quot;@\static\coin.svg&quot; style=&quot;width: 34rpx;height:34rpx;&quot;&gt;</span><br><span class="line">&lt;text&gt;X&#123;&#123;item.targetPoint&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;text&gt;任意时间&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    //记忆一下书写方式</span><br><span class="line">const targetNoTimeDelete = (index) =&gt; &#123;</span><br><span class="line">uni.request(&#123;</span><br><span class="line">url: &#x27;http://localhost:8181/target/delete&#x27;,</span><br><span class="line">method: &quot;POST&quot;,</span><br><span class="line">data: &#123;</span><br><span class="line">targetName: state.targetWithTime[index].targetName,</span><br><span class="line">ifPoints: 1,</span><br><span class="line">&#125;,</span><br><span class="line">success: (res) =&gt; &#123;</span><br><span class="line">console.log(res)</span><br><span class="line">// 从targetWithTime数组中移除已删除的目标数据</span><br><span class="line">state.targetWithTime.splice(index, 1);</span><br><span class="line">user.data.point = res.data.data.targetPoint</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="route-params-categoryId的用法"><a href="#route-params-categoryId的用法" class="headerlink" title="route.params.categoryId的用法"></a>route.params.categoryId的用法</h3><p>route.params.url参数</p><p>url参数来自于:categoryId(要求与该变量完全一致，卡了半小时QAQ)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/:categoryId&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;bookcategory&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/BookCategory&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>正式使用：</p><p>在onMounted生命周期函数里，就用变量来接，之后要记得放进带参数的变量里，还是要求id参数一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive, toRefs, onMounted &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useRouter, useRoute &#125; from &quot;vue-router&quot;;</span><br><span class="line">import &#123; listHomeCategoryId &#125; from &quot;@/api/home&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;home&quot;,</span><br><span class="line">    setup() &#123;</span><br><span class="line">        const route = useRoute();</span><br><span class="line">        const router = useRouter();</span><br><span class="line">        const state = reactive(&#123;</span><br><span class="line">            // 分类推荐</span><br><span class="line">            catagorycommendId: [],</span><br><span class="line">        &#125;);</span><br><span class="line">        onMounted(async () =&gt; &#123;</span><br><span class="line">            const categoryId = route.params.categoryId-2;</span><br><span class="line">            dataCategoryId(categoryId);</span><br><span class="line">        &#125;);</span><br><span class="line">        const dataCategoryId = async (categoryId) =&gt; &#123;</span><br><span class="line">            const &#123; data &#125; = await listHomeCategoryId(categoryId);</span><br><span class="line">            await data.forEach((book) =&gt; &#123;</span><br><span class="line">                &#123;</span><br><span class="line">                    //历史推荐</span><br><span class="line">                    state.catagorycommendId[state.catagorycommendId.length] = book;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        return &#123;</span><br><span class="line">            ...toRefs(state),</span><br><span class="line">            dataCategoryId,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>组件是.vue的单文件组件，实现代码复用，以及理顺css以及js之间的关系，可以用script setup这样就可以在引入之后自动注册组件</p><h3 id="选项式api"><a href="#选项式api" class="headerlink" title="选项式api"></a>选项式api</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    //js对象</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;targetMenu&quot;,</span><br><span class="line">        //实例对象的属性</span><br><span class="line">data() &#123;</span><br><span class="line">            //返回出去的才是响应式数据</span><br><span class="line">return &#123;</span><br><span class="line">showFocusAfter: true,</span><br><span class="line">showTargetAfter: false,</span><br><span class="line">showTargetBefore: true,</span><br><span class="line">showFocusBefore: false,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">        //实例对象的方法</span><br><span class="line">methods() &#123;</span><br><span class="line">const menuItems = this.$route.meta.menuItems || []</span><br><span class="line">if (menuItems.includes(&#x27;target&#x27;)) &#123;</span><br><span class="line">this.showFocusAfter = false;</span><br><span class="line">this.showTargetBefore = false;</span><br><span class="line">this.showTargetAfter = true;</span><br><span class="line">this.showFocusBefore = true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="组合式api"><a href="#组合式api" class="headerlink" title="组合式api"></a>组合式api</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">//使用setup,可以直接写变量，但是只是普通变量，需要通过const state = reactive(&#123;hotRecommend: [], &#125;);来变成响应式变量，也可以用ref（），可以接收任何值，不止于此对象，把数据转化为&#123;value：0&#125;</span><br><span class="line">import &#123; reactive, toRefs, onMounted &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useRouter, useRoute &#125; from &quot;vue-router&quot;;</span><br><span class="line">import Header from &#x27;@/components/Header&#x27;;</span><br><span class="line">import Footer from &#x27;@/components/Footer&#x27;;</span><br><span class="line">import &#123; listHomeBooks, listHomeCategory,listHomeCategory2,listHomeCategory3,listHomeCategory4 &#125; from &quot;@/api/home&quot;;</span><br><span class="line">import &#123; getBookById, &#125; from &quot;@/api/book&quot;;</span><br><span class="line">import &#123; SetUp &#125; from &#x27;@element-plus/icons-vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;home&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Header,</span><br><span class="line">    Footer,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const route = useRoute();</span><br><span class="line">    const router = useRouter();</span><br><span class="line">    const state = reactive(&#123;</span><br><span class="line">      // 热门推荐</span><br><span class="line">      hotRecommend: [],</span><br><span class="line">      // 精品推荐</span><br><span class="line">      goodRecommend: [],</span><br><span class="line">      // 分类推荐</span><br><span class="line">      catagorycommend: [],</span><br><span class="line">      catagorycommend2: [],</span><br><span class="line">      catagorycommend3: [],</span><br><span class="line">      catagorycommend4: [],</span><br><span class="line">      imgBaseUrl: process.env.VUE_APP_BASE_IMG_URL,</span><br><span class="line">    &#125;);</span><br><span class="line">    onMounted(async () =&gt; &#123;</span><br><span class="line">      const &#123; data &#125; = await listHomeBooks();</span><br><span class="line">      await data.forEach((book) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        if (book.type == 3) &#123;</span><br><span class="line">          //热门推荐</span><br><span class="line">          state.hotRecommend[state.hotRecommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 4) &#123;</span><br><span class="line">          //精品推荐</span><br><span class="line">          state.goodRecommend[state.goodRecommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      dataCategory();</span><br><span class="line">      dataCategory2();</span><br><span class="line">      dataCategory3();</span><br><span class="line">      dataCategory4();</span><br><span class="line">    &#125;);</span><br><span class="line">    const bookDetail = (bookId) =&gt; &#123;</span><br><span class="line">      router.push(&#123; path: `/book/$&#123;bookId&#125;` &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    const dataCategory = async () =&gt; &#123;</span><br><span class="line">      const &#123; data &#125; = await listHomeCategory();</span><br><span class="line">      await data.forEach((book) =&gt; &#123;</span><br><span class="line">        if (book.categoryName == &quot;历史军事&quot;) &#123;</span><br><span class="line">          //历史推荐</span><br><span class="line">          state.catagorycommend[state.catagorycommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    const dataCategory2 = async () =&gt; &#123;</span><br><span class="line">      const &#123; data &#125; = await listHomeCategory2();</span><br><span class="line">      await data.forEach((book) =&gt; &#123;</span><br><span class="line">        if (book.categoryName == &quot;科幻灵异&quot;) &#123;</span><br><span class="line">          //历史推荐</span><br><span class="line">          state.catagorycommend2[state.catagorycommend2.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    const dataCategory3 = async () =&gt; &#123;</span><br><span class="line">      const &#123; data &#125; = await listHomeCategory3();</span><br><span class="line">      await data.forEach((book) =&gt; &#123;</span><br><span class="line">        if (book.categoryName == &quot;都市言情&quot;) &#123;</span><br><span class="line">          //历史推荐</span><br><span class="line">          state.catagorycommend3[state.catagorycommend3.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    const dataCategory4 = async () =&gt; &#123;</span><br><span class="line">      const &#123; data &#125; = await listHomeCategory4();</span><br><span class="line">      await data.forEach((book) =&gt; &#123;</span><br><span class="line">        if (book.categoryName == &quot;玄幻奇幻&quot;) &#123;</span><br><span class="line">          //历史推荐</span><br><span class="line">          state.catagorycommend4[state.catagorycommend4.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      ...toRefs(state),</span><br><span class="line">      bookDetail,</span><br><span class="line">      dataCategory,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>当需要在属性内使用动态数据的时候则需要使用v-bind，标签内则可以直接使用双大括号，可简写为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;img v-bind:src=&quot;imgPath&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">//简写</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;img :src=&quot;imgPath&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="style-scoped"><a href="#style-scoped" class="headerlink" title="style scoped"></a>style scoped</h3><p>这样设置会成为局部样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.menu &#123;</span><br><span class="line">width: 200px;</span><br><span class="line">margin-left: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.menuButton &#123;</span><br><span class="line">margin-top: 50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="style-module"><a href="#style-module" class="headerlink" title="style module"></a>style module</h3><p>css 变成模块，通过：class&#x3D;”$style.box1”使用</p><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>v-on:click简写为@click</p><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>双向绑定</p><p>此处还采用了pinia集中管理状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;LoginInput&quot;&gt;</span><br><span class="line">&lt;text&gt;你的邮箱&lt;/text&gt;</span><br><span class="line">&lt;input v-model=&quot;user.data.userEmail&quot; name=&quot;txtEmail&quot; type=&quot;text&quot;                  id=&quot;txtPassword&quot; placeholder=&quot;请输入邮箱&quot;</span><br><span class="line">class=&quot;LoginInputIn&quot;&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;view class=&quot;LoginP&quot;&gt;</span><br><span class="line">&lt;text&gt;登陆&lt;/text&gt;</span><br><span class="line">&lt;text&gt;将使用&#123;&#123;user.data.userEmail&#125;&#125;登陆&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;</span><br><span class="line">useUserStore</span><br><span class="line">&#125; from &quot;../../store/user&quot;;</span><br><span class="line">const user = useUserStore()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><h3 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h3><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute,useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">HomeR</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">router.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="attr">path</span>: <span class="string">`/Login`</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Route"><a href="#Route" class="headerlink" title="Route"></a>Route</h3><h4 id="引入-1"><a href="#引入-1" class="headerlink" title="引入"></a>引入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute,useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line"><span class="keyword">const</span> id = route.<span class="property">params</span>.<span class="property">id</span>;</span><br></pre></td></tr></table></figure><h3 id="params"><a href="#params" class="headerlink" title="params"></a>params</h3><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>在组合式api和setup语法糖中需要按下面的方式进行定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">navbarTo: &#123;</span><br><span class="line">type: String,</span><br><span class="line">required: true</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="组件传参"><a href="#组件传参" class="headerlink" title="组件传参"></a>组件传参</h3><p>1、组件内定义props</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">navbarTo: &#123;</span><br><span class="line">type: String,</span><br><span class="line">required: true</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2、在需要使用组件的部分进行数据双向绑定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Navbar :navbarTo=&quot;&#x27;/menu/2&#x27;&quot;&gt;&lt;/Navbar&gt;</span><br></pre></td></tr></table></figure><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><p>1、定义参数：router-link :to&#x3D;“params”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;#&quot;&gt;</span><br><span class="line">router-link :to=&quot;props.navbarTo&quot;&gt; </span><br><span class="line">    &lt;img src=&quot;@\assets\Filter.png&quot; alt=&quot;#&quot;&gt;</span><br><span class="line">    &lt;/router-link&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>2、接收参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>();</span><br><span class="line"><span class="keyword">const</span> id = route.<span class="property">params</span>.<span class="property">id</span>;</span><br></pre></td></tr></table></figure><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>1、在需要控制出现与否的标签上加上v-if(注意不需要双向绑定 ：，但是要加上state.)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;FocusAfter v-if=&quot;state.showFocusAfter&quot;&gt;&lt;/FocusAfter&gt;</span><br><span class="line">&lt;TargetBefore v-if=&quot;state.showTargetBefore&quot;&gt;&lt;/TargetBefore&gt;</span><br><span class="line">&lt;FocusBefore v-if=&quot;state.showFocusBefore&quot;&gt;&lt;/FocusBefore&gt;</span><br><span class="line">&lt;TargetAfter v-if=&quot;state.showTargetAfter&quot;&gt;&lt;/TargetAfter&gt;</span><br></pre></td></tr></table></figure><p>2、通过响应式的数据，更改标签出现与否</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>();</span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line"><span class="attr">showFocusAfter</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">showTargetBefore</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">showFocusBefore</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">showTargetAfter</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> id = route.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line"><span class="keyword">if</span> (id == <span class="number">2</span>) &#123;</span><br><span class="line">state.<span class="property">showFocusAfter</span> = <span class="literal">false</span>;</span><br><span class="line">state.<span class="property">showTargetBefore</span> = <span class="literal">false</span>;</span><br><span class="line">state.<span class="property">showFocusBefore</span> = <span class="literal">true</span>;</span><br><span class="line">state.<span class="property">showTargetAfter</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>用于父组件和子组件的数据传递（但是只能用于父组件和子组件）</p><p>父组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;provide&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="attr">provide</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;这是祖先组件提供的消息&#x27;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;inject&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="attr">provide</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;这是祖先组件提供的消息&#x27;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="pinia"><a href="#pinia" class="headerlink" title="pinia"></a>pinia</h3><p>在面对多组件内传参的情况下，可以使用集中的状态管理pinia对应vue2的vuex</p><p>1、创建store文件夹下的js文件进行后续定义</p><p>2、定义状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">defineStore</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;user&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">userEmail</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">userName</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">userPassword</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">userCode</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;),</span><br><span class="line"><span class="attr">actions</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3、在所需要该状态的组件内进行引用和使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">useUserStore</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;../../store/user&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;&#125;)</span><br><span class="line"><span class="keyword">const</span> user = <span class="title function_">useUserStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">data</span>.<span class="property">userEmail</span>)</span><br></pre></td></tr></table></figure><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;view class=&quot;timerWork&quot;&gt;</span></span><br><span class="line"><span class="comment">//&lt;!-- 计时 --&gt;</span></span><br><span class="line"><span class="comment">//&lt;text&gt;&#123;&#123; formattedTime &#125;&#125;&lt;/text&gt;</span></span><br><span class="line"><span class="comment">//&lt;/view&gt;</span></span><br><span class="line"><span class="comment">// 获取格式化后的时间</span></span><br><span class="line"><span class="keyword">const</span> formattedTime = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">state.<span class="property">hours</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(state.<span class="property">remainingTime</span> / <span class="number">3600</span>);</span><br><span class="line">state.<span class="property">minutes</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>((state.<span class="property">remainingTime</span> % <span class="number">3600</span>) / <span class="number">60</span>);</span><br><span class="line">state.<span class="property">seconds</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(state.<span class="property">remainingTime</span> % <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;formatTime(state.hours)&#125;</span>:<span class="subst">$&#123;formatTime(state.minutes)&#125;</span>:<span class="subst">$&#123;formatTime(state.seconds)&#125;</span>`</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="js基础"><a href="#js基础" class="headerlink" title="js基础"></a>js基础</h2><h3 id="时间类函数"><a href="#时间类函数" class="headerlink" title="时间类函数"></a>时间类函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//今天的时间</span></span><br><span class="line"><span class="keyword">let</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="keyword">let</span> myDate = time.<span class="title function_">getDate</span>()</span><br><span class="line"><span class="keyword">let</span> dayNum = time.<span class="title function_">getDay</span>()</span><br><span class="line"><span class="keyword">let</span> myMonth = time.<span class="title function_">getMonth</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化一个date对象</span></span><br><span class="line"><span class="keyword">const</span> selectedDate = <span class="keyword">new</span> <span class="title class_">Date</span>(time.<span class="title function_">getFullYear</span>(), state.<span class="property">dayList</span>[<span class="number">0</span>].<span class="property">month</span>, <span class="number">1</span>);</span><br><span class="line">time = <span class="keyword">new</span> <span class="title class_">Date</span>(selectedDate); <span class="comment">// 创建新的日期对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//时间自增</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">time.<span class="title function_">setDate</span>(time.<span class="title function_">getDate</span>() + <span class="number">1</span>)</span><br><span class="line">state.<span class="property">dayList</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="string">&#x27;day&#x27;</span>: time.<span class="title function_">getDate</span>(),</span><br><span class="line"><span class="string">&#x27;month&#x27;</span>: time.<span class="title function_">getMonth</span>(),</span><br><span class="line"><span class="string">&#x27;week&#x27;</span>: weeks[time.<span class="title function_">getDay</span>()],</span><br><span class="line"><span class="string">&#x27;className&#x27;</span>: <span class="string">&#x27;Num&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置时间</span></span><br><span class="line">time.<span class="title function_">setDate</span>(time.<span class="title function_">getDate</span>() + <span class="number">1</span>)</span><br><span class="line">time.<span class="title function_">setDate</span>(state.<span class="property">dayList</span>[index].<span class="property">day</span>)</span><br><span class="line">time.<span class="title function_">setMonth</span>(state.<span class="property">dayList</span>[index].<span class="property">month</span>)</span><br><span class="line"><span class="comment">//时间差计算</span></span><br><span class="line"><span class="keyword">let</span> currentTime = <span class="keyword">new</span> <span class="title class_">Date</span>(target.<span class="property">data</span>.<span class="property">currentTime</span>)</span><br><span class="line"><span class="keyword">let</span> timeDiff = item.<span class="title function_">getTime</span>() - currentTime.<span class="title function_">getTime</span>()</span><br><span class="line"><span class="keyword">let</span> dayDiff = <span class="title class_">Math</span>.<span class="title function_">floor</span>(timeDiff / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>))</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line"><span class="attr">dayList</span>: []</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line">target.<span class="property">data</span>.<span class="property">deadlineDate</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> currentTime = <span class="keyword">new</span> <span class="title class_">Date</span>(target.<span class="property">data</span>.<span class="property">currentTime</span>)</span><br><span class="line"><span class="keyword">let</span> timeDiff = item.<span class="title function_">getTime</span>() - currentTime.<span class="title function_">getTime</span>()</span><br><span class="line"><span class="keyword">let</span> dayDiff = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(timeDiff / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//增加元素</span></span><br><span class="line">state.<span class="property">dayList</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="string">&#x27;day&#x27;</span>: time.<span class="title function_">getDate</span>(),</span><br><span class="line"><span class="string">&#x27;month&#x27;</span>: time.<span class="title function_">getMonth</span>(),</span><br><span class="line"><span class="string">&#x27;week&#x27;</span>: weeks[time.<span class="title function_">getDay</span>()],</span><br><span class="line"><span class="string">&#x27;className&#x27;</span>: <span class="string">&#x27;Num&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//去除元素</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">targetNoTimeDelete</span> = (<span class="params">index</span>) =&gt; &#123;</span><br><span class="line"><span class="comment">// 从targetWithTime数组中移除已删除的目标数据</span></span><br><span class="line">    <span class="comment">//第index个元素开始，删除1个</span></span><br><span class="line">state.<span class="property">targetWithTime</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拼接为“20：02”</span></span><br><span class="line"><span class="keyword">const</span> hours = item.<span class="title function_">getHours</span>();</span><br><span class="line"><span class="keyword">const</span> minutes = item.<span class="title function_">getMinutes</span>();</span><br><span class="line"><span class="keyword">const</span> timeString = <span class="string">`<span class="subst">$&#123;hours&#125;</span>:<span class="subst">$&#123;minutes.toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拼接为“5.30”</span></span><br><span class="line"><span class="keyword">const</span> month = item.<span class="title function_">getMonth</span>() + <span class="number">1</span>; <span class="comment">// 当前月份</span></span><br><span class="line"><span class="keyword">const</span> date = item.<span class="title function_">getDate</span>(); <span class="comment">// 当前日期</span></span><br><span class="line">dayDiff = <span class="string">`<span class="subst">$&#123;month&#125;</span>.<span class="subst">$&#123;date&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><h3 id="math函数"><a href="#math函数" class="headerlink" title="math函数"></a>math函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Math.floor() 函数总是返回小于等于一个给定数字的最大整数。</span></span><br><span class="line"><span class="keyword">let</span> dayDiff = <span class="title class_">Math</span>.<span class="title function_">floor</span>(timeDiff / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>))</span><br><span class="line"><span class="comment">//Math.ceil() 函数总是四舍五入并返回大于等于给定数字的最小整数。</span></span><br><span class="line"><span class="keyword">let</span> dayDiff = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(timeDiff / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>))</span><br><span class="line"><span class="comment">//Math.trunc() 方法会将数字的小数部分去掉，只保留整数部分。</span></span><br><span class="line"><span class="keyword">let</span> dayDiff = <span class="title class_">Math</span>.<span class="title function_">trunc</span>(timeDiff / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>))</span><br></pre></td></tr></table></figure><h3 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">7</span>)); <span class="comment">// 输出 &quot;world!&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(-<span class="number">6</span>)); <span class="comment">// 输出 &quot;world!&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">7</span>, <span class="number">5</span>)); <span class="comment">// 输出 &quot;world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;text class=&quot;UserProgressDC&quot;&gt;比起上&#123;&#123;state.UserTimeP.substr(-2)&#125;&#125;&lt;/text&gt;</span></span><br></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="数组刷新重复输入问题"><a href="#数组刷新重复输入问题" class="headerlink" title="数组刷新重复输入问题"></a>数组刷新重复输入问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关键在于在函数里给数组赋初值为空，这样每次刷新都会清空数组，方便放入下一组数据</span></span><br><span class="line"><span class="title function_">onMounted</span>(</span><br><span class="line">uni.<span class="title function_">request</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://localhost:8181/target/get&#x27;</span>,</span><br><span class="line"><span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line"><span class="attr">data</span>: user.<span class="property">data</span>.<span class="property">userEmail</span>,</span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//数组赋初值为空</span></span><br><span class="line">target.<span class="property">data</span>.<span class="property">deadlineDate</span> = []</span><br><span class="line">                </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">status</span> == <span class="number">0</span>) &#123;</span><br><span class="line">state.<span class="property">targetNoTime</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="string">&#x27;targetName&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetName</span>,</span><br><span class="line"><span class="string">&#x27;targetDescribe&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetDescribe</span>,</span><br><span class="line"><span class="string">&#x27;targetPoint&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetPoint</span>,</span><br><span class="line"><span class="string">&#x27;deadline&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">deadline</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">status</span> == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> deadline = <span class="keyword">new</span> <span class="title class_">Date</span>(res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">deadline</span>)</span><br><span class="line"><span class="keyword">if</span> (!target.<span class="property">data</span>.<span class="property">deadlineDate</span>.<span class="title function_">includes</span>(deadline)) &#123;</span><br><span class="line">target.<span class="property">data</span>.<span class="property">deadlineDate</span>.<span class="title function_">push</span>(deadline);</span><br><span class="line">&#125;</span><br><span class="line">state.<span class="property">targetWithTime</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="string">&#x27;targetName&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetName</span>,</span><br><span class="line"><span class="string">&#x27;targetDescribe&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetDescribe</span>,</span><br><span class="line"><span class="string">&#x27;targetPoint&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetPoint</span>,</span><br><span class="line"><span class="string">&#x27;deadline&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">deadline</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">status</span> == <span class="number">2</span>) &#123;</span><br><span class="line">state.<span class="property">targetCompleted</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="string">&#x27;targetName&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetName</span>,</span><br><span class="line"><span class="string">&#x27;targetDescribe&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetDescribe</span>,</span><br><span class="line"><span class="string">&#x27;targetPoint&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetPoint</span>,</span><br><span class="line"><span class="string">&#x27;deadline&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">deadline</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">status</span> == <span class="number">3</span>) &#123;</span><br><span class="line">state.<span class="property">targetExpire</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="string">&#x27;targetName&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetName</span>,</span><br><span class="line"><span class="string">&#x27;targetDescribe&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetDescribe</span>,</span><br><span class="line"><span class="string">&#x27;targetPoint&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetPoint</span>,</span><br><span class="line"><span class="string">&#x27;deadline&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">deadline</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="后端交互完前端页面不更新问题"><a href="#后端交互完前端页面不更新问题" class="headerlink" title="后端交互完前端页面不更新问题"></a>后端交互完前端页面不更新问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关键在于，响应式的数据没有更新，所以界面就没有更新</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">targetNoTimeDelete</span> = (<span class="params">index</span>) =&gt; &#123;</span><br><span class="line">uni.<span class="title function_">request</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://localhost:8181/target/delete&#x27;</span>,</span><br><span class="line"><span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">targetName</span>: state.<span class="property">targetWithTime</span>[index].<span class="property">targetName</span>,</span><br><span class="line"><span class="attr">ifPoints</span>: <span class="number">1</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"><span class="comment">// 从targetWithTime数组中移除已删除的目标数据</span></span><br><span class="line">        <span class="comment">//这里的对state.targetWithTime和user.data.point的操作很关键</span></span><br><span class="line">        <span class="comment">//因为数据库操作成功了，但是前端数据并没有发送改变</span></span><br><span class="line">        <span class="comment">//这时候就需要对响应式数据进行相应的改变，来保证页面的改变</span></span><br><span class="line">state.<span class="property">targetWithTime</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">user.<span class="property">data</span>.<span class="property">point</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">targetPoint</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于点击转换样式的练习"><a href="#关于点击转换样式的练习" class="headerlink" title="关于点击转换样式的练习"></a>关于点击转换样式的练习</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//关键在于通过数组的方式，使得每个v-for生成的元素都有它独立的className：state.dayList[index].className</span><br><span class="line">//这样就可以通过改变特定的className，来达成效果</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class=&quot;tagetDay&quot;&gt;</span><br><span class="line">&lt;scroll-view class=&quot;scroll-view&quot; scroll-x=&quot;true&quot; enable-flex=&quot;true&quot;&gt;</span><br><span class="line">&lt;view class=&quot;Mon&quot; v-for=&quot;(item, index) in state.dayList&quot; :key=&quot;index&quot; @click=&quot;classChange(index)&quot;&gt;</span><br><span class="line">&lt;text&gt;&#123;&#123;item.week&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;view :class=&quot;item.className&quot;&gt;</span><br><span class="line">&lt;text class=&quot;Num&quot;&gt;&#123;&#123;item.day&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/scroll-view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const state = reactive(&#123;</span><br><span class="line">dayList: []</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">state.dayList.push(&#123;</span><br><span class="line">&#x27;className&#x27;: &#x27;NumCenter&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">for (let i = 0; i &lt; 30; i++) &#123;</span><br><span class="line">time.setDate(time.getDate() + 1)</span><br><span class="line">state.dayList.push(&#123;</span><br><span class="line">&#x27;className&#x27;: &#x27;Num&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const classChange = (index) =&gt; &#123;</span><br><span class="line">state.dayList.forEach((item) =&gt; &#123;</span><br><span class="line">item.className = &quot;Num&quot;; // 先将所有日期的 className 属性设置为 Num</span><br><span class="line">&#125;);</span><br><span class="line">state.dayList[index].className = &quot;NumCenter&quot;; // 将点击的日期的 className 属性设置为 NumCenter</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="前端获取不到初值的原因"><a href="#前端获取不到初值的原因" class="headerlink" title="前端获取不到初值的原因"></a>前端获取不到初值的原因</h3><p>使用中经常出现，赋不上初值的问题，需要在刷新时才能获取到数据，在通过打印后发现，网络请求返回前，初值已经赋上，解决方法就是在需要该数据的前一个页面就要加上请求语句，获取到所有的数据（clock的bug QAQ）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const home = () =&gt; &#123;</span><br><span class="line">uni.request(&#123;</span><br><span class="line">url: &#x27;http://localhost:8181/user/home&#x27;,</span><br><span class="line">method: &quot;POST&quot;,</span><br><span class="line">data: user.data.userEmail,</span><br><span class="line">success: (res) =&gt; &#123;</span><br><span class="line">if (res.data.code != null) &#123;</span><br><span class="line">uni.redirectTo(&#123;</span><br><span class="line">url: &#x27;../../pages/Login/Login&#x27;</span><br><span class="line">&#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">uni.redirectTo(&#123;</span><br><span class="line">url: &#x27;../../pages/Sign/Sign&#x27;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">        //后续需要的tag数据</span><br><span class="line">uni.request(&#123;</span><br><span class="line">url: &#x27;http://localhost:8181/tag/get&#x27;,</span><br><span class="line">method: &quot;POST&quot;,</span><br><span class="line">data: user.data.userEmail,</span><br><span class="line">success: (res) =&gt; &#123;</span><br><span class="line">console.log(res)</span><br><span class="line">tag.data.tagName = res.data.data[0].tagName</span><br><span class="line">tag.data.tagDescribe = res.data.data[0].tagDescribe</span><br><span class="line">tag.data.tagPoint = res.data.data[0].tagPoint</span><br><span class="line">tag.data.tagHour = res.data.data[0].tagHour</span><br><span class="line">tag.data.tagMinute = res.data.data[0].tagMinute</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">        //此处的time.data.remainingTime其实还是零，原因就是上面所说的，所以在下一个页面有相同的语句，获取到time.data.remainingTime的初值，此处因为在需要数据的页面前有两个页面才能完成需求，不知道有没有其他办法来优化</span><br><span class="line">time.data.remainingTime = (tag.data.tagHour * 3600) + (tag.data.tagMinute * 60) + tag.data.tagSecond</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>项目流程</title>
      <link href="/posts/2a16d212.html"/>
      <url>/posts/2a16d212.html</url>
      
        <content type="html"><![CDATA[<h1 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>在本项目中前端的页面都采用了vue的渐进式开发，依托后端来启动所有的项目，且采用了element-ui所提供的样式，使得页面更加整洁美观</p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>在项目的后端使用maven提供专业化的目录，以及进行项目的打包和快捷的插件管理，整体都使用lombok的注解式开发，再以spring-boot作为项目的主框架，加快项目的开发应用，也更方便对接mysql的数据库</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>而在数据库方面，使用了国人所升级的MybatisPlus，再在controller层实现业务逻辑，通过@RequestMapping来接受页面所发送的ajax请求以及json数据，同时利用DTO将多个字段封装到一个对象里，实现对于数据库基本的增删改查，最后在前端回显所修改的数据，在这整个用户交互的流程中，filter层会保持拦截用户所不该访问的页面，也会使用Redis来进行缓存优化，来达到更好的用户体验</p><h2 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h2><p>而在部署项目上采用腾讯云的云服务器，以及Git仓库来管理历史版本的代码以及团队协作，在Linux系统上进行部署，保证项目的安全性，再通过SSH连接工具就可以实现从本地连接到远程的Linux系统服务器</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/default_top_img.jpg" alt="壁纸"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
