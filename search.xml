<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue + Electron 跨平台打包完整指南</title>
      <link href="/posts/5b796f8c.html"/>
      <url>/posts/5b796f8c.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-Electron-跨平台打包完整指南"><a href="#Vue-Electron-跨平台打包完整指南" class="headerlink" title="Vue + Electron 跨平台打包完整指南"></a>Vue + Electron 跨平台打包完整指南</h1><h2 id="1-配置文件说明"><a href="#1-配置文件说明" class="headerlink" title="1. 配置文件说明"></a>1. 配置文件说明</h2><h3 id="1-1-package-json-配置详解"><a href="#1-1-package-json-配置详解" class="headerlink" title="1.1 package.json 配置详解"></a>1.1 package.json 配置详解</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// Electron 主进程入口文件</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist-electron/main.js&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构建命令配置</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 开发相关命令</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ELECTRON_DISABLE=true vite dev&quot;</span><span class="punctuation">,</span>        <span class="comment">// 纯前端开发模式</span></span><br><span class="line">    <span class="attr">&quot;electron:dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite dev &amp; electron .&quot;</span><span class="punctuation">,</span>        <span class="comment">// Electron 开发模式</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构建相关命令</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-tsc &amp;&amp; vite build&quot;</span><span class="punctuation">,</span>              <span class="comment">// 基础构建</span></span><br><span class="line">    <span class="attr">&quot;build:mac&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build &amp;&amp; electron-builder --mac --config.mac.identity=null&quot;</span><span class="punctuation">,</span>    <span class="comment">// 仅构建 Mac</span></span><br><span class="line">    <span class="attr">&quot;build:win&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build &amp;&amp; electron-builder --win --config.win.artifactName=$&#123;productName&#125;-win.$&#123;ext&#125;&quot;</span><span class="punctuation">,</span>  <span class="comment">// 仅构建 Windows</span></span><br><span class="line">    <span class="attr">&quot;build:all&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build &amp;&amp; electron-builder -mw&quot;</span>   <span class="comment">// 构建所有平台</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Electron Builder 配置</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;appId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.yourapp.id&quot;</span><span class="punctuation">,</span>          <span class="comment">// 应用唯一标识</span></span><br><span class="line">    <span class="attr">&quot;productName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Your App Name&quot;</span><span class="punctuation">,</span>      <span class="comment">// 应用名称</span></span><br><span class="line">    <span class="attr">&quot;directories&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> <span class="string">&quot;release&quot;</span><span class="punctuation">,</span>              <span class="comment">// 输出目录</span></span><br><span class="line">      <span class="attr">&quot;buildResources&quot;</span><span class="punctuation">:</span> <span class="string">&quot;resources&quot;</span>      <span class="comment">// 构建资源目录</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>                          <span class="comment">// 需要打包的文件</span></span><br><span class="line">      <span class="string">&quot;dist/**/*&quot;</span><span class="punctuation">,</span>                      <span class="comment">// 前端构建输出</span></span><br><span class="line">      <span class="string">&quot;dist-electron/**/*&quot;</span>              <span class="comment">// Electron 构建输出</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;extraResources&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>                 <span class="comment">// 额外资源文件配置</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">,</span>                 <span class="comment">// 源目录</span></span><br><span class="line">        <span class="attr">&quot;to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app/dist&quot;</span>                <span class="comment">// 目标目录</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// macOS 特定配置</span></span><br><span class="line">    <span class="attr">&quot;mac&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;dmg&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>               <span class="comment">// 输出格式</span></span><br><span class="line">      <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public.app-category.productivity&quot;</span><span class="punctuation">,</span> <span class="comment">// App Store 分类</span></span><br><span class="line">      <span class="attr">&quot;identity&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span>                <span class="comment">// 签名配置，null 表示不签名</span></span><br><span class="line">      <span class="attr">&quot;hardenedRuntime&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span>        <span class="comment">// 是否启用强化运行时</span></span><br><span class="line">      <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public/logo.ico&quot;</span>        <span class="comment">// 应用图标</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Windows 特定配置</span></span><br><span class="line">    <span class="attr">&quot;win&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>                      <span class="comment">// 构建目标</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nsis&quot;</span><span class="punctuation">,</span>            <span class="comment">// 使用 NSIS 安装程序</span></span><br><span class="line">          <span class="attr">&quot;arch&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;x64&quot;</span><span class="punctuation">]</span>              <span class="comment">// 64位架构</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public/logo.ico&quot;</span><span class="punctuation">,</span>       <span class="comment">// 应用图标</span></span><br><span class="line">      <span class="attr">&quot;requestedExecutionLevel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asInvoker&quot;</span> <span class="comment">// 程序权限级别</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// NSIS 安装程序配置</span></span><br><span class="line">    <span class="attr">&quot;nsis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;oneClick&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span>               <span class="comment">// 是否一键安装</span></span><br><span class="line">      <span class="attr">&quot;allowToChangeInstallationDirectory&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 允许更改安装目录</span></span><br><span class="line">      <span class="attr">&quot;createDesktopShortcut&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>   <span class="comment">// 创建桌面快捷方式</span></span><br><span class="line">      <span class="attr">&quot;createStartMenuShortcut&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>  <span class="comment">// 创建开始菜单快捷方式</span></span><br><span class="line">      <span class="attr">&quot;shortcutName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Your App Name&quot;</span>   <span class="comment">// 快捷方式名称</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">&quot;asar&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>                      <span class="comment">// 是否将源代码打包成 asar 文件</span></span><br><span class="line">    <span class="attr">&quot;electronVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^29.1.0&quot;</span>       <span class="comment">// Electron 版本</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-electron-x2F-main-ts-配置详解"><a href="#1-2-electron-x2F-main-ts-配置详解" class="headerlink" title="1.2 electron&#x2F;main.ts 配置详解"></a>1.2 electron&#x2F;main.ts 配置详解</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; app, <span class="title class_">BrowserWindow</span>, globalShortcut &#125; <span class="keyword">from</span> <span class="string">&#x27;electron&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Enable remote module</span></span><br><span class="line">  process.<span class="property">env</span>.<span class="property">ELECTRON_DISABLE_SECURITY_WARNINGS</span> = <span class="string">&#x27;true&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">1200</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">contextIsolation</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">webSecurity</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">devTools</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// In development, load from Vite dev server</span></span><br><span class="line">  <span class="comment">// In production, load from dist directory</span></span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line">    win.<span class="title function_">loadURL</span>(<span class="string">&#x27;http://localhost:5173&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    win.<span class="title function_">loadFile</span>(path.<span class="title function_">join</span>(app.<span class="title function_">getAppPath</span>(), <span class="string">&#x27;dist/index.html&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Always enable DevTools in both dev and prod</span></span><br><span class="line">  win.<span class="property">webContents</span>.<span class="title function_">openDevTools</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Register DevTools toggle shortcut for both dev and prod</span></span><br><span class="line">  globalShortcut.<span class="title function_">register</span>(<span class="string">&#x27;CommandOrControl+Shift+I&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    win.<span class="property">webContents</span>.<span class="title function_">toggleDevTools</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Register reload shortcut</span></span><br><span class="line">  globalShortcut.<span class="title function_">register</span>(<span class="string">&#x27;CommandOrControl+R&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    win.<span class="title function_">reload</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> win</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> mainWindow = <span class="title function_">createWindow</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Enable keyboard shortcuts</span></span><br><span class="line">  globalShortcut.<span class="title function_">register</span>(<span class="string">&#x27;CommandOrControl+R&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    mainWindow.<span class="title function_">reload</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  app.<span class="title function_">on</span>(<span class="string">&#x27;activate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">BrowserWindow</span>.<span class="title function_">getAllWindows</span>().<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="title function_">createWindow</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&#x27;darwin&#x27;</span>) &#123;</span><br><span class="line">    app.<span class="title function_">quit</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-3-vite-config-ts-配置详解"><a href="#1-3-vite-config-ts-配置详解" class="headerlink" title="1.3 vite.config.ts 配置详解"></a>1.3 vite.config.ts 配置详解</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span></span><br><span class="line"><span class="keyword">import</span> electron <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-electron&#x27;</span></span><br><span class="line"><span class="keyword">import</span> renderer <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-electron-renderer&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> tailwindcss <span class="keyword">from</span> <span class="string">&#x27;tailwindcss&#x27;</span></span><br><span class="line"><span class="keyword">import</span> autoprefixer <span class="keyword">from</span> <span class="string">&#x27;autoprefixer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 下面的命令是防止npm run dev时一并把electron:win启动了</span></span><br><span class="line">    ...(!process.<span class="property">env</span>.<span class="property">ELECTRON_DISABLE</span> ? [</span><br><span class="line">      <span class="title function_">electron</span>(&#123;</span><br><span class="line">        <span class="attr">entry</span>: <span class="string">&#x27;electron/main.ts&#x27;</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="title function_">renderer</span>(),</span><br><span class="line">    ] : []),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">base</span>: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">outDir</span>: <span class="string">&#x27;dist&#x27;</span>,</span><br><span class="line">    <span class="attr">emptyOutDir</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">format</span>: <span class="string">&#x27;cjs&#x27;</span>,</span><br><span class="line">        <span class="attr">chunkFileNames</span>: <span class="string">&#x27;[name].[hash].js&#x27;</span>,</span><br><span class="line">        <span class="attr">assetFileNames</span>: <span class="string">&#x27;[name].[hash].[ext]&#x27;</span>,</span><br><span class="line">        <span class="attr">entryFileNames</span>: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">        <span class="attr">inlineDynamicImports</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;esnext&#x27;</span>,</span><br><span class="line">    <span class="attr">minify</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">sourcemap</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">5173</span>,</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8000&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/ask_fake_news&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8000/ask_fake_news&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/ask_fake_news/</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">postcss</span>: &#123;</span><br><span class="line">      <span class="attr">plugins</span>: [</span><br><span class="line">        tailwindcss,</span><br><span class="line">        autoprefixer,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">optimizeDeps</span>: &#123;</span><br><span class="line">    <span class="attr">exclude</span>: [<span class="string">&#x27;electron&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-打包命令使用"><a href="#2-打包命令使用" class="headerlink" title="2. 打包命令使用"></a>2. 打包命令使用</h2><h3 id="2-1-开发模式"><a href="#2-1-开发模式" class="headerlink" title="2.1 开发模式"></a>2.1 开发模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动开发服务器</span></span><br><span class="line">npm run electron:dev</span><br></pre></td></tr></table></figure><h3 id="2-2-生产构建"><a href="#2-2-生产构建" class="headerlink" title="2.2 生产构建"></a>2.2 生产构建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Mac 构建</span></span><br><span class="line">npm run build:mac</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows 构建</span></span><br><span class="line">npm run build:win</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有平台构建</span></span><br><span class="line">npm run build:all</span><br></pre></td></tr></table></figure><h3 id="2-3-代理设置（如需要）"><a href="#2-3-代理设置（如需要）" class="headerlink" title="2.3 代理设置（如需要）"></a>2.3 代理设置（如需要）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890</span><br></pre></td></tr></table></figure><h2 id="3-常见问题解决"><a href="#3-常见问题解决" class="headerlink" title="3. 常见问题解决"></a>3. 常见问题解决</h2><h3 id="3-1-白屏问题"><a href="#3-1-白屏问题" class="headerlink" title="3.1 白屏问题"></a>3.1 白屏问题</h3><ol><li><p>检查路径配置：</p><ul><li>vite.config.ts 中 <code>base: &#39;./&#39;</code></li><li>main.ts 中路径使用 <code>path.join()</code></li></ul></li><li><p>配置网页安全性：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">webPreferences</span>: &#123;</span><br><span class="line">  <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">contextIsolation</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">webSecurity</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-2-开发工具问题"><a href="#3-2-开发工具问题" class="headerlink" title="3.2 开发工具问题"></a>3.2 开发工具问题</h3><p>注意之前由于loadFile错误导致无法启动开发工具，并不是本身代码的问题</p><ol><li><p>确保配置：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">webPreferences</span>: &#123;</span><br><span class="line">  <span class="attr">devTools</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注册快捷键：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">globalShortcut.<span class="title function_">register</span>(<span class="string">&#x27;CommandOrControl+Shift+I&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  win.<span class="property">webContents</span>.<span class="title function_">toggleDevTools</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-3-跨平台构建注意事项"><a href="#3-3-跨平台构建注意事项" class="headerlink" title="3.3 跨平台构建注意事项"></a>3.3 跨平台构建注意事项</h3><ol><li><p>macOS：</p><ul><li>签名配置：<code>&quot;identity&quot;: null</code></li><li>DMG 格式：<code>&quot;target&quot;: [&quot;dmg&quot;]</code></li></ul></li><li><p>Windows：</p><ul><li><p>NSIS 配置：<code>&quot;oneClick&quot;: false</code></p></li><li><p>权限级别：<code>&quot;requestedExecutionLevel&quot;: &quot;asInvoker&quot;</code></p></li><li><p>下载 NSIS 资源时遇到了网络问题，可以使用下面的命令，再执行build命令，当然可能只是当时网络波动了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> -rf node_modules/.cache/electron-builder &amp;&amp;sudo  <span class="built_in">rm</span> -rf release </span><br></pre></td></tr></table></figure></li></ul></li><li><p>通用：</p><ul><li>使用相对路径</li><li>处理资源文件</li><li>错误处理机制</li></ul></li></ol><h3 id="3-4-模块加载错误解决"><a href="#3-4-模块加载错误解决" class="headerlink" title="3.4 模块加载错误解决"></a>3.4 模块加载错误解决</h3><p>具体报错：Uncaught ReferenceError: exports is not defined at index-BF1qxaNs.js:1:36，然后页面依旧是白屏</p><ol><li>package.json 中移除 “type”: “module”</li><li>使用 CommonJS 格式构建</li><li>确保所有路径使用相对路径</li></ol><h2 id="4-最佳实践"><a href="#4-最佳实践" class="headerlink" title="4. 最佳实践"></a>4. 最佳实践</h2><ol><li>文件组织<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">project/</span><br><span class="line">├── electron/          # Electron 主进程代码</span><br><span class="line">├── src/              # 渲染进程代码（Vue）</span><br><span class="line">├── dist/             # 构建输出</span><br><span class="line">└── release/          # 打包输出</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>新闻伪造检测平台项目经验</title>
      <link href="/posts/8132f177.html"/>
      <url>/posts/8132f177.html</url>
      
        <content type="html"><![CDATA[<h1 id="完整功能介绍"><a href="#完整功能介绍" class="headerlink" title="完整功能介绍"></a>完整功能介绍</h1><ol><li>统计数据：当前检验最多的虚假新闻，当前检验最多的假新闻种类，总检验的新闻等数据</li><li>新闻检验：<ul><li>文字：包含概述、句子分析、来源分析</li><li>图片：伪造情况报告包含新闻质量、健康度、AI程度、虚假新闻程度、伪造种类相似度</li><li>音频：通过SenseVoice转文字获得文字，作为事实判断、情绪识别、人物音色推断</li></ul></li><li>个人知识库：使用ragflow内的个人知识库进行连接，主要增删改查以及解析功能</li><li>虛假新闻盘点：<ul><li>知识库：通过个人知识库+在线搜索实现虚假新闻的AI识别</li><li>智能图表：可以通过图形例如饼图折现图，去展示我们提供的今日虚假新闻</li></ul></li><li>虛假新闻预测：包含我们爬到的热点新闻以及对应的预测可能出现的虚假新闻标题，提取一步组织虚假新闻传播</li><li>虛假新闻还原：通过流水线的方式，经过用户提供数据、新闻预处理、虛假新闻检测、报告生成这几个阶段形成一个虚假新闻报告，内部还有大模型尝试还原虚假新闻后的内容</li><li>虚假新闻智能体：用户定制属于自己的工作流，包含爬虫、知识库、图表、LLM等节点</li><li>爬虫：基于自然语言的实时数据爬取的虚假新闻检测</li><li>多平台：利用electron实现跨win、mac打包客户端</li></ol><h1 id="创新点"><a href="#创新点" class="headerlink" title="创新点"></a>创新点</h1><ol><li>知识库</li><li>智能图表</li><li>流水线</li><li>智能体</li><li>爬虫</li><li>音频推断</li></ol><h1 id="虚假新闻智能体创新点的必要性"><a href="#虚假新闻智能体创新点的必要性" class="headerlink" title="虚假新闻智能体创新点的必要性"></a>虚假新闻智能体创新点的必要性</h1><p>可以开放API，其次这一个点是可以区分于我们正常流程只有智能体可以更好的做到，假设一个企业不准备自己开发这一个功能，而是需要对接其他平台，如果将正常流程作为API的话，实际上调用有很多缺点，企业只能利用固定的流程，并且传入的变量，输出的内容企业都是不可控的，但是如果是可编排的可视化智能体的话，流程自定义、输入自定义、输出自定义，这样才能完全发挥它的用处</p><p>同时可以作为我们缺失的商业化的一部分写进去，并且市面上也确实没有提供这样服务的项目</p><p>之前一直觉得智能体没用实际上是因为我们平台实际上目前就是一个完整的智能体，而智能体最关键的定制功能对于普通用户来说是无关痛痒的，用户的需求就是简单用上最好的智能体，而最关键的定制功能对于c端来说才是关键，能够契合进入不同需求的不同应用</p><h1 id="py中的-env使用"><a href="#py中的-env使用" class="headerlink" title="py中的.env使用"></a>py中的.env使用</h1><ol><li><strong><code>.env</code> 文件</strong></li></ol><p><code>.env</code> 文件用于存储环境变量，通常包含敏感信息，如 API 密钥、数据库连接信息等。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># .env 文件</span><br><span class="line">OPENAI_API_KEY=</span><br><span class="line">OPENAI_BASE_URL=</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>安装 <code>python-dotenv</code></strong></li></ol><p>Python 需要 <code>dotenv</code> 库来读取 <code>.env</code> 文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python-dotenv</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>在 Python 中加载 <code>.env</code></strong></li></ol><p>在代码中使用 <code>dotenv.load_dotenv()</code> 加载 <code>.env</code> 文件中的环境变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 .env 文件</span></span><br><span class="line">load_dotenv()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取环境变量</span></span><br><span class="line">api_key = os.getenv(<span class="string">&quot;OPENAI_API_KEY&quot;</span>)</span><br><span class="line">base_url = os.getenv(<span class="string">&quot;OPENAI_BASE_URL&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;API Key: <span class="subst">&#123;api_key&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Base URL: <span class="subst">&#123;base_url&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>与 OpenAI API 交互</strong></li></ol><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> HTTPException</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">load_dotenv()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 API 密钥和基础 URL</span></span><br><span class="line">api_key = os.getenv(<span class="string">&quot;OPENAI_API_KEY&quot;</span>)</span><br><span class="line">base_url = os.getenv(<span class="string">&quot;OPENAI_BASE_URL&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 OpenAI 客户端</span></span><br><span class="line">client = OpenAI(api_key=api_key, base_url=base_url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">generate_openai_response</span>(<span class="params">system_content: <span class="built_in">str</span>, user_content: <span class="built_in">str</span>, stream: <span class="built_in">bool</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;调用 OpenAI API 生成回复&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = client.chat.completions.create(</span><br><span class="line">            model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">            messages=[</span><br><span class="line">                &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: system_content&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_content&#125;,</span><br><span class="line">            ],</span><br><span class="line">            stream=stream</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">500</span>, detail=<span class="string">f&quot;Error calling OpenAI API: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>错误处理</strong></li></ol><ul><li><code>.env</code> 文件必须放在项目根目录，否则需要在 <code>load_dotenv()</code> 中指定路径，例如 <code>load_dotenv(dotenv_path=&quot;path/to/.env&quot;)</code>。</li><li><code>os.getenv(&quot;VAR_NAME&quot;)</code> 获取不到值时，可能是 <code>.env</code> 文件未正确加载。</li></ul><h1 id="gitignore使用"><a href="#gitignore使用" class="headerlink" title=".gitignore使用"></a>.gitignore使用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 编译文件</span></span><br><span class="line">__pycache__/</span><br><span class="line">*.pyc</span><br><span class="line">*.pyo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 虚拟环境</span></span><br><span class="line">venv/</span><br><span class="line"><span class="built_in">env</span>/</span><br><span class="line">*.<span class="built_in">env</span>/</span><br><span class="line">.<span class="built_in">env</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># FastAPI 构建文件</span></span><br><span class="line">*.sqlite3</span><br><span class="line">db.sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时文件</span></span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line">*.pot</span><br><span class="line">*.pyc</span><br><span class="line"></span><br><span class="line"><span class="comment"># IDE 配置文件</span></span><br><span class="line">.vscode/</span><br><span class="line">.idea/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 操作系统文件</span></span><br><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line"></span><br><span class="line">fake_news.json</span><br><span class="line">hot_news.json</span><br><span class="line"></span><br><span class="line">.gitignore</span><br></pre></td></tr></table></figure><p><code>.gitignore</code> 规则整理</p><ol><li><strong>Python 编译文件</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__pycache__/</span><br><span class="line">*.pyc</span><br><span class="line">*.pyo</span><br></pre></td></tr></table></figure><ul><li><code>__pycache__/</code>：Python 运行时自动生成的字节码缓存文件夹。</li><li><code>*.pyc</code>、<code>*.pyo</code>：Python 编译的字节码文件，不需要提交到版本控制系统。</li></ul><ol start="2"><li><strong>虚拟环境</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">venv/</span><br><span class="line">env/</span><br><span class="line">*.env/</span><br><span class="line">.env</span><br></pre></td></tr></table></figure><ul><li><code>venv/</code> 和 <code>env/</code>：Python 虚拟环境目录，防止提交依赖环境。</li><li><code>*.env/</code> 和 <code>.env</code>：存储环境变量的文件（如 API 密钥），应避免提交以防止泄露。</li></ul><ol start="3"><li><strong>FastAPI 相关文件</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*.sqlite3</span><br><span class="line">db.sqlite3</span><br></pre></td></tr></table></figure><ul><li><code>*.sqlite3</code>：SQLite 数据库文件，避免提交数据库数据到 Git。</li><li><code>db.sqlite3</code>：常见的 SQLite 数据库文件名称，应忽略。</li></ul><ol start="4"><li><strong>临时文件</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*.log</span><br><span class="line">*.pot</span><br><span class="line">*.pyc</span><br></pre></td></tr></table></figure><ul><li><code>*.log</code>：日志文件，通常不需要提交。</li><li><code>*.pot</code>：Python 翻译模板文件，可能是自动生成的，不建议提交。</li><li><code>*.pyc</code>：重复出现在 Python 编译文件部分，可保持或删除重复项。</li></ul><ol start="5"><li><strong>IDE 配置文件</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.vscode/</span><br><span class="line">.idea/</span><br></pre></td></tr></table></figure><ul><li><code>.vscode/</code>：VS Code 编辑器的配置目录，包含用户自定义设置，不应提交。</li><li><code>.idea/</code>：JetBrains IDE（如 PyCharm）的项目配置文件，建议忽略。</li></ul><ol start="6"><li><strong>操作系统生成的文件</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br></pre></td></tr></table></figure><ul><li><code>.DS_Store</code>：macOS 自动生成的目录元数据文件。</li><li><code>Thumbs.db</code>：Windows 资源管理器生成的缩略图缓存文件。</li></ul><ol start="7"><li><strong>Fake News Detection 相关文件</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fake_news.json</span><br><span class="line">hot_news.json</span><br></pre></td></tr></table></figure><ul><li><code>fake_news.json</code> 和 <code>hot_news.json</code>：可能是 Fake News Detection 平台的临时数据文件，防止提交测试数据或敏感信息。</li></ul><h1 id="Crawl4Al"><a href="#Crawl4Al" class="headerlink" title="Crawl4Al"></a>Crawl4Al</h1><p>项目结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">my_project/</span><br><span class="line">│</span><br><span class="line">├── crawler/                      <span class="comment"># 主应用代码</span></span><br><span class="line">│   ├── FakeNews.py               </span><br><span class="line">│   ├── HotNews.py</span><br><span class="line">│   ├── Links.py</span><br><span class="line">├── data/                      <span class="comment"># 爬取后的数据处于的位置</span></span><br><span class="line">│   ├── fake_news.json               </span><br><span class="line">│   ├── hot_news.json</span><br><span class="line">│   ├── Links.py</span><br><span class="line">├── .<span class="built_in">env</span>                      <span class="comment"># 环境变量文件，存储 API 密钥等敏感信息</span></span><br><span class="line">├── requirements.txt          <span class="comment"># 依赖项</span></span><br><span class="line">└── README.md                 <span class="comment"># 项目说明文件</span></span><br></pre></td></tr></table></figure><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> crawl4ai <span class="keyword">import</span> AsyncWebCrawler, CrawlerRunConfig</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    config = CrawlerRunConfig(</span><br><span class="line">        <span class="comment"># e.g., first 30 items from Hacker News</span></span><br><span class="line">        css_selector=<span class="string">&quot;#Con11&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> AsyncWebCrawler() <span class="keyword">as</span> crawler:</span><br><span class="line">        result = <span class="keyword">await</span> crawler.arun(</span><br><span class="line">            url=<span class="string">&quot;https://news.sina.com.cn/hotnews/&quot;</span>,</span><br><span class="line">            config=config</span><br><span class="line">        )</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Partial HTML length:&quot;</span>, <span class="built_in">len</span>(result.cleaned_html))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Extracted content:&quot;</span>, result.markdown)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure><h2 id="基于-Schema-的爬取"><a href="#基于-Schema-的爬取" class="headerlink" title="基于 Schema 的爬取"></a>基于 Schema 的爬取</h2><ol><li><strong>Schema 定义</strong></li></ol><p>使用 JSON Schema 来定义需要提取的数据结构：</p><ul><li><p><code>baseSelector</code>: 指定数据所在的父级 HTML 元素</p></li><li><p>&#96;&#96;&#96;<br>fields</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  : 定义具体要提取的字段，包括：</span><br><span class="line"></span><br><span class="line">  - `name`: 字段名称</span><br><span class="line">  - `selector`: CSS 选择器</span><br><span class="line">  - `type`: 提取方式，如 `text` 或 `attribute`</span><br><span class="line">  - `attribute`: 当 `type` 为 `attribute` 时，指定提取的属性</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">schema = &#123;</span><br><span class="line">    &quot;name&quot;: &quot;辟谣信息&quot;,</span><br><span class="line">    &quot;baseSelector&quot;: &quot;ul#list li&quot;,</span><br><span class="line">    &quot;fields&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;date&quot;,</span><br><span class="line">            &quot;selector&quot;: &quot;p.domPC&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;link&quot;,</span><br><span class="line">            &quot;selector&quot;: &quot;h2 a&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;attribute&quot;,</span><br><span class="line">            &quot;attribute&quot;: &quot;href&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><strong>提取策略</strong></li></ol><p>使用 <code>JsonCssExtractionStrategy</code> 解析 HTML，并根据 schema 提取数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extraction_strategy = JsonCssExtractionStrategy(schema, verbose=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>爬取配置</strong></li></ol><p>创建 <code>CrawlerRunConfig</code> 以配置爬取策略：</p><ul><li><code>extraction_strategy</code>: 应用提取规则</li><li><code>cache_mode</code>: 设为 <code>CacheMode.BYPASS</code> 以跳过缓存，确保获取最新数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config = CrawlerRunConfig(</span><br><span class="line">    extraction_strategy=extraction_strategy,</span><br><span class="line">    cache_mode=CacheMode.BYPASS</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>数据提取</strong></li></ol><p>使用 <code>AsyncWebCrawler</code> 运行爬虫，并解析提取的数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> AsyncWebCrawler(headless=<span class="literal">True</span>, verbose=<span class="literal">True</span>) <span class="keyword">as</span> crawler:</span><br><span class="line">    result = <span class="keyword">await</span> crawler.arun(</span><br><span class="line">        url=<span class="string">&quot;https://www.piyao.org.cn/jrpy/index.htm&quot;</span>,</span><br><span class="line">        config=config</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>数据处理</strong></li></ol><p>提取成功后：</p><ul><li>解析 JSON 数据</li><li>修正相对路径</li><li>保存为 JSON 文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> result.success:</span><br><span class="line">    data = json.loads(result.extracted_content)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">        raw_link = item[<span class="string">&quot;link&quot;</span>]</span><br><span class="line">        fixed_link = raw_link.replace(<span class="string">&quot;../&quot;</span>, <span class="string">&quot;/&quot;</span>).replace(<span class="string">&quot;/jrpy/&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> fixed_link.startswith(<span class="string">&quot;http&quot;</span>):</span><br><span class="line">            fixed_link = <span class="string">&quot;https://www.piyao.org.cn&quot;</span> + fixed_link</span><br><span class="line">        item[<span class="string">&quot;link&quot;</span>] = fixed_link</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./data/links.json&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        json.dump(data, file, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="页面交互"><a href="#页面交互" class="headerlink" title="页面交互"></a>页面交互</h2><ol><li><strong>点击 “查看更多” 按钮</strong></li></ol><p>模拟用户操作，点击 “查看更多” 按钮，并滚动加载更多内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">clickLoadMore</span>(<span class="params">maxClicks</span>) &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;click_count&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> moreButton = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#more&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> lastHeight = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollHeight</span>;</span><br><span class="line">    <span class="keyword">let</span> clickCount = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;click_count&#x27;</span>) || <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (moreButton &amp;&amp; clickCount &lt; maxClicks) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollHeight</span>);</span><br><span class="line">        moreButton.<span class="title function_">click</span>();</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>));</span><br><span class="line">        clickCount++;</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;click_count&#x27;</span>, clickCount);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> newHeight = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollHeight</span>;</span><br><span class="line">        <span class="keyword">if</span> (newHeight === lastHeight) <span class="keyword">break</span>;</span><br><span class="line">        lastHeight = newHeight;</span><br><span class="line">        moreButton = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#more&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">clickLoadMore</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul><li>滚动到底部</li><li>点击 “查看更多”</li><li>等待加载</li><li>记录点击次数</li><li>如果页面高度不变，则停止</li></ul><ol start="2"><li><strong>等待内容加载</strong></li></ol><p>爬虫在执行爬取前，需要等待 JavaScript 动态加载完成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">js</span>:<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> click_count = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;click_count&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (click_count &amp;&amp; click_count &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>读取 <code>click_count</code></li><li>当点击次数达到 1 次后，返回 <code>true</code></li><li>确保页面已经动态加载了新的内容</li></ul><ol start="3"><li><strong>集成到爬取流程</strong></li></ol><p>爬取时，将 JS 代码作为 <code>js_code</code> 传入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">result = <span class="keyword">await</span> crawler.arun(</span><br><span class="line">    url=<span class="string">&quot;https://www.piyao.org.cn/jrpy/index.htm&quot;</span>,</span><br><span class="line">    config=CrawlerRunConfig(</span><br><span class="line">        js_code=js_click_more,</span><br><span class="line">        wait_for=js_wait_for,</span><br><span class="line">        extraction_strategy=extraction_strategy,</span><br><span class="line">        cache_mode=CacheMode.BYPASS</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>先执行 <code>js_click_more</code> 进行点击和滚动</li><li><code>wait_for</code> 确保数据加载完成</li><li>之后再提取数据</li></ul><h2 id="浏览器设置"><a href="#浏览器设置" class="headerlink" title="浏览器设置"></a>浏览器设置</h2><h2 id="大模型爬取笔记"><a href="#大模型爬取笔记" class="headerlink" title="大模型爬取笔记"></a>大模型爬取笔记</h2><ol><li><strong>使用大模型进行内容提取</strong></li></ol><p>爬取过程中，利用大模型（如 DeepSeek）解析网页，并按指定的结构提取信息。</p><p><strong>1.1 定义数据结构</strong></p><p>使用 <code>pydantic.BaseModel</code> 定义新闻数据的结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FakeNews</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    headline: <span class="built_in">str</span>  <span class="comment"># 虚假新闻标题</span></span><br><span class="line">    field: <span class="built_in">str</span>      <span class="comment"># 领域分类</span></span><br><span class="line">    truth: <span class="built_in">str</span>      <span class="comment"># 真相</span></span><br><span class="line">    source: <span class="built_in">str</span>     <span class="comment"># 来源</span></span><br><span class="line">    measures: <span class="built_in">str</span>   <span class="comment"># 注意事项</span></span><br><span class="line">    date: <span class="built_in">str</span>       <span class="comment"># 发布日期</span></span><br></pre></td></tr></table></figure><p><strong>1.2 配置 LLM 提取策略</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">llm_strategy = LLMExtractionStrategy(</span><br><span class="line">    provider=<span class="string">&quot;deepseek/deepseek-chat&quot;</span>,</span><br><span class="line">    api_token=api_key,</span><br><span class="line">    api_base=base_url,</span><br><span class="line">    schema=FakeNews.model_json_schema(),  <span class="comment"># 指定 JSON Schema</span></span><br><span class="line">    extraction_type=<span class="string">&quot;schema&quot;</span>,</span><br><span class="line">    instruction=<span class="string">&quot;从页面中提取所有谣言及误区，包括标题、分类、真相、来源和注意事项。&quot;</span>,</span><br><span class="line">    chunk_token_threshold=<span class="number">1000</span>,</span><br><span class="line">    overlap_rate=<span class="number">0.1</span>,</span><br><span class="line">    apply_chunking=<span class="literal">True</span>,</span><br><span class="line">    input_format=<span class="string">&quot;html&quot;</span>,</span><br><span class="line">    extra_args=&#123;<span class="string">&quot;temperature&quot;</span>: <span class="number">0.1</span>, <span class="string">&quot;max_tokens&quot;</span>: <span class="number">1000</span>&#125;,</span><br><span class="line">    verbose=<span class="literal">True</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><strong><code>instruction</code></strong>: 提示大模型需要提取的内容</li><li><strong><code>apply_chunking</code></strong>: 采用分块处理，防止长文本截断</li><li><strong><code>chunk_token_threshold</code></strong>: 每个分块的最大 Token 数</li><li><strong><code>overlap_rate</code></strong>: 分块间的重叠率，确保上下文连贯</li></ul><p><strong>1.3 爬取配置</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">crawl_config = CrawlerRunConfig(</span><br><span class="line">    extraction_strategy=llm_strategy,</span><br><span class="line">    cache_mode=CacheMode.BYPASS</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>确保数据每次都重新爬取，避免缓存影响。</p><p><strong>1.4 处理提取的数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fetch_and_process_link</span>(<span class="params">result, date</span>):</span><br><span class="line">    <span class="keyword">if</span> result.success <span class="keyword">and</span> result.extracted_content:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = json.loads(result.extracted_content)</span><br><span class="line">            cleaned_data = [&#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> item.items() <span class="keyword">if</span> k != <span class="string">&#x27;error&#x27;</span>&#125; <span class="keyword">for</span> item <span class="keyword">in</span> data]</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> cleaned_data:</span><br><span class="line">                item[<span class="string">&#x27;date&#x27;</span>] = date</span><br><span class="line">            <span class="keyword">return</span> cleaned_data</span><br><span class="line">        <span class="keyword">except</span> json.JSONDecodeError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;JSON 解析错误，链接：<span class="subst">&#123;result.url&#125;</span>, 错误信息：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure><ul><li>解析 LLM 提取的 JSON 数据</li><li>移除可能的 <code>error</code> 字段</li><li>补充 <code>date</code> 字段</li></ul><hr><h2 id="并行爬取笔记"><a href="#并行爬取笔记" class="headerlink" title="并行爬取笔记"></a>并行爬取笔记</h2><ol><li><strong>优化并行任务</strong></li></ol><p>使用 <code>SemaphoreDispatcher</code> 控制并行任务，并设定速率限制器 (<code>RateLimiter</code>)。</p><p><strong>1.1 配置爬取速率</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rate_limiter = RateLimiter(</span><br><span class="line">    base_delay=(<span class="number">0.1</span>, <span class="number">0.2</span>),</span><br><span class="line">    max_delay=<span class="number">15.0</span>,</span><br><span class="line">    max_retries=<span class="number">5</span>,</span><br><span class="line">    rate_limit_codes=[<span class="number">429</span>, <span class="number">503</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><strong><code>base_delay</code></strong>: 设定 0.1~0.2 秒的最小请求间隔，加速并发</li><li><strong><code>max_retries</code></strong>: 允许最多 5 次重试</li><li><strong><code>rate_limit_codes</code></strong>: 当遇到 <code>429</code>（请求过多）或 <code>503</code>（服务不可用）时，自动等待并重试</li></ul><p><strong>1.2 监控爬取进度</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">monitor = CrawlerMonitor(</span><br><span class="line">    max_visible_rows=<span class="number">15</span>,</span><br><span class="line">    display_mode=DisplayMode.DETAILED</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>监控爬取进度，提供可视化日志</li></ul><p><strong>1.3 配置并发控制</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dispatcher = SemaphoreDispatcher(</span><br><span class="line">    max_session_permit=<span class="number">30</span>,</span><br><span class="line">    rate_limiter=rate_limiter,</span><br><span class="line">    monitor=monitor</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><strong><code>max_session_permit</code></strong>: 限制最大并发任务数为 <code>30</code></li><li><strong><code>rate_limiter</code></strong>: 结合速率控制，避免触发反爬机制</li></ul><p><strong>1.4 批量爬取</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> AsyncWebCrawler(config=browser_cfg) <span class="keyword">as</span> crawler:</span><br><span class="line">    results = <span class="keyword">await</span> crawler.arun_many(</span><br><span class="line">        urls=[link_data[<span class="string">&#x27;link&#x27;</span>] <span class="keyword">for</span> link_data <span class="keyword">in</span> links_data],</span><br><span class="line">        config=crawl_config,</span><br><span class="line">        dispatcher=dispatcher</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><ul><li>使用 <code>arun_many</code> 并发爬取所有链接</li><li>结合 <code>dispatcher</code> 进行并发控制</li></ul><p><strong>1.5 数据存储</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./data/fake_news.json&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json.dump(all_news, file, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ul><li>解析数据并存储为 JSON 文件</li></ul><h2 id="超长-HTML-处理方案"><a href="#超长-HTML-处理方案" class="headerlink" title="超长 HTML 处理方案"></a>超长 HTML 处理方案</h2><p><strong>🔹 问题</strong></p><ul><li>HTML 过长时，大模型（LLM）难以一次性处理完整页面，导致报错超出上下文。</li><li>需要 <strong>分块（chunking）</strong> 处理，以保证大模型能完整解析所有内容。</li></ul><p><strong>🔹 解决方案</strong></p><p><strong>1. 启用 Chunking 机制</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chunk_token_threshold=<span class="number">1500</span>,  <span class="comment"># 降低分块 token 阈值</span></span><br><span class="line">overlap_rate=<span class="number">0.3</span>,  <span class="comment"># 增加分块重叠率</span></span><br><span class="line">apply_chunking=<span class="literal">True</span>,  <span class="comment"># 启用分块</span></span><br></pre></td></tr></table></figure><ul><li><code>chunk_token_threshold=1500</code>：将单个分块的 Token 数限制在 1500 以内，减少单次输入长度，防止超限。</li><li><code>overlap_rate=0.3</code>：提高 30% 的内容重叠，确保跨块内容的连贯性，避免信息缺失。</li></ul><p><strong>2. 使用 CSS 选择器提取关键内容</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">css_selector=<span class="string">&quot;#Con11&quot;</span></span><br></pre></td></tr></table></figure><ul><li>只抓取<strong>新闻排行榜</strong>相关内容，减少无关数据，提高提取准确性。</li></ul><hr><h2 id="浏览器设置以及部分调试心得"><a href="#浏览器设置以及部分调试心得" class="headerlink" title="浏览器设置以及部分调试心得"></a>浏览器设置以及部分调试心得</h2><p>主要需要注意的点是下面的这个无头模式，改为False可以启动浏览器，方便调试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">browser_cfg = BrowserConfig(</span><br><span class="line">    headless=<span class="literal">True</span>  <span class="comment"># 无头模式，提高爬取效率</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>还有一点就是浏览器设置是，不存在控制浏览器在调试完成后，不自动关闭的属性的</p><p>可以在wait_for属性中使用下面的等待策略进行调试，将return true;去掉，这样就可以保证浏览器一直处于等待状态而不关闭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义爬虫配置</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 等待策略</span></span><br><span class="line">    js_wait_for = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    js:() =&gt; &#123;</span></span><br><span class="line"><span class="string">        let element = document.querySelector(&#x27;#Con11 &gt; table &gt; tbody &gt; tr:nth-child(4) &gt; td.ConsTi&#x27;);</span></span><br><span class="line"><span class="string">        if (element !== null) &#123;</span></span><br><span class="line"><span class="string">            console.log(&quot;元素已加载完毕，开始抓取数据...&quot;);</span></span><br><span class="line"><span class="string">            return true;</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            console.log(&quot;未加载该元素，继续等待...&quot;);</span></span><br><span class="line"><span class="string">            return false;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置爬虫</span></span><br><span class="line">    crawl_config = CrawlerRunConfig(</span><br><span class="line">        cache_mode=CacheMode.BYPASS,  <span class="comment"># 每次都重新获取最新数据</span></span><br><span class="line">        wait_for=js_wait_for,  <span class="comment"># 等待页面加载完成</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h1 id="FastAPI"><a href="#FastAPI" class="headerlink" title="FastAPI"></a>FastAPI</h1><p>启动命令：uvicorn app.main:app –reload（注意main.py需要位于app文件夹的外侧，才能正确启动，不过我感觉内侧比较合适，只不过内侧的话需要增加一个命令用于进入app文件夹下面）</p><p>项目结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">my_project/</span><br><span class="line">│</span><br><span class="line">├── app/                      <span class="comment"># 主应用代码</span></span><br><span class="line">│   ├── main.py</span><br><span class="line">│   ├── api/                  <span class="comment"># API 路由相关模块</span></span><br><span class="line">│   │   ├── ask_fake_news.py  <span class="comment"># 处理 /ask_fake_news 请求</span></span><br><span class="line">│   │   ├── generate_chart.py <span class="comment"># 处理 /generate_chart 请求</span></span><br><span class="line">│   ├── core/                 <span class="comment"># 核心功能和配置</span></span><br><span class="line">│   │   ├── config.py         <span class="comment"># 配置文件（API 密钥、环境变量等）</span></span><br><span class="line">│   │   ├── openai_client.py  <span class="comment"># OpenAI 客户端封装，包含 API 调用</span></span><br><span class="line">│   ├── models/               <span class="comment"># 数据模型</span></span><br><span class="line">│   │   ├── user.py           <span class="comment"># 用户输入的数据模型</span></span><br><span class="line">│   ├── utils/                <span class="comment"># 工具函数</span></span><br><span class="line">│   │   ├── fake_news_data_loader.py     <span class="comment"># 用于加载和处理 JSON 的工具函数</span></span><br><span class="line">├── .<span class="built_in">env</span>                      <span class="comment"># 环境变量文件，存储 API 密钥等敏感信息</span></span><br><span class="line">├── requirements.txt          <span class="comment"># 依赖项</span></span><br><span class="line">└── README.md                 <span class="comment"># 项目说明文件</span></span><br></pre></td></tr></table></figure><h2 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h2><p>需要注意的是别忘了在main.py将路由注册，以及需要加上app这个主包，保证找得到文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> app.api.ask_fake_news <span class="keyword">import</span> router <span class="keyword">as</span> ask_fake_news_router</span><br><span class="line"><span class="keyword">from</span> app.api.generate_chart <span class="keyword">import</span> router <span class="keyword">as</span> generate_chart_router</span><br><span class="line"><span class="keyword">from</span> app.api.show_fake_news <span class="keyword">import</span> router <span class="keyword">as</span> show_fake_news</span><br><span class="line"><span class="keyword">from</span> app.api.show_hot_news <span class="keyword">import</span> router <span class="keyword">as</span> show_hot_news</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册路由</span></span><br><span class="line">app.include_router(ask_fake_news_router)</span><br><span class="line">app.include_router(generate_chart_router)</span><br><span class="line">app.include_router(show_fake_news)</span><br><span class="line">app.include_router(show_hot_news)</span><br></pre></td></tr></table></figure><h2 id="流式传输"><a href="#流式传输" class="headerlink" title="流式传输"></a>流式传输</h2><ol><li><strong>示例代码</strong></li></ol><p>代码片段实现了一个 FastAPI 路由，使用 OpenAI API 生成流式响应：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> APIRouter, HTTPException</span><br><span class="line"><span class="keyword">from</span> app.utils.fake_news_data_loader <span class="keyword">import</span> load_fake_news_schema</span><br><span class="line"><span class="keyword">from</span> app.core.openai_client <span class="keyword">import</span> generate_openai_response</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> StreamingResponse</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">router = APIRouter()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">userContent</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    user_content: <span class="built_in">str</span>  <span class="comment"># 用户的问题内容</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@router.post(<span class="params"><span class="string">&quot;/ask_fake_news&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">ask_fake_news</span>(<span class="params">user_input: userContent</span>):</span><br><span class="line">    user_content = user_input.user_content</span><br><span class="line">    fake_news_data = load_fake_news_schema()</span><br><span class="line"></span><br><span class="line">    system_content = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        你能够根据用户的提问，查找相关的内容并以结构化的方式进行回答。你的依据是以下JSON：</span></span><br><span class="line"><span class="string">        <span class="subst">&#123;json.dumps(fake_news_data, ensure_ascii=<span class="literal">False</span>)&#125;</span></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    response = <span class="keyword">await</span> generate_openai_response(system_content, user_content, stream=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">response_generator</span>():</span><br><span class="line">        <span class="keyword">for</span> chunk <span class="keyword">in</span> response:</span><br><span class="line">            chunk_message = chunk.choices[<span class="number">0</span>].delta.content</span><br><span class="line">            <span class="keyword">yield</span> chunk_message</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> StreamingResponse(response_generator(), media_type=<span class="string">&quot;text/plain&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>代码核心解析</strong></li></ol><p><strong>2.1 路由与请求参数</strong></p><ul><li><code>@router.post(&quot;/ask_fake_news&quot;)</code> 定义了一个 POST 请求接口 <code>ask_fake_news</code>，用于接收用户的提问。</li><li><code>userContent</code> 通过 <code>Pydantic</code> 进行数据校验，要求请求体包含 <code>user_content</code> 字段。</li></ul><p><strong>2.2 处理用户请求</strong></p><ul><li><code>user_content = user_input.user_content</code> 获取用户输入的内容。</li><li><code>fake_news_data = load_fake_news_schema()</code> 加载虚假新闻数据，作为 AI 生成答案的参考依据。</li></ul><p><strong>2.3 生成 OpenAI 流式响应</strong></p><ul><li><p>&#96;&#96;&#96;<br>generate_openai_response(system_content, user_content, stream&#x3D;True)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  ：</span><br><span class="line"></span><br><span class="line">  - `system_content`：传递给 AI 的背景信息，提供 JSON 格式的虚假新闻数据。</span><br><span class="line">  - `user_content`：用户输入的具体问题。</span><br><span class="line">  - `stream=True`：启用流式传输，返回一个异步生成器对象。</span><br><span class="line"></span><br><span class="line">**2.4 定义流式生成器**</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  response_generator()</span><br></pre></td></tr></table></figure><p> 是一个异步生成器：</p><ul><li><code>for chunk in response:</code> 遍历 AI 生成的流式内容。</li><li><code>chunk_message = chunk.choices[0].delta.content</code> 提取每个返回片段。</li><li><code>yield chunk_message</code> 逐步返回数据。</li></ul></li></ul><p><strong>2.5 返回流式响应</strong></p><ul><li><code>StreamingResponse(response_generator(), media_type=&quot;text/plain&quot;)</code> 通过 <code>StreamingResponse</code> 将 <code>response_generator()</code> 的数据流式发送给客户端，减少延迟并提升用户体验。</li></ul><h2 id="请求openai类库封装"><a href="#请求openai类库封装" class="headerlink" title="请求openai类库封装"></a>请求openai类库封装</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> HTTPException</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">load_dotenv()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 API 密钥和基础 URL</span></span><br><span class="line">api_key = os.getenv(<span class="string">&quot;OPENAI_API_KEY&quot;</span>)</span><br><span class="line">base_url = os.getenv(<span class="string">&quot;OPENAI_BASE_URL&quot;</span>)</span><br><span class="line">client = OpenAI(api_key=api_key, base_url=base_url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印 OpenAI API 的基础 URL</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">generate_openai_response</span>(<span class="params">system_content: <span class="built_in">str</span>, user_content: <span class="built_in">str</span>, stream: <span class="built_in">bool</span></span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = client.chat.completions.create(</span><br><span class="line">            model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">            messages=[</span><br><span class="line">                &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: system_content&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_content&#125;,</span><br><span class="line">            ],</span><br><span class="line">            stream=stream</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">500</span>, detail=<span class="string">f&quot;Error calling OpenAI API: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="快速导出requirements-txt"><a href="#快速导出requirements-txt" class="headerlink" title="快速导出requirements.txt"></a>快速导出requirements.txt</h2><p>一般使用pipreqs的方法</p><p><strong>仅导出 requirements.txt 里需要的依赖：</strong></p><p>有时 pip freeze 会导出很多不必要的包，可以手动删除无关的行，或者用 pipreqs 生成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pipreqs</span><br><span class="line">pipreqs . --force</span><br></pre></td></tr></table></figure><p>这将基于代码中的 import 自动生成 requirements.txt，更精简。</p><p>你可以使用以下命令快速导出 requirements.txt：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p><strong>详细解释：</strong></p><p>​•pip freeze 会列出当前 Python 环境中已安装的所有依赖及其版本。</p><p>​•&gt; 符号用于将输出写入 requirements.txt 文件。</p><h2 id="docker部署"><a href="#docker部署" class="headerlink" title="docker部署"></a>docker部署</h2><p>参考：<a href="https://fastapi.tiangolo.com/zh/deployment/docker/">https://fastapi.tiangolo.com/zh/deployment/docker/</a></p><p>首先使用上面的快速导出requirements.txt的方法导出requirements.txt</p><p>需要注意的是uvicorn是没有通过上面的方法导出的，后面报错后才发现的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fastapi==0.115.7</span><br><span class="line">openai==1.60.2</span><br><span class="line">pydantic==2.10.6</span><br><span class="line">python-dotenv==1.0.1</span><br><span class="line">uvicorn&gt;=0.15.0,&lt;0.16.0</span><br></pre></td></tr></table></figure><p><strong>Dockerfile</strong></p><p>需要注意的是<code>app.main:app</code>，这个是因为main位于app包下面，之前还遇见过一个错误是使用了官方基于FastAPI的py镜像，导致端口错误，但是实际上官方不建议使用这个镜像</p><p>还有就是<code>&quot;--host&quot;, &quot;0.0.0.0&quot;</code>非常有必要，如果默认使用<code>127.0.0.1</code>的话，就只会接受本地的IP</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用官方 FastAPI 镜像（基于 Python）</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制依赖文件</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install --no-cache-dir -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制项目文件到容器中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动应用（默认使用 gunicorn）</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;uvicorn&quot;</span>, <span class="string">&quot;app.main:app&quot;</span>, <span class="string">&quot;--host&quot;</span>, <span class="string">&quot;0.0.0.0&quot;</span>, <span class="string">&quot;--port&quot;</span>, <span class="string">&quot;8000&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>运行命令</p><p>参考：<a href="https://www.assen.top/blog/2024-10-12-docker-proxy%E4%B8%AD%E7%9A%84%E5%9C%BA%E6%99%AF%E4%BA%8C">https://www.assen.top/blog/2024-10-12-docker-proxy中的场景二</a></p><p>需要注意的是<code>--network host</code>这个参数，不加的话很大概率报错<code>ERROR [linux/amd64 internal] load metadata for docker.io/tiangolo/uvicorn-gunicorn-fastapi:python3.9   </code>，主要原因是创建镜像需要网络连接，这个时候需要指定经过的宿主机网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker buildx build --network host --platform linux/amd64,linux/arm64 -t tecnb/news-guard-api:remote --push .</span><br></pre></td></tr></table></figure><p><strong>docker-compose.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">api:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tecnb/news-guard-api:remote</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">news-guard-api</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span>  <span class="comment"># 将宿主机的80端口映射到容器8000端口</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">APP_ENV=production</span></span><br><span class="line">    <span class="comment"># 如需挂载配置文件或持久化数据</span></span><br><span class="line">    <span class="comment"># volumes:</span></span><br><span class="line">    <span class="comment">#   - ./config:/app/config</span></span><br></pre></td></tr></table></figure><h1 id="类openai界面封装"><a href="#类openai界面封装" class="headerlink" title="类openai界面封装"></a>类openai界面封装</h1><h1 id="解决unknown-at-rule-apply-问题"><a href="#解决unknown-at-rule-apply-问题" class="headerlink" title="解决unknown at rule apply 问题"></a>解决unknown at rule apply 问题</h1><p>参考：<a href="https://blog.csdn.net/njkl2166/article/details/135010067">https://blog.csdn.net/njkl2166/article/details/135010067</a></p><p>原因是使用了apply去使用taliwindcss中所定的class名称，导致无法找到，需要添加两个设置文件</p><ol><li><p>新建文件.vscode&#x2F;tailwindcss.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">1.1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;atDirectives&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@tailwind&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Use the `@tailwind` directive to insert Tailwind&#x27;s `base`, `components`, `utilities` and `screens` styles into your CSS.&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;references&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tailwind Documentation&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://tailwindcss.com/docs/functions-and-directives#tailwind&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@apply&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Use the `@apply` directive to inline any existing utility classes into your own custom CSS. This is useful when you find a common utility pattern in your HTML that you’d like to extract to a new component.&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;references&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tailwind Documentation&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://tailwindcss.com/docs/functions-and-directives#apply&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@responsive&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;You can generate responsive variants of your own classes by wrapping their definitions in the `@responsive` directive:\n```css\n@responsive &#123;\n  .alert &#123;\n    background-color: #E53E3E;\n  &#125;\n&#125;\n```\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;references&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tailwind Documentation&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://tailwindcss.com/docs/functions-and-directives#responsive&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@screen&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The `@screen` directive allows you to create media queries that reference your breakpoints by **name** instead of duplicating their values in your own CSS:\n```css\n@screen sm &#123;\n  /* ... */\n&#125;\n```\n…gets transformed into this:\n```css\n@media (min-width: 640px) &#123;\n  /* ... */\n&#125;\n```\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;references&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tailwind Documentation&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://tailwindcss.com/docs/functions-and-directives#screen&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@variants&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Generate `hover`, `focus`, `active` and other **variants** of your own utilities by wrapping their definitions in the `@variants` directive:\n```css\n@variants hover, focus &#123;\n   .btn-brand &#123;\n    background-color: #3182CE;\n  &#125;\n&#125;\n```\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;references&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tailwind Documentation&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://tailwindcss.com/docs/functions-and-directives#variants&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>新建文件.vscode&#x2F;settings.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .vscode/settings.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;css.customData&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;.vscode/tailwindcss.json&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="express服务器上线"><a href="#express服务器上线" class="headerlink" title="express服务器上线"></a>express服务器上线</h1><p>这个是顺道帮忙时解决的</p><p>先是直接在终端<code>npm run start</code>，然后通过nginx转发端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name xxxx;</span><br><span class="line">    index index.php index.html index.htm default.php default.htm default.html;</span><br><span class="line">    root /www/wwwroot/boomdamn-web;  <span class="comment"># 前端静态文件的根目录</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向代理到 Node.js 后端（3000端口）</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:3000;  <span class="comment"># 将请求代理到 3000 端口的 Node.js 应用</span></span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        proxy_set_header Connection <span class="string">&#x27;upgrade&#x27;</span>;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_cache_bypass <span class="variable">$http_upgrade</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    access_log /www/wwwlogs/xxxxxx.log;</span><br><span class="line">    error_log /www/wwwlogs/xxxxxx.error.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是由于终端会自动关闭，后续使用了pm2这样一个node管理器，保证不会关闭以及实现快速重启</p><h1 id="SSL证书部署问题"><a href="#SSL证书部署问题" class="headerlink" title="SSL证书部署问题"></a>SSL证书部署问题</h1><p>下面这几行在配置中很关键，如果之前去掉的话会报错<code>站点配置文件中未找到标识信息【#error_page 404/404.html；】，无法确定SSL配置添加位置，请尝试手动添加标识或恢复配置文件</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则</span></span><br><span class="line">  <span class="comment">#error_page 404/404.html;</span></span><br><span class="line">  <span class="comment">#SSL-END</span></span><br></pre></td></tr></table></figure><p>完整如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443 ssl http2 ;</span><br><span class="line">    server_name xxxxxx www.zhadanegg.com;</span><br><span class="line">    index index.php index.html index.htm default.php default.htm default.html;</span><br><span class="line">    root /www/wwwroot/boomdamn-web;  <span class="comment"># 前端静态文件的根目录</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则</span></span><br><span class="line">    <span class="comment">#error_page 404/404.html;</span></span><br><span class="line">    <span class="comment">#SSL-END</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向代理到 Node.js 后端（3000端口）</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:3000;  <span class="comment"># 将请求代理到 3000 端口的 Node.js 应用</span></span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        proxy_set_header Connection <span class="string">&#x27;upgrade&#x27;</span>;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_cache_bypass <span class="variable">$http_upgrade</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    access_log /www/wwwlogs/xxxxxx.log;</span><br><span class="line">    error_log /www/wwwlogs/xxxxxx.error.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用WaveSurfer实现音频波形图"><a href="#使用WaveSurfer实现音频波形图" class="headerlink" title="使用WaveSurfer实现音频波形图"></a>使用WaveSurfer实现音频波形图</h1><p><strong>步骤 1: 安装 wavesurfer.js</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install wavesurfer.js</span><br></pre></td></tr></table></figure><p><strong>步骤 2: 创建音频波形图组件</strong></p><p>202202050225</p><p>Zjc093613</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;w-full h-full&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;w-full h-full flex flex-col justify-center items-center gap-8&quot;&gt;</span><br><span class="line">            &lt;div ref=&quot;waveform&quot; class=&quot;waveform w-full&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- 播放控制按钮 --&gt;</span><br><span class="line">            &lt;div class=&quot;flex flex-col items-center space-y-4&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;flex items-center space-x-4&quot;&gt;</span><br><span class="line">                    &lt;!-- 向左快进1秒按钮 --&gt;</span><br><span class="line">                    &lt;button @click=&quot;skipBackward&quot;</span><br><span class="line">                        class=&quot;px-4 py-1 bg-gray-500 text-white rounded-md text-lg hover:bg-gray-600 focus:outline-none transition&quot;&gt;</span><br><span class="line">                        &lt;i class=&quot;fas fa-backward&quot;&gt;&lt;/i&gt; &lt;!-- FontAwesome icon --&gt;</span><br><span class="line">                    &lt;/button&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;!-- 播放/暂停按钮 --&gt;</span><br><span class="line">                    &lt;button @click=&quot;togglePlayback&quot;</span><br><span class="line">                        class=&quot;px-4 py-1 bg-green-500 text-white rounded-md text-lg hover:bg-green-600 focus:outline-none transition&quot;&gt;</span><br><span class="line">                        &lt;i :class=&quot;isPlaying ? &#x27;fas fa-pause&#x27; : &#x27;fas fa-play&#x27;&quot;&gt;&lt;/i&gt; &lt;!-- FontAwesome icon --&gt;</span><br><span class="line">                    &lt;/button&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;!-- 向右快进1秒按钮 --&gt;</span><br><span class="line">                    &lt;button @click=&quot;skipForward&quot;</span><br><span class="line">                        class=&quot;px-4 py-1 bg-gray-500 text-white rounded-md text-lg hover:bg-gray-600 focus:outline-none transition&quot;&gt;</span><br><span class="line">                        &lt;i class=&quot;fas fa-forward&quot;&gt;&lt;/i&gt; &lt;!-- FontAwesome icon --&gt;</span><br><span class="line">                    &lt;/button&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; onMounted, ref, watch, defineProps &#125; from &#x27;vue&#x27;;</span><br><span class="line">import WaveSurfer from &#x27;wavesurfer.js&#x27;;</span><br><span class="line"></span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">    audioFile: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        required: true,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const waveform = ref&lt;HTMLDivElement | null&gt;(null);</span><br><span class="line">let waveSurfer: WaveSurfer | null = null;</span><br><span class="line"></span><br><span class="line">const isPlaying = ref(false);</span><br><span class="line">const currentTime = ref(0);  // 当前播放时间</span><br><span class="line">const duration = ref(0);  // 音频时长</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">    if (waveform.value &amp;&amp; props.audioFile) &#123;</span><br><span class="line">        // 初始化 WaveSurfer 实例</span><br><span class="line">        waveSurfer = WaveSurfer.create(&#123;</span><br><span class="line">            container: waveform.value,</span><br><span class="line">            waveColor: &#x27;#ddd&#x27;,</span><br><span class="line">            progressColor: &#x27;#22c55e&#x27;,</span><br><span class="line">            height: 140,  // 可根据需要调整高度</span><br><span class="line">            // responsive: true,  // 响应式适配</span><br><span class="line">            cursorColor: &#x27;#22c55e&#x27;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        // 加载音频文件</span><br><span class="line">        waveSurfer.load(props.audioFile);</span><br><span class="line"></span><br><span class="line">        // 设置音量</span><br><span class="line">        waveSurfer.on(&#x27;ready&#x27;, () =&gt; &#123;</span><br><span class="line">            duration.value = waveSurfer?.getDuration() || 0;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        // 更新当前播放时间</span><br><span class="line">        waveSurfer.on(&#x27;audioprocess&#x27;, () =&gt; &#123;</span><br><span class="line">            currentTime.value = waveSurfer?.getCurrentTime() || 0;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        // 播放或暂停时，更新按钮状态</span><br><span class="line">        waveSurfer.on(&#x27;play&#x27;, () =&gt; &#123;</span><br><span class="line">            isPlaying.value = true;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        waveSurfer.on(&#x27;pause&#x27;, () =&gt; &#123;</span><br><span class="line">            isPlaying.value = false;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 监听 audioFile 变化</span><br><span class="line">watch(() =&gt; props.audioFile, (newFile) =&gt; &#123;</span><br><span class="line">    if (waveSurfer) &#123;</span><br><span class="line">        waveSurfer.load(newFile);  // 如果文件路径改变，重新加载</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 播放或暂停音频</span><br><span class="line">const togglePlayback = () =&gt; &#123;</span><br><span class="line">    if (waveSurfer) &#123;</span><br><span class="line">        if (isPlaying.value) &#123;</span><br><span class="line">            waveSurfer.pause();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            waveSurfer.play();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 向左快进1秒</span><br><span class="line">const skipBackward = () =&gt; &#123;</span><br><span class="line">    if (waveSurfer) &#123;</span><br><span class="line">        const newTime = Math.max(0, currentTime.value - 1);</span><br><span class="line">        waveSurfer.seekTo(newTime / duration.value);</span><br><span class="line">        currentTime.value = newTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 向右快进1秒</span><br><span class="line">const skipForward = () =&gt; &#123;</span><br><span class="line">    if (waveSurfer) &#123;</span><br><span class="line">        const newTime = Math.min(duration.value, currentTime.value + 1);</span><br><span class="line">        waveSurfer.seekTo(newTime / duration.value);</span><br><span class="line">        currentTime.value = newTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>步骤 3: 使用波形图组件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;VerifyAudioView h-full flex justify-center items-center gap-8 p-12&quot;&gt;</span><br><span class="line">        &lt;AudioWaveform :audioFile=&quot;audioFile&quot; v-if=&quot;audioFile&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;&#x27;</span><br><span class="line"></span><br><span class="line">import AudioWaveform from &#x27;../../components/AudioWaveform.vue&#x27;;</span><br><span class="line"></span><br><span class="line">const audioFile = ref&lt;string | null&gt;(null);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="RagFlow"><a href="#RagFlow" class="headerlink" title="RagFlow"></a>RagFlow</h1><h2 id="Mac-部署"><a href="#Mac-部署" class="headerlink" title="Mac 部署"></a>Mac 部署</h2><p>难点：</p><ul><li><p>官方不维护arm64版本的镜像，需要自己去构筑</p></li><li><p>构筑完成后如何让该镜像被正确的使用也是问题，官方底下以及所有能够搜到的大部分教程都是去使用<code>docker-compose-macos.yml</code>去启动，实际上官方这个macos的yml文件有问题，最后构筑出来的是amd64平台，应该使用<code>docker-compose.yml</code>进行启动</p></li><li><p>需要的资源量多，需要去docker软件中将Disk容量拉到120GB以上</p></li></ul><p>步骤：</p><p>首先克隆项目，然后进入到对应文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/infiniflow/ragflow.git</span><br><span class="line"><span class="built_in">cd</span> ragflow/</span><br></pre></td></tr></table></figure><p>修改env，MEM_LIMIT拉高，防止内存不足，建议拉到12GB以上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MEM_LIMIT=13073741824</span><br><span class="line">MACOS=1</span><br></pre></td></tr></table></figure><p>下载需要的依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install huggingface_hub nltk</span><br><span class="line">python3 download_deps.py</span><br></pre></td></tr></table></figure><p>通过下面的命令进行构筑米，注意构筑时间非常长</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build --network=host -f Dockerfile.deps -t infiniflow/ragflow_deps .</span><br><span class="line">docker build --network=host -f Dockerfile -t infiniflow/ragflow:v0.16.0 .</span><br></pre></td></tr></table></figure><p>修改docker-compose.yml，image部分改为自己本地构筑好的镜像</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">include:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">./docker-compose-base.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">ragflow:</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="attr">mysql:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">service_healthy</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">infiniflow/ragflow:v0.16.0-slim</span></span><br><span class="line">    <span class="attr">platform:</span> <span class="string">linux/arm64</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ragflow-server</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;SVR_HTTP_PORT&#125;:9380</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./ragflow-logs:/ragflow/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/ragflow.conf:/etc/nginx/conf.d/ragflow.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/proxy.conf:/etc/nginx/proxy.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class="line">    <span class="attr">env_file:</span> <span class="string">.env</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=$&#123;TIMEZONE&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HF_ENDPOINT=$&#123;HF_ENDPOINT&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MACOS=$&#123;MACOS&#125;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ragflow</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br></pre></td></tr></table></figure><p>使用下面命令进行容器启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose -f docker/docker-compose.yml up</span><br></pre></td></tr></table></figure><p>报错：</p><p>Bug1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">failed to solve: infiniflow/ragflow_deps:latest: failed to resolve <span class="built_in">source</span> metadata <span class="keyword">for</span> docker.io/infiniflow/ragflow_deps:latest: no match <span class="keyword">for</span> platform <span class="keyword">in</span> manifest: not found</span><br></pre></td></tr></table></figure><p>该报错在于使用<code>docker-compose-macos.yml</code>去进行启动，可以加上<code>platform: linux/x86_64</code>，避免报错但是最后启动时，<code>rag-server</code>启动会出错</p><p>Bug2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImportError: /usr/lib/x86_64-linux-gnu/libodbc.so.2: file too short</span><br></pre></td></tr></table></figure><p>该报错在于<code>docker-compose-macos.yml</code>正确启动后的报错，原因是官方的这个yml并没有正确构筑，在其dockerfile中对于arm64平台没做判断，最后平台不同导致无法启动</p><p>Bug3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;code&quot;</span>:100,<span class="string">&quot;data&quot;</span>:null,<span class="string">&quot;message&quot;</span>:<span class="string">&quot;&lt;NotFound &#x27;404: Not Found&#x27;&gt;&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>该报错在于使用<code>http://127.0.0.1:9380/</code>去进行访问，实际上应该使用<code>http://127.0.0.1</code>进行访问</p><h2 id="API使用"><a href="#API使用" class="headerlink" title="API使用"></a>API使用</h2><p>列举关键API，RagFlow的API有多个不同的ID，在实际返回中却没有对应的区别，导致需要猜测这个ID对应的属性</p><p>Header：</p><ul><li><code>&#39;Authorization: Bearer &lt;YOUR_API_KEY&gt;&#39;</code></li></ul><ol><li><p>列出数据集</p><p>id为dataset_id</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get http://127.0.0.1/api/v1/datasets?<span class="built_in">id</span>=be7f86d0f31711efb8b10242ac120006</span><br></pre></td></tr></table></figure><p>返回：</p><p>此处的id为dataset_id</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;chunk_count&quot;</span><span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;chunk_method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;naive&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;create_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tue, 25 Feb 2025 09:27:57 GMT&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;create_time&quot;</span><span class="punctuation">:</span> <span class="number">1740446877761</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;created_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;93128efef31511efac840242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;embedding_model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;be7f86d0f31711efb8b10242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;English&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fake-news&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pagerank&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;parser_config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">[</span></span><br><span class="line"><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="number">1000000</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;permission&quot;</span><span class="punctuation">:</span> <span class="string">&quot;me&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;similarity_threshold&quot;</span><span class="punctuation">:</span> <span class="number">0.2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;tenant_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;93128efef31511efac840242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;token_num&quot;</span><span class="punctuation">:</span> <span class="number">2585</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;update_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tue, 25 Feb 2025 09:29:37 GMT&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;update_time&quot;</span><span class="punctuation">:</span> <span class="number">1740446977285</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;vector_similarity_weight&quot;</span><span class="punctuation">:</span> <span class="number">0.3</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>列出聊天助手</p><p>id为chat_id</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get http://127.0.0.1/api/v1/chats?<span class="built_in">id</span>=22c63b20f31811ef85c10242ac120006</span><br></pre></td></tr></table></figure><p>返回：</p><p>此处的id为session_id</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;chat_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;22c63b20f31811ef85c10242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;create_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tue, 25 Feb 2025 09:31:13 GMT&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;create_time&quot;</span><span class="punctuation">:</span> <span class="number">1740447073578</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1f9c8eac44c34b2c98dcfda139aea23f&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你好！ 我是你的助理，有什么可以帮到你的吗？&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;即食米饭能保存很久，加了大量防腐剂嘛&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;doc_ids&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d11a2bf6-8d6a-4c99-8ec0-53a6e77d8d4f&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;根据知识库中的信息，即食米饭能保存很久并不是因为加了大量防腐剂 ##0$$。其保质期长的关键在于制作过程中严格灭菌和密封包装 ##1$$。具体来说：\n\n1. **严格灭菌**：即食米饭在生产过程中会对原料进行杀菌，并在一次包装后进行最终灭菌，使得其内外几乎无菌，能够在常温下长时间保存。\n2. **密封包装**：真空密封包装避免了外界空气和细菌的进入，从根本上阻止了微生物的生长。\n\n这种工艺与罐头食品类似，无需添加防腐剂即可实现长期保存。因此，即食米饭的制作过程完全符合食品安全标准，消费者可以根据需求安心选购。\n\n**来源**： “科学辟谣”微信公众号&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="number">1740447087.4371278</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d11a2bf6-8d6a-4c99-8ec0-53a6e77d8d4f&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;reference&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;1\&quot;: &#123;\&quot;measures\&quot;: \&quot;对编造散布地震谣言扰乱公共秩序、造成恶劣社会影响的行为，公安机关将依法依规严肃查处。请广大网民擦亮眼睛，勿轻信传播非正规来源、未经证实的地震信息。\&quot;, \&quot;date\&quot;: \&quot;2025-01-24\&quot;&#125;&#125;&#123;\&quot;2\&quot;: &#123;\&quot;headline\&quot;: \&quot;即食米饭能保存很久，一定是加了大量防腐剂？\&quot;, \&quot;field\&quot;: \&quot;食品安全\&quot;&#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dataset_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;be7f86d0f31711efb8b10242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;db911ec8f31711ef949e0242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fake_news.json&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a4e230032be5e6c4&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;image_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;positions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;2\&quot;: &#123;\&quot;truth\&quot;: \&quot;即食米饭保质期长，关键在于制作过程中严格灭菌和密封包装，与防腐剂无关。即食米饭在生产中，不仅会对原料进行杀菌，还会在一次包装后进行最终灭菌，这使得其内外都几乎无菌，能够在常温下长时间保存。此外，真空密封包装避免了外界空气和细菌的进入，从根本上阻止了微生物的生长。这种工艺与罐头食品类似，无需添加防腐剂即可实现长期保存。总之，即食米饭的制作过程完全符合食品安全标准，消费者可以根据需求安心选购。\&quot;, \&quot;source\&quot;: \&quot;“科学辟谣”微信公众号\&quot;&#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dataset_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;be7f86d0f31711efb8b10242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;db911ec8f31711ef949e0242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fake_news.json&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;e0d57fe3b5f1f16f&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;image_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;positions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;2\&quot;: &#123;\&quot;measures\&quot;: \&quot;建议消费者将其作为应急或便捷选择，平时仍应以新鲜米饭为主，均衡饮食才是健康之道。\&quot;, \&quot;date\&quot;: \&quot;2025-01-24\&quot;&#125;&#125;&#123;\&quot;3\&quot;: &#123;\&quot;headline\&quot;: \&quot;过年遇到这样的红包，务必警惕！\&quot;, \&quot;field\&quot;: \&quot;网络诈骗\&quot;, \&quot;truth\&quot;: \&quot;过年期间，几个朋友拉微信群发红包，好不热闹。但如果你突然被拉入一个陌生群聊，告知不仅有“福利”还能“赚钱”，你该怎么办？警方提示，这是典型的刷单返利类诈骗。\&quot;, \&quot;source\&quot;: \&quot;“熊猫反诈”微信公众号\&quot;&#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dataset_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;be7f86d0f31711efb8b10242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;db911ec8f31711ef949e0242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fake_news.json&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c6ef9e51c38548b9&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;image_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;positions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;7\&quot;: &#123;\&quot;source\&quot;: \&quot;“南京网络辟谣”微信公众号\&quot;, \&quot;measures\&quot;: \&quot;\&quot;, \&quot;date\&quot;: \&quot;2025-01-22\&quot;&#125;&#125;&#123;\&quot;8\&quot;: &#123;\&quot;headline\&quot;: \&quot;抢票软件真的抢票更快？\&quot;, \&quot;field\&quot;: \&quot;科技\&quot;, \&quot;truth\&quot;: \&quot;春运首周，市面上涌现出大量“抢票软件”，号称“只要加钱就能抢到票”。实际上，当12306显示“无票”，有些抢票软件显示“有票”，这样的信息其实都是从12306爬取、修改加工而来的，目的是诱导旅客买长乘短、买短乘长，让旅客多花钱。抢票软件的“加速包”其实也是忽悠旅客的一个噱头，花钱购买加速包，抢票速度也不会提升。需要注意的是，12306平台从来没有和任何第三方平台机构合作，没有将票额分配给任何第三方平台发售，也没有和任何第三方平台进行数据连接。\&quot;&#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dataset_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;be7f86d0f31711efb8b10242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;db911ec8f31711ef949e0242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fake_news.json&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ee5042a9f76c4e6c&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;image_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;positions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;即食米饭能保存很久，加了大量防腐剂嘛&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;update_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tue, 25 Feb 2025 09:31:27 GMT&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;update_time&quot;</span><span class="punctuation">:</span> <span class="number">1740447087437</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>列出聊天助手的会话</p><p>id为chat_id</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get http://127.0.0.1/api/v1/chats/22c63b20f31811ef85c10242ac120006/sessions</span><br></pre></td></tr></table></figure><p>返回：</p><p>id为session_id</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;chat_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;22c63b20f31811ef85c10242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;create_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tue, 25 Feb 2025 09:31:13 GMT&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;create_time&quot;</span><span class="punctuation">:</span> <span class="number">1740447073578</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1f9c8eac44c34b2c98dcfda139aea23f&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你好！ 我是你的助理，有什么可以帮到你的吗？&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;即食米饭能保存很久，加了大量防腐剂嘛&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;doc_ids&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d11a2bf6-8d6a-4c99-8ec0-53a6e77d8d4f&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;根据知识库中的信息，即食米饭能保存很久并不是因为加了大量防腐剂 ##0$$。其保质期长的关键在于制作过程中严格灭菌和密封包装 ##1$$。具体来说：\n\n1. **严格灭菌**：即食米饭在生产过程中会对原料进行杀菌，并在一次包装后进行最终灭菌，使得其内外几乎无菌，能够在常温下长时间保存。\n2. **密封包装**：真空密封包装避免了外界空气和细菌的进入，从根本上阻止了微生物的生长。\n\n这种工艺与罐头食品类似，无需添加防腐剂即可实现长期保存。因此，即食米饭的制作过程完全符合食品安全标准，消费者可以根据需求安心选购。\n\n**来源**： “科学辟谣”微信公众号&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="number">1740447087.4371278</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d11a2bf6-8d6a-4c99-8ec0-53a6e77d8d4f&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;reference&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;1\&quot;: &#123;\&quot;measures\&quot;: \&quot;对编造散布地震谣言扰乱公共秩序、造成恶劣社会影响的行为，公安机关将依法依规严肃查处。请广大网民擦亮眼睛，勿轻信传播非正规来源、未经证实的地震信息。\&quot;, \&quot;date\&quot;: \&quot;2025-01-24\&quot;&#125;&#125;&#123;\&quot;2\&quot;: &#123;\&quot;headline\&quot;: \&quot;即食米饭能保存很久，一定是加了大量防腐剂？\&quot;, \&quot;field\&quot;: \&quot;食品安全\&quot;&#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dataset_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;be7f86d0f31711efb8b10242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;db911ec8f31711ef949e0242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fake_news.json&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a4e230032be5e6c4&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;image_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;positions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;2\&quot;: &#123;\&quot;truth\&quot;: \&quot;即食米饭保质期长，关键在于制作过程中严格灭菌和密封包装，与防腐剂无关。即食米饭在生产中，不仅会对原料进行杀菌，还会在一次包装后进行最终灭菌，这使得其内外都几乎无菌，能够在常温下长时间保存。此外，真空密封包装避免了外界空气和细菌的进入，从根本上阻止了微生物的生长。这种工艺与罐头食品类似，无需添加防腐剂即可实现长期保存。总之，即食米饭的制作过程完全符合食品安全标准，消费者可以根据需求安心选购。\&quot;, \&quot;source\&quot;: \&quot;“科学辟谣”微信公众号\&quot;&#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dataset_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;be7f86d0f31711efb8b10242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;db911ec8f31711ef949e0242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fake_news.json&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;e0d57fe3b5f1f16f&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;image_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;positions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;2\&quot;: &#123;\&quot;measures\&quot;: \&quot;建议消费者将其作为应急或便捷选择，平时仍应以新鲜米饭为主，均衡饮食才是健康之道。\&quot;, \&quot;date\&quot;: \&quot;2025-01-24\&quot;&#125;&#125;&#123;\&quot;3\&quot;: &#123;\&quot;headline\&quot;: \&quot;过年遇到这样的红包，务必警惕！\&quot;, \&quot;field\&quot;: \&quot;网络诈骗\&quot;, \&quot;truth\&quot;: \&quot;过年期间，几个朋友拉微信群发红包，好不热闹。但如果你突然被拉入一个陌生群聊，告知不仅有“福利”还能“赚钱”，你该怎么办？警方提示，这是典型的刷单返利类诈骗。\&quot;, \&quot;source\&quot;: \&quot;“熊猫反诈”微信公众号\&quot;&#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dataset_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;be7f86d0f31711efb8b10242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;db911ec8f31711ef949e0242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fake_news.json&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c6ef9e51c38548b9&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;image_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;positions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;7\&quot;: &#123;\&quot;source\&quot;: \&quot;“南京网络辟谣”微信公众号\&quot;, \&quot;measures\&quot;: \&quot;\&quot;, \&quot;date\&quot;: \&quot;2025-01-22\&quot;&#125;&#125;&#123;\&quot;8\&quot;: &#123;\&quot;headline\&quot;: \&quot;抢票软件真的抢票更快？\&quot;, \&quot;field\&quot;: \&quot;科技\&quot;, \&quot;truth\&quot;: \&quot;春运首周，市面上涌现出大量“抢票软件”，号称“只要加钱就能抢到票”。实际上，当12306显示“无票”，有些抢票软件显示“有票”，这样的信息其实都是从12306爬取、修改加工而来的，目的是诱导旅客买长乘短、买短乘长，让旅客多花钱。抢票软件的“加速包”其实也是忽悠旅客的一个噱头，花钱购买加速包，抢票速度也不会提升。需要注意的是，12306平台从来没有和任何第三方平台机构合作，没有将票额分配给任何第三方平台发售，也没有和任何第三方平台进行数据连接。\&quot;&#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dataset_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;be7f86d0f31711efb8b10242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;db911ec8f31711ef949e0242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fake_news.json&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ee5042a9f76c4e6c&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;image_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;positions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;即食米饭能保存很久，加了大量防腐剂嘛&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;update_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tue, 25 Feb 2025 09:31:27 GMT&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;update_time&quot;</span><span class="punctuation">:</span> <span class="number">1740447087437</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>与聊天助手交谈</p><p>id为chat_id</p><p>会话的 ID。如果未提供，将生成一个新会话</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get http://127.0.0.1/api/v1/chats/22c63b20f31811ef85c10242ac120006/completions</span><br></pre></td></tr></table></figure><p>Body</p><p>id为session_id</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;question&quot;</span><span class="punctuation">:</span> <span class="string">&quot;告诉我2025-01-24的虚假新闻&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;stream&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;session_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1f9c8eac44c34b2c98dcfda139aea23f&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>返回：</p><p>id为对话中该句的ID，目前没发现具体作用</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;answer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;audio_binary&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="number">1740488049.0561419</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cbcc0e18-34cd-4b25-b862-3b314100e24b&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;prompt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;reference&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;chunks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dataset_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;be7f86d0f31711efb8b10242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;db911ec8f31711ef949e0242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fake_news.json&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a4e230032be5e6c4&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;image_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;positions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dataset_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;be7f86d0f31711efb8b10242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;db911ec8f31711ef949e0242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fake_news.json&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c6ef9e51c38548b9&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;image_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;positions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dataset_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;be7f86d0f31711efb8b10242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;db911ec8f31711ef949e0242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fake_news.json&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d708e17ccbfc894b&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;image_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;positions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dataset_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;be7f86d0f31711efb8b10242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;db911ec8f31711ef949e0242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fake_news.json&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;f499654c7ee42b70&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;image_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;positions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dataset_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;be7f86d0f31711efb8b10242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;db911ec8f31711ef949e0242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fake_news.json&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ca747667448e60b2&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;image_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;positions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dataset_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;be7f86d0f31711efb8b10242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;db911ec8f31711ef949e0242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fake_news.json&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8d54480f9aa2c954&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;image_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;positions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dataset_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;be7f86d0f31711efb8b10242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;db911ec8f31711ef949e0242ac120006&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;document_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fake_news.json&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4066c2fd517a8920&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;image_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;positions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">&quot;</span>dataset_id<span class="string">&quot;: &quot;</span>be7f86d0f31711efb8b10242ac120006<span class="string">&quot;,</span></span><br><span class="line"><span class="string">&quot;</span>document_id<span class="string">&quot;: &quot;</span>db911ec8f31711ef949e0242ac120006<span class="string">&quot;,</span></span><br><span class="line"><span class="string">&quot;</span>document_name<span class="string">&quot;: &quot;</span>fake_news.json<span class="string">&quot;,</span></span><br><span class="line"><span class="string">&quot;</span>id<span class="string">&quot;: &quot;</span><span class="number">66</span>c840574441e3a3<span class="string">&quot;,</span></span><br><span class="line"><span class="string">&quot;</span>image_id<span class="string">&quot;: &quot;</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">&quot;</span>positions<span class="string">&quot;: []</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;</span>doc_aggs<span class="string">&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;</span>count<span class="string">&quot;: 8,</span></span><br><span class="line"><span class="string">&quot;</span>doc_id<span class="string">&quot;: &quot;</span>db911ec8f31711ef949e0242ac120006<span class="string">&quot;,</span></span><br><span class="line"><span class="string">&quot;</span>doc_name<span class="string">&quot;: &quot;</span>fake_news.json<span class="string">&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;</span>total<span class="string">&quot;: 12</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&quot;</span>session_id<span class="string">&quot;: &quot;</span><span class="number">1</span>f9c8eac44c34b2c98dcfda139aea23f<span class="string">&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li><li></li></ol><h1 id="解决httpx的Delete无法正确传参数的问题"><a href="#解决httpx的Delete无法正确传参数的问题" class="headerlink" title="解决httpx的Delete无法正确传参数的问题"></a>解决httpx的Delete无法正确传参数的问题</h1><p>参考：<a href="https://github.com/encode/httpx/discussions/1587">https://github.com/encode/httpx/discussions/1587</a></p><p>该用request进行请求，然后在第一个参数位置给出”DELETE”请求方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.delete(<span class="params"><span class="string">&quot;/delete_documents&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">delete_documents</span>(<span class="params">request: parseDocumentsRequest</span>):</span><br><span class="line">    datasetsId = request.datasetsId</span><br><span class="line">    documentId = request.documentId</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(datasetsId)</span><br><span class="line">    <span class="built_in">print</span>(documentId)</span><br><span class="line">    <span class="comment"># 设置请求头，包含 Authorization header</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;Bearer <span class="subst">&#123;RAGFLOW_API_KEY&#125;</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    json = &#123;</span><br><span class="line">        <span class="string">&quot;ids&quot;</span>: [</span><br><span class="line">            documentId</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> httpx.AsyncClient() <span class="keyword">as</span> client:</span><br><span class="line">        <span class="comment"># 发送 Delete 请求</span></span><br><span class="line">        response = <span class="keyword">await</span> client.request(</span><br><span class="line">            <span class="string">&quot;DELETE&quot;</span>,</span><br><span class="line">            <span class="string">f&quot;http://localhost:80/api/v1/datasets/<span class="subst">&#123;datasetsId&#125;</span>/documents&quot;</span>,</span><br><span class="line">            headers=headers,</span><br><span class="line">            json=json</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 确保请求成功</span></span><br><span class="line">        response.raise_for_status()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response.json()</span><br></pre></td></tr></table></figure><h1 id="vue3-路由参数影响网络代理"><a href="#vue3-路由参数影响网络代理" class="headerlink" title="vue3  路由参数影响网络代理"></a>vue3  路由参数影响网络代理</h1><p>由于&#x2F;create-knowledge&#x2F;:id路由是包含参数的，导致&#x2F;api也被作为参数传递了，出现不返回后端参数而是返回页面的情况，同时code为307 temporary redirect</p><p>路由改为createWebHashHistory就行了</p><h1 id="网页插件开发"><a href="#网页插件开发" class="headerlink" title="网页插件开发"></a>网页插件开发</h1><h2 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h2><h1 id="需要注意vite-config-ts里面的代理并不会起效，只需要把baseURL改为正确的后端地址就行，不需要进行转发"><a href="#需要注意vite-config-ts里面的代理并不会起效，只需要把baseURL改为正确的后端地址就行，不需要进行转发" class="headerlink" title="需要注意vite.config.ts里面的代理并不会起效，只需要把baseURL改为正确的后端地址就行，不需要进行转发"></a>需要注意vite.config.ts里面的代理并不会起效，只需要把baseURL改为正确的后端地址就行，不需要进行转发</h1><h1 id="Vue3-defineModel-双向绑定"><a href="#Vue3-defineModel-双向绑定" class="headerlink" title="Vue3 defineModel 双向绑定"></a>Vue3 defineModel 双向绑定</h1><p>参考：<a href="https://cn.vuejs.org/guide/components/v-model">https://cn.vuejs.org/guide/components/v-model</a></p><h1 id="遇到返回不规范JSON的解决方式（JSON5）"><a href="#遇到返回不规范JSON的解决方式（JSON5）" class="headerlink" title="遇到返回不规范JSON的解决方式（JSON5）"></a>遇到返回不规范JSON的解决方式（JSON5）</h1><p>参考：<a href="https://github.com/json5/json5/issues/240">https://github.com/json5/json5/issues/240</a></p><p>使用JSON5，但是直接引用的话由于commendJs与ESM的区别，会报错无默认导出</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> parse = <span class="built_in">require</span>(<span class="string">&#x27;../lib/parse&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> stringify = <span class="built_in">require</span>(<span class="string">&#x27;../lib/stringify&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">JSON</span>5 &#123;</span><br><span class="line">  <span class="attr">parse</span>: <span class="keyword">typeof</span> parse</span><br><span class="line">  <span class="attr">stringify</span>: <span class="keyword">typeof</span> stringify</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="title class_">JSON</span>5: <span class="title class_">JSON</span>5</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">JSON</span>5</span><br></pre></td></tr></table></figure><p>导入：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">JSON</span>5 <span class="keyword">from</span> <span class="string">&#x27;json5&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>对话式智能助手项目经验</title>
      <link href="/posts/36279e9a.html"/>
      <url>/posts/36279e9a.html</url>
      
        <content type="html"><![CDATA[<h1 id="package-json-本地包导入tgz"><a href="#package-json-本地包导入tgz" class="headerlink" title="package.json 本地包导入tgz"></a>package.json 本地包导入tgz</h1><p>参考：<a href="https://blog.csdn.net/fanweilin0123/article/details/106458861">npm如何引入本地自建的包和需要维护的包_npm 引用本地包-CSDN博客</a>、[如何在项目中引用本地的npm包_npm引入本地包-CSDN博客](<a href="https://blog.csdn.net/qq_57956183/article/details/132346194#:~:text=package.json%E4%B8%AD%E9%85%8D%E7%BD%AE%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E4%BE%9D%E8%B5%96%E5%8C%85%E3%80%82">https://blog.csdn.net/qq_57956183/article/details/132346194#:~:text=package.json中配置引用本地依赖包。</a> 以下是具体操作步骤： 1. 打开您的 package.json,文件，找到 dependencies 部分。 2. 不要指定包名的版本号，而是指定依赖项所在的本地路径。)、</p><p>主要是为了能够使用下载的会员图标库，</p><p>package.json:</p><p>作为dependencies引入，需要注意的是文件位置，可以通过<code>cd</code>的方式，确认路径是否有问题</p><p>还有需要注意的是，打包的tgz中必须包含<code>package.json</code>，否则会报错，这个是卡最多的地方</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;ai-report-assistant-frontend&quot;</span>,</span><br><span class="line">  <span class="string">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;vite&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;vue-tsc -b &amp;&amp; vite build&quot;</span>,</span><br><span class="line">    <span class="string">&quot;preview&quot;</span>: <span class="string">&quot;vite preview&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@fortawesome/fontawesome-free&quot;</span>: <span class="string">&quot;file:./fontawesome-pro-6.6.0-web.tgz&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后需要在main.ts中进行引用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@fortawesome/fontawesome-free/css/all.min.css&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="git冲突"><a href="#git冲突" class="headerlink" title="git冲突"></a>git冲突</h1><p>参考：<a href="https://zhuanlan.zhihu.com/p/397267546#:~:text=1%E3%80%81git">还在恐惧 Git 冲突? 一篇文章拯救你 - 知乎 (zhihu.com)</a></p><h1 id="图标库"><a href="#图标库" class="headerlink" title="图标库"></a>图标库</h1><p><a href="https://fontawesome.com/search">Chart Bullet Classic Regular Icon | Font Awesom</a></p><h1 id="clip-path"><a href="#clip-path" class="headerlink" title="clip-path"></a>clip-path</h1><p>下面的代码将Arrow tail改为四边形中间内凹一个正三角形的样式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;flex justify-center items-center relative&quot;&gt;</span><br><span class="line">                &lt;!-- Arrow tail--&gt;</span><br><span class="line">                &lt;div class=&quot;absolute top-0 -left-3 w-3 h-16 bg-gray-300 opacity-75&quot;</span><br><span class="line">                    style=&quot;clip-path: polygon(0 0, 100% 50%, 0 100%);&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                &lt;!-- Main body --&gt;</span><br><span class="line">                &lt;div class=&quot;w-52 h-16 bg-gray-300 opacity-75 cursor-pointer p-2&quot;&gt;</span><br><span class="line">                    &lt;p&gt;数据源&lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                &lt;!-- Arrow head --&gt;</span><br><span class="line">                &lt;div class=&quot;absolute top-0 -right-5 w-5 h-16 bg-gray-300 opacity-75&quot;</span><br><span class="line">                    style=&quot;clip-path: polygon(0 0%, 100% 50%, 0 100%);&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>实现一个四边形中间凹入一个正三角形的效果，核心在于使用 CSS 中的 <code>clip-path</code> 属性来裁剪出我们需要的形状。我们将利用 <code>polygon</code> 函数定义裁剪路径的每个顶点坐标。下面是实现的具体步骤：</p><ol><li><strong>了解 <code>clip-path: polygon()</code></strong></li></ol><p><code>clip-path: polygon()</code> 允许我们通过指定顶点坐标来裁剪元素的形状。坐标使用百分比来表示，起点为左上角 <code>(0%, 0%)</code>，终点为右下角 <code>(100%, 100%)</code>。</p><p>基础四边形</p><p>首先，绘制一个基本的四边形，使用 <code>clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%)</code>。这将裁剪出一个完整的矩形。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">0</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">100%</span>);</span><br></pre></td></tr></table></figure><p>这个路径依次描述四个顶点：</p><ul><li><code>(0 0)</code>：左上角</li><li><code>(100% 0)</code>：右上角</li><li><code>(100% 100%)</code>：右下角</li><li><code>(0 100%)</code>：左下角</li></ul><ol start="2"><li><strong>内凹一个正三角形</strong></li></ol><p>为了让中间部分凹入一个正三角形，我们需要在矩形的一侧插入一个新的点，使得矩形的一条边向内凹。</p><p>假设你希望左边中间凹入，我们可以通过在左侧边线中间插入一个新的点来实现。将其设置为 <code>(25% 50%)</code>，它表示相对于左边线，水平向右 25% 的位置，高度为 50%（即中间位置）。这样可以在四边形的中间位置凹入一个三角形。</p><ol start="3"><li><strong>实现凹入的多边形</strong></li></ol><p>要在左侧边缘中间凹入一个三角形，我们只需在基本四边形的坐标中插入 <code>(25% 50%)</code> 作为中间点，最终的裁剪路径如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">0</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">100%</span>, <span class="number">25%</span> <span class="number">50%</span>);</span><br></pre></td></tr></table></figure><ul><li><code>(0 0)</code>：左上角</li><li><code>(100% 0)</code>：右上角</li><li><code>(100% 100%)</code>：右下角</li><li><code>(0 100%)</code>：左下角</li><li>**<code>(25% 50%)</code>**：左边线的中间位置，凹入三角形的顶点</li></ul><ol start="4"><li><strong>完整代码实现</strong></li></ol><p>在实际 HTML 中，给定一个 <code>div</code> 元素，我们将使用这个 <code>clip-path</code> 来裁剪其外形：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex justify-center items-center relative&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Arrow tail --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;absolute top-0 -left-3 w-8 h-16 bg-gray-300 opacity-75&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%, 25% 50%);&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Main body --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;w-52 h-16 bg-gray-300 opacity-75 cursor-pointer p-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>数据源<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Arrow head --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;absolute top-0 -right-5 w-5 h-16 bg-gray-300 opacity-75&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;clip-path: polygon(0 0%, 100% 50%, 0 100%);&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li><strong><code>clip-path: polygon()</code></strong> 允许我们裁剪元素的形状。</li><li>通过在四边形的顶点之间插入新的点，我们可以创建一个带有中间凹入正三角形的形状。</li><li>具体的 <code>clip-path</code> 路径是根据顶点的顺序定义的，顶点之间连线会形成凹入的效果。</li></ul><p>这就是如何通过 <code>clip-path</code> 创建一个中间凹入正三角形的四边形的具体实现原理。</p><h1 id="低代码实现"><a href="#低代码实现" class="headerlink" title="低代码实现"></a>低代码实现</h1><h2 id="拖拽以及伸缩"><a href="#拖拽以及伸缩" class="headerlink" title="拖拽以及伸缩"></a>拖拽以及伸缩</h2><h3 id="滚动跟手逻辑"><a href="#滚动跟手逻辑" class="headerlink" title="滚动跟手逻辑"></a>滚动跟手逻辑</h3><p>代码中实现了通过<code>@scroll=&quot;onScroll&quot;</code>监听滚动事件，并且在滚动时处理拖拽和调整大小的交互。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onScroll</span> = (<span class="params">scroll: &#123; scrollLeft: number, scrollTop: number &#125;</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (activeIndex.<span class="property">value</span> !== <span class="literal">null</span> &amp;&amp; isInteracting.<span class="property">value</span>) &#123;</span><br><span class="line">        isScrolling.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 滚动处理逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="获取-el-scroll-滚动距离"><a href="#获取-el-scroll-滚动距离" class="headerlink" title="获取 el-scroll 滚动距离"></a>获取 <code>el-scroll</code> 滚动距离</h3><p>在 <code>onScroll</code> 方法中，传入了滚动的 <code>scrollLeft</code> 和 <code>scrollTop</code>，可以用来实时获取滚动距离，特别是在拖动或调整大小时使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-scrollbar</span> <span class="attr">height</span>=<span class="string">&quot;95%&quot;</span> <span class="attr">wrap-style</span>=<span class="string">&quot;width:100%;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;flex justify-center&quot;</span> @<span class="attr">scroll</span>=<span class="string">&quot;onScroll&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 滚动区域内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-scrollbar</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="onMouseDown（按下鼠标处理逻辑）"><a href="#onMouseDown（按下鼠标处理逻辑）" class="headerlink" title="onMouseDown（按下鼠标处理逻辑）"></a><code>onMouseDown</code>（按下鼠标处理逻辑）</h3><p><code>onMouseDown</code> 用于初始化拖拽或调整大小操作，保存当前的鼠标坐标以及操作的类型（拖拽或调整大小）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onMouseDown</span> = (<span class="params">event: MouseEvent, index: number, handleType: <span class="string">&#x27;drag&#x27;</span> | <span class="string">&#x27;resize&#x27;</span></span>) =&gt; &#123;</span><br><span class="line">    isInteracting.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">    interactionType.<span class="property">value</span> = handleType;</span><br><span class="line">    startX.<span class="property">value</span> = event.<span class="property">clientX</span>;</span><br><span class="line">    startY.<span class="property">value</span> = event.<span class="property">clientY</span>;</span><br><span class="line">    activeIndex.<span class="property">value</span> = index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (handleType === <span class="string">&#x27;drag&#x27;</span>) &#123;</span><br><span class="line">        initialTop.<span class="property">value</span> = statementItems.<span class="property">value</span>[index].<span class="property">top</span>;</span><br><span class="line">        initialLeft.<span class="property">value</span> = statementItems.<span class="property">value</span>[index].<span class="property">left</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (handleType === <span class="string">&#x27;resize&#x27;</span>) &#123;</span><br><span class="line">        initialWidth.<span class="property">value</span> = statementItems.<span class="property">value</span>[index].<span class="property">width</span>;</span><br><span class="line">        initialHeight.<span class="property">value</span> = statementItems.<span class="property">value</span>[index].<span class="property">height</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加鼠标移动和释放的监听事件</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, onMouseMove);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, onMouseUp);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="onMouseMove（鼠标移动处理逻辑）"><a href="#onMouseMove（鼠标移动处理逻辑）" class="headerlink" title="onMouseMove（鼠标移动处理逻辑）"></a><code>onMouseMove</code>（鼠标移动处理逻辑）</h3><p><code>onMouseMove</code> 负责拖动或调整大小操作，根据鼠标移动的距离更新元素的位置或尺寸。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onMouseMove</span> = (<span class="params">event: MouseEvent</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isInteracting.<span class="property">value</span> || activeIndex.<span class="property">value</span> === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> deltaX = event.<span class="property">clientX</span> - startX.<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">let</span> deltaY = event.<span class="property">clientY</span> - startY.<span class="property">value</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (interactionType.<span class="property">value</span> === <span class="string">&#x27;drag&#x27;</span>) &#123;</span><br><span class="line">        statementItems.<span class="property">value</span>[activeIndex.<span class="property">value</span>].<span class="property">top</span> = initialTop.<span class="property">value</span> + deltaY;</span><br><span class="line">        statementItems.<span class="property">value</span>[activeIndex.<span class="property">value</span>].<span class="property">left</span> = initialLeft.<span class="property">value</span> + deltaX;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (interactionType.<span class="property">value</span> === <span class="string">&#x27;resize&#x27;</span>) &#123;</span><br><span class="line">        statementItems.<span class="property">value</span>[activeIndex.<span class="property">value</span>].<span class="property">width</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">100</span>, initialWidth.<span class="property">value</span> + deltaX);</span><br><span class="line">        statementItems.<span class="property">value</span>[activeIndex.<span class="property">value</span>].<span class="property">height</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">100</span>, initialHeight.<span class="property">value</span> + deltaY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="onMouseUp（释放鼠标处理逻辑）"><a href="#onMouseUp（释放鼠标处理逻辑）" class="headerlink" title="onMouseUp（释放鼠标处理逻辑）"></a><code>onMouseUp</code>（释放鼠标处理逻辑）</h3><p><code>onMouseUp</code> 用于结束拖拽或调整大小操作，解除事件监听。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onMouseUp</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    isInteracting.<span class="property">value</span> = <span class="literal">false</span>;</span><br><span class="line">    interactionType.<span class="property">value</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 恢复文本选择</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">userSelect</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解除鼠标事件监听</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, onMouseMove);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, onMouseUp);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="自适应布局"><a href="#自适应布局" class="headerlink" title="自适应布局"></a>自适应布局</h2><h3 id="检查遮挡逻辑"><a href="#检查遮挡逻辑" class="headerlink" title="检查遮挡逻辑"></a>检查遮挡逻辑</h3><p>在拖拽过程中，<code>checkCollision</code> 用于检查当前拖动的元素是否与其他元素发生遮挡。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">checkCollision</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (activeIndex.<span class="property">value</span> === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> draggedItem = statementItems.<span class="property">value</span>[activeIndex.<span class="property">value</span>];</span><br><span class="line">    statementItems.<span class="property">value</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index !== activeIndex.<span class="property">value</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> isColliding = <span class="title function_">checkOverlap</span>(draggedItem, item);</span><br><span class="line">            <span class="keyword">if</span> (isColliding) &#123;</span><br><span class="line">                <span class="title function_">moveDownItems</span>(index, draggedItem.<span class="property">height</span> + <span class="number">15</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">restoreAllMovedItems</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="检查两个元素是否遮挡"><a href="#检查两个元素是否遮挡" class="headerlink" title="检查两个元素是否遮挡"></a>检查两个元素是否遮挡</h3><p>使用 <code>checkOverlap</code> 函数判断两个元素是否在视觉上发生遮挡，判断依据为元素的四个边界位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">checkOverlap</span> = (<span class="params">item1: StatementItem, item2: StatementItem</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> item1Bottom = item1.<span class="property">top</span> + item1.<span class="property">height</span>;</span><br><span class="line">    <span class="keyword">const</span> item1Right = item1.<span class="property">left</span> + item1.<span class="property">width</span>;</span><br><span class="line">    <span class="keyword">const</span> item2Bottom = item2.<span class="property">top</span> + item2.<span class="property">height</span>;</span><br><span class="line">    <span class="keyword">const</span> item2Right = item2.<span class="property">left</span> + item2.<span class="property">width</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        item1.<span class="property">top</span> &lt; item2Bottom &amp;&amp;</span><br><span class="line">        item1Bottom &gt; item2.<span class="property">top</span> &amp;&amp;</span><br><span class="line">        item1.<span class="property">left</span> &lt; item2Right &amp;&amp;</span><br><span class="line">        item1Right &gt; item2.<span class="property">left</span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="归位逻辑"><a href="#归位逻辑" class="headerlink" title="归位逻辑"></a>归位逻辑</h3><p>如果两个元素不再遮挡，使用 <code>restoreAllMovedItems</code> 恢复被下移的元素位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">restoreAllMovedItems</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    movedItems.<span class="title function_">forEach</span>(<span class="function"><span class="params">index</span> =&gt;</span> &#123;</span><br><span class="line">        statementItems.<span class="property">value</span>[index].<span class="property">top</span> = initialPositionsY[index]; <span class="comment">// 恢复到初始位置</span></span><br><span class="line">        movedItems.<span class="title function_">delete</span>(index); <span class="comment">// 清除下移记录</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="elementplus主题调节"><a href="#elementplus主题调节" class="headerlink" title="elementplus主题调节"></a>elementplus主题调节</h2><p>参考：<a href="https://element-plus.org/zh-CN/guide/theming">https://element-plus.org/zh-CN/guide/theming</a></p><p>通过开发者选项，找到对应组件的颜色指代代码<code>--el-slider-main-bg-color</code>，然后将其放置到一个统一class类中，当然也可以放在root中，但是会导致加载速度变慢以及多样式覆盖的问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;el-slider v-model=&quot;sliderValue&quot; :max=&quot;maxScroll&quot; @input=&quot;inputSlider&quot; :show-tooltip=&quot;false&quot;</span><br><span class="line">           class=&quot;el-slider-style&quot;&gt;&lt;/el-slider&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.el-slider-style &#123;</span><br><span class="line">    --el-slider-main-bg-color: #333;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="position-fixed相对父级元素定位"><a href="#position-fixed相对父级元素定位" class="headerlink" title="position:fixed相对父级元素定位"></a>position:fixed相对父级元素定位</h1><p>参考：<a href="https://www.zhihu.com/question/24822927">https://www.zhihu.com/question/24822927</a></p><p>如果父级元素设置了transform属性，position:relative&#x2F;absolute&#x2F;fixed会基于此定位，详细请参考：transformedelement creates a containing block for all its positioned descendants</p><h1 id="after、-before"><a href="#after、-before" class="headerlink" title=":after、:before"></a>:after、:before</h1><h1 id="箭头形状组件"><a href="#箭头形状组件" class="headerlink" title="箭头形状组件"></a>箭头形状组件</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;PipelineHeader&quot;&gt;</span><br><span class="line">        &lt;!-- 头部 --&gt;</span><br><span class="line">        &lt;div v-if=&quot;props.info.title !== &#x27;新阶段&#x27;&quot; class=&quot;flex justify-center items-center relative cursor-pointer&quot;&gt;</span><br><span class="line">            &lt;!-- Arrow tail --&gt;</span><br><span class="line">            &lt;div :class=&quot;backgroundClass&quot; class=&quot;absolute top-0 -left-3 w-3 h-16 opacity-80&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- Main body --&gt;</span><br><span class="line">            &lt;div :class=&quot;backgroundClass&quot;</span><br><span class="line">                class=&quot;w-72 h-16 relative flex justify-between items-center  opacity-80 overflow-hidden p-3&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;flex flex-col justify-center items-start&quot; v-if=&quot;props.info.status !== &#x27;inProgress&#x27;&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;font-bold&quot;&gt;&#123;&#123; props.info.title &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;p v-if=&quot;props.info.title===&#x27;数据源&#x27;&quot;&gt;&#123;&#123; props.info.num &#125;&#125;个数据源&lt;/p&gt;</span><br><span class="line">                    &lt;p v-else&gt;&#123;&#123; props.info.num &#125;&#125;个任务&lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                &lt;div class=&quot;flex flex-col justify-center items-start&quot; v-else&gt;</span><br><span class="line">                    &lt;p class=&quot;font-bold text-white&quot;&gt;&#123;&#123; props.info.title &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;p class=&quot;text-white&quot;&gt;&#123;&#123; props.info.completedTasks &#125;&#125;/&#123;&#123; props.info.num &#125;&#125;个任务完成 | &#123;&#123; props.timer &#125;&#125;s&lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                &lt;!-- 未进行时三个图标 --&gt;</span><br><span class="line">                &lt;div class=&quot;flex justify-center items-center gap-4&quot; v-if=&quot;props.info.status === &#x27;notStarted&#x27;&quot;&gt;</span><br><span class="line">                    &lt;i class=&quot;fa-light fa-pen&quot;&gt;&lt;/i&gt;</span><br><span class="line">                    &lt;i class=&quot;fa-light fa-copy&quot;&gt;&lt;/i&gt;</span><br><span class="line">                    &lt;i class=&quot;fa-light fa-trash&quot;&gt;&lt;/i&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                &lt;!-- 完成后打勾图标 --&gt;</span><br><span class="line">                &lt;div class=&quot;absolute -top-3 right-0&quot; v-if=&quot;props.info.status === &#x27;completed&#x27;&quot;&gt;</span><br><span class="line">                    &lt;i class=&quot;fa-solid fa-circle-check text-7xl text-emerald-300&quot;&gt;&lt;/i&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                &lt;!-- loading图标 --&gt;</span><br><span class="line">                &lt;div class=&quot;&quot; v-if=&quot;props.info.status === &#x27;inProgress&#x27;&quot;&gt;</span><br><span class="line">                    &lt;i class=&quot;fa-duotone fa-solid fa-loader rotating fa-xl text-white&quot;&gt;&lt;/i&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- Arrow head --&gt;</span><br><span class="line">            &lt;div :class=&quot;backgroundClass&quot; class=&quot;absolute top-0 -right-5 w-5 h-16 opacity-80&quot;</span><br><span class="line">                style=&quot;clip-path: polygon(0 0%, 100% 50%, 0 100%);&quot;&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;!-- 添加符号 --&gt;</span><br><span class="line">            &lt;div v-if=&quot;props.info.title !== &#x27;数据源&#x27;&quot;</span><br><span class="line">                class=&quot;w-4 h-4 absolute -left-7 bottom-6 flex justify-center items-center rounded-xl bg-white shadow-[0_2px_6px_0_rgba(37,43,58,0.4)]&quot;&gt;</span><br><span class="line">                &lt;i class=&quot;fa-regular fa-plus fa-2xs&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 头部 --&gt;</span><br><span class="line">        &lt;div v-else class=&quot;flex justify-center items-center relative cursor-pointer&quot;&gt;</span><br><span class="line">            &lt;!-- Arrow tail --&gt;</span><br><span class="line">            &lt;div class=&quot;absolute top-0 -left-3 w-3 h-16 bg-gray-200/60 opacity-80&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- Main body --&gt;</span><br><span class="line">            &lt;div class=&quot;w-72 h-16 flex justify-between items-center bg-gray-200/60 opacity-80 p-3&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;flex flex-col justify-center items-start&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;font-bold text-black/60&quot;&gt;&#123;&#123; props.info.title &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;p class=&quot;text-black/60&quot;&gt;&#123;&#123; props.info.num &#125;&#125;个数据源&lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- Arrow head --&gt;</span><br><span class="line">            &lt;div class=&quot;absolute top-0 -right-5 w-5 h-16 bg-gray-200/60 opacity-80&quot;</span><br><span class="line">                style=&quot;clip-path: polygon(0 0%, 100% 50%, 0 100%);&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;!-- 添加符号 --&gt;</span><br><span class="line">            &lt;div</span><br><span class="line">                class=&quot;w-4 h-4 absolute -left-7 bottom-6 flex justify-center items-center rounded-xl bg-white shadow-[0_2px_6px_0_rgba(37,43,58,0.4)]&quot;&gt;</span><br><span class="line">                &lt;i class=&quot;fa-regular fa-plus fa-2xs&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; computed &#125; from &quot;vue&quot;</span><br><span class="line">const props = defineProps([&#x27;info&#x27;,&#x27;timer&#x27;])</span><br><span class="line">const emit = defineEmits()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const backgroundClass = computed(() =&gt; &#123;</span><br><span class="line">    if (props.info.status === &#x27;inProgress&#x27;) &#123;</span><br><span class="line">        return &#x27;bg-gray-600&#x27;;</span><br><span class="line">    &#125; else if (props.info.status === &#x27;completed&#x27;) &#123;</span><br><span class="line">        return &#x27;bg-emerald-100&#x27;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return &#x27;bg-gray-200&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.rotating &#123;</span><br><span class="line">    animation: spin 2s linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes spin &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        transform: rotate(0deg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        transform: rotate(360deg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="WEB自带TTS实现语音文字互转"><a href="#WEB自带TTS实现语音文字互转" class="headerlink" title="WEB自带TTS实现语音文字互转"></a>WEB自带TTS实现语音文字互转</h1><p>Statement.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;Statement&quot; v-if=&quot;props.ifShow&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;w-[1200px] h-14 shadow-xl fixed left-16 bottom-6 flex items-center bg-gray-50 rounded-3xl p-5&quot; v-if=&quot;ifShowAI&quot;&gt;</span><br><span class="line">            &lt;input v-model=&quot;message&quot; @keyup.enter=&quot;handleEnter&quot; type=&quot;text&quot; placeholder=&quot;输入消息&quot;</span><br><span class="line">                class=&quot;bg-transparent outline-none flex-1 placeholder:text-text-200 placeholder:font-bold text-black ml-2&quot; /&gt;</span><br><span class="line">            &lt;el-icon size=&quot;18&quot; class=&quot;ml-2&quot; @click=&quot;toggleRecognition&quot;&gt;</span><br><span class="line">                &lt;Microphone /&gt;</span><br><span class="line">            &lt;/el-icon&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// 启动语音识别</span><br><span class="line">const startRecognition = () =&gt; &#123;</span><br><span class="line">    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;</span><br><span class="line">    if (!SpeechRecognition) &#123;</span><br><span class="line">        alert(&#x27;当前浏览器不支持语音识别功能&#x27;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    recognition = new SpeechRecognition();</span><br><span class="line">    recognition.lang = &#x27;zh-CN&#x27;;  // 设置语言</span><br><span class="line"></span><br><span class="line">    recognition.onresult = (event: any) =&gt; &#123;</span><br><span class="line">        const transcript = event.results[0][0].transcript;</span><br><span class="line">        message.value = transcript;  // 将识别到的文字保存到 message</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    recognition.onerror = (event: any) =&gt; &#123;</span><br><span class="line">        console.error(&#x27;Speech recognition error: &#x27;, event.error);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    recognition.onend = () =&gt; &#123;</span><br><span class="line">        console.log(&#x27;Speech recognition ended&#x27;);</span><br><span class="line">        isRecognizing.value = false;  // 识别结束后更新状态</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    recognition.start();</span><br><span class="line">    isRecognizing.value = true;  // 设置为识别状态</span><br><span class="line">    console.log(&#x27;Speech recognition started&#x27;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 停止语音识别</span><br><span class="line">const stopRecognition = () =&gt; &#123;</span><br><span class="line">    if (recognition) &#123;</span><br><span class="line">        recognition.stop();</span><br><span class="line">        isRecognizing.value = false;</span><br><span class="line">        console.log(&#x27;Speech recognition manually stopped&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 切换语音识别状态</span><br><span class="line">const toggleRecognition = () =&gt; &#123;</span><br><span class="line">    if (isRecognizing.value) &#123;</span><br><span class="line">        stopRecognition(); // 如果正在识别，则停止</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        startRecognition(); // 如果未在识别，则开始识别</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="echart封装"><a href="#echart封装" class="headerlink" title="echart封装"></a>echart封装</h1><h2 id="引用方法"><a href="#引用方法" class="headerlink" title="引用方法"></a>引用方法</h2><p>statementltems.ts</p><p>下面是假数据部分，需要加新的图标时增加statementItems，type、chart、data、chartOption控制对应的图表参数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">StatementItem</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../interfaces/StatementItem&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> airLineOptions <span class="keyword">from</span> <span class="string">&#x27;../utils/airLineOptions&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> waterBarOption <span class="keyword">from</span> <span class="string">&#x27;../utils/waterBarOption&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> forestPieOption <span class="keyword">from</span> <span class="string">&#x27;../utils/forestPieOption&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> airHorizontalBarOption <span class="keyword">from</span> <span class="string">&#x27;../utils/airHorizontalBarOption&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> funnelOptions <span class="keyword">from</span> <span class="string">&#x27;../utils/funnelOptions&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> boardOptions <span class="keyword">from</span> <span class="string">&#x27;../utils/boardOptions&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> radarOptions <span class="keyword">from</span> <span class="string">&#x27;../utils/radarOptions&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> boxplotOptions <span class="keyword">from</span> <span class="string">&#x27;../utils/boxplotOptions&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> scatterOption <span class="keyword">from</span> <span class="string">&#x27;../utils/scatterOption&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; airLineData &#125; <span class="keyword">from</span> <span class="string">&#x27;../constant/airLineData&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; forestPieData &#125; <span class="keyword">from</span> <span class="string">&#x27;../constant/forestPieData&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; waterBarData &#125; <span class="keyword">from</span> <span class="string">&#x27;../constant/waterBarData&#x27;</span> ;</span><br><span class="line"><span class="keyword">import</span> &#123; horizontalBarData &#125; <span class="keyword">from</span> <span class="string">&#x27;../constant/horizontalBarData&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; funnelData &#125; <span class="keyword">from</span> <span class="string">&#x27;../constant/funnelData&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; boardData &#125; <span class="keyword">from</span> <span class="string">&#x27;../constant/boardData&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; radarData &#125; <span class="keyword">from</span> <span class="string">&#x27;../constant/radarData&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; boxplotData &#125; <span class="keyword">from</span> <span class="string">&#x27;../constant/boxplotData&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; scatterData &#125; <span class="keyword">from</span> <span class="string">&#x27;../constant/scatterData&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> statementItems = ref&lt;<span class="title class_">StatementItem</span>[]&gt;([</span><br><span class="line">    &#123; <span class="attr">top</span>: <span class="number">0</span>, <span class="attr">left</span>: <span class="number">50</span>, <span class="attr">height</span>: <span class="number">200</span>, <span class="attr">width</span>: <span class="number">600</span>, <span class="attr">label</span>: <span class="string">&#x27;空气质量优良天数&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span>, <span class="attr">numbers</span>: [<span class="string">&quot;2&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;0&quot;</span>,<span class="string">&quot;天&quot;</span>] &#125;,</span><br><span class="line">    &#123; <span class="attr">top</span>: <span class="number">0</span>, <span class="attr">left</span>: <span class="number">680</span>, <span class="attr">height</span>: <span class="number">200</span>, <span class="attr">width</span>: <span class="number">600</span>, <span class="attr">label</span>: <span class="string">&#x27;本年度二氧化碳总排放量&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span>, <span class="attr">numbers</span>: [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;亿吨&quot;</span>,] &#125;,</span><br><span class="line">    &#123; <span class="attr">top</span>: <span class="number">220</span>, <span class="attr">left</span>: <span class="number">50</span>, <span class="attr">height</span>: <span class="number">290</span>, <span class="attr">width</span>: <span class="number">1190</span>, <span class="attr">label</span>: <span class="string">&#x27;年度空气质量统计&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;chart&#x27;</span>, <span class="attr">chart</span>: <span class="string">&#x27;line&#x27;</span>, <span class="attr">data</span>: airLineData, <span class="attr">chartOption</span>: airLineOptions &#125;,</span><br><span class="line">    &#123; <span class="attr">top</span>: <span class="number">550</span>, <span class="attr">left</span>: <span class="number">50</span>, <span class="attr">height</span>: <span class="number">290</span>, <span class="attr">width</span>: <span class="number">350</span>, <span class="attr">label</span>: <span class="string">&#x27;年度碳排放来源分析&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;chart&#x27;</span>, <span class="attr">chart</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">data</span>: waterBarData, <span class="attr">chartOption</span>: waterBarOption &#125;,</span><br><span class="line">    &#123; <span class="attr">top</span>: <span class="number">550</span>, <span class="attr">left</span>: <span class="number">470</span>, <span class="attr">height</span>: <span class="number">290</span>, <span class="attr">width</span>: <span class="number">350</span>, <span class="attr">label</span>: <span class="string">&#x27;年度森林覆盖率&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;chart&#x27;</span>, <span class="attr">chart</span>: <span class="string">&#x27;pie&#x27;</span>, <span class="attr">data</span>: forestPieData, <span class="attr">chartOption</span>: forestPieOption &#125;,</span><br><span class="line">    &#123; <span class="attr">top</span>: <span class="number">550</span>, <span class="attr">left</span>: <span class="number">890</span>, <span class="attr">height</span>: <span class="number">290</span>, <span class="attr">width</span>: <span class="number">350</span>, <span class="attr">label</span>: <span class="string">&#x27;空气质量对比&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;chart&#x27;</span>, <span class="attr">chart</span>: <span class="string">&#x27;horizontalBar&#x27;</span>, <span class="attr">data</span>: horizontalBarData, <span class="attr">chartOption</span>: airHorizontalBarOption &#125;</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> statementItems2 = ref&lt;<span class="title class_">StatementItem</span>[]&gt;([</span><br><span class="line">    &#123; <span class="attr">top</span>: <span class="number">0</span>, <span class="attr">left</span>: <span class="number">20</span>, <span class="attr">height</span>: <span class="number">200</span>, <span class="attr">width</span>: <span class="number">350</span>, <span class="attr">label</span>: <span class="string">&#x27;本年度种草改良总量&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span>, <span class="attr">numbers</span>: [<span class="string">&quot;4&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;万公顷&quot;</span>] &#125;,</span><br><span class="line">    &#123; <span class="attr">top</span>: <span class="number">0</span>, <span class="attr">left</span>: <span class="number">380</span>, <span class="attr">height</span>: <span class="number">290</span>, <span class="attr">width</span>: <span class="number">580</span>, <span class="attr">label</span>: <span class="string">&#x27;年度绿化面积&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span>, <span class="attr">numbers</span>: [<span class="string">&quot;8&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;万公顷&quot;</span>] &#125;,</span><br><span class="line">    &#123; <span class="attr">top</span>: <span class="number">0</span>, <span class="attr">left</span>: <span class="number">970</span>, <span class="attr">height</span>: <span class="number">200</span>, <span class="attr">width</span>: <span class="number">350</span>, <span class="attr">label</span>: <span class="string">&#x27;本年度治理沙化面积&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span>, <span class="attr">numbers</span>: [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;万公顷&quot;</span>] &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; <span class="attr">top</span>: <span class="number">300</span>, <span class="attr">left</span>: <span class="number">380</span>, <span class="attr">height</span>: <span class="number">500</span>, <span class="attr">width</span>: <span class="number">538</span>, <span class="attr">label</span>: <span class="string">&#x27;绿化面积对比&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;chart&#x27;</span>, <span class="attr">chart</span>: <span class="string">&#x27;radar&#x27;</span>, <span class="attr">data</span>: radarData, <span class="attr">chartOption</span>: radarOptions &#125;,</span><br><span class="line">    &#123; <span class="attr">top</span>: <span class="number">210</span>, <span class="attr">left</span>: <span class="number">20</span>, <span class="attr">height</span>: <span class="number">290</span>, <span class="attr">width</span>: <span class="number">308</span>, <span class="attr">label</span>: <span class="string">&#x27;年度绿化来源分析&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;chart&#x27;</span>, <span class="attr">chart</span>: <span class="string">&#x27;funnel&#x27;</span>, <span class="attr">data</span>: funnelData, <span class="attr">chartOption</span>: funnelOptions &#125;,</span><br><span class="line">    &#123; <span class="attr">top</span>: <span class="number">510</span>, <span class="attr">left</span>: <span class="number">20</span>, <span class="attr">height</span>: <span class="number">290</span>, <span class="attr">width</span>: <span class="number">308</span>, <span class="attr">label</span>: <span class="string">&#x27;年度碳排放来源分析&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;chart&#x27;</span>, <span class="attr">chart</span>: <span class="string">&#x27;boxplot&#x27;</span>, <span class="attr">data</span>: boxplotData, <span class="attr">chartOption</span>: boxplotOptions &#125;,</span><br><span class="line">    &#123; <span class="attr">top</span>: <span class="number">210</span>, <span class="attr">left</span>: <span class="number">970</span>, <span class="attr">height</span>: <span class="number">290</span>, <span class="attr">width</span>: <span class="number">308</span>, <span class="attr">label</span>: <span class="string">&#x27;年度绿化统计&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;chart&#x27;</span>, <span class="attr">chart</span>: <span class="string">&#x27;board&#x27;</span>, <span class="attr">data</span>: boardData, <span class="attr">chartOption</span>: boardOptions &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; <span class="attr">top</span>: <span class="number">510</span>, <span class="attr">left</span>: <span class="number">970</span>, <span class="attr">height</span>: <span class="number">290</span>, <span class="attr">width</span>: <span class="number">308</span>, <span class="attr">label</span>: <span class="string">&#x27;碳排放量对比&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;chart&#x27;</span>, <span class="attr">chart</span>: <span class="string">&#x27;scatter&#x27;</span>, <span class="attr">data</span>: scatterData, <span class="attr">chartOption</span>: scatterOption &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>Statement.vue</p><p>下面是使用假数据循环渲染部分，用到新的图表类型时，需要往<code>getChartComponent</code>中添加对应的图表名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;Statement&quot; v-if=&quot;props.ifShow&quot;&gt;</span><br><span class="line">        &lt;el-scrollbar height=&quot;95%&quot; wrap-style=&quot;width:100%;&quot; class=&quot;flex justify-center&quot; @scroll=&quot;onScroll&quot; v-else&gt;</span><br><span class="line">            &lt;div class=&quot;w-full flex flex-col justify-center items-center self-center relative overflow-visible&quot;&gt;</span><br><span class="line">                &lt;!-- 动态渲染可拖动的元素 --&gt;</span><br><span class="line">                &lt;div v-for=&quot;(item, index) in statementItems&quot; :key=&quot;index&quot; :data-id=&quot;index&quot;</span><br><span class="line">                    :style=&quot;&#123; top: `$&#123;item.top&#125;px`, left: `$&#123;item.left&#125;px`, width: item.type === &#x27;chart&#x27; ? &#x27;auto&#x27; : `$&#123;item.width&#125;px`, height: `$&#123;item.height&#125;px`, position: &#x27;absolute&#x27; &#125;&quot;</span><br><span class="line">                    class=&quot;shadow-[0_8px_24px_rgba(0,0,0,0.04)] border rounded-lg my-5 p-5 overflow-visible bg-white&quot;</span><br><span class="line">                    @mouseenter=&quot;showDesign(index)&quot; @mouseleave=&quot;hiddenDesign&quot;&gt;</span><br><span class="line">                    &lt;!-- 悬浮按钮 --&gt;</span><br><span class="line">                    &lt;div v-if=&quot;hoveredItem === index&quot; @mouseenter=&quot;showDesign(index)&quot; @mouseleave=&quot;hiddenDesign&quot;</span><br><span class="line">                        @mousedown=&quot;onMouseDown($event, index, &#x27;drag&#x27;)&quot;</span><br><span class="line">                        class=&quot;absolute w-5 h-8 top-1 -left-6 bg-gray-100 flex justify-center items-center gap-1 rounded-md cursor-move&quot;&gt;</span><br><span class="line">                        &lt;i class=&quot;fa-regular fa-ellipsis-vertical&quot; style=&quot;color: #4b5563;&quot;&gt;&lt;/i&gt;</span><br><span class="line">                        &lt;i class=&quot;fa-regular fa-ellipsis-vertical&quot; style=&quot;color: #4b5563;&quot;&gt;&lt;/i&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    &lt;!-- 控制大小按钮 --&gt;</span><br><span class="line">                    &lt;div v-if=&quot;hoveredItem === index&quot;</span><br><span class="line">                        class=&quot;absolute w-5 h-8 -bottom-3 -right-2 flex cursor-nwse-resize&quot;</span><br><span class="line">                        @mousedown=&quot;onMouseDown($event, index, &#x27;resize&#x27;)&quot;&gt;</span><br><span class="line">                        &lt;i class=&quot;fa-solid fa-corner fa-rotate-90&quot; style=&quot;color: #4b5563;&quot;&gt;&lt;/i&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;!-- 根据不同的类型渲染不同内容 --&gt;</span><br><span class="line">                    &lt;input class=&quot;text-sm font-bold input-reset&quot; type=&quot;text&quot; v-model=&quot;item.label&quot; /&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;!-- 数字数据类型 --&gt;</span><br><span class="line">                    &lt;div v-if=&quot;item.type === &#x27;numbers&#x27;&quot; class=&quot;h-full flex justify-center items-center gap-2&quot;&gt;</span><br><span class="line">                        &lt;p v-for=&quot;n in item.numbers&quot; :key=&quot;n&quot;</span><br><span class="line">                            class=&quot;px-2 py-5 text-4xl font-bold bg-gray-100 rounded-lg&quot;&gt;&#123;&#123; n</span><br><span class="line">                            &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;!-- 图表类型 --&gt;</span><br><span class="line">                    &lt;div v-else-if=&quot;item.type === &#x27;chart&#x27;&quot; class=&quot;w-full h-full&quot;&gt;</span><br><span class="line">                        &lt;component :is=&quot;getChartComponent(item.chart)&quot; :width=&quot;item.width&quot; :height=&quot;item.height - 50&quot;</span><br><span class="line">                            :data=&quot;item.data&quot; :chartOption=&quot;item.chartOption&quot; /&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;!-- 移动位置提示 --&gt;</span><br><span class="line">                    &lt;div v-if=&quot;isInteracting &amp;&amp; activeIndex === index&quot;</span><br><span class="line">                        class=&quot;absolute top-0 left-0 w-full h-full bg-gray-200 rounded-lg opacity-50 pointer-events-none&quot;&gt;</span><br><span class="line">                        &lt;!-- 显示提示的矩形背景，拖拽时会显示 --&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/el-scrollbar&gt;</span><br><span class="line">        &lt;div class=&quot;w-[1200px] h-14 shadow-xl fixed left-16 bottom-6 flex items-center bg-gray-50 rounded-3xl p-5&quot; v-if=&quot;ifShowAI&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;input v-model=&quot;message&quot; @keyup.enter=&quot;handleEnter&quot; type=&quot;text&quot; placeholder=&quot;输入消息&quot;</span><br><span class="line">                class=&quot;bg-transparent outline-none flex-1 placeholder:text-text-200 placeholder:font-bold text-black ml-2&quot; /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;el-icon size=&quot;18&quot; class=&quot;ml-2&quot; @click=&quot;toggleRecognition&quot;&gt;</span><br><span class="line">                &lt;Microphone /&gt;</span><br><span class="line">            &lt;/el-icon&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">const getChartComponent = (chartType: string) =&gt; &#123;</span><br><span class="line">    const chartComponents: &#123; [key: string]: any &#125; = &#123;</span><br><span class="line">        line: LineContainer,</span><br><span class="line">        bar: BarContainer,</span><br><span class="line">        pie: PieContainer,</span><br><span class="line">        horizontalBar: HorizontalBarContainer,</span><br><span class="line">        funnel: FunnelContainer,</span><br><span class="line">        board: BoardContainer,</span><br><span class="line">        radar: RadarContainer,</span><br><span class="line">        boxplot: BoxplotContainer,</span><br><span class="line">        scatter: ScatterContainer</span><br><span class="line">    &#125;;</span><br><span class="line">    return chartComponents[chartType] || null;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>StatementItem.ts</p><p>下面是类型接口，需要加图表时，在chart中加入对应的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">StatementItem</span> &#123;</span><br><span class="line">    <span class="attr">top</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">left</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">height</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">width</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">label</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span> | <span class="string">&#x27;chart&#x27;</span>; <span class="comment">// 定义类型为数字或图表</span></span><br><span class="line">    numbers?: <span class="built_in">string</span>[]; <span class="comment">// 如果是数字类型，包含数字数组</span></span><br><span class="line">    chart?: <span class="string">&#x27;line&#x27;</span> | <span class="string">&#x27;bar&#x27;</span> | <span class="string">&#x27;pie&#x27;</span> | <span class="string">&#x27;horizontalBar&#x27;</span> | <span class="string">&#x27;funnel&#x27;</span> | <span class="string">&#x27;board&#x27;</span> | <span class="string">&#x27;radar&#x27;</span> | <span class="string">&#x27;boxplot&#x27;</span> | <span class="string">&#x27;scatter&#x27;</span>; <span class="comment">// 图表类型</span></span><br><span class="line">    data?: <span class="built_in">any</span>; <span class="comment">// 图表的数据</span></span><br><span class="line">    chartOption?: <span class="built_in">any</span>; <span class="comment">// 图表的配置选项</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><p>BarContainer.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;barContainer w-full&quot;&gt;</span><br><span class="line">        &lt;div ref=&quot;barContainer&quot; :style=&quot;&#123; width: typeof width === &#x27;string&#x27; ? width : `$&#123;width&#125;px`, height: `$&#123;height&#125;px` &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; onMounted, nextTick, ref &#125; from &quot;vue&quot;</span><br><span class="line">import * as echarts from &#x27;echarts&#x27;;</span><br><span class="line">import &#123; ECBasicOption &#125; from &#x27;echarts/types/dist/shared&#x27;;</span><br><span class="line"></span><br><span class="line">// 接收 airLineOptions 函数和数据作为 prop</span><br><span class="line">const props = defineProps&lt;&#123;</span><br><span class="line">    width: number|string;</span><br><span class="line">    height: number;</span><br><span class="line">    data: &#123;</span><br><span class="line">        xAxisData: string[];</span><br><span class="line">        seriesData: number[];</span><br><span class="line">    &#125;;</span><br><span class="line">    chartOption: (xAxisData: string[], seriesData: number[]) =&gt; ECBasicOption</span><br><span class="line">&#125;&gt;();</span><br><span class="line"></span><br><span class="line">const barContainer = ref&lt;HTMLElement | null&gt;(null);</span><br><span class="line">let bar: echarts.ECharts | null = null;</span><br><span class="line"></span><br><span class="line">onMounted(async () =&gt; &#123;</span><br><span class="line">    await nextTick();</span><br><span class="line">    initWaterBarChart();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 初始化图表方法</span><br><span class="line">const initWaterBarChart = () =&gt; &#123;</span><br><span class="line">    if (barContainer.value) &#123;</span><br><span class="line">        bar = echarts.init(barContainer.value);</span><br><span class="line">        renderWaterBar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 渲染图表</span><br><span class="line">const renderWaterBar = () =&gt; &#123;</span><br><span class="line">    // 使用从父组件传入的 airLineOptions 函数生成图表选项</span><br><span class="line">    const options = props.chartOption(props.data.xAxisData, props.data.seriesData);</span><br><span class="line"></span><br><span class="line">    // 使用 ECharts 实例的 setOption 方法渲染图表</span><br><span class="line">    bar?.setOption(options);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>waterBarOption.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ECBasicOption</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;echarts/types/dist/shared&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> waterBarOption = (<span class="attr">xAxisData</span>: <span class="built_in">string</span>[], <span class="attr">seriesData</span>: <span class="built_in">number</span>[]): <span class="function"><span class="params">ECBasicOption</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">xAxis</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: xAxisData,</span><br><span class="line">            <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">                <span class="attr">rotate</span>: <span class="number">0</span>,  <span class="comment">// 旋转横轴标签，适应来源类别显示</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">yAxis</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">            <span class="attr">position</span>: <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;碳排放量 (吨)&#x27;</span>,  <span class="comment">// Y轴标签修改为碳排放量</span></span><br><span class="line">            <span class="attr">nameTextStyle</span>: &#123;</span><br><span class="line">                <span class="attr">padding</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>],  <span class="comment">// 调整标签位置</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">grid</span>: &#123;</span><br><span class="line">            <span class="attr">left</span>: <span class="string">&#x27;5%&#x27;</span>,</span><br><span class="line">            <span class="attr">right</span>: <span class="string">&#x27;5%&#x27;</span>,</span><br><span class="line">            <span class="attr">bottom</span>: <span class="string">&#x27;10%&#x27;</span>,</span><br><span class="line">            <span class="attr">containLabel</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">series</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;碳排放量&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: seriesData,</span><br><span class="line">                <span class="attr">color</span>: [<span class="string">&#x27;#5DB1FF&#x27;</span>],  <span class="comment">// 颜色改为适合碳排放的颜色</span></span><br><span class="line">                <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">                    <span class="attr">normal</span>: &#123;</span><br><span class="line">                        <span class="attr">barBorderRadius</span>: [<span class="number">8</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>],  <span class="comment">// 保持柱状图的圆角效果</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> waterBarOption;</span><br></pre></td></tr></table></figure><p>waterBarData.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> waterBarData = &#123;</span><br><span class="line">    <span class="attr">xAxisData</span>: [<span class="string">&#x27;能源&#x27;</span>, <span class="string">&#x27;工业&#x27;</span>, <span class="string">&#x27;交通&#x27;</span>, <span class="string">&#x27;居民&#x27;</span>, <span class="string">&#x27;农业&#x27;</span>, <span class="string">&#x27;其他&#x27;</span>],</span><br><span class="line">    <span class="attr">seriesData</span>: [<span class="number">5300</span>, <span class="number">4500</span>, <span class="number">3200</span>, <span class="number">2100</span>, <span class="number">1800</span>, <span class="number">900</span>],  <span class="comment">// 从大到小排序后的碳排放量数据</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="仪表盘"><a href="#仪表盘" class="headerlink" title="仪表盘"></a>仪表盘</h2><p>BoardContainer.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;BoardContainer w-full&quot;&gt;</span><br><span class="line">        &lt;div ref=&quot;boardContainer&quot;</span><br><span class="line">            :style=&quot;&#123; width: typeof width === &#x27;string&#x27; ? width : `$&#123;width&#125;px`, height: `$&#123;height&#125;px` &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; onMounted, nextTick, ref &#125; from &quot;vue&quot;</span><br><span class="line">import * as echarts from &#x27;echarts&#x27;;</span><br><span class="line">import &#123; ECBasicOption &#125; from &#x27;echarts/types/dist/shared&#x27;;</span><br><span class="line"></span><br><span class="line">// 接收 boardOptions 函数和数据作为 prop</span><br><span class="line">const props = defineProps&lt;&#123;</span><br><span class="line">    width: number | string;</span><br><span class="line">    height: number;</span><br><span class="line">    data: &#123;</span><br><span class="line">        currentValue: number;</span><br><span class="line">    &#125;;</span><br><span class="line">    chartOption: (currentValue: number) =&gt; ECBasicOption</span><br><span class="line">&#125;&gt;();</span><br><span class="line"></span><br><span class="line">const boardContainer = ref&lt;HTMLElement | null&gt;(null);</span><br><span class="line">let board: echarts.ECharts | null = null;</span><br><span class="line"></span><br><span class="line">onMounted(async () =&gt; &#123;</span><br><span class="line">    await nextTick();</span><br><span class="line">    initBoardChart();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 初始化图表方法</span><br><span class="line">const initBoardChart = () =&gt; &#123;</span><br><span class="line">    if (boardContainer.value) &#123;</span><br><span class="line">        board = echarts.init(boardContainer.value);</span><br><span class="line">        renderBoardChart();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 渲染图表</span><br><span class="line">const renderBoardChart = () =&gt; &#123;</span><br><span class="line">    // 使用从父组件传入的 boardOptions 函数生成图表选项</span><br><span class="line">    const options = props.chartOption(props.data.currentValue);</span><br><span class="line"></span><br><span class="line">    // 使用 ECharts 实例的 setOption 方法渲染图表</span><br><span class="line">    board?.setOption(options);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.BoardContainer &#123;</span><br><span class="line">    // 可以根据需要添加或调整样式</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>radarOptions.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ECBasicOption</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;echarts/types/dist/shared&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> radarOptions = (<span class="attr">indicatorData</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">max</span>: <span class="built_in">number</span> &#125;[], <span class="attr">seriesData</span>: <span class="built_in">number</span>[]): <span class="function"><span class="params">ECBasicOption</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">tooltip</span>: &#123;</span><br><span class="line">            <span class="attr">trigger</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">radar</span>: &#123;</span><br><span class="line">            <span class="comment">// 指标配置</span></span><br><span class="line">            <span class="attr">indicator</span>: indicatorData,</span><br><span class="line">            <span class="attr">shape</span>: <span class="string">&#x27;polygon&#x27;</span>,  <span class="comment">// 雷达图形状</span></span><br><span class="line">            <span class="attr">splitNumber</span>: <span class="number">5</span>,  <span class="comment">// 网格分成的层数</span></span><br><span class="line">            <span class="attr">axisName</span>: &#123;</span><br><span class="line">                <span class="attr">color</span>: <span class="string">&#x27;#333&#x27;</span>,  <span class="comment">// 轴线名称颜色</span></span><br><span class="line">                <span class="attr">fontSize</span>: <span class="number">12</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">splitLine</span>: &#123;</span><br><span class="line">                <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">                    <span class="attr">color</span>: <span class="string">&#x27;#ddd&#x27;</span>,  <span class="comment">// 网格线颜色</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">splitArea</span>: &#123;</span><br><span class="line">                <span class="attr">show</span>: <span class="literal">false</span>,  <span class="comment">// 隐藏雷达图的背景填充</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">series</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;绿化率&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;radar&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">value</span>: seriesData,</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">&#x27;年度绿化率&#x27;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">areaStyle</span>: &#123;</span><br><span class="line">                    <span class="attr">color</span>: <span class="string">&#x27;rgba(93, 177, 255, 0.5)&#x27;</span>,  <span class="comment">// 填充颜色，透明度调整适合展示绿化率</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">                    <span class="attr">color</span>: <span class="string">&#x27;#5DB1FF&#x27;</span>,  <span class="comment">// 线条颜色</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> radarOptions;</span><br></pre></td></tr></table></figure><p>radarData.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> radarData = &#123;</span><br><span class="line">    <span class="attr">indicatorData</span>: [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;公园绿地&#x27;</span>, <span class="attr">max</span>: <span class="number">100</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;道路绿化&#x27;</span>, <span class="attr">max</span>: <span class="number">100</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;社区绿化&#x27;</span>, <span class="attr">max</span>: <span class="number">100</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;城市绿化&#x27;</span>, <span class="attr">max</span>: <span class="number">100</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;水域绿化&#x27;</span>, <span class="attr">max</span>: <span class="number">100</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">seriesData</span>: [<span class="number">80</span>, <span class="number">70</span>, <span class="number">85</span>, <span class="number">90</span>, <span class="number">75</span>],  <span class="comment">// 各个绿化维度的实际值</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="盒须图"><a href="#盒须图" class="headerlink" title="盒须图"></a>盒须图</h2><p>BoxplotContainer.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;boxplotContainer w-full&quot;&gt;</span><br><span class="line">        &lt;div ref=&quot;boxplotContainer&quot;</span><br><span class="line">            :style=&quot;&#123; width: typeof width === &#x27;string&#x27; ? width : `$&#123;width&#125;px`, height: `$&#123;height&#125;px` &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; onMounted, nextTick, ref &#125; from &quot;vue&quot;;</span><br><span class="line">import * as echarts from &#x27;echarts&#x27;;</span><br><span class="line">import &#123; ECBasicOption &#125; from &#x27;echarts/types/dist/shared&#x27;;</span><br><span class="line"></span><br><span class="line">// 接收 boxplotOptions 函数和数据作为 prop</span><br><span class="line">const props = defineProps&lt;&#123;</span><br><span class="line">    width: number | string;</span><br><span class="line">    height: number;</span><br><span class="line">    data: &#123;</span><br><span class="line">        xAxisData: string[];</span><br><span class="line">        seriesData: number[][];</span><br><span class="line">    &#125;;</span><br><span class="line">    chartOption: (xAxisData: string[], seriesData: number[][]) =&gt; ECBasicOption</span><br><span class="line">&#125;&gt;();</span><br><span class="line"></span><br><span class="line">const boxplotContainer = ref&lt;HTMLElement | null&gt;(null);</span><br><span class="line">let boxplot: echarts.ECharts | null = null;</span><br><span class="line"></span><br><span class="line">onMounted(async () =&gt; &#123;</span><br><span class="line">    await nextTick();</span><br><span class="line">    initBoxplotChart();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 初始化图表方法</span><br><span class="line">const initBoxplotChart = () =&gt; &#123;</span><br><span class="line">    if (boxplotContainer.value) &#123;</span><br><span class="line">        boxplot = echarts.init(boxplotContainer.value);</span><br><span class="line">        renderBoxplot();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 渲染图表</span><br><span class="line">const renderBoxplot = () =&gt; &#123;</span><br><span class="line">    // 使用从父组件传入的 boxplotOptions 函数生成图表选项</span><br><span class="line">    const options = props.chartOption(props.data.xAxisData, props.data.seriesData);</span><br><span class="line"></span><br><span class="line">    // 使用 ECharts 实例的 setOption 方法渲染图表</span><br><span class="line">    boxplot?.setOption(options);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>boxplotOptions.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ECBasicOption</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;echarts/types/dist/shared&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成 Boxplot 图表选项的函数</span></span><br><span class="line"><span class="keyword">const</span> boxplotOptions = (<span class="attr">xAxisData</span>: <span class="built_in">string</span>[], <span class="attr">seriesData</span>: <span class="built_in">number</span>[][]): <span class="function"><span class="params">ECBasicOption</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">tooltip</span>: &#123;</span><br><span class="line">            <span class="attr">trigger</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">            <span class="attr">formatter</span>: <span class="keyword">function</span> (<span class="params">param: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> [</span><br><span class="line">                    <span class="string">`Category: <span class="subst">$&#123;param.name&#125;</span>`</span>,</span><br><span class="line">                    <span class="string">`Upper: <span class="subst">$&#123;param.data[<span class="number">5</span>]&#125;</span>`</span>,</span><br><span class="line">                    <span class="string">`Q3: <span class="subst">$&#123;param.data[<span class="number">4</span>]&#125;</span>`</span>,</span><br><span class="line">                    <span class="string">`Median: <span class="subst">$&#123;param.data[<span class="number">3</span>]&#125;</span>`</span>,</span><br><span class="line">                    <span class="string">`Q1: <span class="subst">$&#123;param.data[<span class="number">2</span>]&#125;</span>`</span>,</span><br><span class="line">                    <span class="string">`Lower: <span class="subst">$&#123;param.data[<span class="number">1</span>]&#125;</span>`</span></span><br><span class="line">                ].<span class="title function_">join</span>(<span class="string">&#x27;&lt;br/&gt;&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">grid</span>: &#123;</span><br><span class="line">            <span class="attr">top</span>: <span class="string">&#x27;5%&#x27;</span>,</span><br><span class="line">            <span class="attr">left</span>: <span class="string">&#x27;0%&#x27;</span>,</span><br><span class="line">            <span class="attr">right</span>: <span class="string">&#x27;0%&#x27;</span>,</span><br><span class="line">            <span class="attr">bottom</span>: <span class="string">&#x27;5%&#x27;</span>,</span><br><span class="line">            <span class="attr">containLabel</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">xAxis</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: xAxisData,</span><br><span class="line">            <span class="attr">boundaryGap</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">nameGap</span>: <span class="number">30</span>,</span><br><span class="line">            <span class="attr">splitArea</span>: &#123;</span><br><span class="line">                <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">                <span class="attr">rotate</span>: <span class="number">0</span>,  <span class="comment">// 根据类别显示调整</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">yAxis</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;碳排放量 (吨)&#x27;</span>,</span><br><span class="line">            <span class="attr">splitArea</span>: &#123;</span><br><span class="line">                <span class="attr">show</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">series</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;碳排放分布&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;boxplot&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: seriesData,</span><br><span class="line">                <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">                    <span class="attr">color</span>: <span class="string">&#x27;#5DB1FF&#x27;</span>  <span class="comment">// 颜色与碳排放主题一致</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> boxplotOptions;</span><br></pre></td></tr></table></figure><p>boxplotData.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Boxplot 数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> boxplotData = &#123;</span><br><span class="line">    <span class="attr">xAxisData</span>: [<span class="string">&#x27;能源&#x27;</span>, <span class="string">&#x27;工业&#x27;</span>, <span class="string">&#x27;交通&#x27;</span>, <span class="string">&#x27;居民&#x27;</span>, <span class="string">&#x27;农业&#x27;</span>, <span class="string">&#x27;其他&#x27;</span>],</span><br><span class="line">    <span class="attr">seriesData</span>: [</span><br><span class="line">        [<span class="number">700</span>, <span class="number">1000</span>, <span class="number">2500</span>, <span class="number">3000</span>, <span class="number">4000</span>, <span class="number">6000</span>],  <span class="comment">// Energy</span></span><br><span class="line">        [<span class="number">600</span>, <span class="number">800</span>, <span class="number">2000</span>, <span class="number">2500</span>, <span class="number">3500</span>, <span class="number">4500</span>],   <span class="comment">// Industry</span></span><br><span class="line">        [<span class="number">400</span>, <span class="number">700</span>, <span class="number">1500</span>, <span class="number">2000</span>, <span class="number">2700</span>, <span class="number">3200</span>],   <span class="comment">// Transportation</span></span><br><span class="line">        [<span class="number">200</span>, <span class="number">400</span>, <span class="number">900</span>, <span class="number">1200</span>, <span class="number">1500</span>, <span class="number">2100</span>],    <span class="comment">// Residential</span></span><br><span class="line">        [<span class="number">100</span>, <span class="number">300</span>, <span class="number">600</span>, <span class="number">1000</span>, <span class="number">1200</span>, <span class="number">1800</span>],    <span class="comment">// Agriculture</span></span><br><span class="line">        [<span class="number">50</span>, <span class="number">150</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">700</span>, <span class="number">900</span>],        <span class="comment">// Others</span></span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="漏斗图"><a href="#漏斗图" class="headerlink" title="漏斗图"></a>漏斗图</h2><p>funnelContainer.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;funnelContainer w-full&quot;&gt;</span><br><span class="line">        &lt;div ref=&quot;funnelContainer&quot;</span><br><span class="line">            :style=&quot;&#123; width: typeof width === &#x27;string&#x27; ? width : `$&#123;width&#125;px`, height: `$&#123;height&#125;px` &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; onMounted, nextTick, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import * as echarts from &#x27;echarts&#x27;;</span><br><span class="line">import &#123; ECBasicOption &#125; from &#x27;echarts/types/dist/shared&#x27;;</span><br><span class="line"></span><br><span class="line">// 接收 funnelOptions 函数和数据作为 prop</span><br><span class="line">const props = defineProps&lt;&#123;</span><br><span class="line">    width: number | string;</span><br><span class="line">    height: number;</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: string;</span><br><span class="line">        value: number;</span><br><span class="line">    &#125;[];</span><br><span class="line">    chartOption: (funnelData: &#123; name: string; value: number &#125;[]) =&gt; ECBasicOption;</span><br><span class="line">&#125;&gt;();</span><br><span class="line"></span><br><span class="line">const funnelContainer = ref&lt;HTMLElement | null&gt;(null);</span><br><span class="line">let funnelChart: echarts.ECharts | null = null;</span><br><span class="line"></span><br><span class="line">onMounted(async () =&gt; &#123;</span><br><span class="line">    await nextTick();</span><br><span class="line">    initFunnelChart();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 初始化图表方法</span><br><span class="line">const initFunnelChart = () =&gt; &#123;</span><br><span class="line">    if (funnelContainer.value) &#123;</span><br><span class="line">        funnelChart = echarts.init(funnelContainer.value);</span><br><span class="line">        renderFunnelChart();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 渲染图表</span><br><span class="line">const renderFunnelChart = () =&gt; &#123;</span><br><span class="line">    // 使用从父组件传入的 funnelOptions 函数生成图表选项</span><br><span class="line">    const options = props.chartOption(props.data);</span><br><span class="line"></span><br><span class="line">    // 使用 ECharts 实例的 setOption 方法渲染图表</span><br><span class="line">    funnelChart?.setOption(options);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.funnelContainer &#123;</span><br><span class="line">    // 可根据需要添加样式</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>funnelOptions.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ECBasicOption</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;echarts/types/dist/shared&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> funnelOptions = (<span class="attr">funnelData</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">value</span>: <span class="built_in">number</span> &#125;[]): <span class="function"><span class="params">ECBasicOption</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">tooltip</span>: &#123;</span><br><span class="line">            <span class="attr">trigger</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">            <span class="attr">formatter</span>: <span class="string">&#x27;&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125;%&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">legend</span>: &#123;</span><br><span class="line">            <span class="attr">data</span>: funnelData.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">name</span>),</span><br><span class="line">            <span class="attr">bottom</span>: <span class="string">&#x27;10%&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">series</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;绿化来源&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;funnel&#x27;</span>,</span><br><span class="line">                <span class="attr">left</span>: <span class="string">&#x27;10%&#x27;</span>,</span><br><span class="line">                <span class="attr">top</span>: <span class="number">10</span>,</span><br><span class="line">                <span class="attr">bottom</span>: <span class="number">50</span>,</span><br><span class="line">                <span class="attr">width</span>: <span class="string">&#x27;80%&#x27;</span>,</span><br><span class="line">                <span class="attr">min</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">max</span>: <span class="number">40</span>,</span><br><span class="line">                <span class="attr">minSize</span>: <span class="string">&#x27;0%&#x27;</span>,</span><br><span class="line">                <span class="attr">maxSize</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">                <span class="attr">sort</span>: <span class="string">&#x27;descending&#x27;</span>,</span><br><span class="line">                <span class="attr">gap</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">label</span>: &#123;</span><br><span class="line">                    <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">position</span>: <span class="string">&#x27;inside&#x27;</span>,</span><br><span class="line">                    <span class="attr">formatter</span>: <span class="string">&#x27;&#123;b&#125;: &#123;c&#125;%&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">labelLine</span>: &#123;</span><br><span class="line">                    <span class="attr">length</span>: <span class="number">10</span>,</span><br><span class="line">                    <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">                        <span class="attr">width</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&#x27;solid&#x27;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">                    <span class="attr">borderColor</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">                    <span class="attr">borderWidth</span>: <span class="number">2</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">emphasis</span>: &#123;</span><br><span class="line">                    <span class="attr">label</span>: &#123;</span><br><span class="line">                        <span class="attr">fontSize</span>: <span class="number">20</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">data</span>: funnelData,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> funnelOptions;</span><br></pre></td></tr></table></figure><p>funnelData.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> funnelData = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;森林&#x27;</span>, <span class="attr">value</span>: <span class="number">40</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;草地&#x27;</span>, <span class="attr">value</span>: <span class="number">30</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;公园&#x27;</span>, <span class="attr">value</span>: <span class="number">20</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;其他&#x27;</span>, <span class="attr">value</span>: <span class="number">10</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="横向柱状图"><a href="#横向柱状图" class="headerlink" title="横向柱状图"></a>横向柱状图</h2><p>horizontalBarContainer.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;horizontalBarContainer w-full&quot;&gt;</span><br><span class="line">        &lt;div ref=&quot;horizontalBarContainer&quot; :style=&quot;&#123; width: typeof width === &#x27;string&#x27; ? width : `$&#123;width&#125;px`, height: `$&#123;height&#125;px` &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; onMounted, nextTick, ref &#125; from &quot;vue&quot;</span><br><span class="line">import * as echarts from &#x27;echarts&#x27;;</span><br><span class="line">import &#123; ECBasicOption &#125; from &#x27;echarts/types/dist/shared&#x27;;</span><br><span class="line"></span><br><span class="line">// 接收 airLineOptions 函数和数据作为 prop</span><br><span class="line">const props = defineProps&lt;&#123;</span><br><span class="line">    width: number|string;</span><br><span class="line">    height: number;</span><br><span class="line">    data: &#123;</span><br><span class="line">        yAxisData: string[];</span><br><span class="line">        seriesData: number[];</span><br><span class="line">    &#125;;</span><br><span class="line">    chartOption: (xAxisData: string[], seriesData: number[]) =&gt; ECBasicOption</span><br><span class="line">&#125;&gt;();</span><br><span class="line"></span><br><span class="line">const horizontalBarContainer = ref&lt;HTMLElement | null&gt;(null);</span><br><span class="line">let horizontalBar: echarts.ECharts | null = null;</span><br><span class="line"></span><br><span class="line">onMounted(async () =&gt; &#123;</span><br><span class="line">    await nextTick();</span><br><span class="line">    initAirHorizontalBarChart();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 初始化图表方法</span><br><span class="line">const initAirHorizontalBarChart = () =&gt; &#123;</span><br><span class="line">    if (horizontalBarContainer.value) &#123;</span><br><span class="line">        horizontalBar = echarts.init(horizontalBarContainer.value);</span><br><span class="line">        renderAirHorizontalBar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 渲染图表</span><br><span class="line">const renderAirHorizontalBar = () =&gt; &#123;</span><br><span class="line">    let options = props.chartOption(props.data.yAxisData, props.data.seriesData);</span><br><span class="line"></span><br><span class="line">    // 使用 setOption 方法设置图表配置</span><br><span class="line">    horizontalBar?.setOption(options);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>airHorizontalBarOption.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ECBasicOption</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;echarts/types/dist/shared&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> airHorizontalBarOption = (<span class="attr">yAxisData</span>: <span class="built_in">string</span>[], <span class="attr">seriesData</span>: <span class="built_in">number</span>[]):<span class="function"><span class="params">ECBasicOption</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">tooltip</span>: &#123;</span><br><span class="line">            <span class="attr">trigger</span>: <span class="string">&#x27;axis&#x27;</span>,</span><br><span class="line">            <span class="attr">axisPointer</span>: &#123; <span class="attr">type</span>: <span class="string">&#x27;shadow&#x27;</span> &#125;,  <span class="comment">// 提示框显示为阴影效果</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">xAxis</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;AQI&#x27;</span>,</span><br><span class="line">            <span class="attr">nameTextStyle</span>: &#123;</span><br><span class="line">                <span class="attr">padding</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],  <span class="comment">// 调整 x 轴名称位置</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">position</span>: <span class="string">&#x27;top&#x27;</span>,  <span class="comment">// x 轴放在图表顶部</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">yAxis</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: yAxisData,  <span class="comment">// 使用地区名称作为 y 轴</span></span><br><span class="line">            <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">                <span class="attr">rotate</span>: <span class="number">0</span>,  <span class="comment">// 不旋转标签</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">grid</span>: &#123;</span><br><span class="line">            <span class="attr">left</span>: <span class="string">&#x27;10%&#x27;</span>,</span><br><span class="line">            <span class="attr">right</span>: <span class="string">&#x27;10%&#x27;</span>,</span><br><span class="line">            <span class="attr">bottom</span>: <span class="string">&#x27;10%&#x27;</span>,</span><br><span class="line">            <span class="attr">containLabel</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">series</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;AQI&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: seriesData,</span><br><span class="line">                <span class="attr">color</span>: [<span class="string">&#x27;#5DB1FF&#x27;</span>],</span><br><span class="line">                <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">                    <span class="attr">barBorderRadius</span>: [<span class="number">0</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">0</span>],  <span class="comment">// 圆角应用到左侧的柱状条</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">emphasis</span>: &#123;</span><br><span class="line">                    <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">                        <span class="attr">color</span>: <span class="string">&#x27;#3398DB&#x27;</span>,  <span class="comment">// 高亮时的颜色</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> airHorizontalBarOption;</span><br></pre></td></tr></table></figure><p>horizontalBarData.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> horizontalBarData = &#123;</span><br><span class="line">    <span class="attr">yAxisData</span>: [<span class="string">&#x27;东部地区&#x27;</span>, <span class="string">&#x27;西部地区&#x27;</span>, <span class="string">&#x27;中部地区&#x27;</span>, <span class="string">&#x27;北部地区&#x27;</span>], <span class="comment">// 不同地区</span></span><br><span class="line">    <span class="attr">seriesData</span>: [<span class="number">75</span>, <span class="number">60</span>, <span class="number">85</span>, <span class="number">90</span>], <span class="comment">// 各地区的AQI值</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h2><p>lineContainer.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;lineContainer w-full&quot;&gt;</span><br><span class="line">        &lt;div ref=&quot;lineContainer&quot; :style=&quot;&#123; width: typeof width === &#x27;string&#x27; ? width : `$&#123;width&#125;px`, height: `$&#123;height&#125;px` &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; onMounted, nextTick, ref &#125; from &quot;vue&quot;</span><br><span class="line">import * as echarts from &#x27;echarts&#x27;;</span><br><span class="line">import &#123; ECBasicOption &#125; from &#x27;echarts/types/dist/shared&#x27;;</span><br><span class="line"></span><br><span class="line">// 接收 airLineOptions 函数和数据作为 prop</span><br><span class="line">const props = defineProps&lt;&#123;</span><br><span class="line">    width: number|string;</span><br><span class="line">    height: number;</span><br><span class="line">    data: &#123;</span><br><span class="line">        xAxisData: string[];</span><br><span class="line">        seriesData: number[];</span><br><span class="line">    &#125;;</span><br><span class="line">    chartOption: (xAxisData: string[], seriesData: number[]) =&gt; ECBasicOption</span><br><span class="line">&#125;&gt;();</span><br><span class="line"></span><br><span class="line">const lineContainer = ref&lt;HTMLElement | null&gt;(null);</span><br><span class="line">let line: echarts.ECharts | null = null;</span><br><span class="line"></span><br><span class="line">onMounted(async () =&gt; &#123;</span><br><span class="line">    await nextTick();</span><br><span class="line">    initAirLineChart();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 初始化图表方法</span><br><span class="line">const initAirLineChart = () =&gt; &#123;</span><br><span class="line">    if (lineContainer.value) &#123;</span><br><span class="line">        line = echarts.init(lineContainer.value);</span><br><span class="line">        renderAirLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 渲染图表</span><br><span class="line">const renderAirLine = () =&gt; &#123;</span><br><span class="line">    // 使用从父组件传入的 airLineOptions 函数生成图表选项</span><br><span class="line">    const options = props.chartOption(props.data.xAxisData, props.data.seriesData);</span><br><span class="line"></span><br><span class="line">    // 使用 ECharts 实例的 setOption 方法渲染图表</span><br><span class="line">    line?.setOption(options);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>airLineOptions.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ECBasicOption</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;echarts/types/dist/shared&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> airLineOptions = (<span class="attr">xAxisData</span>: <span class="built_in">string</span>[], <span class="attr">seriesData</span>: <span class="built_in">number</span>[]): <span class="function"><span class="params">ECBasicOption</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">xAxis</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: xAxisData,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">yAxis</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">            <span class="attr">position</span>: <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;AQI&#x27;</span>,  <span class="comment">// 添加 y 轴标签</span></span><br><span class="line">            <span class="attr">nameTextStyle</span>: &#123;</span><br><span class="line">                <span class="attr">padding</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, -<span class="number">30</span>],  <span class="comment">// 调整 AQI 标签位置</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">grid</span>: &#123;</span><br><span class="line">            <span class="attr">left</span>: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">            <span class="attr">right</span>: <span class="string">&#x27;4%&#x27;</span>,</span><br><span class="line">            <span class="attr">bottom</span>: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">            <span class="attr">containLabel</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">series</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;AQI&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">                <span class="attr">symbol</span>: <span class="string">&#x27;circle&#x27;</span>,</span><br><span class="line">                <span class="attr">symbolSize</span>: <span class="number">6</span>,</span><br><span class="line">                <span class="attr">data</span>: seriesData,</span><br><span class="line">                <span class="attr">color</span>: [<span class="string">&#x27;#5DB1FF&#x27;</span>],</span><br><span class="line">                <span class="attr">markLine</span>: &#123;</span><br><span class="line">                    <span class="attr">symbol</span>: [<span class="string">&#x27;none&#x27;</span>, <span class="string">&#x27;none&#x27;</span>],</span><br><span class="line">                    <span class="attr">label</span>: &#123; <span class="attr">show</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">                    <span class="attr">data</span>: [&#123; <span class="attr">xAxis</span>: <span class="number">8</span> &#125;, &#123; <span class="attr">xAxis</span>: <span class="number">11</span> &#125;]</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">areaStyle</span>: &#123;</span><br><span class="line">                    <span class="attr">color</span>: &#123;</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&#x27;linear&#x27;</span>,</span><br><span class="line">                        <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="attr">x2</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="attr">y2</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="attr">colorStops</span>: [</span><br><span class="line">                            &#123; <span class="attr">offset</span>: <span class="number">0</span>, <span class="attr">color</span>: <span class="string">&#x27;rgba(93, 177, 255, 0.3)&#x27;</span> &#125;,</span><br><span class="line">                            &#123; <span class="attr">offset</span>: <span class="number">1</span>, <span class="attr">color</span>: <span class="string">&#x27;rgba(93, 177, 255, 0)&#x27;</span> &#125;,</span><br><span class="line">                        ],</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">smooth</span>: <span class="number">0.5</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> airLineOptions;</span><br></pre></td></tr></table></figure><p>airLineData.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// airLineData.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> airLineData = &#123;</span><br><span class="line">    <span class="attr">xAxisData</span>: [<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;Feb&#x27;</span>, <span class="string">&#x27;Mar&#x27;</span>, <span class="string">&#x27;Apr&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Jun&#x27;</span>, <span class="string">&#x27;Jul&#x27;</span>, <span class="string">&#x27;Aug&#x27;</span>, <span class="string">&#x27;Sep&#x27;</span>, <span class="string">&#x27;Oct&#x27;</span>, <span class="string">&#x27;Nov&#x27;</span>, <span class="string">&#x27;Dec&#x27;</span>],</span><br><span class="line">    <span class="attr">seriesData</span>: [<span class="number">45</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">60</span>, <span class="number">65</span>, <span class="number">70</span>, <span class="number">75</span>, <span class="number">80</span>, <span class="number">70</span>, <span class="number">65</span>, <span class="number">55</span>, <span class="number">50</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h2><p>PieContainer.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;pieContainer w-full&quot;&gt;</span><br><span class="line">        &lt;div ref=&quot;pieContainer&quot; :style=&quot;&#123; width: typeof width === &#x27;string&#x27; ? width : `$&#123;width&#125;px`, height: `$&#123;height&#125;px` &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, onMounted, nextTick &#125; from &#x27;vue&#x27;;</span><br><span class="line">import * as echarts from &#x27;echarts&#x27;;</span><br><span class="line">import &#123; ECBasicOption &#125; from &#x27;echarts/types/dist/shared&#x27;;</span><br><span class="line"></span><br><span class="line">const props = defineProps&lt;&#123;</span><br><span class="line">    width: number|string;</span><br><span class="line">    height: number;</span><br><span class="line">    data: &#123;</span><br><span class="line">        seriesData: &#123; value: number; name: string &#125;[]</span><br><span class="line">    &#125;;</span><br><span class="line">    chartOption: (seriesData: &#123; value: number; name: string &#125;[]) =&gt; ECBasicOption</span><br><span class="line">&#125;&gt;();</span><br><span class="line"></span><br><span class="line">const pieContainer = ref&lt;HTMLElement | null&gt;(null);</span><br><span class="line">let pie: echarts.ECharts | null = null;</span><br><span class="line"></span><br><span class="line">onMounted(async () =&gt; &#123;</span><br><span class="line">    await nextTick();</span><br><span class="line">    initForestPieChart();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const initForestPieChart = () =&gt; &#123;</span><br><span class="line">    if (pieContainer.value) &#123;</span><br><span class="line">        pie = echarts.init(pieContainer.value);</span><br><span class="line">        renderForestPie();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const renderForestPie = () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    let options = props.chartOption(props.data.seriesData);</span><br><span class="line"></span><br><span class="line">    // 使用 setOption 方法设置图表配置</span><br><span class="line">    pie?.setOption(options);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>forestPieOption.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ECBasicOption</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;echarts/types/dist/shared&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> forestPieOption = (<span class="attr">seriesData</span>: &#123; <span class="attr">value</span>: <span class="built_in">number</span>; <span class="attr">name</span>: <span class="built_in">string</span> &#125;[]):<span class="function"><span class="params">ECBasicOption</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">tooltip</span>: &#123;</span><br><span class="line">            <span class="attr">trigger</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">            <span class="attr">formatter</span>: <span class="string">&#x27;&#123;a&#125; &lt;br/&gt;&#123;b&#125;: &#123;c&#125;% (&#123;d&#125;%)&#x27;</span>,  <span class="comment">// 提示框显示名称、数值和百分比</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">legend</span>: &#123;</span><br><span class="line">            <span class="attr">data</span>: seriesData.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">name</span>),  <span class="comment">// 动态生成图例数据</span></span><br><span class="line">            <span class="attr">orient</span>: <span class="string">&#x27;vertical&#x27;</span>,</span><br><span class="line">            <span class="attr">left</span>: <span class="string">&#x27;70%&#x27;</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">            <span class="attr">itemGap</span>: <span class="number">30</span>,</span><br><span class="line">            <span class="attr">itemHeight</span>: <span class="number">15</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">series</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;森林覆盖率&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;pie&#x27;</span>,</span><br><span class="line">                <span class="attr">radius</span>: [<span class="string">&#x27;40%&#x27;</span>, <span class="string">&#x27;70%&#x27;</span>],</span><br><span class="line">                <span class="attr">center</span>: [<span class="string">&#x27;30%&#x27;</span>, <span class="string">&#x27;50%&#x27;</span>],</span><br><span class="line">                <span class="attr">avoidLabelOverlap</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">                    <span class="attr">borderRadius</span>: <span class="number">10</span>,</span><br><span class="line">                    <span class="attr">borderColor</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">                    <span class="attr">borderWidth</span>: <span class="number">2</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">label</span>: &#123;</span><br><span class="line">                    <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">position</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">emphasis</span>: &#123;</span><br><span class="line">                    <span class="attr">label</span>: &#123;</span><br><span class="line">                        <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">fontSize</span>: <span class="number">20</span>,</span><br><span class="line">                        <span class="attr">fontWeight</span>: <span class="string">&#x27;bold&#x27;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">labelLine</span>: &#123;</span><br><span class="line">                    <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">data</span>: seriesData,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> forestPieOption;</span><br></pre></td></tr></table></figure><p>forestPieData.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> forestPieData = &#123;</span><br><span class="line">    <span class="attr">seriesData</span>: [</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">45</span>, <span class="attr">name</span>: <span class="string">&#x27;东部地区&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">30</span>, <span class="attr">name</span>: <span class="string">&#x27;西部地区&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">15</span>, <span class="attr">name</span>: <span class="string">&#x27;中部地区&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">10</span>, <span class="attr">name</span>: <span class="string">&#x27;北部地区&#x27;</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="雷达图"><a href="#雷达图" class="headerlink" title="雷达图"></a>雷达图</h2><p>radarContainer.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;radarContainer w-full&quot;&gt;</span><br><span class="line">        &lt;div ref=&quot;radarContainer&quot;</span><br><span class="line">            :style=&quot;&#123; width: typeof width === &#x27;string&#x27; ? width : `$&#123;width&#125;px`, height: `$&#123;height&#125;px` &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; onMounted, nextTick, ref &#125; from &quot;vue&quot;;</span><br><span class="line">import * as echarts from &#x27;echarts&#x27;;</span><br><span class="line">import &#123; ECBasicOption &#125; from &#x27;echarts/types/dist/shared&#x27;;</span><br><span class="line"></span><br><span class="line">// 接收 radarOptions 函数和数据作为 prop</span><br><span class="line">const props = defineProps&lt;&#123;</span><br><span class="line">    width: number | string;</span><br><span class="line">    height: number;</span><br><span class="line">    data: &#123;</span><br><span class="line">        indicatorData: &#123; name: string, max: number &#125;[];</span><br><span class="line">        seriesData: number[];</span><br><span class="line">    &#125;;</span><br><span class="line">    chartOption: (indicatorData: &#123; name: string; max: number &#125;[], seriesData: number[]) =&gt; ECBasicOption;</span><br><span class="line">&#125;&gt;();</span><br><span class="line"></span><br><span class="line">const radarContainer = ref&lt;HTMLElement | null&gt;(null);</span><br><span class="line">let radar: echarts.ECharts | null = null;</span><br><span class="line"></span><br><span class="line">onMounted(async () =&gt; &#123;</span><br><span class="line">    await nextTick();</span><br><span class="line">    initRadarChart();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 初始化雷达图方法</span><br><span class="line">const initRadarChart = () =&gt; &#123;</span><br><span class="line">    if (radarContainer.value) &#123;</span><br><span class="line">        radar = echarts.init(radarContainer.value);</span><br><span class="line">        renderRadarChart();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 渲染雷达图</span><br><span class="line">const renderRadarChart = () =&gt; &#123;</span><br><span class="line">    // 使用从父组件传入的 radarOptions 函数生成图表选项</span><br><span class="line">    const options = props.chartOption(props.data.indicatorData, props.data.seriesData);</span><br><span class="line"></span><br><span class="line">    // 使用 ECharts 实例的 setOption 方法渲染图表</span><br><span class="line">    radar?.setOption(options);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>radarOptions.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ECBasicOption</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;echarts/types/dist/shared&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> radarOptions = (<span class="attr">indicatorData</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">max</span>: <span class="built_in">number</span> &#125;[], <span class="attr">seriesData</span>: <span class="built_in">number</span>[]): <span class="function"><span class="params">ECBasicOption</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">tooltip</span>: &#123;</span><br><span class="line">            <span class="attr">trigger</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">radar</span>: &#123;</span><br><span class="line">            <span class="comment">// 指标配置</span></span><br><span class="line">            <span class="attr">indicator</span>: indicatorData,</span><br><span class="line">            <span class="attr">shape</span>: <span class="string">&#x27;polygon&#x27;</span>,  <span class="comment">// 雷达图形状</span></span><br><span class="line">            <span class="attr">splitNumber</span>: <span class="number">5</span>,  <span class="comment">// 网格分成的层数</span></span><br><span class="line">            <span class="attr">axisName</span>: &#123;</span><br><span class="line">                <span class="attr">color</span>: <span class="string">&#x27;#333&#x27;</span>,  <span class="comment">// 轴线名称颜色</span></span><br><span class="line">                <span class="attr">fontSize</span>: <span class="number">12</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">splitLine</span>: &#123;</span><br><span class="line">                <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">                    <span class="attr">color</span>: <span class="string">&#x27;#ddd&#x27;</span>,  <span class="comment">// 网格线颜色</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">splitArea</span>: &#123;</span><br><span class="line">                <span class="attr">show</span>: <span class="literal">false</span>,  <span class="comment">// 隐藏雷达图的背景填充</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">series</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;绿化率&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;radar&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">value</span>: seriesData,</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">&#x27;年度绿化率&#x27;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">areaStyle</span>: &#123;</span><br><span class="line">                    <span class="attr">color</span>: <span class="string">&#x27;rgba(93, 177, 255, 0.5)&#x27;</span>,  <span class="comment">// 填充颜色，透明度调整适合展示绿化率</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">                    <span class="attr">color</span>: <span class="string">&#x27;#5DB1FF&#x27;</span>,  <span class="comment">// 线条颜色</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> radarOptions;</span><br></pre></td></tr></table></figure><p>radarData.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> radarData = &#123;</span><br><span class="line">    <span class="attr">indicatorData</span>: [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;公园绿地&#x27;</span>, <span class="attr">max</span>: <span class="number">100</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;道路绿化&#x27;</span>, <span class="attr">max</span>: <span class="number">100</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;社区绿化&#x27;</span>, <span class="attr">max</span>: <span class="number">100</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;城市绿化&#x27;</span>, <span class="attr">max</span>: <span class="number">100</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;水域绿化&#x27;</span>, <span class="attr">max</span>: <span class="number">100</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">seriesData</span>: [<span class="number">80</span>, <span class="number">70</span>, <span class="number">85</span>, <span class="number">90</span>, <span class="number">75</span>],  <span class="comment">// 各个绿化维度的实际值</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><p>scatterContainer.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;scatterContainer w-full&quot;&gt;</span><br><span class="line">        &lt;div ref=&quot;scatterContainer&quot;</span><br><span class="line">            :style=&quot;&#123; width: typeof width === &#x27;string&#x27; ? width : `$&#123;width&#125;px`, height: `$&#123;height&#125;px` &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; onMounted, nextTick, ref &#125; from &quot;vue&quot;;</span><br><span class="line">import * as echarts from &#x27;echarts&#x27;;</span><br><span class="line">import &#123; ECBasicOption &#125; from &#x27;echarts/types/dist/shared&#x27;;</span><br><span class="line"></span><br><span class="line">// 接收 scatterOption 函数和数据作为 prop</span><br><span class="line">const props = defineProps&lt;&#123;</span><br><span class="line">    width: number | string;</span><br><span class="line">    height: number;</span><br><span class="line">    data: &#123;</span><br><span class="line">        xAxisData: string[];</span><br><span class="line">        seriesData: number[][];</span><br><span class="line">    &#125;;</span><br><span class="line">    chartOption: (xAxisData: string[], seriesData: number[][]) =&gt; ECBasicOption</span><br><span class="line">&#125;&gt;();</span><br><span class="line"></span><br><span class="line">const scatterContainer = ref&lt;HTMLElement | null&gt;(null);</span><br><span class="line">let scatter: echarts.ECharts | null = null;</span><br><span class="line"></span><br><span class="line">onMounted(async () =&gt; &#123;</span><br><span class="line">    await nextTick();</span><br><span class="line">    initScatterChart();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 初始化图表方法</span><br><span class="line">const initScatterChart = () =&gt; &#123;</span><br><span class="line">    if (scatterContainer.value) &#123;</span><br><span class="line">        scatter = echarts.init(scatterContainer.value);</span><br><span class="line">        renderScatterChart();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 渲染图表</span><br><span class="line">const renderScatterChart = () =&gt; &#123;</span><br><span class="line">    // 使用从父组件传入的 scatterOption 函数生成图表选项</span><br><span class="line">    const options = props.chartOption(props.data.xAxisData, props.data.seriesData);</span><br><span class="line"></span><br><span class="line">    // 使用 ECharts 实例的 setOption 方法渲染图表</span><br><span class="line">    scatter?.setOption(options);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>scatterOption.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ECBasicOption</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;echarts/types/dist/shared&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> scatterOption = (<span class="attr">xAxisData</span>: <span class="built_in">string</span>[], <span class="attr">seriesData</span>: <span class="built_in">number</span>[][]): <span class="function"><span class="params">ECBasicOption</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">xAxis</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: xAxisData,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;类别&#x27;</span>,  <span class="comment">// X轴名称，可以根据具体数据修改</span></span><br><span class="line">            <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">                <span class="attr">rotate</span>: <span class="number">45</span>,  <span class="comment">// 适当旋转以适应类别显示</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">yAxis</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;碳排放量 (吨)&#x27;</span>,  <span class="comment">// Y轴名称，适合用于展示碳排放数据</span></span><br><span class="line">            <span class="attr">nameTextStyle</span>: &#123;</span><br><span class="line">                <span class="attr">padding</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">grid</span>: &#123;</span><br><span class="line">            <span class="attr">left</span>: <span class="string">&#x27;5%&#x27;</span>,</span><br><span class="line">            <span class="attr">right</span>: <span class="string">&#x27;5%&#x27;</span>,</span><br><span class="line">            <span class="attr">bottom</span>: <span class="string">&#x27;10%&#x27;</span>,</span><br><span class="line">            <span class="attr">containLabel</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">series</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;碳排放量对比&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;scatter&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: seriesData,</span><br><span class="line">                <span class="attr">symbolSize</span>: <span class="keyword">function</span> (<span class="params">data:<span class="built_in">any</span></span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(data[<span class="number">1</span>]) / <span class="number">5</span>;  <span class="comment">// 根据数据动态调整点的大小</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">color</span>: <span class="string">&#x27;#5DB1FF&#x27;</span>,  <span class="comment">// 颜色设为适合碳排放主题的蓝色</span></span><br><span class="line">                <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">                    <span class="attr">emphasis</span>: &#123;</span><br><span class="line">                        <span class="attr">borderColor</span>: <span class="string">&#x27;#333&#x27;</span>,</span><br><span class="line">                        <span class="attr">borderWidth</span>: <span class="number">1</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">tooltip</span>: &#123;</span><br><span class="line">            <span class="attr">trigger</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">            <span class="attr">formatter</span>: <span class="keyword">function</span> (<span class="params">params:<span class="built_in">any</span></span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;params.name&#125;</span>&lt;br/&gt;碳排放量: <span class="subst">$&#123;params.value[<span class="number">1</span>]&#125;</span> 吨`</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> scatterOption;</span><br></pre></td></tr></table></figure><p>scatterData.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> scatterData = &#123;</span><br><span class="line">    <span class="attr">xAxisData</span>: [<span class="string">&#x27;能源&#x27;</span>, <span class="string">&#x27;工业&#x27;</span>, <span class="string">&#x27;交通&#x27;</span>, <span class="string">&#x27;居民&#x27;</span>, <span class="string">&#x27;农业&#x27;</span>, <span class="string">&#x27;其他&#x27;</span>],</span><br><span class="line">    <span class="attr">seriesData</span>: [</span><br><span class="line">        [<span class="string">&#x27;能源&#x27;</span>, <span class="number">5300</span>],</span><br><span class="line">        [<span class="string">&#x27;工业&#x27;</span>, <span class="number">4500</span>],</span><br><span class="line">        [<span class="string">&#x27;交通&#x27;</span>, <span class="number">3200</span>],</span><br><span class="line">        [<span class="string">&#x27;居民&#x27;</span>, <span class="number">2100</span>],</span><br><span class="line">        [<span class="string">&#x27;农业&#x27;</span>, <span class="number">1800</span>],</span><br><span class="line">        [<span class="string">&#x27;其他&#x27;</span>, <span class="number">900</span>]</span><br><span class="line">    ],  <span class="comment">// 每个类别对应的碳排放量数据</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="electron-vue3打包项目"><a href="#electron-vue3打包项目" class="headerlink" title="electron + vue3打包项目"></a>electron + vue3打包项目</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><strong>下载</strong></li></ol><p>由于直接<code>npm</code>会导致卡死，所以采用<code>cnpm</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com</span><br><span class="line">cnpm install --save-dev electron electron-builder</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>创建 Electron 主进程文件</strong></li></ol><p>src&#x2F;electron&#x2F;main.js</p><p>这里踩了一个大坑就是之前执着用ts，导致后面在“main”的指定中，因为只能指定js类型文件，所以会导致以后每一次main文件修改，都会需要进行编译后，才能运行出修改的代码，但是实际上也不能这么写，后面会在main文件指定底下详细说明</p><p>还有一个问题就是<code>require</code>、<code>__dirname</code>这些都是commandjs的用法，也就是常规node，如果在es模块下使用时需要添加<code>nodeIntegration:true</code>、<code>contextIsolation:false</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 控制应用生命周期和创建原生浏览器窗口的模组</span></span><br><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span>, <span class="title class_">Menu</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">// process.env[&#x27;ELECTRON_DISABLE_SECURITY_WARNINGS&#x27;] = true // 关闭控制台的警告</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 创建浏览器窗口</span></span><br><span class="line">    <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">1200</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">800</span>,</span><br><span class="line">        <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">            <span class="comment">// 书写渲染进程中的配置</span></span><br><span class="line">            <span class="attr">nodeIntegration</span>: <span class="literal">true</span>, <span class="comment">//开启true这一步很重要,目的是为了vue文件中可以引入node和electron相关的API</span></span><br><span class="line">            <span class="attr">contextIsolation</span>: <span class="literal">false</span>, <span class="comment">// 可以使用require方法</span></span><br><span class="line">            <span class="attr">enableRemoteModule</span>: <span class="literal">true</span>, <span class="comment">// 可以使用remote方法</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听html</span></span><br><span class="line">    mainWindow.<span class="title function_">loadFile</span>(path.<span class="title function_">join</span>(app.<span class="title function_">getAppPath</span>(), <span class="string">&#x27;dist/index.html&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这段程序将会在 Electron 结束初始化</span></span><br><span class="line"><span class="comment">// 和创建浏览器窗口的时候调用</span></span><br><span class="line"><span class="comment">// 部分 API 在 ready 事件触发后才能使用。</span></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">createWindow</span>()</span><br><span class="line"></span><br><span class="line">    app.<span class="title function_">on</span>(<span class="string">&#x27;activate&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 通常在 macOS 上，当点击 dock 中的应用程序图标时，如果没有其他</span></span><br><span class="line">        <span class="comment">// 打开的窗口，那么程序会重新创建一个窗口。</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">BrowserWindow</span>.<span class="title function_">getAllWindows</span>().<span class="property">length</span> === <span class="number">0</span>) <span class="title function_">createWindow</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了 macOS 外，当所有窗口都被关闭的时候退出程序。 因此，通常对程序和它们在</span></span><br><span class="line"><span class="comment">// 任务栏上的图标来说，应当保持活跃状态，直到用户使用 Cmd + Q 退出。</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&#x27;darwin&#x27;</span>) app.<span class="title function_">quit</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>配置 Vite 进行 Electron 打包</strong></li></ol><p>vite.config.ts</p><p>rollupOptions：</p><p>external：</p><p>globals：</p><p>electron：</p><p>build中的outDir指定的是什么文件输出路径</p><p>emptyOutDir：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  </span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">emptyOutDir</span>: <span class="literal">false</span>,     <span class="comment">// 避免清空 dist 目录</span></span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="attr">external</span>: [<span class="string">&#x27;electron&#x27;</span>],</span><br><span class="line">      <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">globals</span>: &#123;</span><br><span class="line">          <span class="attr">electron</span>: <span class="string">&#x27;electron&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>配置ts编译方式</strong></li></ol><p>tsconfig.node.json</p><p>注意tsconfig.node.json主要是需要commandjs的</p><p><code>include</code>内的位置也需要注意，因为是直接处于<code>outDir</code>下面的</p><p>所以之前<code>include</code>里面为<code>&quot;src/electron&quot;</code>,<code>outDir</code>为<code>./dist/electron</code>时，编译出来的位置在<code>./dist/electron/src/electron</code></p><p>解决方式有两种，一种是更改<code>rootDir</code>，但是会报错，因为<code>vite.config.ts</code>不位于这个文件夹下面</p><p>第二种方法就是下面的方法将electron文件夹，移出src，并将<code>ouDir</code>设置为<code>&quot;./dist&quot;</code></p><p>同时下面还有支持导出js的配置，只需要把<code>include</code>中的内容改为<code>.js</code>后缀就行</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2022&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ES2023&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CommonJS&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;checkJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noEmitHelpers&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;removeComments&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isolatedModules&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleDetection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;force&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Emit JavaScript files */</span></span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span>              <span class="comment">// 改为 false 以允许编译输出</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist&quot;</span><span class="punctuation">,</span>   <span class="comment">// 输出目录为 dist/electron</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>       <span class="comment">// 允许与 CommonJS 互操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Linting */</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noUnusedLocals&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noUnusedParameters&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noFallthroughCasesInSwitch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;vite.config.ts&quot;</span><span class="punctuation">,</span>              <span class="comment">// 保持对 Vite 配置的支持</span></span><br><span class="line">    <span class="string">&quot;electron/**/*&quot;</span>            <span class="comment">// 包括主进程文件 (例如 electron/main.ts)</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="5"><li><strong>更新</strong> package.json <strong>的脚本</strong></li></ol><p>在 package.json 中添加 Electron 的启动脚本以及指定app入口路径：</p><p>vue-tsc -b用作build时的ts检查，<code>vue-tsc -b</code>会检查并编译，<code>vue-tsc –noEmit</code>只检查不编译，当然直接去掉这个命令可以直接编译出来，但是不推荐这么做，去损失了ts检查代码的功能</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/electron/main.js&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-tsc -b &amp;&amp; vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;electron:dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;electron .&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;electron:build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-tsc -b &amp;&amp; vite build &amp;&amp; electron-builder&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><ol start="6"><li><strong>更新 Electron Builder 配置</strong></li></ol><p>在 package.json 中添加 Electron Builder 的打包配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;appId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.example.app&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mac&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dmg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public.app-category.productivity&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;dist/**/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;electron/**/*&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extraResources&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/assets/&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;resources&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;**/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;directories&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;buildResources&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="7"><li><strong>输入运行命令以及构建命令</strong></li></ol><p><strong>打包前注意</strong>router必须是hash模式</p><p>参考：<a href="https://blog.csdn.net/qq_40994260/article/details/107440478/">https://blog.csdn.net/qq_40994260/article/details/107440478/</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>打包后mac相关文件都位于<code>Resources</code>下的<code>app.asar</code>，需要借助<code>Electron</code>官方的工具才能打开，不过会存在很多<code>.lproj</code>后缀的文件夹，里面均为空，其实里面是针对各个语言的配置包，但是这个项目没有配置，所以为空</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudp npm run electron:dev</span><br><span class="line">sudp npm run electron:build</span><br></pre></td></tr></table></figure><h2 id="热更新实现"><a href="#热更新实现" class="headerlink" title="热更新实现"></a>热更新实现</h2><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><ol><li>tsconfig.app.json以及tsconfig.node.json的区分问题</li></ol><p>​参考：<a href="https://blog.csdn.net/2301_79568124/article/details/137783628">https://blog.csdn.net/2301_79568124/article/details/137783628</a></p><ol start="2"><li>main.ts代码在编译后莫名在最后一行多了个export {};导致报错</li></ol><p>​在 tsconfig.node.json 中调整 compilerOptions，确保正确处理 CommonJS 模块</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;CommonJS&quot;</span>,</span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;ESNext&quot;</span>,</span><br><span class="line">    <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;./dist&quot;</span>,</span><br><span class="line">    <span class="string">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;allowJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;checkJs&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;noEmitHelpers&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;removeComments&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;include&quot;</span>: [<span class="string">&quot;vite.config.ts&quot;</span>, <span class="string">&quot;electron/**/*&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>启动electron:build命令，但是没有编译出main.js文件，原因是tsconfig.node.json中include没有增加对应electron文件夹</li><li>编译出main.js文件夹位置错位的问题，主要是outDir以及rootDir</li><li>报错<code>⨯ Application entry file &quot;index.js&quot; in the &quot;/Users/tec/Desktop/ai-report-assistant-frontend/dist/mac-arm64/ai-report-assistant-frontend.app/Contents/Resources/app.asar&quot; does not exist. </code></li></ol><p>​这个原因在于main.js文件缺失，解决过程如下，首先是直接报错给gpt，发现”main”没加，然后发现根本就没编译electron文件夹下面的内容</p><ol start="6"><li><p>报错<strong>require not defined in ES Module scope</strong>以及**__dirname is not defined**</p><p>原因都在于Electron 主进程代码使用了 ES module 格式，但 require 只在 CommonJS 中可用，需要删除<code>package.json</code>中的<code>&quot;type&quot;: &quot;module&quot;,</code>，并在<code>main.ts</code>中进行相关配置，详情见步骤2，同时在<code>tsconfig.node.json</code>中也需要修改编译的相关配置，详情见bug2，和步骤4</p></li></ol><h1 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h1><ol><li><strong>识别问题类型模型</strong>：<ol><li><strong>目标</strong>：分类用户的输入为问数、归因或预测。</li><li><strong>方法</strong>：使用自然语言处理技术（如BERT或其他预训练模型），并结合有标注的数据集进行监督学习。训练时，输入为用户提问，输出为问题类型标签。</li><li><strong>评估</strong>：使用准确率、召回率和F1分数来评估模型性能，确保模型能有效区分不同类型的问题。</li></ol></li><li><strong>提取关键数据模型</strong>：<ol><li><strong>目标</strong>：从用户输入中提取出关键的数值、单位和时间等信息。</li><li><strong>方法</strong>：应用命名实体识别（NER）技术，训练模型识别特定实体（如年份、数量等）。可以使用标注数据来进行微调。</li><li><strong>评估</strong>：通过查全率和查准率来评估模型在提取关键数据方面的表现，确保其准确性。</li></ol></li><li><strong>分析原因模型</strong>：<ol><li><strong>目标</strong>：分析用户询问的背后原因，并生成相关因素及其贡献。</li><li><strong>方法</strong>：利用关联规则学习或因果推断模型，结合历史数据，识别影响温室气体排放的主要因素和子因素。训练时，可以使用结构化数据和文本数据进行联合学习。</li><li><strong>评估</strong>：通过对比分析结果与真实数据的吻合度，验证模型的有效性和解释性。</li></ol></li><li><strong>预测未来趋势模型</strong>：<ol><li><strong>目标</strong>：预测未来的温室气体排放量及其变化趋势。</li><li><strong>方法</strong>：应用时间序列分析（如ARIMA、LSTM等），使用历史数据进行训练。可以引入外部因素（如政策变化、经济指标等）以提升预测准确性。</li><li><strong>评估</strong>：通过均方根误差（RMSE）和平均绝对误差（MAE）来评估模型的预测性能，确保其在实际应用中的可靠性。</li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>StarGazer项目经验</title>
      <link href="/posts/4e261382.html"/>
      <url>/posts/4e261382.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git连接以及提交"><a href="#Git连接以及提交" class="headerlink" title="Git连接以及提交"></a>Git连接以及提交</h1><p>要将本地代码连接到远程仓库（例如 <code>https://github.com/TECNB/StarGazerBackend.git</code>），你可以按照以下步骤在终端中操作：</p><ol><li><p><strong>初始化本地仓库</strong>（如果还没有）：<br>如果你的代码还没有在一个 Git 仓库中，你需要先在代码的根目录中初始化一个 Git 仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li><p><strong>添加远程仓库</strong>：<br>使用以下命令将远程仓库链接到本地仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/TECNB/StarGazerBackend.git</span><br></pre></td></tr></table></figure></li><li><p><strong>检查远程仓库是否添加成功</strong>：<br>你可以使用以下命令查看当前添加的远程仓库列表，以确保添加正确：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure></li><li><p><strong>添加文件到暂存区</strong>：<br>使用以下命令将所有更改添加到暂存区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></li><li><p><strong>提交更改</strong>：<br>使用以下命令提交更改到本地仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;chore(setup): 初始化项目&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>推送到远程仓库</strong>：<br>使用以下命令将本地仓库的代码推送到远程仓库的 <code>main</code> 分支（如果是 <code>master</code> 分支，则将 <code>main</code> 改为 <code>master</code>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></li></ol><p>如果没有设置默认分支为 <code>main</code> 或 <code>master</code>，请先确认远程仓库的默认分支名称，然后替换命令中的分支名。</p><p>完成这些步骤后，你的本地代码就会推送到 <code>https://github.com/TECNB/StarGazerBackend.git</code> 仓库中了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chore(setup): 初始化项目</span><br></pre></td></tr></table></figure><h1 id="JAVA项目初始化"><a href="#JAVA项目初始化" class="headerlink" title="JAVA项目初始化"></a>JAVA项目初始化</h1><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p>关键是不同版本之间的兼容问题，一般还是MP的问题，改依赖后，再启动，看是否报错就可以判断依赖是否正确</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>StarGazerBackend<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>StarGazerBackend<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>StarGazerBackend<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">license</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connection</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developerConnection</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tag</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>17<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8383</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">stargazerbackend</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/stargazer?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxxxxxx</span></span><br></pre></td></tr></table></figure><h2 id="MP的代码生成器使用方法"><a href="#MP的代码生成器使用方法" class="headerlink" title="MP的代码生成器使用方法"></a>MP的代码生成器使用方法</h2><p>利用插件<code>MyBatisPlus</code>（二次元头像的那个）</p><p>之后会在顶部栏出现<code>Other</code>这个选项，在子菜单<code>Config Database</code>中配置好数据库连接信息</p><p>最后在<code>Code Generator</code>中选择具体表以及对应的代码配置，这里踩过一个坑<code>module</code>处不用填留空，否则代码</p><p>成的位置不对</p><h2 id="通用响应类-R"><a href="#通用响应类-R" class="headerlink" title="通用响应类 R"></a>通用响应类 R</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tec.stargazerbackend.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code; <span class="comment">// 状态码</span></span><br><span class="line">    <span class="keyword">private</span> String message; <span class="comment">// 消息</span></span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">// 返回数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">(<span class="type">int</span> code, String message, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">ok</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>&lt;&gt;(<span class="number">200</span>, <span class="string">&quot;Success&quot;</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">error</span><span class="params">(<span class="type">int</span> code, String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>&lt;&gt;(code, message, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">error</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>&lt;&gt;(<span class="number">500</span>, message, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsersController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IUsersService usersService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现获取users表中所有数据的接口</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;Users&gt;&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Users&gt; usersList = usersService.list();</span><br><span class="line">        <span class="keyword">return</span> R.ok(usersList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参数校验（⚠️）"><a href="#参数校验（⚠️）" class="headerlink" title="参数校验（⚠️）"></a>参数校验（⚠️）</h1><p>参考链接：<a href="https://juejin.cn/post/7357172505961578511">【禁止血压飙升】如何拥有一个优雅的 controller见过几千行代码的 controller吗？我见过。 见过全是 t - 掘金 (juejin.cn)</a></p><h1 id="外键设置"><a href="#外键设置" class="headerlink" title="外键设置"></a>外键设置</h1><p>外键主要是为了能够在数据库端就进行同步的更新以及删除，同时进行数据正确性的判断</p><p><strong>选择外键约束类型</strong></p><p>主要取决于你的业务需求和数据完整性要求。以下是对常见约束类型的建议使用场景：</p><ol><li><p><strong><code>CASCADE</code></strong></p><ul><li><strong>适用场景</strong>: 当删除或更新父表中的记录时，确实希望子表中的相关记录也自动删除或更新时使用。例如，删除用户时自动删除该用户的所有订单记录。</li><li><strong>使用建议</strong>: <ul><li>如果你的数据是高度关联的，并且在删除或更新父表记录时，不希望遗留任何相关的子表记录，可以使用 <code>CASCADE</code>。</li><li>需要注意的是，使用 <code>CASCADE</code> 可能会导致意外删除大量数据，因此需要谨慎。</li></ul></li></ul></li><li><p><strong><code>SET NULL</code></strong></p><ul><li><strong>适用场景</strong>: 当删除或更新父表中的记录时，子表中的相关记录应保留，但将外键值设为 <code>NULL</code>。适用于可选关联的场景。</li><li><strong>使用建议</strong>:<ul><li>当子表记录应该继续存在，但与父表的关联可以解除时使用 <code>SET NULL</code>。例如，一个产品可能会被分类，但当分类被删除时，产品仍然存在，只是没有分类。</li><li>确保外键列允许 <code>NULL</code> 值。</li></ul></li></ul></li><li><p><strong><code>RESTRICT</code> 或 <code>NO ACTION</code></strong></p><ul><li><strong>适用场景</strong>: 当删除或更新父表中的记录时，强制确保没有相关子表记录，避免孤立数据。</li><li><strong>使用建议</strong>:<ul><li>当你希望严格控制数据删除或更新行为，确保不会因为删除或更新父表记录而破坏数据的完整性时使用 <code>RESTRICT</code> 或 <code>NO ACTION</code>。</li><li>适用于数据之间的关系非常重要，并且不能轻易删除或更新父表记录的场景，比如订单和客户关系。</li></ul></li></ul></li><li><p><strong>不使用外键约束</strong></p><ul><li><strong>适用场景</strong>: 某些场景下，可能选择不使用外键约束，依靠应用程序逻辑来保证数据完整性。</li><li><strong>使用建议</strong>:<ul><li>在高并发系统中，为了提高性能，有时会放弃外键约束，改为通过应用逻辑手动管理数据的完整性。</li><li>不建议在大多数情况下完全依赖应用逻辑，除非你非常清楚可能的风险和后果。</li></ul></li></ul></li></ol><p>总结建议</p><ul><li><strong>重要且需要自动清理关联数据</strong>：使用 <code>CASCADE</code>。</li><li><strong>需要保留子表记录但解除关联</strong>：使用 <code>SET NULL</code>。</li><li><strong>严格限制删除和更新行为</strong>：使用 <code>RESTRICT</code> 或 <code>NO ACTION</code>。</li><li><strong>高性能或特殊场景</strong>：谨慎地选择不使用外键约束。</li></ul><p>在大多数典型场景中，<code>RESTRICT</code> 是一个安全的默认选择，因为它强制了数据的完整性，防止意外的数据删除或更新。</p><p><strong>外键设置位置：</strong></p><p>参考链接：<a href="https://blog.csdn.net/qq_38028975/article/details/84166633">外键列到底要建在哪里？_外键应该添加在哪个表上?-CSDN博客</a></p><p>（1）1：1的关系。我们知道1对1的关系一般都有一个主、一个附，一般我们把外键创建在附表上。（比如订单和订单详情，订单表是主表、订单详情表是附表，外键建在订单详情表中。）</p><p>（2）1：n的关系。把外键建立在n的那张表上。如果将外键建在1的上面会造成数据冗余。不明白的小伙伴打开你的Excel画个图就明白了。</p><p>（3）n：m的情况，需要建立一个关系表（中间表），两个原表和其关系分别是1：n，1：m。用第三张表去维护原来两张表之间的关系。</p><h1 id="多对一外键查询"><a href="#多对一外键查询" class="headerlink" title="多对一外键查询"></a>多对一外键查询</h1><p>下面的 Service 层和 mapper 层的两种方式对比确实是正确的，但是实际操作下来，发现很多情况都是 Service 层已经能够直接通过简洁的方式去避免sql，并且性能是一样的，</p><p>主要在很复杂的sql查询中，才会出现性能的大差别，同时在相当大一部分场景里是局限性很高的，比如说<code>LEFT JOIN</code>，能够把两个表，连起来去进行查询，减少了时间，但是返回的数据也会随着多表的查询去进行重复，再去处理数据很麻烦，</p><p>所以后续还是尽量少去mapper层去动sql，一来麻烦局限大，二来可以在 Service 层用各种技巧去优化性能，比如减少返回数量，进行分页等等</p><p>在 Service 层通过 MyBatis-Plus 提供的方法进行两次查询，然后手动组装数据的方式，与在 <code>DiaryMapper</code> 中直接操作相比，各有优缺点。以下是两者的对比：</p><p><strong>Service 层手动组装的优缺点</strong></p><p>优点：</p><ol><li><p><strong>清晰的分层设计</strong>：</p><ul><li>业务逻辑清晰分层，<code>Mapper</code> 层专注于数据访问，而业务逻辑放在 <code>Service</code> 层。这样可以保持 <code>Mapper</code> 层的简洁和可维护性。</li></ul></li><li><p><strong>灵活性更高</strong>：</p><ul><li>在 <code>Service</code> 层手动组装数据，意味着你可以在业务逻辑中灵活处理数据和关系，而不需要将复杂的逻辑写在 <code>Mapper</code> 层。可以方便地进行一些业务规则的应用。</li></ul></li><li><p><strong>降低复杂性</strong>：</p><ul><li>复杂的 SQL 查询和数据组装逻辑被分解成更小的单元处理，可以更容易理解和调试。</li></ul></li></ol><p>缺点：</p><ol><li><p><strong>效率较低</strong>：</p><ul><li>需要进行两次数据库查询（一次查询 <code>Diary</code>，一次查询 <code>DiaryImages</code>），而在 <code>Mapper</code> 中通过 JOIN 查询可以一次性获取所有相关数据，这在数据量大时会影响性能。</li></ul></li><li><p><strong>多次查询可能导致一致性问题</strong>：</p><ul><li>如果在两次查询之间有并发数据修改，可能导致数据不一致。尽管这个问题不常见，但在高并发环境下可能需要注意。</li></ul></li><li><p><strong>增加网络通信成本</strong>：</p><ul><li>如果数据库和应用服务器之间的网络通信成本较高，两次查询会增加通信的开销。</li></ul></li></ol><p><strong>在 <code>DiaryMapper</code> 中直接操作的优缺点</strong></p><p>优点：</p><ol><li><p><strong>性能较高</strong>：</p><ul><li>可以通过 JOIN 查询一次性获取 <code>Diary</code> 和 <code>DiaryImages</code> 的数据，减少数据库查询次数，提升性能。</li></ul></li><li><p><strong>数据一致性更好</strong>：</p><ul><li>通过单一查询获取数据，可以避免多次查询带来的数据不一致问题，特别是在高并发环境下。</li></ul></li><li><p><strong>减少网络通信成本</strong>：</p><ul><li>一次查询获取全部数据，减少了数据库和应用服务器之间的通信次数。</li></ul></li></ol><p>缺点：</p><ol><li><p><strong>增加了 Mapper 层的复杂性</strong>：</p><ul><li>如果在 <code>Mapper</code> 层编写复杂的 SQL 查询和结果映射逻辑，可能会使 <code>Mapper</code> 层的代码变得难以维护。</li></ul></li><li><p><strong>降低代码可读性</strong>：</p><ul><li>复杂的查询和结果映射逻辑可能会导致代码难以理解，特别是当查询逻辑涉及多个关联表时。</li></ul></li><li><p><strong>减少了灵活性</strong>：</p><ul><li>将复杂逻辑放在 <code>Mapper</code> 层，可能会降低业务逻辑处理的灵活性。在需要修改业务逻辑时，可能需要调整 <code>Mapper</code> 层代码。</li></ul></li></ol><p>总结</p><p>选择哪种方法取决于你的应用场景：</p><ul><li><strong>如果性能是关键</strong>：在 <code>DiaryMapper</code> 中编写 JOIN 查询可能更好。</li><li><strong>如果你更关注代码的可维护性和清晰的分层设计</strong>：在 <code>Service</code> 层手动组装数据可能更适合。</li></ul><p>对于大多数情况，在 <code>Service</code> 层手动组装数据的方式更符合现代应用的分层设计原则，但在性能要求非常高或数据一致性至关重要的场景下，直接在 <code>Mapper</code> 中操作可能是更好的选择。</p><p>为了具体比较在 Service 层进行多次查询与在 <code>Mapper</code> 中进行联合查询的性能差异，我们可以通过一个假设的场景来进行比较。以下是一些示例数字和假设：</p><p>假设场景</p><ul><li><strong>日记总数</strong>：100</li><li><strong>每篇日记的图片总数</strong>：最多 10 张</li><li><strong>单次查询响应时间</strong>：10 毫秒（对于数据库简单查询）</li><li><strong>复杂查询响应时间</strong>：50 毫秒（对于联合查询）</li></ul><ol><li><strong>在 Service 层进行多次查询</strong></li></ol><p><strong>步骤</strong>：</p><ol><li>查询所有日记</li><li>对于每篇日记，再查询其关联的图片</li></ol><p><strong>计算</strong>：</p><ul><li>查询所有日记的响应时间：1 次查询 × 10 毫秒 &#x3D; 10 毫秒</li><li>对于每篇日记查询其图片：100 次查询 × 10 毫秒 &#x3D; 1000 毫秒</li></ul><p><strong>总时间</strong>：</p><ul><li>10 毫秒（获取日记） + 1000 毫秒（获取图片） &#x3D; 1010 毫秒</li></ul><ol start="2"><li><strong>在 <code>Mapper</code> 中进行联合查询</strong></li></ol><p><strong>步骤</strong>：</p><ol><li>使用 <code>JOIN</code> 查询一次性获取所有日记和其关联的图片</li></ol><p><strong>计算</strong>：</p><ul><li>联合查询响应时间：1 次查询 × 50 毫秒 &#x3D; 50 毫秒</li></ul><p>性能比较</p><p><strong>Service 层多次查询</strong>：</p><ul><li>总时间 &#x3D; 1010 毫秒</li></ul><p><strong>Mapper 层联合查询</strong>：</p><ul><li>总时间 &#x3D; 50 毫秒</li></ul><p>结论</p><p>从以上示例中可以看出，在这种假设情况下，<strong>Service 层进行多次查询</strong>的总响应时间是 <strong>1010 毫秒</strong>，而在 <code>Mapper</code> 中进行联合查询的总响应时间是 <strong>50 毫秒</strong>。这表明，联合查询可以显著提高性能，尤其是在数据量较大时。</p><p>影响因素</p><ol><li><strong>数据量</strong>：数据量越大，多次查询的性能差距越明显。</li><li><strong>数据库性能</strong>：数据库的处理能力和优化会影响查询响应时间。</li><li><strong>网络延迟</strong>：如果数据库和应用服务器之间的网络延迟较高，多次查询的开销会更大。</li></ol><p>实际测试</p><p>为了获得准确的性能数据，建议在你的具体环境中进行实际的性能测试。你可以使用数据库的性能分析工具来测量查询时间，并根据实际数据量和查询复杂性来评估性能差异。</p><h1 id="用户功能"><a href="#用户功能" class="headerlink" title="用户功能"></a>用户功能</h1><h2 id="密码加盐"><a href="#密码加盐" class="headerlink" title="密码加盐"></a>密码加盐</h2><p>首先是为什么要密码加盐，是为了防止数据库泄露或者前端返回属性被劫持，下面的1、2、3种方式都可以直接或者间接被反向计算出来（例如彩虹表），而第4种方式，也就是目前采取的较为安全的方式，将密码与随机salt相加后，又进行多次hash计算，即使获取到salt以及password，反向计算也十分困难</p><p><strong>用户密码加密方式</strong></p><p>用户密码保存到数据库时，常见的加密方式有哪些?以下几种方式是常见的密码保存方式：</p><p><strong>1. 明文保存</strong></p><p>比如用户设置的密码是“123456”，直接将“123456”保存在数据库中，这种是最简单的保存方式，也是最不安全的方式。但实际上不少互联网公司，都可能采取的是这种方式。</p><p><strong>2. 对称加密算法来保存</strong></p><p>比如3DES、AES等算法，使用这种方式加密是可以通过解密来还原出原始密码的，当然前提条件是需要获取到密钥。不过既然大量的用户信息已经泄露了，密钥很可能也会泄露，当然可以将一般数据和密钥分开存储、分开管理，但要完全保护好密钥也是一件非常复杂的事情，所以这种方式并不是很好的方式。</p><p><strong>3. MD5、SHA1等单向HASH算法</strong></p><p>使用这些算法后，无法通过计算还原出原始密码，而且实现比较简单，因此很多互联网公司都采用这种方式保存用户密码，曾经这种方式也是比较安全的方式，但随着彩虹表技术的兴起，可以建立彩虹表进行查表破解，目前这种方式已经很不安全了。</p><p>其实之前公司也是采用的这种MD5加密方式。</p><p><strong>4. PBKDF2算法</strong></p><p>该算法原理大致相当于在HASH算法基础上增加随机盐，并进行多次HASH运算，随机盐使得彩虹表的建表难度大幅增加，而多次HASH也使得建表和破解的难度都大幅增加。</p><p>在使用PBKDF2算法时，HASH一般会选用sha1或者sha256，随机盐的长度一般不能少于8字节，HASH次数至少也要1000次，这样安全性才足够高。一次密码验证过程进行1000次HASH运算，对服务器来说可能只需要1ms，但对于破解者来说计算成本增加了1000倍，而至少8字节随机盐，更是把建表难度提升了N个数量级，使得大批量的破解密码几乎不可行，该算法也是美国国家标准与技术研究院推荐使用的算法。</p><p><strong>Utils：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Utils</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 使用SHA-512算法加密密码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encryptHv</span><span class="params">(String password, String salt)</span> <span class="keyword">throws</span> NoSuchAlgorithmException &#123;</span><br><span class="line">        <span class="type">MessageDigest</span> <span class="variable">hash</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;SHA-512&quot;</span>);</span><br><span class="line">        hash.update(salt.getBytes());</span><br><span class="line">        hash.update(password.getBytes());</span><br><span class="line">        <span class="type">byte</span>[] value = hash.digest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重复512次，使散列更安全</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">512</span>; i++) &#123;</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">hashInner</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;SHA-512&quot;</span>);</span><br><span class="line">            hashInner.update(value);</span><br><span class="line">            value = hashInner.digest();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Base64.getEncoder().encodeToString(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生成盐</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateSalt</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">characters</span> <span class="operator">=</span> <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789&quot;</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">objectId</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">SecureRandom</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecureRandom</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">48</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">randomIndex</span> <span class="operator">=</span> random.nextInt(characters.length());</span><br><span class="line">            objectId.append(characters.charAt(randomIndex));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> objectId.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UsersController:</strong></p><ol><li>完成注册功能的实现<ol><li>获取到前端的password以及name</li><li>生成盐算法实现</li><li>加密密码算法实现，接受参数包括密码以及盐</li><li>将获取到的password以及salt，通过加密密码算法后的值，存入数据库的password中</li></ol></li><li>完成登陆功能的实现<ol><li>获取token</li><li>通过加密密码算法获取到password，然后与数据库中的进行比对，存在则createLoginSession更新token，以及lastLogin</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsersController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IUsersService usersService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册功能</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Users&gt; <span class="title function_">register</span><span class="params">(<span class="meta">@RequestParam</span> String username, <span class="meta">@RequestParam</span> String password)</span> <span class="keyword">throws</span> NoSuchAlgorithmException &#123;</span><br><span class="line">        <span class="comment">// 如果存在该用户，返回错误信息</span></span><br><span class="line">        <span class="keyword">if</span> (usersService.getByUsername(username) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(USER_ALREADY_EXISTS);</span><br><span class="line"><span class="comment">//            return R.error(&quot;用户已存在&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Users</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">        <span class="comment">// 生成盐</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> generateSalt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成哈希值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">hv</span> <span class="operator">=</span> encryptHv(password, salt);</span><br><span class="line"></span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setPasswordHash(hv);</span><br><span class="line">        user.setSalt(salt);</span><br><span class="line">        usersService.save(user);</span><br><span class="line">        <span class="comment">// 返回完整用户信息</span></span><br><span class="line">        <span class="keyword">return</span> R.ok(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登录功能</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Users&gt; <span class="title function_">login</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> NoSuchAlgorithmException&#123;</span><br><span class="line">        <span class="type">Users</span> <span class="variable">user</span> <span class="operator">=</span> usersService.getByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> user.getSalt();</span><br><span class="line">        <span class="type">String</span> <span class="variable">hv</span> <span class="operator">=</span> user.getPasswordHash();</span><br><span class="line">        <span class="keyword">if</span> (hv.equals(encryptHv(password, salt))) &#123;</span><br><span class="line">            user.setToken(StpUtil.createLoginSession(user.getUserId()));</span><br><span class="line">            user.setLastLogin(getCurrentTime());</span><br><span class="line">            usersService.updateById(user);</span><br><span class="line">            <span class="keyword">return</span> R.ok(user);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 通过CustomException丢出报错</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(PASSWORD_ERROR);</span><br><span class="line"><span class="comment">//            return R.error(202,&quot;密码错误&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="密码轮换"><a href="#密码轮换" class="headerlink" title="密码轮换"></a>密码轮换</h2><p>从超的项目中学到的，通过KeyRotation记录是否需要换密钥以及去先进行旧密钥解密的尝试，就直接无痛密码轮换了</p><p>问题是需要靠用户操作的时候去轮换，要是长时间没有登录的用户，密钥又泄了，那就会导致这一部分的用户的密码被反向推理出来</p><p>下面为kotlin实现的方式</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get user by session token</span></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getUserBySessionToken</span><span class="params">(sessionToken: <span class="type">String</span>)</span></span>: User = withContext(Dispatchers.IO) &#123;</span><br><span class="line">    <span class="keyword">var</span> keyRotation = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Try KEY_A and KEY_B to decrypt session token</span></span><br><span class="line">    <span class="keyword">val</span> decryptData: String = <span class="keyword">try</span> &#123;</span><br><span class="line">        decrypt(sessionToken, string2Key(KEY_A))</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: BadPaddingException) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> result = decrypt(sessionToken, string2Key(KEY_B))</span><br><span class="line">            keyRotation = <span class="literal">true</span></span><br><span class="line">            result</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: BadPaddingException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> UserNotFoundException()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get user from decrypted token</span></span><br><span class="line">    <span class="keyword">val</span> id = decryptData.split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">val</span> doc = collection.find(Filters.eq(<span class="string">&quot;_id&quot;</span>, ObjectId(id))).first()</span><br><span class="line">        ?: <span class="keyword">throw</span> UserNotFoundException()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> user = doc.let(User::fromDocument)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check session token is available</span></span><br><span class="line">    <span class="keyword">if</span> (user.sessionToken != sessionToken) &#123;</span><br><span class="line">        <span class="keyword">throw</span> UserNotFoundException()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if key rotation is needed</span></span><br><span class="line">    <span class="keyword">if</span> (keyRotation) &#123;</span><br><span class="line">        <span class="keyword">val</span> encryptData = <span class="string">&quot;<span class="subst">$&#123;id&#125;</span>,<span class="subst">$&#123;System.currentTimeMillis()&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">val</span> newSessionToken = encrypt(encryptData, string2Key(KEY_A))</span><br><span class="line"></span><br><span class="line">        collection.updateOne(</span><br><span class="line">            Filters.eq(<span class="string">&quot;_id&quot;</span>, ObjectId(id)),</span><br><span class="line">            Updates.<span class="keyword">set</span>(<span class="string">&quot;sessionToken&quot;</span>, newSessionToken)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        user.sessionToken = newSessionToken</span><br><span class="line">    &#125;</span><br><span class="line">    user</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="匹配功能"><a href="#匹配功能" class="headerlink" title="匹配功能"></a>匹配功能</h1><p>feat(MatchesController)：完成正常匹配的逻辑</p><ul><li>先是根据token获取到当前user的信息，主要是城市以及岁数</li><li>根据城市以及岁数相差不大作为依据查询出潜在匹配用户列表</li><li>最后根据兴趣爱好标签一致进行匹配过滤，输出最终匹配列表</li></ul><p><strong>MatchesServiceImpl:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatchesServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;MatchesMapper, Matches&gt; <span class="keyword">implements</span> <span class="title class_">IMatchesService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UsersMapper usersMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MatchesMapper matchesMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserInterestsMapper userInterestsMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户的兴趣爱好标签、地理位置和年龄进行匹配</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 当前用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 匹配到的用户列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Users&gt; <span class="title function_">matchUsers</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取当前用户的兴趣标签</span></span><br><span class="line">        List&lt;String&gt; userTags = getUserTags(userId);</span><br><span class="line">        System.out.println(<span class="string">&quot;userTags: &quot;</span> + userTags);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前用户的基本信息</span></span><br><span class="line">        <span class="type">Users</span> <span class="variable">currentUser</span> <span class="operator">=</span> usersMapper.selectById(userId);</span><br><span class="line">        System.out.println(<span class="string">&quot;currentUser: &quot;</span> + currentUser);</span><br><span class="line">        <span class="type">String</span> <span class="variable">currentUserLocation</span> <span class="operator">=</span> currentUser.getCity();</span><br><span class="line">        System.out.println(<span class="string">&quot;currentUserLocation: &quot;</span> + currentUserLocation);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">currentUserAge</span> <span class="operator">=</span> currentUser.getAge();</span><br><span class="line">        System.out.println(<span class="string">&quot;currentUserAge: &quot;</span> + currentUserAge);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询潜在匹配用户</span></span><br><span class="line">        List&lt;Users&gt; potentialMatches = usersMapper.selectList(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;Users&gt;()</span><br><span class="line">                .ne(<span class="string">&quot;user_id&quot;</span>, userId) <span class="comment">// 排除当前用户</span></span><br><span class="line">                .eq(<span class="string">&quot;city&quot;</span>, currentUserLocation) <span class="comment">// 相同城市</span></span><br><span class="line">                .between(<span class="string">&quot;age&quot;</span>, currentUserAge - <span class="number">3</span>, currentUserAge + <span class="number">3</span>)); <span class="comment">// 年龄范围内</span></span><br><span class="line">        System.out.println(<span class="string">&quot;potentialMatches: &quot;</span> + potentialMatches);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据兴趣爱好标签进行匹配过滤</span></span><br><span class="line">        <span class="keyword">return</span> potentialMatches.stream()</span><br><span class="line">                .filter(user -&gt; hasCommonTags(userTags, getUserTags(user.getUserId())))</span><br><span class="line">                .limit(<span class="number">2</span>) <span class="comment">// 限制同时匹配的用户数量</span></span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户的兴趣标签</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 兴趣标签列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; <span class="title function_">getUserTags</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userInterestsMapper.selectList(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;UserInterests&gt;()</span><br><span class="line">                        .eq(<span class="string">&quot;user_id&quot;</span>, userId))</span><br><span class="line">                .stream()</span><br><span class="line">                .map(UserInterests::getTag)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查两个用户是否有共同的兴趣标签</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tags1 第一个用户的标签列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tags2 第二个用户的标签列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否有共同标签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">hasCommonTags</span><span class="params">(List&lt;String&gt; tags1, List&lt;String&gt; tags2)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String tag : tags1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tags2.contains(tag)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="聊天室功能"><a href="#聊天室功能" class="headerlink" title="聊天室功能"></a>聊天室功能</h1><h2 id="Netty-使用"><a href="#Netty-使用" class="headerlink" title="Netty 使用"></a>Netty 使用</h2><h2 id="MinIO-作为OSS"><a href="#MinIO-作为OSS" class="headerlink" title="MinIO 作为OSS"></a>MinIO 作为OSS</h2><h2 id="RocketMQ-作为数据缓冲"><a href="#RocketMQ-作为数据缓冲" class="headerlink" title="RocketMQ 作为数据缓冲"></a>RocketMQ 作为数据缓冲</h2><h1 id="创建时间以及更新时间的问题"><a href="#创建时间以及更新时间的问题" class="headerlink" title="创建时间以及更新时间的问题"></a>创建时间以及更新时间的问题</h1><p>直接在实体类中把创建时间以及更新时间赋值为getCurrentTime即可</p><p>因为只有在第一次注册的时候会创建全新的user类，其他情况都是从数据库中获取的，需要更新更新时间时再进行getCurrentTime即可</p><p>这样的解决方案要简单高效，之前用的是MP的全局属性注入，不仅麻烦而且会出现无法属性赋值的相关问题</p><p>User：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@TableName(&quot;users&quot;)</span></span><br><span class="line"><span class="meta">@ApiModel(value=&quot;Users对象&quot;, description=&quot;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Users</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(value = &quot;user_id&quot;, type = IdType.ASSIGN_UUID)</span></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">createdAt</span> <span class="operator">=</span> getCurrentTime();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">updatedAt</span> <span class="operator">=</span> getCurrentTime();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="服务器git-clone速度太慢"><a href="#服务器git-clone速度太慢" class="headerlink" title="服务器git clone速度太慢"></a>服务器git clone速度太慢</h1><p>方法一：</p><p>使用本地电脑去克隆好后再传到服务器上面去，缺点为遇到大量小文件可能会比较慢</p><p>方法二：</p><p>参考文章：<a href="https://blog.csdn.net/qq_41204553/article/details/127177348">git clone加速（实测推荐）_git clone 加速-CSDN博客</a></p><p>在git仓库前添加gitclone.com的前缀，比如下面的命令</p><p>缺点为我还没试过这个方法行不行😗</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Elegycloud/clash-for-linux-backup.git</span><br><span class="line">git <span class="built_in">clone</span> https://gitclone.com/github.com/Elegycloud/clash-for-linux-backup.git</span><br></pre></td></tr></table></figure><h1 id="Linux服务器系统选择"><a href="#Linux服务器系统选择" class="headerlink" title="Linux服务器系统选择"></a>Linux服务器系统选择</h1><p>以下是按不同Linux服务器系统版本分类的介绍：</p><ol><li><strong>Ubuntu Server</strong></li></ol><p><strong>Ubuntu Server</strong> 是一个流行且易于使用的Linux服务器操作系统，适合多种场景，包括Web服务器、开发环境和云计算。它有两个主要版本：</p><ul><li><strong>LTS (Long Term Support) 版本</strong>: 每两年发布一次，提供5年的长期支持，适合需要长期稳定的生产环境。</li><li><strong>非LTS版本</strong>: 每六个月发布一次，适合开发和测试环境，能够快速获取新功能。</li></ul><p><strong>特点</strong>:</p><ul><li>丰富的社区支持和文档。</li><li>使用 <code>APT</code> 作为包管理器，易于软件更新和维护。</li><li>广泛的云平台支持，包括AWS、Azure和Google Cloud。</li></ul><ol start="2"><li><strong>CentOS</strong></li></ol><p><strong>CentOS</strong> 是 <strong>Red Hat Enterprise Linux (RHEL)</strong> 的免费社区版，广泛用于企业级环境。CentOS 强调稳定性和兼容性，特别适合企业的生产服务器。</p><p><strong>版本</strong>:</p><ul><li><strong>CentOS 7</strong>: 长期支持版本，稳定性强，支持到2024年。</li><li><strong>CentOS 8</strong>: 引入了 <code>DNF</code> 作为新包管理器，但已经被 <strong>CentOS Stream</strong> 替代。</li></ul><p><strong>特点</strong>:</p><ul><li>企业级稳定性，适合长时间运行的生产环境。</li><li>社区提供了许多与 RHEL 兼容的资源和文档。</li><li>采用 <code>YUM</code> 或 <code>DNF</code> 进行软件包管理。</li></ul><ol start="3"><li><strong>Red Hat Enterprise Linux (RHEL)</strong></li></ol><p><strong>RHEL</strong> 是由Red Hat公司提供的企业级Linux发行版，特别适合需要高可靠性和技术支持的大型企业。RHEL 提供付费订阅，涵盖了技术支持和安全更新。</p><p><strong>版本</strong>:</p><ul><li><strong>RHEL 7</strong>: 稳定的企业级版本，提供长期支持，适合稳定的生产环境。</li><li><strong>RHEL 8</strong>: 更现代化的企业操作系统，支持云计算和容器化。</li></ul><p><strong>特点</strong>:</p><ul><li>企业级支持和安全性，包含专业的技术支持服务。</li><li>强大的生态系统和硬件兼容性。</li><li>使用 <code>YUM</code> 或 <code>DNF</code> 管理软件包。</li></ul><ol start="4"><li><strong>Debian</strong></li></ol><p><strong>Debian</strong> 是一个高度稳定且轻量的Linux发行版，适合需要可靠性的服务器和开发环境。Debian 以其稳定性和灵活性而著称，常用于基础设施和Web服务器。</p><p><strong>版本</strong>:</p><ul><li><strong>Stable</strong>: 这是Debian的主要版本，专注于稳定性，适合生产环境。</li><li><strong>Testing</strong>: 包含即将在下一版本发布的软件包，适合需要较新软件但仍需要稳定性的用户。</li><li><strong>Unstable (Sid)</strong>: 包含最新的软件包和功能，适合开发和测试环境。</li></ul><p><strong>特点</strong>:</p><ul><li>高度稳定和安全，适合长时间运行的服务。</li><li>丰富的软件包和社区支持。</li><li>使用 <code>APT</code> 进行包管理，软件更新简单。</li></ul><ol start="5"><li><strong>Arch Linux</strong></li></ol><p><strong>Arch Linux</strong> 是一个滚动发行的Linux发行版，特别适合需要最新软件包和高度定制的用户。尽管它主要被用于个人桌面，但也有一些高级用户在服务器上使用。</p><p><strong>特点</strong>:</p><ul><li>滚动更新机制，始终保持最新的软件和功能。</li><li>高度可定制，适合有经验的用户。</li><li>轻量级，没有多余的预装软件。</li></ul><p>通过上述分类和介绍，您可以根据需求选择最适合您的Linux服务器系统版本。</p><h1 id="Linux服务器利用Clash访问外网"><a href="#Linux服务器利用Clash访问外网" class="headerlink" title="Linux服务器利用Clash访问外网"></a>Linux服务器利用Clash访问外网</h1><p>源码：<a href="https://github.com/Elegycloud/clash-for-linux-backup">Elegycloud&#x2F;clash-for-linux-backup: 基于Clash Core 制作的Clash For Linux备份仓库 A Clash For Linux Backup Warehouse Based on Clash Core (github.com)</a></p><h2 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h2><p>下载项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Elegycloud/clash-for-linux-backup.git</span><br></pre></td></tr></table></figure><p>进入到项目目录，编辑<code>.env</code>文件，修改变量<code>CLASH_URL</code>的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> clash-for-linux-backup</span><br><span class="line">vim .<span class="built_in">env</span></span><br><span class="line">https://9oxxk.no-mad-world.club/link/8xxxxx?clash=3&amp;extend=1</span><br><span class="line">https://dkcru.no-mad-world.club/link/8xxxxx?clash=3&amp;extend=1</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> <code>.env</code> 文件中的变量 <code>CLASH_SECRET</code> 为自定义 Clash Secret，值为空时，脚本将自动生成随机字符串，可以自己输入对应Secret，避免每次重新生成。</p></blockquote><h2 id="启动程序"><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h2><p>直接运行脚本文件<code>start.sh</code></p><ul><li>进入项目目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> clash-for-linux-backup</span><br><span class="line"><span class="built_in">chmod</span> 777 start.sh</span><br></pre></td></tr></table></figure><ul><li>运行启动脚本</li></ul><p>注意<code>export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890</code>就相当于这个<code>proxy_on</code>，不过根据超来说，最好不要开这个全局的代理，对应的需要外网的软件，就进行对应的配置，比如docker就需要自己进行配置，具体会在下面的笔记中提到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sudo ./start.sh</span><br><span class="line"></span><br><span class="line">正在检测订阅地址...</span><br><span class="line">Clash订阅地址可访问！                                      [  OK  ]</span><br><span class="line"></span><br><span class="line">正在下载Clash配置文件...</span><br><span class="line">配置文件config.yaml下载成功！                              [  OK  ]</span><br><span class="line"></span><br><span class="line">正在启动Clash服务...</span><br><span class="line">服务启动成功！                                             [  OK  ]</span><br><span class="line"></span><br><span class="line">Clash Dashboard 访问地址：http://&lt;ip&gt;:9090/ui</span><br><span class="line">Secret：xxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">请执行以下命令加载环境变量: <span class="built_in">source</span> /etc/profile.d/clash.sh</span><br><span class="line"></span><br><span class="line">请执行以下命令开启系统代理: proxy_on</span><br><span class="line"></span><br><span class="line">若要临时关闭系统代理，请执行: proxy_off</span><br></pre></td></tr></table></figure><ul><li>验证是否外网代理是否成功</li></ul><p>注意下面的命令中必须加上<code>-x http://127.0.0.1:7890</code>，否则正常来说<code>curl</code>包括<code>ping</code>都是不走系统代理的，下面的命令输完后，就可以去UI面板看看，流量是否走代理了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -x http://127.0.0.1:7890 https://www.google.com.hk</span><br></pre></td></tr></table></figure><h2 id="UI面板"><a href="#UI面板" class="headerlink" title="UI面板"></a>UI面板</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>地址：<a href="http://101.43.0.0:9090/ui/">101.43.00.000:9090 - yacd</a></p><p><code>API Base URL</code>填入<code>http://101.43.00.000:9090</code>，密码为启动时控制台打印的<code>Secret</code>，注意这里的<code>Secret</code>需要填入<code>.env</code>文件中的<code>CLASH_SECRET</code>，这样就不用每次启动都重新更换密码了</p><h3 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h3><h4 id="输入API-Base-URL时，出现报错Unauthorized"><a href="#输入API-Base-URL时，出现报错Unauthorized" class="headerlink" title="输入API Base URL时，出现报错Unauthorized"></a>输入<code>API Base URL</code>时，出现报错<code>Unauthorized</code></h4><p>参考链接：<a href="https://github.com/Elegycloud/clash-for-linux-backup/issues/46">Unauthorized for login · Issue #46 · Elegycloud&#x2F;clash-for-linux-backup (github.com)</a></p><p>重新启动就行，把之前的记录和端口占用都先kill掉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./restart.sh</span><br></pre></td></tr></table></figure><h4 id="再次启动订阅事报错Failed-connect-to-127-0-0-1-7890"><a href="#再次启动订阅事报错Failed-connect-to-127-0-0-1-7890" class="headerlink" title="再次启动订阅事报错Failed connect to 127.0.0.1:7890"></a>再次启动订阅事报错<code>Failed connect to 127.0.0.1:7890</code></h4><p>参考链接：<a href="https://blog.csdn.net/weixin_45275052/article/details/110299222">curl: (7) Failed connect to 127.0.0.1:7890； Connection refused_curl: (7) failed connect to 127.0.0.1:7890; connec-CSDN博客</a></p><p><strong>完整报错</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl: (7) Failed connect to 127.0.0.1:7890； Connection refused</span><br></pre></td></tr></table></figure><p><strong>原因</strong></p><p>端口7890就是clash搞的鬼，因为代理了全局的网络，clash再去通过网络拉取配置文件的时候，走了代理，导致无法连接下载配置文件</p><p><strong>解决方法</strong></p><p>执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> -p</span><br></pre></td></tr></table></figure><p>最下面有一行(如果不是这样,另外自己找办法,不要乱试!不要乱试!不要乱试!)</p><p><code>declare -x all_proxy=&quot;socks5://127.0.0.1:7890</code></p><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span> all_proxy</span><br></pre></td></tr></table></figure><p>再执行第一条命令查看 那行代理就没了</p><h4 id="一打开clash，就连接服务器卡顿"><a href="#一打开clash，就连接服务器卡顿" class="headerlink" title="一打开clash，就连接服务器卡顿"></a>一打开clash，就连接服务器卡顿</h4><p>原因是被盗刷流量了</p><p>存在脚本一直在腾讯云的网段范围里面，去暴力尝试3306端口的连接，我因为之前对于腾讯云面板的防火墙了解不清楚，以为是正对内网的防火墙，如果不开的话，内部就无法连接3306端口</p><p>实际上腾讯云面板的防火墙是针对外网对于服务器的访问的，内部则其实是通过<code>iptables</code>或者<code>firewalld</code>来进行访问的静止，实际上会先经过腾讯云面板的网关防火墙，然后再进入内部的防火墙</p><h1 id="Linux服务器下载Docker以及Docker-Compose"><a href="#Linux服务器下载Docker以及Docker-Compose" class="headerlink" title="Linux服务器下载Docker以及Docker-Compose"></a>Linux服务器下载Docker以及Docker-Compose</h1><h2 id="Docker下载"><a href="#Docker下载" class="headerlink" title="Docker下载"></a>Docker下载</h2><p>镜像站：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/">docker-ce | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><p>通过上面的镜像站找到对应的版本，然后复制命令，进行Docker CE（Community Edition） Docker 社区版的下载</p><p>Debian&#x2F;Ubuntu&#x2F;Raspbian 用户</p><p>如果你过去安装过 docker，先删掉：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> pkg <span class="keyword">in</span> docker.io docker-doc docker-compose podman-docker containerd runc; <span class="keyword">do</span> apt-get remove <span class="variable">$pkg</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>首先安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install ca-certificates curl gnupg</span><br></pre></td></tr></table></figure><p>信任 Docker 的 GPG 公钥并添加仓库：</p><p>发行版Debian</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class="line">sudo <span class="built_in">chmod</span> a+r /etc/apt/keyrings/docker.gpg</span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.gpg] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian \</span></span><br><span class="line"><span class="string">  &quot;</span>$(. /etc/os-release &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$VERSION_CODENAME</span>&quot;</span>)<span class="string">&quot; stable&quot;</span> | \</span><br><span class="line">  <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure><p>最后安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><h2 id="Docker-Compose下载"><a href="#Docker-Compose下载" class="headerlink" title="Docker-Compose下载"></a>Docker-Compose下载</h2><p>在安装完 Docker CE 后，你可以通过 <code>apt</code> 包管理器安装 <code>docker-compose</code>。以下是步骤：</p><ol><li><p><strong>更新APT包索引</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure></li><li><p>**安装<code>docker-compose</code>**：<br>你可以直接通过 <code>apt</code> 安装 <code>docker-compose</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install docker-compose</span><br></pre></td></tr></table></figure></li><li><p><strong>验证安装</strong>：<br>安装完成后，你可以通过以下命令验证是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><p>如果显示版本信息，则表示安装成功。</p></li></ol><h2 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h2><p>参考链接：<a href="https://www.cnblogs.com/Chary/p/18096678">如何优雅的给 Docker 配置网络代理 - CharyGao - 博客园 (cnblogs.com)</a></p><p>总的来说就是去docker的配置的文件中去加入配置代理的代码，比较麻烦的在于每个系统，它代理文件的位置啊，名字啊都有些许不同，需要自己找到常用的docker文件位置，然后自己排查，找到自己这个系统的docker配置文件位于哪里</p><p>下面以Debian系统为例，演示配置代理过程</p><p>找到<code>/etc/systemd/system/docker.service.d/proxy.conf</code>文件，如果没有的话运行下面的命令进行创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/systemd/system/docker.service.d</span><br><span class="line">sudo <span class="built_in">touch</span> /etc/systemd/system/docker.service.d/proxy.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;HTTP_PROXY=http://127.0.0.1:7890/&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;HTTPS_PROXY=http://127.0.0.1:7890/&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;NO_PROXY=localhost,127.0.0.1&quot;</span></span><br></pre></td></tr></table></figure><h2 id="BUG-1"><a href="#BUG-1" class="headerlink" title="BUG"></a>BUG</h2><h3 id="下载docke时报错Problem-cannot-install-the-best-candidate-for-the-job"><a href="#下载docke时报错Problem-cannot-install-the-best-candidate-for-the-job" class="headerlink" title="下载docke时报错Problem: cannot install the best candidate for the job"></a>下载docke时报错<code>Problem: cannot install the best candidate for the job</code></h3><p><strong>原因</strong>：</p><p>由于服务器使用的是腾讯云自家的系统，所以存在版本不适配的问题，下载工具<code>yum</code>找不到对应的</p><p><strong>解决方法：</strong></p><p>目前我的解决方法是直接换系统</p><h3 id="docker拉镜像的时候没有走代理"><a href="#docker拉镜像的时候没有走代理" class="headerlink" title="docker拉镜像的时候没有走代理"></a>docker拉镜像的时候没有走代理</h3><p>docker需要单独配置代理，单单使用<code>export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890</code>是无法指定docker走代理的，具体配置代理流程见上面的笔记</p><h3 id="宝塔下载问题"><a href="#宝塔下载问题" class="headerlink" title="宝塔下载问题"></a>宝塔下载问题</h3><p>不要通过宝塔面板去下载docker，因为宝塔下载的docker，最后是不知道配置文件在什么位置的</p><h1 id="JAVA的Docker部署方法（⚠️）"><a href="#JAVA的Docker部署方法（⚠️）" class="headerlink" title="JAVA的Docker部署方法（⚠️）"></a>JAVA的Docker部署方法（⚠️）</h1><p>stargazer- docker-compose-app.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">stargazer-backend:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tecnb/stargazer-backend</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">stargazer-backend</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">app-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">app-network:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>stargazer-docker-compose-env.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql-db</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">your_password</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">your_db_name</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">app-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">app-network:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><p>经过超的开导，决定还是使用单个compose文件的方式并且规定命名为<code>docker-compose.yml</code>，因为只有固定的几个名字，比如<code>docker-compose.yml, docker-compose.yaml, compose.yml, compose.yaml</code>，可以直接<code>docker compose up</code>，而不用通过<code>-f</code>加上对应的配置的文件名，这样更方便快速</p><p>docker-compose.yml</p><p>之前还有一个BUG就是，只有项目内使用外网公开的路径<code>jdbc:mysql://101.43.00.000:9090</code>才可以访问到数据库，而使用本地的<code>jdbc:mysql://localhost:3306</code>却访问不到，</p><p>后面使用healthcheck+depends_on内加上condition后才可以解决这个问题，现在觉得的可能是mysql没有完全加载好，就去访问mysql所以报错，</p><p>但是这样的话为什么外网又能访问到呢，所以现在我怀疑实际上是第一次进行加载的时候用的<code>jdbc:mysql://localhost:3306</code>，这个时候sql还在初始化，所以无论是用外网还是localhost这个时候都是访问不到的，</p><p>那么当第一次初始化完成后，再去启动就都可以进行访问了</p><p>不过上面的逻辑是有问题的，因为超去启动的时候，启动多次容器还是localhost不行，而外网是可以的</p><p>感觉也没有完全弄懂这个问题，后面再去想想看</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">stargazer-mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">xxxxxx</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">stargazer</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/mysql:/var/lib/mysql</span>       <span class="comment"># 本地数据持久化目录</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./sql:/docker-entrypoint-initdb.d</span> <span class="comment"># SQL 文件目录</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">app-network</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;mysqladmin&quot;</span>, <span class="string">&quot;ping&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;-u&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;-pxxxxx&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">30s</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">stargazer-backend:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tecnb/stargazer-backend:remote</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">stargazer-backend</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="attr">mysql:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">service_healthy</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">app-network</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">app-network:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><h1 id="服务器防火墙的使用"><a href="#服务器防火墙的使用" class="headerlink" title="服务器防火墙的使用"></a>服务器防火墙的使用</h1><p>有挺多种方式的，这里重点介绍两种，<code>firewalld</code>以及<code>iptables</code></p><p><strong>firewalld</strong> <strong>是基于</strong> <strong>iptables</strong> <strong>的抽象层</strong>：当你使用 firewalld 时，它实际上在后台生成并管理 iptables 规则。firewalld 提供了一个更高级的接口来管理这些规则，旨在简化防火墙配置。</p><h2 id="firewalld使用"><a href="#firewalld使用" class="headerlink" title="firewalld使用"></a>firewalld使用</h2><p>(1)查看防火墙状态</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --state </span><br></pre></td></tr></table></figure><p>如果返回的是 “not running”，那么需要先开启防火墙；</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start firewalld.service</span><br></pre></td></tr></table></figure><p>(2)开启指定端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-port=9000/tcp --permanent</span><br></pre></td></tr></table></figure><p>显示 success 表示成功</p><p> <strong>参数解释：</strong></p><p>–zone&#x3D;public 表示作用域为公共的</p><p>–add-port&#x3D;443&#x2F;tcp 添加 tcp 协议的端口端口号为 443</p><p>–permanent 永久生效，如果没有此参数，则只能维持当前 服 务生命周期内，重新启动后失效；</p><p>(3)重启防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart firewalld.service</span><br></pre></td></tr></table></figure><p>系统没有任何提示表示成功！ </p><p>(4)重新加载防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>显示 success 表示成功</p><p>这时候就可以访问到服务器的9000端口了</p><h2 id="iptables使用"><a href="#iptables使用" class="headerlink" title="iptables使用"></a>iptables使用</h2><p>使用 <code>iptables</code> 增加规则可以通过命令行进行，通常会涉及到指定链（如 <code>INPUT</code>、<code>OUTPUT</code> 或 <code>FORWARD</code>），以及你希望应用的规则（如端口、协议、源地址、目标地址等）。下面是一些常见的 <code>iptables</code> 规则添加示例：</p><ol><li>添加允许特定端口的入站规则</li></ol><p>假设你想允许 TCP 端口 80（HTTP）的入站流量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure><ol start="2"><li>添加拒绝特定IP地址的入站流量</li></ol><p>假设你想拒绝来自特定IP地址 <code>192.168.1.100</code> 的所有入站流量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -A INPUT -s 192.168.1.100 -j DROP</span><br></pre></td></tr></table></figure><ol start="3"><li>添加允许特定端口的出站规则</li></ol><p>假设你想允许 TCP 端口 443（HTTPS）的出站流量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -A OUTPUT -p tcp --dport 443 -j ACCEPT</span><br></pre></td></tr></table></figure><ol start="4"><li>添加特定接口的规则</li></ol><p>假设你想允许通过 <code>eth0</code> 接口的所有 SSH（端口22）流量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -A INPUT -i eth0 -p tcp --dport 22 -j ACCEPT</span><br></pre></td></tr></table></figure><ol start="5"><li>保存规则</li></ol><p>添加规则后，为了确保在系统重启后规则仍然有效，你需要保存这些规则。保存方法根据不同的Linux发行版有所不同：</p><ul><li><p><strong>在 Debian&#x2F;Ubuntu 上：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install iptables-persistent</span><br><span class="line">sudo netfilter-persistent save</span><br></pre></td></tr></table></figure></li><li><p><strong>在 CentOS&#x2F;RHEL 上：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service iptables save</span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li>查看规则</li></ol><p>添加完规则后，可以通过以下命令查看现有的规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -L -v -n</span><br></pre></td></tr></table></figure><ol start="7"><li>删除规则</li></ol><p>如果你需要删除一条规则，首先需要找到规则的编号，然后删除它：</p><ul><li><p><strong>查看规则编号：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -L INPUT --line-numbers</span><br></pre></td></tr></table></figure></li><li><p><strong>删除规则：</strong></p><p>假设你想删除规则编号为 <code>3</code> 的规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -D INPUT 3</span><br></pre></td></tr></table></figure></li></ul><p>通过这些命令，你可以有效地管理 <code>iptables</code> 防火墙的规则，增加、删除或查看现有的规则配置。</p><h1 id="MP-和-JPA-的选择"><a href="#MP-和-JPA-的选择" class="headerlink" title="MP 和 JPA 的选择"></a>MP 和 JPA 的选择</h1><p>JPA提供的API足够多，在简单的CURD上确实是要方便点，</p><p>毕竟直接就提供了根据对应的属性去查找数据的API，而且还有@ManytoOne对外键支持更好，但是在动态SQL中的支持并没有MP好，</p><p>而且后续的优化肯定是直接SQL，没有抽象层的性能更好，最后国内MP用得更多些，不过简单的项目还是JPA方便的多</p><h1 id="MP开启SQL日志打印"><a href="#MP开启SQL日志打印" class="headerlink" title="MP开启SQL日志打印"></a>MP开启SQL日志打印</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="comment">#开启sql日志</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span> <span class="comment">#开启自动驼峰命名规则（camel case）映射</span></span><br></pre></td></tr></table></figure><h1 id="ApiPost-中-form-data-下传递数组参数"><a href="#ApiPost-中-form-data-下传递数组参数" class="headerlink" title="ApiPost 中 form-data 下传递数组参数"></a>ApiPost 中 form-data 下传递数组参数</h1><p>可以直接在参数名中使用一个<code>diaryImages</code>，参数值用<code>,</code>隔开就行:<code>1,2,3</code></p><p>参数名中使用多个<code>diaryImages</code>，参数值正常写就行:<code>1</code> ，<code>2</code>， <code>3</code></p><h1 id="ModelAttribute与-RequestBody"><a href="#ModelAttribute与-RequestBody" class="headerlink" title="@ModelAttribute与@RequestBody"></a>@ModelAttribute与@RequestBody</h1><p>参考链接：<a href="https://blog.csdn.net/qq_42684642/article/details/83058211">【笔记】SpringMVC中@ModelAttribute与@RequestBody的区别-CSDN博客</a></p><p>@ModelAttribute注解的实体类接收前端发来的数据格式需要为”x-www-form-urlencoded”（formdata也能正确接收），@RequestBody注解的实体类接收前端的数据格式为JSON(application&#x2F;json)格式</p><h1 id="restAPI的最佳实践"><a href="#restAPI的最佳实践" class="headerlink" title="restAPI的最佳实践"></a>restAPI的最佳实践</h1><p>之前本来一直用的rawjson，因为之前跟着教程是这样的，但是后面竞赛的时候超说formdata格式更好，于是这次开写的时候就一直是用的这种格式，实际上rawjson更加的标准，也更灵活自由，formdata 遇到数组对象时是无法传递的</p><p><strong>下面的内容总结为：</strong></p><ol><li><strong>DELETE</strong>使用**@PathVariable**</li><li><strong>GET</strong> <strong>使用</strong> <strong>@RequestParam</strong> <strong>和</strong> <strong>@PathVariable</strong><ol><li>@RequestParam 处理查询参数</li><li>使用 @PathVariable 处理路径参数</li></ol></li><li><strong>POST</strong>、<strong>PUT</strong>使用@RequestBody，用于让JSON作为统一的传递格式</li></ol><p><strong>RESTful API 设计中的最佳实践与常见问题总结</strong></p><p><strong>1. GET 请求中的参数传递：</strong></p><p>​•<strong>推荐使用</strong> <strong>@RequestParam</strong> <strong>和</strong> <strong>@PathVariable</strong>：</p><p>​•在 GET 请求中，参数通常通过 URL 传递，使用 @RequestParam 处理查询参数，使用 @PathVariable 处理路径参数。</p><p>​•例如：GET &#x2F;users&#x2F;{userId} 使用 @PathVariable 获取 userId，GET &#x2F;search?name&#x3D;John&amp;age&#x3D;30 使用 @RequestParam 处理查询参数。</p><p>​•<strong>不推荐使用</strong> <strong>@RequestBody</strong>：</p><p>​•GET 请求的设计目的在于检索资源，并且是幂等的（多次请求结果应相同）。使用请求体传递数据不符合 RESTful 原则，也可能导致缓存、调试困难等问题。</p><p>​•查询参数和路径参数在 URL 中是可见的，支持缓存和书签功能。</p><p>​•<strong>复杂查询场景</strong>：</p><p>​•对于复杂查询，考虑使用 POST 请求并通过 @RequestBody 传递 JSON 数据，这样可以在请求体中包含复杂的查询条件。</p><p>​•尽管这种做法在严格的 RESTful 语义下不完全合适，但在实际应用中是可以接受的。</p><p><strong>2. DELETE 请求中的参数传递：</strong></p><p>​•<strong>推荐使用</strong> <strong>@PathVariable</strong>：</p><p>​•DELETE 请求通常用于删除特定资源，使用 @PathVariable 通过路径参数指定要删除的资源。</p><p>​•例如：DELETE &#x2F;users&#x2F;{userId} 使用路径参数删除特定用户。</p><p>​•<strong>特殊场景下使用</strong> <strong>@RequestBody</strong>：</p><p>​•在批量删除或删除需要复杂条件时，可以通过 @RequestBody 传递 JSON 数据。例如，传递一组 ID 来执行批量删除操作。</p><p>​•这种情况下，可以通过 POST 或者其他方式来设计 API，避免在 DELETE 中使用请求体。</p><p><strong>3. RESTful API 设计的整体原则：</strong></p><p>​•<strong>一致性</strong>：</p><p>​•设计 API 时，尽量保持参数传递方式的一致性。例如，若要求所有数据传输使用 JSON 格式，那么应在所有请求中保持一致，避免混用 @RequestParam 和 @RequestBody。</p><p>​•在 POST 请求中，推荐使用 @RequestBody 传递 JSON 数据，在 GET 请求中使用查询参数或路径参数。</p><p>​•<strong>语义清晰</strong>：</p><p>​•路径参数通常用于标识资源和表示资源层次关系，查询参数用于过滤、排序、分页等操作。路径参数适合标识唯一资源，而查询参数适合可选条件。</p><p>​•<strong>易于使用</strong>：</p><p>​•API 设计应尽量简洁直观，参数传递方式应符合使用习惯。例如，使用 GET &#x2F;users&#x2F;{userId} 获取用户信息，而不是通过查询参数或请求体。</p><p>​•<strong>可维护性</strong>：</p><p>​•通过清晰的路径设计和一致的数据传递方式，提升 API 的可读性和维护性，减少客户端和服务端的潜在错误和混淆。</p><h1 id="BUG-2"><a href="#BUG-2" class="headerlink" title="BUG"></a>BUG</h1><h2 id="Springboot3整合MP报错"><a href="#Springboot3整合MP报错" class="headerlink" title="Springboot3整合MP报错"></a>Springboot3整合MP报错</h2><p>参考文章：<a href="https://blog.csdn.net/weixin_46211609/article/details/135552632">Springboot3整合myBatisplus报错：Bean named ‘ddlApplicationRunner‘ is expected to be of type ‘org.sprin_bean named ‘ddlapplicationrunner’ is expected to b-CSDN博客</a></p><p>初始化后直接点击启动时报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bean named <span class="string">&#x27;ddlApplicationRunner&#x27;</span> is expected to be of <span class="built_in">type</span> <span class="string">&#x27;org.springframework.boot.Runner&#x27;</span> but was actually of <span class="built_in">type</span> <span class="string">&#x27;org.springframework.beans.factory.support.NullBean&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="无法访问端口的问题（腾讯云放行端口与防火墙放行端口的关系）"><a href="#无法访问端口的问题（腾讯云放行端口与防火墙放行端口的关系）" class="headerlink" title="无法访问端口的问题（腾讯云放行端口与防火墙放行端口的关系）"></a>无法访问端口的问题（腾讯云放行端口与防火墙放行端口的关系）</h2><p>腾讯云面板的防火墙是针对外网对于服务器的访问的，内部则其实是通过<code>iptables</code>或者<code>firewalld</code>来进行访问的静止，实际上会先经过腾讯云面板的网关防火墙，然后再进入内部的防火墙</p><p>所以即使内部的防火墙全是关着的，网关的腾讯云端口不放行就访问不了</p><p>遇到非阿里家或者腾讯家的自搭类服务器就可以直接通过防火墙放行端口的方式进行访问</p><h2 id="TableId-value-x3D-“user-id”-type-x3D-IdType-AUTO-无效的问题"><a href="#TableId-value-x3D-“user-id”-type-x3D-IdType-AUTO-无效的问题" class="headerlink" title="@TableId(value &#x3D; “user_id”, type &#x3D; IdType.AUTO)无效的问题"></a>@TableId(value &#x3D; “user_id”, type &#x3D; IdType.AUTO)无效的问题</h2><p>参考链接：<a href="https://baomidou.com/guides/id-generator/">自定义ID生成器 | MyBatis-Plus (baomidou.com)</a></p><p><code>type = IdType.AUTO</code>只有当数据库设置为自增后才能有效</p><p>当需要为String类型自增时需要改为：<code>type = IdType.ASSIGN_UUID</code></p><p>不过说来也是蛮离谱的明明都AUTO了，为什么不能自动切换为<code>ASSIGN_UUID</code></p><p>下面为自定义的方法，如果对生成的ID有要求可以用这个：</p><p>这里了解的教训还是从官网学习怎么写，不要单独看gpt的，gpt出来的问题还是挺大的，官网的才是最好的学习方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tec.stargazerbackend.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.incrementer.IdentifierGenerator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomIdGenerator</span> <span class="keyword">implements</span> <span class="title class_">IdentifierGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">nextId</span><span class="params">(Object entity)</span> &#123;</span><br><span class="line">        <span class="comment">// 不使用，返回 null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">nextUUID</span><span class="params">(Object entity)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">characters</span> <span class="operator">=</span> <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789&quot;</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">objectId</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">24</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">randomIndex</span> <span class="operator">=</span> random.nextInt(characters.length());</span><br><span class="line">            objectId.append(characters.charAt(randomIndex));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> objectId.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="docker中修改了MYSQL-ROOT-PASSWORD后重新重启没有生效"><a href="#docker中修改了MYSQL-ROOT-PASSWORD后重新重启没有生效" class="headerlink" title="docker中修改了MYSQL_ROOT_PASSWORD后重新重启没有生效"></a>docker中修改了MYSQL_ROOT_PASSWORD后重新重启没有生效</h2><p>因为在 volumes 中挂载了本地数据目录 (.&#x2F;data&#x2F;mysql:&#x2F;var&#x2F;lib&#x2F;mysql)。这意味着即使你删除并重新创建容器，MySQL 仍然会使用持久化的数据，不会重新初始化密码。</p><h2 id="docker-compose-up没有重新拉取镜像"><a href="#docker-compose-up没有重新拉取镜像" class="headerlink" title="docker-compose up没有重新拉取镜像"></a>docker-compose up没有重新拉取镜像</h2><p>在使用 docker-compose up 时，如果 Docker Compose 发现镜像已经存在，它不会自动重新拉取镜像。这是因为 docker-compose up 默认只会启动已经存在的镜像，而不是检查镜像是否有更新版本。如果需要确保 Docker Compose 每次都拉取最新版本的镜像，可以使用以下方法：</p><p><strong>使用 docker-compose pull</strong></p><p>在执行 docker-compose up 之前，先手动拉取最新的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose pull</span><br><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><h2 id="Gradle-Downloading-gradle-8-5-bin-zip-速度过慢"><a href="#Gradle-Downloading-gradle-8-5-bin-zip-速度过慢" class="headerlink" title="Gradle: Downloading gradle-8.5-bin.zip 速度过慢"></a>Gradle: Downloading gradle-8.5-bin.zip 速度过慢</h2><p>参考链接：<a href="https://blog.csdn.net/qq_41070393/article/details/141060782">国内下载gradle慢，下载gradle超时问题解决【笔记】_gradle下载超时-CSDN博客</a></p><p>在 IDEA 中下载 Gradle 分发包时，如果速度较慢，可以尝试以下方法来加快下载速度：</p><p><strong>使用国内镜像</strong>：<br>你可以将 Gradle 的下载源切换为国内镜像，以提高下载速度。具体操作如下：</p><ul><li>打开 IDEA 项目下的 <code>gradle/wrapper/gradle-wrapper.properties</code> 文件。</li><li>修改 <code>distributionUrl</code> 为国内镜像。例如：<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">distributionUrl</span>=<span class="string">https\://services.gradle.org/distributions/gradle-8.5-bin.zip</span></span><br></pre></td></tr></table></figure>可以修改为腾讯云的镜像源：<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">distributionUrl</span>=<span class="string">https\://mirrors.cloud.tencent.com/gradle/gradle-8.5-bin.zip</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="错误3780：引用列和外键约束中引用的列不兼容"><a href="#错误3780：引用列和外键约束中引用的列不兼容" class="headerlink" title="错误3780：引用列和外键约束中引用的列不兼容"></a>错误3780：引用列和外键约束中引用的列不兼容</h2><p>参考链接：<a href="https://stackoverflow.com/questions/69960902/error-3780-referencing-column-and-referenced-column-in-foreign-key-constraint-a">mysql - 错误 3780：引用列和外键约束中引用的列不兼容 - 堆栈溢出 (stackoverflow.com)</a></p><p>完整报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3780 - Referencing column <span class="string">&#x27;diary_id&#x27;</span> and referenced column <span class="string">&#x27;diary_id&#x27;</span> <span class="keyword">in</span> foreign key constraint <span class="string">&#x27;diary_images_ibfk_1&#x27;</span> are incompatible.</span><br></pre></td></tr></table></figure><p>原因：</p><p>两个属性之间肯定存在一处不一样，可能是<strong>数据类型不匹配</strong>、<strong>字符集或排序规则不匹配</strong>、<strong>长度不一致</strong></p><p>解决过程：</p><p>去 Navicat Premium Lite 中的<code>选项</code>修改了<code>默认排序规则</code>，以及检查了两个属性是否还有不同，发现确实没有了，但是还是报错</p><p>解决方法：</p><p>通过下面的命令去查看<code>默认排序规则</code>，发现实际上改了 Navicat Premium Lite 中的并没有用，实际上属性的<code>默认排序规则</code>还是没有被改，于是接着采用下面的命令去修改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FULL</span> COLUMNS <span class="keyword">FROM</span> diary_images;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> diary_images MODIFY diary_id <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_bin;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> diary_images MODIFY image_url <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_bin;</span><br></pre></td></tr></table></figure><h2 id="外键设置的排查问题（‼️）"><a href="#外键设置的排查问题（‼️）" class="headerlink" title="外键设置的排查问题（‼️）"></a>外键设置的排查问题（‼️）</h2><p>好好排查，明天早上所有的时间都可以给到这块，问题实在太大了，这么小的一个错误绕了老大一圈，才找到，花了将近4个小时，好好整理下思路，看看自己在排查bug这块到底是哪里这么欠缺</p><p>问题原因：</p><p>@Many所使用的方法<code>selectDiaryImagesByDiaryId</code>中的参数<code>diaryId</code>，应该为<code>String</code>而不是<code>Long</code></p><p>解决过程：</p><ol><li><p>一开始设置外键时，本来准备用@ManytoOne，结果发现这个其实是JPA的注解，后面查找发现MP本身并不支持直接创建好外键，于是一开始的方案是准备转JPA了，后面去搜索了下，结论见 <code>  MP 和 JPA 的选择</code>笔记，最后还是接着走MP</p></li><li><p>那么走MP之后，面临两个设置外键多表查询的方式：1、在 Service 层通过 MyBatis-Plus 提供的方法进行两次查询，然后手动组装数据的方式，2、在 <code>DiaryMapper</code> 中直接操作，最后的选择见<code>多对一外键查询</code>笔记</p></li><li><p>决定使用在 <code>DiaryMapper</code> 中直接操作，首先是用gpt给我先简单生成了一份，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;SELECT * FROM diaries d LEFT JOIN diary_images i ON d.diary_id = i.diary_id WHERE d.user_id = #&#123;userId&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;diary_id&quot;, property = &quot;diaryId&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;content&quot;, property = &quot;content&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;diary_id&quot;, property = &quot;images&quot;,</span></span><br><span class="line"><span class="meta">                    many = @Many(select = &quot;selectDiaryImagesByDiaryId&quot;))</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    List&lt;Diaries&gt; <span class="title function_">selectDiariesWithImagesByUserId</span><span class="params">(String userId)</span>;</span><br></pre></td></tr></table></figure><p>运行后出现报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;status&quot;</span>: 999,</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;Error attempting to get column &#x27;diary_id&#x27; from result set.  Cause: java.sql.SQLDataException: Cannot determine value type from string &#x27;h5i6j7k8l9m0n1o2pdas&#x27;\n; Cannot determine value type from string &#x27;h5i6j7k8l9m0n1o2pdas&#x27;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是直接丢gpt，然后由于没有给全代码，所以给我的答案也只有<strong>数据类型不匹配</strong>的问题，但是实体类和数据库数据类型的是完全没有问题的，这里我直接宕机了，开始疯狂纠结这个问题，后面又去询问，又推测是返回值和<code>@Result</code>没有对齐的问题，然后又直接拿gpt的回答代码，例如，下面的代码，导致又出现<code>Unknown column &#39;d.typeTag&#39; in &#39;field list&#39;\</code>等低级的报错浪费时间去看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;SELECT d.diary_id as d_diary_id, d.user_id, d.content, d.visibility, d.typeTag, d.createdAt, i.image_url &quot; +</span></span><br><span class="line"><span class="meta">        &quot;FROM diaries d LEFT JOIN diary_images i ON d.diary_id = i.diary_id &quot; +</span></span><br><span class="line"><span class="meta">        &quot;WHERE d.user_id = #&#123;userId&#125;&quot;)</span></span><br><span class="line"><span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">    @Result(column = &quot;d_diary_id&quot;, property = &quot;diaryId&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column = &quot;user_id&quot;, property = &quot;userId&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column = &quot;content&quot;, property = &quot;content&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column = &quot;visibility&quot;, property = &quot;visibility&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column = &quot;typeTag&quot;, property = &quot;typeTag&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column = &quot;createdAt&quot;, property = &quot;createdAt&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column = &quot;d_diary_id&quot;, property = &quot;diaryImages&quot;,</span></span><br><span class="line"><span class="meta">            many = @Many(select = &quot;selectDiaryImagesByDiaryId&quot;))</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line">List&lt;Diaries&gt; <span class="title function_">selectDiariesWithImagesByUserId</span><span class="params">(String userId)</span>;</span><br></pre></td></tr></table></figure><p>后面去重新看了下SQL语句，发现原本的没什么问题，于是回到了原来的<code>SELECT *</code></p></li><li><p>后面针对这个报错第三点的报错，先怀疑是不是UUID的格式问题，不过觉得格式是varchar，有没有指定什么UUID格式，怎么可能，根据gpt的引导又怀疑是重复的<code>diary_id</code>的问题，于是改为<code>d.diary_id</code>，这个时候不再报之前的错误，并且有数据返回了，只不过是<code>diaryImages</code>内为null，于是觉得进度是往前推进了的，之前的错误解决了，殊不知伏笔已经埋下</p></li><li><p>于是又开始思考<code>@Result(column = &quot;d_diary_id&quot;, property = &quot;diaryImages&quot;,many = @Many(select = &quot;selectDiaryImagesByDiaryId&quot;))</code>语句的问题，毕竟只有这个语句和<code>diaryImages</code>相关，先是怀疑<code>selectDiaryImagesByDiaryId</code>是不是需要写全路径，后面补全后，还是一样的为null，不过觉得这一步还是有必要的于是保留下来了，但是因为没有直接跳转，所以还是不确定是否进入到这个方法中，决定用断点调试的方法，结果发现确实没有进入到方法（不过后面发现就算正确了，好像断点就是不会进入到这里，这点还是不知道为什么），于是又开始纠结，后面通过打开SQL语句打印输出，确定绝对是没有进行这个方法，后面带着SQL日志找gpt又问，回答是可能<code>d_diary_id</code>值不正确导致无法进入这个方法</p></li><li><p>接着就是最精彩的，疯狂换<code>d_diary_id</code>了，先是换名称为<code>d.diary_id</code>，后面又换成<code>i_diary_id</code>，疯狂纠结，后面机缘巧合，把位置对换了，使用<code>@Result(column = &quot;d_diary_id&quot;, property = &quot;diaryId&quot;),</code>发现本来有的<code>diaryId</code>变为null了，又对换试了好几次，终于给我看出来了，<code>d_diary_id</code>就是不存在的，只有<code>diary_id</code>是有值的，但是这时候实际上知道了，还是卡住了，因为我现在知道之前的是重复的<code>diary_id</code>的猜测是错误的，但是这不是又回到起点了吗</p></li><li><p>这次盯着之前的报错，终于啊终于发觉了，<code>diary_id</code>不只是在实体类中用到，<code>selectDiaryImagesByDiaryId</code>中也是用到了的，把<code>diaryId</code>从<code>Long</code>改为<code>String</code>，终于解决了，啊啊啊啊啊啊啊啊啊啊啊啊啊，现在再回来思考，为什么把<code>diary_id</code>改为<code>d_diary_id</code>后就不报错了，因为<code>d_diary_id</code>为null啊，所以就不存在无法正确转化类型的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DiaryImagesMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;DiaryImages&gt; &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM diary_images WHERE diary_id = #&#123;diaryId&#125;&quot;)</span></span><br><span class="line">    List&lt;DiaryImages&gt; <span class="title function_">selectDiaryImagesByDiaryId</span><span class="params">(String diaryId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>还有高手！！！，BUG奇妙冒险还没结束，最后发现上面全是白写，为什么呢，因为之前选择mapper去写这个逻辑的原因是因为考虑到<code>LEFT JOIN</code>，可以减少查询次数，结果发现在一对多的连表中，<code>LEFT JOIN</code>会将 diaries 表和 diary_images 表的数据进行联接。<code>LEFT JOIN</code> 会扫描两个表的数据，并将结果集返回给应用层，可能会返回比单纯查询 diaries 表更多的数据行，在一对多的场景下，会返回大量重复的数据，虽然减少了 MP 需要发出的额外查询次数，但却可能导致 MP 处理更大的结果集</p></li><li><p>最后把<code>LEFT JOIN</code>给删除了，然后一看代码，woc这不就是直接在Service 层手动组装吗，之前用的老办法就是这个，这下终于老实了🥲</p></li></ol><h2 id="断点不停的问题"><a href="#断点不停的问题" class="headerlink" title="断点不停的问题"></a>断点不停的问题</h2><p>断点不是哪都能停点的，断点一般用于调试Main Thread里的代码，如果是线程里或者是反射的代码断点就不合适了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;SELECT * FROM diaries d LEFT JOIN diary_images i ON d.diary_id = i.diary_id WHERE d.user_id = #&#123;userId&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;diary_id&quot;, property = &quot;diaryId&quot;, javaType = String.class),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;content&quot;, property = &quot;content&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;diary_id&quot;, property = &quot;diaryImages&quot;,</span></span><br><span class="line"><span class="meta">                    javaType = List.class,</span></span><br><span class="line"><span class="meta">                    many = @Many(select = &quot;com.tec.stargazerbackend.mapper.DiaryImagesMapper.selectDiaryImagesByDiaryId&quot;))</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    List&lt;Diaries&gt; <span class="title function_">selectDiariesWithImagesByUserId</span><span class="params">(String userId)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DiaryImagesMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;DiaryImages&gt; &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM diary_images WHERE diary_id = #&#123;diaryId&#125;&quot;)</span></span><br><span class="line">    List&lt;DiaryImages&gt; <span class="title function_">selectDiaryImagesByDiaryId</span><span class="params">(String diaryId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="报错：Content-Type-‘multipart-x2F-form-data-boundary-x3D-————————–843173282939659591303139-charset-x3D-UTF-8’-is-not-supported"><a href="#报错：Content-Type-‘multipart-x2F-form-data-boundary-x3D-————————–843173282939659591303139-charset-x3D-UTF-8’-is-not-supported" class="headerlink" title="报错：Content-Type ‘multipart&#x2F;form-data;boundary&#x3D;————————–843173282939659591303139;charset&#x3D;UTF-8’ is not supported"></a>报错：Content-Type ‘multipart&#x2F;form-data;boundary&#x3D;————————–843173282939659591303139;charset&#x3D;UTF-8’ is not supported</h2><p>使用<code>form-data</code>去传递了原本需要使用<code>rawjson</code>格式的参数</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>竟赛萌芽书意项目经验</title>
      <link href="/posts/4e8d76cd.html"/>
      <url>/posts/4e8d76cd.html</url>
      
        <content type="html"><![CDATA[<h1 id="竟赛萌芽书意项目经验"><a href="#竟赛萌芽书意项目经验" class="headerlink" title="竟赛萌芽书意项目经验"></a>竟赛萌芽书意项目经验</h1><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><h3 id="添加自定义字体"><a href="#添加自定义字体" class="headerlink" title="添加自定义字体"></a>添加自定义字体</h3><p>获取自定义字体的名称</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="type">UIFont</span>.familyNames.forEach &#123; familyName <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Font Family: <span class="subst">\(familyName)</span>&quot;</span>)</span><br><span class="line">        <span class="type">UIFont</span>.fontNames(forFamilyName: familyName).forEach &#123; fontName <span class="keyword">in</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\t</span><span class="subst">\(fontName)</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改Tabview颜色"><a href="#修改Tabview颜色" class="headerlink" title="修改Tabview颜色"></a>修改Tabview颜色</h3><p>更改Assets里面的AccentColor就行</p><h3 id="TabItem自动填充选中图标的颜色颜色"><a href="#TabItem自动填充选中图标的颜色颜色" class="headerlink" title="TabItem自动填充选中图标的颜色颜色"></a>TabItem自动填充选中图标的颜色颜色</h3><p>参考：[SwiftUI Tabview：如何自定义标签栏 - swiftyplace](<a href="https://www.swiftyplace.com/blog/tabview-in-swiftui-styling-navigation-and-more#:~:text=How">https://www.swiftyplace.com/blog/tabview-in-swiftui-styling-navigation-and-more#:~:text=How</a> can I add icons to the tabs,Text(“Second View”).tabItem { Label(“Tab 2”%2C systemImage%3A “2.circle”) })</p><p>Assets里面<code>Render As</code>属性改为Template Image</p><h3 id="xcode-代码格式化-快捷键"><a href="#xcode-代码格式化-快捷键" class="headerlink" title="xcode 代码格式化 快捷键"></a>xcode 代码格式化 快捷键</h3><ol><li><p>在代码编辑器中，按 <strong>Command + A</strong> 选择整个文件。</p></li><li><p>然后按 <strong>Control + I</strong> 来格式化所有选定的代码。</p></li></ol><h3 id="swiftui中如何实现HStack内的内容为flex布局的justify-between的效果"><a href="#swiftui中如何实现HStack内的内容为flex布局的justify-between的效果" class="headerlink" title="swiftui中如何实现HStack内的内容为flex布局的justify-between的效果"></a>swiftui中如何实现HStack内的内容为flex布局的justify-between的效果</h3><p>Spacer()基本上用一个就够了</p><p>正确代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HStack</span>(spacing: <span class="number">30</span>) &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;全部&quot;</span>)</span><br><span class="line">        .font(.custom(<span class="string">&quot;AlimamaShuHeiTi-Bold&quot;</span>, size: <span class="number">16</span>))</span><br><span class="line">        .padding(.horizontal, <span class="number">15</span>)</span><br><span class="line">        .padding(.vertical, <span class="number">10</span>)</span><br><span class="line">        .foregroundColor(.white)</span><br><span class="line">        .background(<span class="type">Color</span>(<span class="string">&quot;accent-100&quot;</span>))</span><br><span class="line">        .cornerRadius(<span class="number">12</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="type">Spacer</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="type">HStack</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;流行&quot;</span>)</span><br><span class="line">            .foregroundColor(<span class="type">Color</span>(<span class="string">&quot;accent-100&quot;</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="type">Spacer</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;最近&quot;</span>)</span><br><span class="line">            .foregroundColor(<span class="type">Color</span>(<span class="string">&quot;accent-100&quot;</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="type">Spacer</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;推荐&quot;</span>)</span><br><span class="line">            .foregroundColor(<span class="type">Color</span>(<span class="string">&quot;accent-100&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.frame(maxWidth: .infinity, maxHeight: <span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>错误代码：</p><p>每个 Spacer 会尽可能多地占据可用空间，导致 Text 视图之间的空间被过度分配，挤压 Text 视图，从而导致布局变形</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;全部&quot;</span>)</span><br><span class="line">                .font(.custom(<span class="string">&quot;AlimamaShuHeiTi-Bold&quot;</span>, size: <span class="number">16</span>))</span><br><span class="line">                .padding(.horizontal, <span class="number">15</span>)</span><br><span class="line">                .padding(.vertical, <span class="number">10</span>)</span><br><span class="line">                .foregroundColor(.white)</span><br><span class="line">                .background(<span class="type">Color</span>(<span class="string">&quot;accent-100&quot;</span>))</span><br><span class="line">                .cornerRadius(<span class="number">12</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">            </span><br><span class="line">            <span class="type">HStack</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;流行&quot;</span>)</span><br><span class="line">                    .foregroundColor(<span class="type">Color</span>(<span class="string">&quot;accent-100&quot;</span>))</span><br><span class="line">                </span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">                </span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;最近&quot;</span>)</span><br><span class="line">                    .foregroundColor(<span class="type">Color</span>(<span class="string">&quot;accent-100&quot;</span>))</span><br><span class="line">                </span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">                </span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;推荐&quot;</span>)</span><br><span class="line">                    .foregroundColor(<span class="type">Color</span>(<span class="string">&quot;accent-100&quot;</span>))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(maxWidth: .infinity, maxHeight: <span class="number">50</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内部渐变效果"><a href="#内部渐变效果" class="headerlink" title="内部渐变效果"></a>内部渐变效果</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span>(<span class="string">&quot;navigation_ai&quot;</span>)</span><br><span class="line">    .resizable()</span><br><span class="line">    .cornerRadius(<span class="number">20</span>) <span class="comment">// 添加圆角，半径为20</span></span><br><span class="line">    .overlay(</span><br><span class="line">        <span class="type">LinearGradient</span>(</span><br><span class="line">            gradient: <span class="type">Gradient</span>(colors: [.black.opacity(<span class="number">0.3</span>), .black.opacity(<span class="number">0</span>)]),</span><br><span class="line">            startPoint: .bottomLeading,</span><br><span class="line">            endPoint: <span class="type">UnitPoint</span>(x: <span class="number">0.5</span>, y: <span class="number">0.0</span>) <span class="comment">// 设置终点为上方中间</span></span><br><span class="line">        )</span><br><span class="line">        .cornerRadius(<span class="number">20</span>) <span class="comment">// 让渐变也具有圆角效果</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="让中间的HStack宽度为占满剩下的屏幕"><a href="#让中间的HStack宽度为占满剩下的屏幕" class="headerlink" title="让中间的HStack宽度为占满剩下的屏幕"></a>让中间的HStack宽度为占满剩下的屏幕</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">GeometryReader</span> &#123; geometry <span class="keyword">in</span></span><br><span class="line">    <span class="type">HStack</span> &#123;</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">Image</span>(<span class="string">&quot;recommend_search&quot;</span>)</span><br><span class="line">                .resizable()</span><br><span class="line">                .frame(width: <span class="number">30</span>, height: <span class="number">30</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;搜索&quot;</span>)</span><br><span class="line">                .font(.custom(<span class="string">&quot;Alibaba-PuHuiTi-R&quot;</span>, size: <span class="number">15</span>))</span><br><span class="line">                .foregroundColor(<span class="type">Color</span>(<span class="string">&quot;text-200&quot;</span>))</span><br><span class="line">            </span><br><span class="line">            <span class="type">Spacer</span>() <span class="comment">// 让元素靠左排列</span></span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">        .frame(width: geometry.size.width, height: <span class="number">40</span>) <span class="comment">// 指定高度</span></span><br><span class="line">        .background(<span class="type">Color</span>(<span class="string">&quot;bg-200&quot;</span>))</span><br><span class="line">        .cornerRadius(<span class="number">12</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    .frame(height: <span class="number">40</span>) <span class="comment">// 指定GeometryReader的高度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PencilKit"><a href="#PencilKit" class="headerlink" title="PencilKit"></a>PencilKit</h2><p><code>PKCanvasView</code>为画布</p><p><code>PKToolPicker</code>为</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> PencilKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PracticeWithPencilView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> canvasView <span class="operator">=</span> <span class="type">PKCanvasView</span>()</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> toolPicker <span class="operator">=</span> <span class="type">PKToolPicker</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ZStack</span> &#123;</span><br><span class="line">            <span class="type">Image</span>(<span class="string">&quot;Practice-02&quot;</span>) <span class="comment">// 确保您有一个包含田字格和文字的图片</span></span><br><span class="line">                .resizable()</span><br><span class="line">                .scaledToFit()</span><br><span class="line">                .frame(width: geometry.size.width <span class="operator">*</span> <span class="number">0.97</span>, height: geometry.size.height <span class="operator">*</span> <span class="number">0.92</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="type">CanvasView</span>(canvasView: <span class="variable">$canvasView</span>, toolPicker: <span class="variable">$toolPicker</span>)</span><br><span class="line">                .frame(width: geometry.size.width <span class="operator">*</span> <span class="number">0.97</span>, height: geometry.size.height <span class="operator">*</span> <span class="number">0.92</span>)</span><br><span class="line">                .background(<span class="type">Color</span>.clear) <span class="comment">// 确保背景透明</span></span><br><span class="line">        &#125;</span><br><span class="line">        .frame(height: geometry.size.height <span class="operator">*</span> <span class="number">0.86</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CanvasView</span>: <span class="title class_">UIViewRepresentable</span> &#123;</span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> canvasView: <span class="type">PKCanvasView</span></span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> toolPicker: <span class="type">PKToolPicker</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">makeUIView</span>(<span class="params">context</span>: <span class="type">Context</span>) -&gt; <span class="type">PKCanvasView</span> &#123;</span><br><span class="line">        canvasView.drawingPolicy <span class="operator">=</span> .anyInput</span><br><span class="line">        canvasView.backgroundColor <span class="operator">=</span> .clear <span class="comment">// 使画布背景透明</span></span><br><span class="line">        toolPicker.setVisible(<span class="literal">true</span>, forFirstResponder: canvasView)</span><br><span class="line">        toolPicker.addObserver(canvasView)</span><br><span class="line">        canvasView.becomeFirstResponder()</span><br><span class="line">        <span class="keyword">return</span> canvasView</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateUIView</span>(<span class="keyword">_</span> <span class="params">uiView</span>: <span class="type">PKCanvasView</span>, <span class="params">context</span>: <span class="type">Context</span>) &#123;</span><br><span class="line">        <span class="comment">// 更新视图的逻辑（如果有）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="回溯版本"><a href="#回溯版本" class="headerlink" title="回溯版本"></a>回溯版本</h3><p>参考：<a href="https://blog.csdn.net/yxlshk/article/details/79944535">Git恢复之前版本的两种方法reset、revert（图文详解）_git回退到某个版本-CSDN博客</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard c7c4e1d88e36f97a0c456a82cc2d5bd16a9633c2</span><br><span class="line">git push -f</span><br></pre></td></tr></table></figure><h2 id="通过PencilKit获取单字字迹"><a href="#通过PencilKit获取单字字迹" class="headerlink" title="通过PencilKit获取单字字迹"></a>通过PencilKit获取单字字迹</h2><h3 id="依据时间顺序总结"><a href="#依据时间顺序总结" class="headerlink" title="依据时间顺序总结"></a>依据时间顺序总结</h3><p>好的，这里是按照时间顺序列出的各个方法的调用过程，并在每个事件点后附上对应的代码和详细解释：</p><h3 id="1-开始下第一笔（触摸开始）"><a href="#1-开始下第一笔（触摸开始）" class="headerlink" title="1. 开始下第一笔（触摸开始）"></a>1. 开始下第一笔（触摸开始）</h3><p>当用户开始在画布上绘制时，<code>touchesBegan</code> 方法会被调用。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">touchesBegan</span>(<span class="keyword">_</span> <span class="params">touches</span>: <span class="type">Set</span>&lt;<span class="type">UITouch</span>&gt;, <span class="params">with</span> <span class="params">event</span>: <span class="type">UIEvent</span>?) &#123;</span><br><span class="line">    <span class="keyword">super</span>.touchesBegan(touches, with: event)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> touch <span class="operator">=</span> touches.first &#123;</span><br><span class="line">        <span class="keyword">let</span> point <span class="operator">=</span> touch.location(in: <span class="keyword">self</span>)</span><br><span class="line">        updateCurrentStrokeRect(with: point) <span class="comment">// 更新笔画矩形区域</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><ul><li><code>touchesBegan</code> 是 UIResponder 类的一部分，UIResponder 是 iOS 事件响应链中的基类。UIView 以及其子类都继承自 UIResponder，因此可以重载这些方法来处理触摸事件</li><li><code>touchesBegan</code> 方法通过<code>touch.location(in: self)</code>记录了用户触摸的位置，并调用 <code>updateCurrentStrokeRect(with:)</code> 方法。</li><li><code>updateCurrentStrokeRect(with:)</code> 方法更新 <code>currentStrokeRect</code>，用来记录当前笔画的矩形区域。</li></ul><p>updateCurrentStrokeRect(with point: CGPoint) 方法被调用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">updateCurrentStrokeRect</span>(<span class="params">with</span> <span class="params">point</span>: <span class="type">CGPoint</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> currentRect <span class="operator">=</span> currentStrokeRect &#123;</span><br><span class="line">        currentStrokeRect <span class="operator">=</span> currentRect.union(<span class="type">CGRect</span>(origin: point, size: .zero)) <span class="comment">// 更新矩形区域</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        currentStrokeRect <span class="operator">=</span> <span class="type">CGRect</span>(origin: point, size: .zero) <span class="comment">// 初始化矩形区域</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><ul><li>updateCurrentStrokeRect(with point: CGPoint) 方法用于更新当前笔画的矩形区域。</li><li>currentStrokeRect 是一个可选的 CGRect 类型变量（包含了矩形的原点（即左上角的坐标）和尺寸（宽度和高度）），用于记录当前笔画的矩形区域。</li><li>如果 currentStrokeRect 已经存在，则使用 CGRect(origin: point, size: .zero) 创建一个新的零大小的矩形，并使用 union 方法将其与当前矩形区域合并，扩大 currentStrokeRect 以包含新的点。</li><li>如果 currentStrokeRect 不存在（即当前是第一笔），则使用 CGRect(origin: point, size: .zero) 创建一个新的零大小的矩形，并将其赋值给 currentStrokeRect。</li></ul><h3 id="2-笔画移动（触摸移动）"><a href="#2-笔画移动（触摸移动）" class="headerlink" title="2. 笔画移动（触摸移动）"></a>2. 笔画移动（触摸移动）</h3><p>当用户移动笔画时，<code>touchesMoved</code> 方法会被调用。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">touchesMoved</span>(<span class="keyword">_</span> <span class="params">touches</span>: <span class="type">Set</span>&lt;<span class="type">UITouch</span>&gt;, <span class="params">with</span> <span class="params">event</span>: <span class="type">UIEvent</span>?) &#123;</span><br><span class="line">    <span class="keyword">super</span>.touchesMoved(touches, with: event)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> touch <span class="operator">=</span> touches.first &#123;</span><br><span class="line">        <span class="keyword">let</span> point <span class="operator">=</span> touch.location(in: <span class="keyword">self</span>)</span><br><span class="line">        updateCurrentStrokeRect(with: point) <span class="comment">// 更新笔画矩形区域</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><ul><li><code>touchesMoved</code> 方法记录了用户移动的位置，并再次调用 <code>updateCurrentStrokeRect(with:)</code> 方法。</li><li><code>updateCurrentStrokeRect(with:)</code> 方法会更新 <code>currentStrokeRect</code>，扩大当前笔画的矩形区域以包含移动后的点。</li></ul><h3 id="3-笔画结束（触摸结束）"><a href="#3-笔画结束（触摸结束）" class="headerlink" title="3. 笔画结束（触摸结束）"></a>3. 笔画结束（触摸结束）</h3><p>当用户完成一个笔画时，<code>touchesEnded</code> 方法会被调用。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">touchesEnded</span>(<span class="keyword">_</span> <span class="params">touches</span>: <span class="type">Set</span>&lt;<span class="type">UITouch</span>&gt;, <span class="params">with</span> <span class="params">event</span>: <span class="type">UIEvent</span>?) &#123;</span><br><span class="line">    <span class="keyword">super</span>.touchesEnded(touches, with: event)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> touch <span class="operator">=</span> touches.first &#123;</span><br><span class="line">        <span class="keyword">let</span> point <span class="operator">=</span> touch.location(in: <span class="keyword">self</span>)</span><br><span class="line">        updateCurrentStrokeRect(with: point) <span class="comment">// 更新笔画矩形区域</span></span><br><span class="line">    &#125;</span><br><span class="line">    resetTimer() <span class="comment">// 重置定时器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><ul><li><code>touchesEnded</code> 方法记录了用户触摸结束的位置，并调用 <code>updateCurrentStrokeRect(with:)</code> 方法。</li><li><code>resetTimer()</code> 方法会启动一个2秒的定时器，定时器触发时会调用 <code>handleTimer</code> 方法。</li></ul><h3 id="4-触发定时器（间隔2秒后）"><a href="#4-触发定时器（间隔2秒后）" class="headerlink" title="4. 触发定时器（间隔2秒后）"></a>4. 触发定时器（间隔2秒后）</h3><p>如果用户在2秒内没有再进行新的绘制操作，定时器触发，<code>handleTimer</code> 方法会被调用。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">handleTimer</span>() &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> currentStrokeRect <span class="operator">=</span> currentStrokeRect <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    saveCurrentDrawingAsImage(in: currentStrokeRect.insetBy(dx: <span class="operator">-</span>margin, dy: <span class="operator">-</span>margin)) <span class="comment">// 保存当前笔画为图像</span></span><br><span class="line">    <span class="keyword">self</span>.currentStrokeRect <span class="operator">=</span> <span class="literal">nil</span> <span class="comment">// 重置当前笔画矩形区域</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><ul><li><code>handleTimer</code> 方法检查 <code>currentStrokeRect</code> 是否存在，如果存在，则调用 <code>saveCurrentDrawingAsImage(in:)</code> 方法保存当前笔画的图像。</li><li><code>saveCurrentDrawingAsImage(in:)</code> 方法从画布中截取指定区域的图像，并调用 <code>analyzeImage(_:)</code> 方法进行图像分析。</li></ul><h3 id="5-保存图像并分析"><a href="#5-保存图像并分析" class="headerlink" title="5. 保存图像并分析"></a>5. 保存图像并分析</h3><p>在保存图像时，<code>saveCurrentDrawingAsImage(in:)</code> 方法会被调用。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">saveCurrentDrawingAsImage</span>(<span class="params">in</span> <span class="params">rect</span>: <span class="type">CGRect</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> image <span class="operator">=</span> drawing.image(from: rect, scale: <span class="number">1.0</span>) <span class="comment">// 从画布中截取图像</span></span><br><span class="line">    analyzeImage(image) <span class="comment">// 分析图像</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><ul><li><code>saveCurrentDrawingAsImage(in:)</code> 方法从画布中截取指定矩形区域的图像，并调用 <code>analyzeImage(_:)</code> 方法进行图像分析。</li></ul><h3 id="6-分析图像"><a href="#6-分析图像" class="headerlink" title="6. 分析图像"></a>6. 分析图像</h3><p>最后，<code>analyzeImage(_:)</code> 方法会被调用。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">analyzeImage</span>(<span class="keyword">_</span> <span class="params">image</span>: <span class="type">UIImage</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里可以添加图像分析的逻辑</span></span><br><span class="line">    analyzeImageOnServer(image) <span class="comment">// 将图像上传到服务器进行分析</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">analyzeImageOnServer</span>(<span class="keyword">_</span> <span class="params">image</span>: <span class="type">UIImage</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始分析图像...&quot;</span>) <span class="comment">// 打印提示信息</span></span><br><span class="line">    <span class="comment">// 这里可以添加上传逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><ul><li><code>analyzeImage(_:)</code> 方法中调用 <code>analyzeImageOnServer(_:)</code> 方法将图像上传到服务器进行分析。</li><li><code>analyzeImageOnServer(_:)</code> 方法中实际应用中可以添加图像上传逻辑。</li></ul><p>总结起来，以下是完整的调用顺序：</p><ol><li><strong>开始下第一笔（触摸开始）</strong>：<code>touchesBegan</code> -&gt; <code>updateCurrentStrokeRect(with:)</code></li><li><strong>笔画移动（触摸移动）</strong>：<code>touchesMoved</code> -&gt; <code>updateCurrentStrokeRect(with:)</code></li><li><strong>笔画结束（触摸结束）</strong>：<code>touchesEnded</code> -&gt; <code>updateCurrentStrokeRect(with:)</code> -&gt; <code>resetTimer()</code></li><li><strong>触发定时器（间隔2秒后）</strong>：<code>handleTimer</code> -&gt; <code>saveCurrentDrawingAsImage(in:)</code> -&gt; <code>analyzeImage(_:)</code> -&gt; <code>analyzeImageOnServer(_:)</code></li></ol><p>通过这些步骤，代码实现了对单个字的捕捉、保存和分析。</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SwiftUI中的一个代表画布视图的结构</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CanvasView</span>: <span class="title class_">UIViewRepresentable</span> &#123;</span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> canvasView: <span class="type">CustomPKCanvasView</span> <span class="comment">// 绑定的自定义PKCanvasView</span></span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> toolPicker: <span class="type">PKToolPicker</span> <span class="comment">// 绑定的PKToolPicker</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建UIView的方法</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">makeUIView</span>(<span class="params">context</span>: <span class="type">Context</span>) -&gt; <span class="type">CustomPKCanvasView</span> &#123;</span><br><span class="line">        canvasView.drawingPolicy <span class="operator">=</span> .anyInput <span class="comment">// 设置画布的绘制策略</span></span><br><span class="line">        canvasView.backgroundColor <span class="operator">=</span> .clear <span class="comment">// 设置画布背景颜色为透明</span></span><br><span class="line">        toolPicker.setVisible(<span class="literal">true</span>, forFirstResponder: canvasView) <span class="comment">// 使工具选择器在画布上可见</span></span><br><span class="line">        toolPicker.addObserver(canvasView) <span class="comment">// 添加观察者</span></span><br><span class="line">        canvasView.becomeFirstResponder() <span class="comment">// 使画布成为第一响应者</span></span><br><span class="line">        canvasView.delegate <span class="operator">=</span> context.coordinator <span class="comment">// 设置画布的代理</span></span><br><span class="line">        <span class="keyword">return</span> canvasView <span class="comment">// 返回自定义的画布视图</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新UIView的方法</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateUIView</span>(<span class="keyword">_</span> <span class="params">uiView</span>: <span class="type">CustomPKCanvasView</span>, <span class="params">context</span>: <span class="type">Context</span>) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建协调器的方法</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">makeCoordinator</span>() -&gt; <span class="type">Coordinator</span> &#123;</span><br><span class="line">        <span class="type">Coordinator</span>(<span class="keyword">self</span>) <span class="comment">// 返回一个协调器实例</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 协调器类，负责处理画布视图的代理方法</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Coordinator</span>: <span class="title class_">NSObject</span>, <span class="title class_">PKCanvasViewDelegate</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> parent: <span class="type">CanvasView</span> <span class="comment">// 保存父视图</span></span><br><span class="line">        <span class="keyword">var</span> timer: <span class="type">Timer</span>? <span class="comment">// 定时器，用于延时处理</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化协调器</span></span><br><span class="line">        <span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">parent</span>: <span class="type">CanvasView</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>.parent <span class="operator">=</span> parent</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 当画布内容改变时调用的方法</span></span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">canvasViewDrawingDidChange</span>(<span class="keyword">_</span> <span class="params">canvasView</span>: <span class="type">PKCanvasView</span>) &#123;</span><br><span class="line">            resetTimer() <span class="comment">// 重置定时器</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 重置定时器的方法</span></span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">resetTimer</span>() &#123;</span><br><span class="line">            timer<span class="operator">?</span>.invalidate() <span class="comment">// 使之前的定时器失效</span></span><br><span class="line">            timer <span class="operator">=</span> <span class="type">Timer</span>.scheduledTimer(withTimeInterval: <span class="number">2.0</span>, repeats: <span class="literal">false</span>) &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">self</span>.parent.canvasView.analyzeDrawing() <span class="comment">// 调用画布视图的分析方法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义的PKCanvasView类，继承自PKCanvasView</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomPKCanvasView</span>: <span class="title class_">PKCanvasView</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> speechHelper <span class="operator">=</span> <span class="type">SpeechSynthesizerHelper</span>() <span class="comment">// 语音助手</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> drawingChangedTimer: <span class="type">Timer</span>? <span class="comment">// 定时器</span></span><br><span class="line">    <span class="keyword">var</span> lastTouchPoint: <span class="type">CGPoint</span>? <span class="comment">// 最后触摸点</span></span><br><span class="line">    <span class="keyword">var</span> currentStrokeRect: <span class="type">CGRect</span>? <span class="comment">// 当前笔画的矩形区域</span></span><br><span class="line">    <span class="keyword">let</span> margin: <span class="type">CGFloat</span> <span class="operator">=</span> <span class="number">10.0</span> <span class="comment">// 边距值</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重置定时器的方法</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">resetTimer</span>() &#123;</span><br><span class="line">        drawingChangedTimer<span class="operator">?</span>.invalidate() <span class="comment">// 使之前的定时器失效</span></span><br><span class="line">        drawingChangedTimer <span class="operator">=</span> <span class="type">Timer</span>.scheduledTimer(timeInterval: <span class="number">2.0</span>, target: <span class="keyword">self</span>, selector: <span class="keyword">#selector</span>(handleTimer), userInfo: <span class="literal">nil</span>, repeats: <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定时器触发时调用的方法</span></span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">handleTimer</span>() &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> currentStrokeRect <span class="operator">=</span> currentStrokeRect <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        saveCurrentDrawingAsImage(in: currentStrokeRect.insetBy(dx: <span class="operator">-</span>margin, dy: <span class="operator">-</span>margin)) <span class="comment">// 保存当前笔画为图像</span></span><br><span class="line">        <span class="keyword">self</span>.currentStrokeRect <span class="operator">=</span> <span class="literal">nil</span> <span class="comment">// 重置当前笔画矩形区域</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分析画布内容的方法</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">analyzeDrawing</span>() &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> currentStrokeRect <span class="operator">=</span> currentStrokeRect <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        saveCurrentDrawingAsImage(in: currentStrokeRect.insetBy(dx: <span class="operator">-</span>margin, dy: <span class="operator">-</span>margin)) <span class="comment">// 保存当前笔画为图像</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 保存当前画布内容为图像的方法</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">saveCurrentDrawingAsImage</span>(<span class="params">in</span> <span class="params">rect</span>: <span class="type">CGRect</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> image <span class="operator">=</span> drawing.image(from: rect, scale: <span class="number">1.0</span>) <span class="comment">// 从画布中截取图像</span></span><br><span class="line">        analyzeImage(image) <span class="comment">// 分析图像</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新当前笔画矩形区域的方法</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateCurrentStrokeRect</span>(<span class="params">with</span> <span class="params">point</span>: <span class="type">CGPoint</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> currentRect <span class="operator">=</span> currentStrokeRect &#123;</span><br><span class="line">            currentStrokeRect <span class="operator">=</span> currentRect.union(<span class="type">CGRect</span>(origin: point, size: .zero)) <span class="comment">// 更新矩形区域</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            currentStrokeRect <span class="operator">=</span> <span class="type">CGRect</span>(origin: point, size: .zero) <span class="comment">// 初始化矩形区域</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">analyzeImage</span>(<span class="keyword">_</span> <span class="params">image</span>: <span class="type">UIImage</span>) &#123;</span><br><span class="line">        <span class="comment">//        self.speechHelper.speak(text: &quot;保持专注，顿笔后向右下轻带出钩，钩不宜过长&quot;)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//        guard let imageData = image.jpegData(compressionQuality: 0.8) else &#123;</span></span><br><span class="line">        <span class="comment">//            print(&quot;无法转换图像为JPEG数据&quot;)</span></span><br><span class="line">        <span class="comment">//            return</span></span><br><span class="line">        <span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//        let fileManager = FileManager.default</span></span><br><span class="line">        <span class="comment">//        let urls = fileManager.urls(for: .documentDirectory, in: .userDomainMask)</span></span><br><span class="line">        <span class="comment">//        let documentsDirectory = urls[0]</span></span><br><span class="line">        <span class="comment">//        let fileName = &quot;handwriting_\(UUID().uuidString).jpg&quot;</span></span><br><span class="line">        <span class="comment">//        let fileURL = documentsDirectory.appendingPathComponent(fileName)</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//        do &#123;</span></span><br><span class="line">        <span class="comment">//            try imageData.write(to: fileURL)</span></span><br><span class="line">        <span class="comment">//            print(&quot;图片已保存到本地: \(fileURL.path)&quot;)</span></span><br><span class="line">        <span class="comment">//        &#125; catch &#123;</span></span><br><span class="line">        <span class="comment">//            print(&quot;无法保存图片: \(error)&quot;)</span></span><br><span class="line">        <span class="comment">//        &#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//        DispatchQueue.main.async &#123;</span></span><br><span class="line">        <span class="comment">//            let imageView = UIImageView(image: image)</span></span><br><span class="line">        <span class="comment">//            imageView.frame = CGRect(x: 0, y: 0, width: 300, height: 300)</span></span><br><span class="line">        <span class="comment">//            if let window = UIApplication.shared.windows.first &#123;</span></span><br><span class="line">        <span class="comment">//                window.rootViewController?.view.addSubview(imageView)</span></span><br><span class="line">        <span class="comment">//            &#125;</span></span><br><span class="line">        <span class="comment">//        &#125;</span></span><br><span class="line">        </span><br><span class="line">        analyzeImageOnServer(image)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">analyzeImageOnServer</span>(<span class="keyword">_</span> <span class="params">image</span>: <span class="type">UIImage</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始分析图像...&quot;</span>)</span><br><span class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">            <span class="keyword">self</span>.speechHelper.speak(text: <span class="string">&quot;开始分析您的笔迹，请耐心等待&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将图片转换为JPEG数据</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> imageData <span class="operator">=</span> image.jpegData(compressionQuality: <span class="number">0.8</span>) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;无法转换图像为JPEG数据&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构建URL请求</span></span><br><span class="line">        <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://api.gptapi.us/v1/chat/completions&quot;</span>)<span class="operator">!</span></span><br><span class="line">        <span class="keyword">var</span> request <span class="operator">=</span> <span class="type">URLRequest</span>(url: url)</span><br><span class="line">        request.httpMethod <span class="operator">=</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">        request.setValue(<span class="string">&quot;application/json&quot;</span>, forHTTPHeaderField: <span class="string">&quot;Content-Type&quot;</span>)</span><br><span class="line">        request.setValue(<span class="string">&quot;Bearer sk-BhcZcQ4KbJW8wmgX96F33d91B14c41CaAf23C4F15d1483Ec&quot;</span>, forHTTPHeaderField: <span class="string">&quot;Authorization&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构建JSON体</span></span><br><span class="line">        <span class="keyword">let</span> base64Image <span class="operator">=</span> imageData.base64EncodedString()</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 拆分成较小的子表达式</span></span><br><span class="line">        <span class="keyword">let</span> textPart: [<span class="type">String</span>: <span class="keyword">Any</span>] <span class="operator">=</span> [</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">            <span class="string">&quot;text&quot;</span>: <span class="string">&quot;针对我写的这个字的字迹给出建议,要求字数不超过50字&quot;</span></span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> imagePart: [<span class="type">String</span>: <span class="keyword">Any</span>] <span class="operator">=</span> [</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;image_url&quot;</span>,</span><br><span class="line">            <span class="string">&quot;image_url&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;url&quot;</span>: <span class="string">&quot;data:image/jpeg;base64,<span class="subst">\(base64Image)</span>&quot;</span>,</span><br><span class="line">                <span class="string">&quot;detail&quot;</span>: <span class="string">&quot;low&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> messageContent: [<span class="keyword">Any</span>] <span class="operator">=</span> [textPart, imagePart]</span><br><span class="line">        <span class="keyword">let</span> message: [<span class="type">String</span>: <span class="keyword">Any</span>] <span class="operator">=</span> [<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: messageContent]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> jsonBody: [<span class="type">String</span>: <span class="keyword">Any</span>] <span class="operator">=</span> [</span><br><span class="line">            <span class="string">&quot;model&quot;</span>: <span class="string">&quot;gpt-4-turbo&quot;</span>,</span><br><span class="line">            <span class="string">&quot;messages&quot;</span>: [message],</span><br><span class="line">            <span class="string">&quot;max_tokens&quot;</span>: <span class="number">300</span></span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> jsonData <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">JSONSerialization</span>.data(withJSONObject: jsonBody, options: []) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;无法构建JSON体&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        request.httpBody <span class="operator">=</span> jsonData</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 发送网络请求</span></span><br><span class="line">        <span class="keyword">let</span> task <span class="operator">=</span> <span class="type">URLSession</span>.shared.dataTask(with: request) &#123; data, response, error <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> error <span class="operator">=</span> error &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;请求错误: <span class="subst">\(error)</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> data <span class="operator">=</span> data <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;未收到数据&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> responseJSON <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">JSONSerialization</span>.jsonObject(with: data, options: []) <span class="keyword">as?</span> [<span class="type">String</span>: <span class="keyword">Any</span>],</span><br><span class="line">               <span class="keyword">let</span> choices <span class="operator">=</span> responseJSON[<span class="string">&quot;choices&quot;</span>] <span class="keyword">as?</span> [[<span class="type">String</span>: <span class="keyword">Any</span>]],</span><br><span class="line">               <span class="keyword">let</span> message <span class="operator">=</span> choices.first<span class="operator">?</span>[<span class="string">&quot;message&quot;</span>] <span class="keyword">as?</span> [<span class="type">String</span>: <span class="keyword">Any</span>],</span><br><span class="line">               <span class="keyword">let</span> content <span class="operator">=</span> message[<span class="string">&quot;content&quot;</span>] <span class="keyword">as?</span> <span class="type">String</span> &#123;</span><br><span class="line">                <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                    <span class="keyword">self</span>.speechHelper.speak(text: content)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;识别结果: <span class="subst">\(content)</span>&quot;</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;无法解析响应数据&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        task.resume()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 触摸开始时调用的方法</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">touchesBegan</span>(<span class="keyword">_</span> <span class="params">touches</span>: <span class="type">Set</span>&lt;<span class="type">UITouch</span>&gt;, <span class="params">with</span> <span class="params">event</span>: <span class="type">UIEvent</span>?) &#123;</span><br><span class="line">        <span class="keyword">super</span>.touchesBegan(touches, with: event)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> touch <span class="operator">=</span> touches.first &#123;</span><br><span class="line">            <span class="keyword">let</span> point <span class="operator">=</span> touch.location(in: <span class="keyword">self</span>)</span><br><span class="line">            updateCurrentStrokeRect(with: point) <span class="comment">// 更新笔画矩形区域</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 触摸移动时调用的方法</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">touchesMoved</span>(<span class="keyword">_</span> <span class="params">touches</span>: <span class="type">Set</span>&lt;<span class="type">UITouch</span>&gt;, <span class="params">with</span> <span class="params">event</span>: <span class="type">UIEvent</span>?) &#123;</span><br><span class="line">        <span class="keyword">super</span>.touchesMoved(touches, with: event)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> touch <span class="operator">=</span> touches.first &#123;</span><br><span class="line">            <span class="keyword">let</span> point <span class="operator">=</span> touch.location(in: <span class="keyword">self</span>)</span><br><span class="line">            updateCurrentStrokeRect(with: point) <span class="comment">// 更新笔画矩形区域</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 触摸结束时调用的方法</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">touchesEnded</span>(<span class="keyword">_</span> <span class="params">touches</span>: <span class="type">Set</span>&lt;<span class="type">UITouch</span>&gt;, <span class="params">with</span> <span class="params">event</span>: <span class="type">UIEvent</span>?) &#123;</span><br><span class="line">        <span class="keyword">super</span>.touchesEnded(touches, with: event)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> touch <span class="operator">=</span> touches.first &#123;</span><br><span class="line">            <span class="keyword">let</span> point <span class="operator">=</span> touch.location(in: <span class="keyword">self</span>)</span><br><span class="line">            updateCurrentStrokeRect(with: point) <span class="comment">// 更新笔画矩形区域</span></span><br><span class="line">        &#125;</span><br><span class="line">        resetTimer() <span class="comment">// 重置定时器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu服务器端部署大模型</title>
      <link href="/posts/41e32035.html"/>
      <url>/posts/41e32035.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu服务器端部署大模型"><a href="#Ubuntu服务器端部署大模型" class="headerlink" title="Ubuntu服务器端部署大模型"></a>Ubuntu服务器端部署大模型</h1><h2 id="调用Ollama"><a href="#调用Ollama" class="headerlink" title="调用Ollama"></a>调用Ollama</h2><p>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://ollama.com/install.sh | sh</span><br></pre></td></tr></table></figure><p>docker方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --gpus=all -v ~/ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v ~/ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama</span><br></pre></td></tr></table></figure><h2 id="开启ollama服务端"><a href="#开启ollama服务端" class="headerlink" title="开启ollama服务端"></a>开启ollama服务端</h2><p>好像也不需要？可能是用于在后台运行的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama serve</span><br></pre></td></tr></table></figure><h2 id="下载模型"><a href="#下载模型" class="headerlink" title="下载模型"></a>下载模型</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama run llama2-chinese:latest</span><br></pre></td></tr></table></figure><p>docker方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it ollama ollama run llama2-chinese</span><br></pre></td></tr></table></figure><h2 id="运行大模型WebUI"><a href="#运行大模型WebUI" class="headerlink" title="运行大模型WebUI"></a>运行大模型WebUI</h2><p>文档：<a href="https://docs.openwebui.com/getting-started/">🚀 Getting Started | Open WebUI</a></p><p>此处使用开源项目<code>openwebui</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --gpus=all -d -p 3000:8080 -e HF_ENDPOINT=https://hf-mirror.com/ -e OLLAMA_BASE_URL=http://10.248.68.50:11434 -v ~/open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main</span><br></pre></td></tr></table></figure><h3 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h3><ol><li>huggingface.co 的连接问题</li></ol><p>   去<code>docker logs -f open-webui</code>获取到错误日志，虽然日志超级无敌长，但是关键词是hugging face</p><p>   截取部分日志</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host=<span class="string">&#x27;huggingface.co&#x27;</span>, port=443): Max retries exceeded with url: /sentence-transformers/all-MiniLM-L6-v2/resolve/main/config.json (Caused by ConnectTimeoutError(&lt;urllib3.connection.HTTPSConnection object at 0x7fd5bc4d0510&gt;, <span class="string">&#x27;Connection to huggingface.co timed out. (connect timeout=10)&#x27;</span>))</span><br></pre></td></tr></table></figure><ol start="2"><li><p>docker内部的网络隔离问题<br>ollama也是通过docker进行部署的，如果这样的情况下，两个不同的<code>Container</code>中是无法通过<code>--add-host=host.docker.internal:host-gateway</code>命令进行连接的，需要通过IP+地址的方式进行访问或者将其放置到<code>Compose</code>中形成一个内部网络</p><p>Linux - Ollama 和 Open WebUI 在容器中，在不同的网络中</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E6%88%AA%E5%B1%8F2024-07-06%2020.17.33.png" alt="截屏2024-07-06 20.17.33"></p><p>Linux - 主机本地上的Ollama，在容器中打开WebUI<br><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E6%88%AA%E5%B1%8F2024-07-06%2020.16.26.png" alt="截屏2024-07-06 20.16.26"><br>Linux - Ollama 和 Open WebUI 在同一个 Compose 堆栈中</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E6%88%AA%E5%B1%8F2024-07-06%2020.17.23.png" alt="截屏2024-07-06 20.17.23"></p></li></ol><h2 id="通过服务器返回数据"><a href="#通过服务器返回数据" class="headerlink" title="通过服务器返回数据"></a>通过服务器返回数据</h2><p>返回格式参考：<a href="https://ollama.fan/reference/api/#endpoints">API 参考 - Ollama中文网</a></p><p>默认启动后就会启动API的服务</p><p><code>http://127.0.0.1:11434/api/generate</code></p><h2 id="微调模型"><a href="#微调模型" class="headerlink" title="微调模型"></a>微调模型</h2><p>使用<code>LLaMA-Factory</code>进行微调</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 导出模型</span></span><br><span class="line"></span><br><span class="line">原文：[Ollama 运行 GGUF 模型_51CTO博客_olap模型](https://blog.51cto.com/u_15588078/10133275<span class="comment">#:~:text=Ollama 加载GGUF模型文件 1 1、创建模型配置文件 创建一个包含以下内容的模型配置文件，比如%3A causallm7bq5.mf 这个文件名，文件内容如下： FROM,ollama run c7b &quot;请写一个情色幽默笑话&quot; 1. 您得到的结果将与我得到的结果不同，因为这些模型是随机的，下面是我在其中一次尝试中得到的输出： 不同的尝试，会有不同的惊喜， )</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">要求进行INT量化，导出为后缀为`.gguf`的模型</span><br><span class="line"></span><br><span class="line">然后新建一个`.mf`，里面是导出后的模型的位置</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">FROM /Users/tec/Downloads/model-unsloth.Q4_K_M.gguf</span><br></pre></td></tr></table></figure><p>然后运行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama create nftchat -f ./causallm7bq5.mf</span><br></pre></td></tr></table></figure><h2 id="API调用"><a href="#API调用" class="headerlink" title="API调用"></a>API调用</h2><p>ChatGLM3&#x2F;openai_api_demo&#x2F;api_server.py</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python api_server.py</span><br></pre></td></tr></table></figure><p>LLaMA-Factory&#x2F;src&#x2F;api.py</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CUDA_VISIBLE_DEVICES=0 API_PORT=8000 python src/api.py \</span><br><span class="line">--model_name_or_path /home/ypy/langchan/LLaMA-Factory/saves/AIChat \</span><br><span class="line">--template chatglm2 </span><br><span class="line">--infer_backend vllm </span><br><span class="line">--vllm_enforce_eager</span><br></pre></td></tr></table></figure><p>vLLM</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python -m vllm.entrypoints.openai.api_server \</span><br><span class="line">   --model /home/ypy/langchan/LLaMA-Factory/saves/AIChat \</span><br><span class="line">   --trust-remote-code \</span><br><span class="line">   --served-model-name AIChat \</span><br><span class="line">   --port 8000</span><br></pre></td></tr></table></figure><h1 id="Ubuntu服务器端部署Stable-Diffusion"><a href="#Ubuntu服务器端部署Stable-Diffusion" class="headerlink" title="Ubuntu服务器端部署Stable Diffusion"></a>Ubuntu服务器端部署Stable Diffusion</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/AUTOMATIC1111/stable-diffusion-webui.git</span><br></pre></td></tr></table></figure><p>docker安装</p><p>注意需要最新版本的compose</p><p>以Ubuntu 22.04为例，采用AbdBarho维护的docker-compose，仅支持Nvidia显卡。</p><ol><li>拷贝AbdBarho的保存库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/AbdBarho/stable-diffusion-webui-docker.git</span><br><span class="line"><span class="built_in">cd</span> stable-diffusion-webui-docker</span><br></pre></td></tr></table></figure><ol start="2"><li>安装依赖套件，过程中会自动下载一个Stable Diffusion的模型。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose --profile download up --build</span><br></pre></td></tr></table></figure><ol start="3"><li>启动容器，选取auto代表启动AUTOMATIC1111开发的WebUI</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose --profile auto up --build</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>这里注意<code>webui.py</code>的位置，下面的命令，会根据系统配置，默认配置好项目环境，并安装好项目依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./webui.sh</span><br></pre></td></tr></table></figure><p>注意需要先使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br></pre></td></tr></table></figure><p>下面同时配置了外网通过IP访问，以及API访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./webui.sh --listen --api</span><br></pre></td></tr></table></figure><p>上面的这些命令可以直接在<code>webui-user.sh</code>中进行集成</p><p>在<code>COMMANDLINE_ARGS</code>中指定需要的命令，之后直接执行<code>./webui.sh</code>就可以携带上这些命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#########################################################</span></span><br><span class="line"><span class="comment"># Uncomment and change the variables below to your need:#</span></span><br><span class="line"><span class="comment">#########################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install directory without trailing slash</span></span><br><span class="line"><span class="comment">#install_dir=&quot;/home/$(whoami)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name of the subdirectory</span></span><br><span class="line"><span class="comment">#clone_dir=&quot;stable-diffusion-webui&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Commandline arguments for webui.py, for example: export COMMANDLINE_ARGS=&quot;--medvram --opt-split-attention&quot;</span></span><br><span class="line"><span class="built_in">export</span> COMMANDLINE_ARGS=<span class="string">&quot;--listen --api --enable-insecure-extension-access&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python3 executable</span></span><br><span class="line"><span class="comment">#python_cmd=&quot;python3&quot;</span></span><br></pre></td></tr></table></figure><h3 id="启动报错"><a href="#启动报错" class="headerlink" title="启动报错"></a>启动报错</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot locate TCMalloc (improves CPU memory usage)</span><br></pre></td></tr></table></figure><p><strong>解决</strong>：安装 <code>libgoogle-perftools4</code> 和 <code>libtcmalloc-minimal4</code> 库。这两个库是 Google 开源的性能分析工具库，可以帮助开发者优化程序性能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libgoogle-perftools4 libtcmalloc-minimal4 -y</span><br></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>进入下面的地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:7860</span><br></pre></td></tr></table></figure><p>API访问则使用下面的地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:7860/sdapi/v1/txt2img -H <span class="string">&quot;Content-Type: application/json&quot;</span> -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;prompt&quot;: &quot;a futuristic cityscape&quot;,</span></span><br><span class="line"><span class="string">    &quot;steps&quot;: 20</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="添加扩展"><a href="#添加扩展" class="headerlink" title="添加扩展"></a>添加扩展</h2><h3 id="安装中文和双语界面"><a href="#安装中文和双语界面" class="headerlink" title="安装中文和双语界面"></a>安装中文和双语界面</h3><ul><li>正体中文扩充功能来源：<a href="https://github.com/benlisquare/stable-diffusion-webui-localization-zh_TW">benlisquare&#x2F;stable-diffusion-webui-localization-zh_TW</a></li><li>简体中文扩充功能来源：<a href="https://github.com/dtlnor/stable-diffusion-webui-localization-zh_CN">dtlnor&#x2F;stable-diffusion-webui-localization-zh_CN</a></li></ul><p>Stable Diffusion WebUI可以通过扩充功能将界面变成中文。如果您想协助翻译，请点击以上的Github保存库链接，帮帮他们。</p><ol><li>进入Extensions页面，取消勾选<code>localization</code>，再点击<code>Load from:</code>，找到<code>zh_TW Localization</code>或<code>zh_CN Localization</code>，点击Install。</li></ol><p><a href="https://docs.stablediffusion.cn/images/localizations-1.webp"><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/localizations-1.webp" alt="img"></a></p><ol start="2"><li>到Settings页面，找到左边的Localization，点击<code>zh-tw</code>或<code>zh-cn</code>，再点击<code>Apply Settings</code>。</li></ol><p><a href="https://docs.stablediffusion.cn/images/localizations-2.webp"><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/localizations-2.webp" alt="img"></a></p><ol start="3"><li>之后重启WebUI，界面就会变成中文了。</li></ol><p><a href="https://github.com/journey-ad/sd-webui-bilingual-localization/blob/main/README_ZH.md">sd-webui-bilingual-localization&#x2F;README_ZH.md at main · journey-ad&#x2F;sd-webui-bilingual-localization (github.com)</a></p><p>由于SD WebUI的扩充功能发展太快，翻译可能跟不上，建议另外安装双语对照<a href="https://github.com/journey-ad/sd-webui-bilingual-localization">sd-webui-bilingual-localization</a>，同时显示中文和英文的文本，这样看教学时就不会找无按钮了。</p><p>双语扩充功能安装方法：在Extensions页面按<code>Install from URL</code>，填入<code>https://github.com/journey-ad/sd-webui-bilingual-localization</code>，再按<code>Install</code>。</p><p>在激活双语扩充功能前，要到Settings → User interface → Localization设为None</p><p>接着到<code>Bilingual Localization</code>中去把这里面的<code>Localization</code>修改为<code>zh_CN</code>，再重启WebUI才会生效。</p><p><a href="https://docs.stablediffusion.cn/images/localizations-3.webp"><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/localizations-3.webp" alt="img"></a></p><h3 id="BUG-1"><a href="#BUG-1" class="headerlink" title="BUG"></a>BUG</h3><p>报错如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AssertionError: extension access disabled because of <span class="built_in">command</span> line flags</span><br></pre></td></tr></table></figure><p>原因是开启了<code>--listen</code>的命令，官方出于安全考虑，在外网访问时是不能安装任何扩展的，所以需要加上<code>--enable-insecure-extension-access</code>的命令，用于绕开这个安全选项</p><h2 id="大模型（基座模型，底模）添加"><a href="#大模型（基座模型，底模）添加" class="headerlink" title="大模型（基座模型，底模）添加"></a>大模型（基座模型，底模）添加</h2><p>可以进入<code>https://civitai.com/</code>的Models部分进行下载，后缀为<code>ckpt</code>，为<code>Checkpoint</code>的缩写</p><p>模型权重下载好后，需要将模型放到对应的文件夹中，这里最常用的是：大模型 和 微调的LoRA 模型，分别放在 <code>models/stable-diffusion</code> 和 <code>models/Lora</code>下，启动后，WebUI 会自动从这几个文件夹中找到对应的模型</p><p>类梵高：</p><p>1、Van Gogh Diffusion：<a href="https://civitai.com/models/91/van-gogh-diffusion">Van Gogh Diffusion - V1 | Stable Diffusion Checkpoint | Civitai</a></p><p>2、Van Gogh Style（Lora）：<a href="https://civitai.com/models/100873/van-gogh-style">奇维泰 |共享您的模型 (civitai.com)</a></p><p>水墨风：</p><p>1、国画山水和水墨山水Chinese Landscape Art：<a href="https://civitai.com/models/120298/chinese-landscape-art">国画山水和水墨山水Chinese Landscape Art - v1.0 | Stable Diffusion Checkpoint | Civitai</a></p><p>像素风：</p><p>1、PixelStyleCKPT&#x2F;像素画：<a href="https://civitai.com/models/85953/pixelstyleckpt">PixelStyleCKPT&#x2F;像素画 - Strength:0.7 | Stable Diffusion Checkpoint | Civitai</a></p><p>2、像素人：<a href="https://civitai.com/models/44960/mpixel">Application error: a client-side exception has occurred (civitai.com)</a></p><p>3、Pixel Art XL：<a href="https://civitai.com/models/120096/pixel-art-xl">Pixel Art XL - v1.1 | Stable Diffusion LoRA | Civitai</a></p><p>莫奈风：</p><p>下面为lora模型，lora还不知道怎么使用</p><p>1、Claude Monet&#x2F;Oscar-Claude Monet style：<a href="https://civitai.com/models/73902/claude-monetoscar-claude-monet-style">Claude Monet&#x2F;Oscar-Claude Monet style - v2.0 | Stable Diffusion LoRA | Civitai</a></p><p>赛伯朋克风：</p><p>1、赛博世界&#x2F;Cyberworld&#x2F;赛博朋克场景 Lora：<a href="https://civitai.com/models/95656/cyberworld-lora">赛博世界&#x2F;Cyberworld&#x2F;赛博朋克场景 Lora - v1.0 | Stable Diffusion LoRA | Civitai</a></p><p>科幻风：</p><p>1、XSArchi_127新科幻Neo Sci-Fi：<a href="https://civitai.com/models/100287/xsarchi127neo-sci-fi">XSArchi_127新科幻Neo Sci-Fi - v1.0 | Stable Diffusion LoRA | Civitai</a></p><h2 id="文生图API参数调整"><a href="#文生图API参数调整" class="headerlink" title="文生图API参数调整"></a>文生图API参数调整</h2><p>参数含义：</p><p>在Stable Diffusion Web UI中，使用API时可以传递各种参数来控制图像生成的过程。以下是一些常见的API参数及其说明：</p><p>参考：<a href="https://blog.csdn.net/Python_anning/article/details/135269356">全网最全stable diffusion webui API调用示例，包含controlneth和segment anything的API（附json示例）-CSDN博客</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;prompt&quot;</span>: <span class="string">&quot;提示词&quot;</span>,</span><br><span class="line">    <span class="string">&quot;negative_prompt&quot;</span>: <span class="string">&quot;反向提示词&quot;</span>,</span><br><span class="line">    <span class="string">&quot;seed&quot;</span>: -1,  <span class="comment"># 随机种子</span></span><br><span class="line">    <span class="string">&quot;sampler_name&quot;</span>: <span class="string">&quot;取样器（之间复制webui的名字就行）&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cfg_scale&quot;</span>: 7.5,  <span class="comment"># 提示词相关性 越大越接近提示词</span></span><br><span class="line">    <span class="string">&quot;width&quot;</span>: 640,  <span class="comment"># 宽 （注意要被16整除）</span></span><br><span class="line">    <span class="string">&quot;height&quot;</span>: 360,  <span class="comment"># 高 （注意要被16整除）</span></span><br><span class="line">    <span class="string">&quot;batch_size&quot;</span>: 4,  <span class="comment"># 批量数量 并行 显存不够会爆显存</span></span><br><span class="line">    <span class="string">&quot;n_iter&quot;</span>: 4,  <span class="comment"># 批量数量 队列 显存不够排队一个一个来 和 batch_size 二选一</span></span><br><span class="line">    <span class="string">&quot;steps&quot;</span>: 30,  <span class="comment"># 迭代步数</span></span><br><span class="line">    <span class="string">&quot;return_grid&quot;</span>: True,  <span class="comment"># 返回网格预览 xl-base 好像没用</span></span><br><span class="line">    <span class="string">&quot;restore_faces&quot;</span>: True,  <span class="comment"># 脸部修复</span></span><br><span class="line">    <span class="string">&quot;send_images&quot;</span>: True,  <span class="comment"># 是否在响应中返回生成的图像</span></span><br><span class="line">    <span class="string">&quot;save_images&quot;</span>: False,  <span class="comment"># 是否保存生成的图像 一般api设置成False</span></span><br><span class="line">    <span class="string">&quot;do_not_save_samples&quot;</span>: False,  <span class="comment"># 是否保存samples 一般api设置成False</span></span><br><span class="line">    <span class="string">&quot;do_not_save_grid&quot;</span>: False,  <span class="comment"># 是否保存网格的图像 一般api设置成False</span></span><br><span class="line">    <span class="comment"># 下面的很少用</span></span><br><span class="line">    <span class="string">&quot;enable_hr&quot;</span>: True,  <span class="comment"># 是否开启高清修复</span></span><br><span class="line">    <span class="string">&quot;denoising_strength&quot;</span>: 0.5,  <span class="comment"># 去噪强度 要求enable_hr = True</span></span><br><span class="line">    <span class="string">&quot;firstphase_width&quot;</span>: 0,</span><br><span class="line">    <span class="comment"># firstphase_width 和firstphase_height 定义了图像的初始分辨率。在图像生成的第一阶段，这些值决定了图像的大小。如果这些值设置为0，系统可能会使用默认或预设的分辨率。</span></span><br><span class="line">    <span class="string">&quot;firstphase_height&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;hr_scale&quot;</span>: 2,  <span class="comment"># 放大倍数 对应webui Upscale by</span></span><br><span class="line">    <span class="string">&quot;hr_upscaler&quot;</span>: <span class="string">&quot;string&quot;</span>,  <span class="comment"># 对应webui 的 Upscaler</span></span><br><span class="line">    <span class="string">&quot;hr_second_pass_steps&quot;</span>: 0,  <span class="comment"># 迭代步数 对应webui 的 Hires steps。</span></span><br><span class="line">    <span class="string">&quot;hr_resize_x&quot;</span>: 0,  <span class="comment"># 不放大，指定宽高 对应webui Resize width to 和Resize height to</span></span><br><span class="line">    <span class="string">&quot;hr_resize_y&quot;</span>: 0,  <span class="comment"># 不放大，指定宽高 对应webui Resize width to 和Resize height to</span></span><br><span class="line">    <span class="string">&quot;hr_checkpoint_name&quot;</span>: <span class="string">&quot;string&quot;</span>,  <span class="comment"># 高分辨率模式下使用的大模型昵称。</span></span><br><span class="line">    <span class="string">&quot;hr_sampler_name&quot;</span>: <span class="string">&quot;string&quot;</span>,  <span class="comment"># 高分辨率模式下使用的采样器名称。</span></span><br><span class="line">    <span class="string">&quot;hr_prompt&quot;</span>: <span class="string">&quot;&quot;</span>,  <span class="comment"># 高分辨率模式下使用的提示词名称。</span></span><br><span class="line">    <span class="string">&quot;hr_negative_prompt&quot;</span>: <span class="string">&quot;&quot;</span>,  <span class="comment"># 高分辨率模式下使用的反向提示词名称。</span></span><br><span class="line">    <span class="string">&quot;override_settings&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;sd_model_checkpoint&quot;</span>: <span class="string">&quot;sd_xl_base_1.0.safetensors [31e35c80fc]&quot;</span>,  <span class="comment"># 指定大模型</span></span><br><span class="line">          <span class="string">&quot;sd_vae&quot;</span>: <span class="string">&quot;Automatic&quot;</span>,  <span class="comment"># 指定vae 默认自动</span></span><br><span class="line">      &#125;,</span><br><span class="line">    <span class="string">&quot;override_settings_restore_afterwards&quot;</span>: True <span class="comment"># override_settings 是否在之后恢复覆盖的设置 默认是True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通用参数"><a href="#通用参数" class="headerlink" title="通用参数"></a>通用参数</h3><p>这些参数适用于大多数API端点，例如<code>/sdapi/v1/txt2img</code>和<code>/sdapi/v1/img2img</code>。</p><ul><li><code>prompt</code> (str): 文本提示，用于描述要生成的图像内容。例如：”a futuristic cityscape”。</li><li><code>steps</code> (int): 采样步骤数。值越高，图像质量越好，但生成时间也越长。常用值在20-50之间。</li><li><code>sampler_index</code> (int): 采样方法索引，默认为0。可以使用不同的采样方法（例如DDIM、PLMS）。</li><li><code>cfg_scale</code> (float): Classifier-Free Guidance (CFG) 比例，控制生成图像与提示的相关性。值越高，图像越接近提示内容。常用值在7-15之间。</li><li><code>seed</code> (int): 随机种子，用于控制生成图像的随机性。相同的种子和参数会生成相同的图像。</li><li><code>height</code> (int): 生成图像的高度，默认值通常是512。</li><li><code>width</code> (int): 生成图像的宽度，默认值通常是512。</li><li><code>batch_size</code> (int): 一次生成的图像数量。</li><li><code>n_iter</code> (int): 生成图像的迭代次数。一次请求中生成的图像总数等于<code>batch_size * n_iter</code>。</li><li><code>negative_prompt</code> (str): 负面提示，用于描述不希望在图像中出现的内容。</li><li><code>eta</code> (float): DDIM采样中的eta参数，控制随机性。</li><li><code>ckpt</code>:在API请求中，通过指定ckpt或model参数来选择要使用的模型</li></ul><h3 id="特定参数"><a href="#特定参数" class="headerlink" title="特定参数"></a>特定参数</h3><p>这些参数适用于特定的API端点，例如<code>/sdapi/v1/img2img</code>。</p><ul><li><code>init_images</code> (list of str): 输入图像的Base64编码列表，用于img2img任务。</li><li><code>denoising_strength</code> (float): 降噪强度，用于img2img任务。值越高，生成图像与输入图像的差异越大。常用值在0.2-0.8之间。</li><li><code>mask</code> (str): 掩码图像的Base64编码，用于指定图像的哪些部分需要重绘。</li><li><code>inpainting_fill</code> (int): 修补时使用的填充方式。</li></ul><h3 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h3><p>以下是一个使用<code>/sdapi/v1/txt2img</code>端点的完整示例，展示了常用参数的用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置API端点</span></span><br><span class="line">url = <span class="string">&quot;http://localhost:7860/sdapi/v1/txt2img&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置请求数据</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;prompt&quot;</span>: <span class="string">&quot;a futuristic cityscape&quot;</span>,</span><br><span class="line">    <span class="string">&quot;steps&quot;</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="string">&quot;sampler_index&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;cfg_scale&quot;</span>: <span class="number">10.0</span>,</span><br><span class="line">    <span class="string">&quot;seed&quot;</span>: <span class="number">42</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>: <span class="number">512</span>,</span><br><span class="line">    <span class="string">&quot;width&quot;</span>: <span class="number">512</span>,</span><br><span class="line">    <span class="string">&quot;batch_size&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;n_iter&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;negative_prompt&quot;</span>: <span class="string">&quot;no people, no animals&quot;</span>,</span><br><span class="line">    <span class="string">&quot;eta&quot;</span>: <span class="number">0.0</span>,</span><br><span class="line">  <span class="string">&quot;ckpt&quot;</span>: <span class="string">&quot;models/Stable-diffusion/model1.ckpt&quot;</span>  <span class="comment"># 指定模型路径</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送POST请求</span></span><br><span class="line">response = requests.post(url, headers=&#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;, data=json.dumps(data))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印响应</span></span><br><span class="line"><span class="built_in">print</span>(response.json())</span><br></pre></td></tr></table></figure><h3 id="API端点"><a href="#API端点" class="headerlink" title="API端点"></a>API端点</h3><ol><li><code>/sdapi/v1/txt2img</code>: 基于文本提示生成图像。</li><li><code>/sdapi/v1/img2img</code>: 基于输入图像和文本提示生成新图像。</li><li><code>/sdapi/v1/extra</code>: 执行额外的图像处理任务。</li></ol><h3 id="参数说明总结"><a href="#参数说明总结" class="headerlink" title="参数说明总结"></a>参数说明总结</h3><ul><li><strong><code>prompt</code></strong>: 输入的文本描述。</li><li><strong><code>steps</code></strong>: 采样步骤数。</li><li><strong><code>sampler_index</code></strong>: 采样方法索引。</li><li><strong><code>cfg_scale</code></strong>: Classifier-Free Guidance比例。</li><li><strong><code>seed</code></strong>: 随机种子。</li><li><strong><code>height</code></strong>: 图像高度。</li><li><strong><code>width</code></strong>: 图像宽度。</li><li><strong><code>batch_size</code></strong>: 批量生成数量。</li><li><strong><code>n_iter</code></strong>: 生成迭代次数。</li><li><strong><code>negative_prompt</code></strong>: 负面提示。</li><li><strong><code>eta</code></strong>: DDIM采样中的eta参数。</li><li><strong><code>init_images</code></strong>: 输入图像列表（用于img2img）。</li><li><strong><code>denoising_strength</code></strong>: 降噪强度（用于img2img）。</li><li><strong><code>mask</code></strong>: 掩码图像。</li><li><strong><code>inpainting_fill</code></strong>: 修补填充方式。</li></ul><p>通过这些参数，你可以高度自定义图像生成过程，满足各种应用需求。如果你有任何其他问题或需要更详细的说明，请随时告诉我。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>仿梵高的向日葵</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prompt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vg,&lt;lora:vgv1-000009:0.9&gt;,vibrant sunflowers chasing the sun,details,&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;negative_prompt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;easynegative bad-hands-5,&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;steps&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cfg_scale&quot;</span><span class="punctuation">:</span> <span class="number">7.0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;height&quot;</span><span class="punctuation">:</span> <span class="number">1024</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;width&quot;</span><span class="punctuation">:</span> <span class="number">512</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sampler_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DPM++ 2M SDE&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>仿莫奈的睡莲</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prompt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;lora:monet_v2-000004:1&gt;,painting (medium), lake, water lilies&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;negative_prompt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sketches, out of frame, lowres, text, error, cropped, worst quality, low quality, jpeg artifacts, ugly, duplicate, morbid, mutilated, out of frame, extra fingers, mutated hands, poorly drawn hands, poorly drawn face, mutation, deformed, blurry, dehydrated, bad anatomy, bad proportions, extra limbs, cloned face, disfigured, gross proportions, malformed limbs, missing arms, missing legs, extra arms, extra legs, fused fingers, too many fingers, long neck, username, watermark, signature&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;steps&quot;</span><span class="punctuation">:</span> <span class="number">50</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cfg_scale&quot;</span><span class="punctuation">:</span> <span class="number">7.0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;height&quot;</span><span class="punctuation">:</span> <span class="number">1024</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;width&quot;</span><span class="punctuation">:</span> <span class="number">512</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sampler_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DPM++ 2M SDE&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="BUG-2"><a href="#BUG-2" class="headerlink" title="BUG"></a>BUG</h3><p>访问后出现下面的返回</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;detail&quot;</span>: <span class="string">&quot;Not Found&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考解决：[<a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui/issues/13279">错误]：我没有 &#x2F;sdapi&#x2F;v1&#x2F;txt2img 在稳定扩散中填充 ·问题 #13279 ·AUTOMATIC1111&#x2F;stable-diffusion-webui (github.com)</a></p><p>这是端口问题导致的BUG，glm把7860端口占了，所以只能使用7861端口，以后要是无法启动，注意观察终端端口输出</p><h2 id="获取图片进度API"><a href="#获取图片进度API" class="headerlink" title="获取图片进度API"></a>获取图片进度API</h2><p>目前猜测实现方式是，在进行文生图API后，马上调用<code>http://127.0.0.1:7860/sdapi/v1/progress?skip_current_image=false</code></p><p>这个API，每秒访问一次，不过这个参数<code>skip_current_image</code>含义，还得到时候再试试</p><h1 id="Ubuntu服务器端配置外网访问"><a href="#Ubuntu服务器端配置外网访问" class="headerlink" title="Ubuntu服务器端配置外网访问"></a>Ubuntu服务器端配置外网访问</h1><p>使用<code>clash</code>进行配置，由于官方的项目已经跑路，这里选择的项目为:</p><p><a href="https://github.com/Elegycloud/clash-for-linux-backup">Elegycloud&#x2F;clash-for-linux-backup: 基于Clash Core 制作的Clash For Linux备份仓库 A Clash For Linux Backup Warehouse Based on Clash Core (github.com)</a></p><p>详细可见和xyc的聊天记录，哪天自己也再去配置一下</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Express学习</title>
      <link href="/posts/83a155e2.html"/>
      <url>/posts/83a155e2.html</url>
      
        <content type="html"><![CDATA[<h1 id="介绍与安装"><a href="#介绍与安装" class="headerlink" title="介绍与安装"></a>介绍与安装</h1><p>Express 是一个基于 Node.js 平台的 web 应用开发框架，提供了一系列强大而灵活的功能，用于创建单页、多页及混合应用。它是目前最流行的 Node.js 框架之一。</p><p>安装 Express 及其生成器工具可以使用以下命令：</p><p>使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npx --package express-generator express</span><br></pre></td></tr></table></figure><p>这将会在当前目录下创建一个新的 Express 项目。</p><p>常用依赖</p><p>在项目中，我们常常会使用 <code>nodemon</code> 来自动重启服务器，便于开发。可以在 <code>package.json</code> 文件中添加以下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon ./bin/www&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;nodemon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.7&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h1><p>在 Express 中，发送数据到客户端有多种方式，可以发送文本、JSON、文件等。以下是一些常用的方法及其详细说明：</p><ol><li><p><strong><code>res.send()</code></strong>:</p><ul><li>用于发送字符串、Buffer 或对象作为响应体。</li><li>自动设置 <code>Content-Type</code>，如果发送的是对象，会设置为 <code>application/json</code>。</li><li>示例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/buffer&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;Hello Buffer!&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/object&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;Hello, Object!&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>res.json()</code></strong>:</p><ul><li>用于发送 JSON 响应，自动设置 <code>Content-Type: application/json</code>。</li><li>相当于 <code>res.send()</code> 的对象版本，但更明确。</li><li>示例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/data&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;Hello, JSON!&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>res.jsonp()</code></strong>:</p><ul><li>用于发送 JSONP 响应，可以解决跨域问题。</li><li>自动设置 <code>Content-Type: application/javascript</code>，并包装 JSON 响应在一个回调函数中。</li><li>示例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/data&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">jsonp</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;Hello, JSONP!&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>res.sendFile()</code></strong>:</p><ul><li>用于发送文件作为响应体。</li><li>需要提供文件的绝对路径，通常使用 <code>__dirname</code> 来构建路径。</li><li>可以通过选项对象设置缓存控制等。</li><li>示例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/file&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">sendFile</span>(__dirname + <span class="string">&#x27;/file.txt&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/file-options&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">sendFile</span>(__dirname + <span class="string">&#x27;/file.txt&#x27;</span>, &#123; <span class="attr">cacheControl</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>res.download()</code></strong>:</p><ul><li>用于提示下载文件。</li><li>需要提供文件路径和可选的下载文件名。</li><li>示例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/download&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">download</span>(__dirname + <span class="string">&#x27;/file.txt&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/download-name&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">download</span>(__dirname + <span class="string">&#x27;/file.txt&#x27;</span>, <span class="string">&#x27;custom_name.txt&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>res.redirect()</code></strong>:</p><ul><li>用于重定向请求到另一个 URL。</li><li>可以传递 URL 或者状态码和 URL。</li><li>示例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/google&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">redirect</span>(<span class="string">&#x27;https://www.google.com&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/redirect-301&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">redirect</span>(<span class="number">301</span>, <span class="string">&#x27;https://www.google.com&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>res.render()</code></strong>:</p><ul><li>用于渲染视图模板，并将生成的 HTML 发送给客户端。</li><li>需要配置模板引擎。</li><li>示例（假设使用 Pug 模板引擎）：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;pug&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/template&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;Hey&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;Hello there!&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>res.end()</code></strong>:</p><ul><li>结束响应处理流程，通常用于流数据或手动发送响应头后。</li><li>示例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/end&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">write</span>(<span class="string">&#x27;Part of the response&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;The end of the response&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>使用这些方法，您可以灵活地处理和发送不同类型的响应数据，满足各种应用需求。</p><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>路由是应用程序的基本组成部分，负责定义应用程序的各个端点（URI）以及如何响应客户端请求。</p><p>路由就相当于一个小应用，所以它请求的方法和<code>app</code>是一样的。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>需要注意的是路由是从上而下叠加的，所以静态路由一般要注意放在动态路由上面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET users listing. */</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;respond with a resource&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在主应用中使用定义的路由模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">var</span> usersRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/users&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/users&#x27;</span>, usersRouter);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server is running on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="路由方法"><a href="#路由方法" class="headerlink" title="路由方法"></a>路由方法</h2><p>Express 提供多种路由方法，分别对应于 HTTP 的各种请求方法：<code>get</code>、<code>post</code>、<code>put</code>、<code>delete</code> 等。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Got a POST request&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">put</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Got a PUT request at /user&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">delete</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Got a DELETE request at /user&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>同时express提供了<code>route</code>用于更方便的在同一个路径下面，调用不同的路由方法，同时<code>function</code>也可以使用箭头函数来简化<code>=&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">router</span><br><span class="line">  .<span class="title function_">route</span>(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">  .<span class="title function_">get</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Got a GET request&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">post</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Got a POST request&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">put</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Got a PUT request&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">delete</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Got a DELETE request&#x27;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h2><p>你可以在路由中使用参数，通过 <code>req.params</code> 获取：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user/:id&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;user id: &#x27;</span> + req.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>详细请见下面的主标题的内容</p><h2 id="路由分组"><a href="#路由分组" class="headerlink" title="路由分组"></a>路由分组</h2><p>你可以将相关的路由放在同一个路由器实例中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/about&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;About Page&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/contact&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Contact Page&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p>在主应用中引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">var</span> mainRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/main&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, mainRouter);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server is running on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>在路由中处理错误的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">err, req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="property">stack</span>);</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Something broke!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上是关于 Express 路由的详细笔记，涵盖了定义、使用、方法、参数、中间件、分组和错误处理等方面。</p><h1 id="中间件-1"><a href="#中间件-1" class="headerlink" title="中间件"></a>中间件</h1><p>中间件是 Express 应用程序中一个重要的概念，用于处理请求、响应以及应用程序之间的一系列操作。</p><ol><li><p>应用级中间件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Time:&#x27;</span>, <span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>路由级中间件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Request URL:&#x27;</span>, req.<span class="property">originalUrl</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router);</span><br></pre></td></tr></table></figure></li><li><p>错误处理中间件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="property">stack</span>);</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Something broke!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>第三方中间件（如 <code>body-parser</code> 用于解析请求体）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br></pre></td></tr></table></figure></li></ol><p>中间件位于发送到服务器的请求（app.get）和返回给用户的实际响应之间</p><p>同时中间件是否执行也取决于位于代码的位置，如果有请求代码位于中间件之前的话，该中间件则不会影响该请求代码</p><p>路由中间件是一种执行前后处理操作的方法。使用 <code>next</code> 参数可以传递控制权：</p><p><code>router.param</code>就是一个中间件函数，在我发送请求之前就运行，如果我不使用<code>next()</code>的话将不会执行发送请求的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Time:&#x27;</span>, <span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Home Page&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">param</span>(<span class="string">&quot;id&quot;</span>, <span class="function">(<span class="params">req, res, next, id</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(id);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, logger, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&quot;index&quot;</span>, &#123; <span class="attr">text</span>: <span class="string">&quot;world&quot;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&quot;./routes/users&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/users&quot;</span>, userRouter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logger</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">originalUrl</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种方式使用中间件的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 直接调用</span></span><br><span class="line">app.<span class="title function_">use</span>(logger)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&quot;index&quot;</span>, &#123; <span class="attr">text</span>: <span class="string">&quot;world&quot;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logger</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">originalUrl</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 在请求方法里面调用</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, logger, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&quot;index&quot;</span>, &#123; <span class="attr">text</span>: <span class="string">&quot;world&quot;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logger</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">originalUrl</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="解析表单-x2F-JSON数据"><a href="#解析表单-x2F-JSON数据" class="headerlink" title="解析表单&#x2F;JSON数据"></a>解析表单&#x2F;JSON数据</h1><p>在 Express 应用中，解析表单和 JSON 数据是处理客户端请求的关键步骤。Express 提供了中间件来处理这些数据。</p><h2 id="解析-URL-编码的表单数据"><a href="#解析-URL-编码的表单数据" class="headerlink" title="解析 URL 编码的表单数据"></a>解析 URL 编码的表单数据</h2><p>为了解析传统的表单数据，你可以使用 <code>express.urlencoded</code> 中间件。它会解析 <code>application/x-www-form-urlencoded</code> 编码的数据，这是标准的 HTML 表单提交的格式。</p><h3 id="使用-express-urlencoded"><a href="#使用-express-urlencoded" class="headerlink" title="使用 express.urlencoded"></a>使用 <code>express.urlencoded</code></h3><p>直接使用<code>req.body</code>的话，是无法获取的，因为express不允许访问bode的内容，所以我们需要借助中间件</p><p>注意这个<code>&#123; extended: true &#125;</code>不放的话，会有warning</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/submit-form&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Form data received&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server is running on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul><li><code>extended: true</code>：使用 <code>qs</code> 库解析 URL 编码数据，支持丰富的对象和数组结构。</li><li><code>extended: false</code>：使用 <code>querystring</code> 库解析 URL 编码数据，只支持简单的键值对。</li></ul><h2 id="解析-JSON-数据"><a href="#解析-JSON-数据" class="headerlink" title="解析 JSON 数据"></a>解析 JSON 数据</h2><p>为了解析 JSON 数据，你可以使用 <code>express.json</code> 中间件。它会解析 <code>application/json</code> 类型的数据，这在使用 API 时非常常见。</p><h3 id="使用-express-json"><a href="#使用-express-json" class="headerlink" title="使用 express.json"></a>使用 <code>express.json</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/submit-json&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;JSON data received&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server is running on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="处理文件上传"><a href="#处理文件上传" class="headerlink" title="处理文件上传"></a>处理文件上传</h2><p>如果需要处理文件上传，可以使用 <code>multer</code> 中间件。<code>multer</code> 是一个处理 <code>multipart/form-data</code> 的中间件，通常用于上传文件。</p><h3 id="安装-multer"><a href="#安装-multer" class="headerlink" title="安装 multer"></a>安装 <code>multer</code></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install multer</span><br></pre></td></tr></table></figure><h3 id="使用-multer"><a href="#使用-multer" class="headerlink" title="使用 multer"></a>使用 <code>multer</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> upload = <span class="title function_">multer</span>(&#123; <span class="attr">dest</span>: <span class="string">&#x27;uploads/&#x27;</span> &#125;);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, upload.<span class="title function_">single</span>(<span class="string">&#x27;file&#x27;</span>), <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">file</span>);</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;File uploaded successfully&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server is running on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h3><ul><li><code>dest</code>：指定文件上传后的保存路径。</li><li><code>upload.single(&#39;file&#39;)</code>：处理单个文件上传，<code>file</code> 是表单中 <code>&lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;</code> 的 <code>name</code> 属性。</li></ul><h2 id="中间件顺序"><a href="#中间件顺序" class="headerlink" title="中间件顺序"></a>中间件顺序</h2><p>确保解析中间件的顺序正确，应该在定义路由之前使用中间件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/upload&#x27;</span>, upload.<span class="title function_">single</span>(<span class="string">&#x27;file&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define routes here</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/submit-form&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// Handle form data</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/submit-json&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// Handle JSON data</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// Handle file upload</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="错误处理-1"><a href="#错误处理-1" class="headerlink" title="错误处理"></a>错误处理</h3><p>处理解析过程中可能出现的错误：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">err, req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="property">stack</span>);</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Something went wrong!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上是关于解析表单和 JSON 数据的详细笔记，包括了解析 URL 编码的表单数据、解析 JSON 数据、处理文件上传、确保中间件顺序以及错误处理等方面。</p><h1 id="框架代码解析"><a href="#框架代码解析" class="headerlink" title="框架代码解析"></a>框架代码解析</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">myapp</span><br><span class="line">├── app.js</span><br><span class="line">├── package.json</span><br><span class="line">├── bin</span><br><span class="line">│   └── www</span><br><span class="line">├── public</span><br><span class="line">│   ├── images</span><br><span class="line">│   ├── javascripts</span><br><span class="line">│   └── stylesheets</span><br><span class="line">│       └── style.css</span><br><span class="line">├── routes</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   └── users.js</span><br><span class="line">├── views</span><br><span class="line">│   ├── error.jade</span><br><span class="line">│   ├── index.jade</span><br><span class="line">│   └── layout.jade</span><br><span class="line">└── node_modules</span><br></pre></td></tr></table></figure><h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><p>这个<code>render</code>是专门用于渲染html的，然后后面这个<code>&#123; title: &#39;Express&#39; &#125;</code>实际上可以传任意对象，它的作用主要是把这个值传递给<code>index.jade</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;Express&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p>index.jade</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extends layout</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  h1= title</span><br><span class="line">  p Welcome to #&#123;title&#125;</span><br></pre></td></tr></table></figure><h2 id="x2F-bin-x2F-www-js"><a href="#x2F-bin-x2F-www-js" class="headerlink" title="&#x2F;bin&#x2F;www.js"></a>&#x2F;bin&#x2F;<a href="http://www.js/">www.js</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模块依赖.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">&#x27;../app&#x27;</span>); <span class="comment">// 引入应用程序实例</span></span><br><span class="line"><span class="keyword">var</span> debug = <span class="built_in">require</span>(<span class="string">&#x27;debug&#x27;</span>)(<span class="string">&#x27;ardemobackend:server&#x27;</span>); <span class="comment">// 引入debug模块并命名为ardemobackend:server</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>); <span class="comment">// 引入http模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从环境变量获取端口并存储在Express中.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> port = <span class="title function_">normalizePort</span>(process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="string">&#x27;3000&#x27;</span>); <span class="comment">// 获取环境变量中的端口号或默认使用3000端口</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;port&#x27;</span>, port); <span class="comment">// 将端口号设置到应用程序实例中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建HTTP服务器.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>(app); <span class="comment">// 用应用程序实例创建HTTP服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在所有网络接口上监听提供的端口.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(port); <span class="comment">// 服务器开始监听提供的端口</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, onError); <span class="comment">// 监听服务器错误事件并调用onError函数处理</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;listening&#x27;</span>, onListening); <span class="comment">// 监听服务器监听事件并调用onListening函数处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将端口规范化为一个数字，字符串，或false.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">normalizePort</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> port = <span class="built_in">parseInt</span>(val, <span class="number">10</span>); <span class="comment">// 将端口号字符串转换为整数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">isNaN</span>(port)) &#123;</span><br><span class="line">    <span class="comment">// 命名管道</span></span><br><span class="line">    <span class="keyword">return</span> val; <span class="comment">// 如果转换失败，则返回原始值（可能是命名管道）</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (port &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 端口号</span></span><br><span class="line">    <span class="keyword">return</span> port; <span class="comment">// 如果是有效端口号，则返回该端口号</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 其它情况返回false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HTTP服务器&quot;error&quot;事件的事件监听器.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onError</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (error.<span class="property">syscall</span> !== <span class="string">&#x27;listen&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> error; <span class="comment">// 如果错误不是监听错误，则抛出错误</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> bind = <span class="keyword">typeof</span> port === <span class="string">&#x27;string&#x27;</span></span><br><span class="line">      ? <span class="string">&#x27;Pipe &#x27;</span> + port <span class="comment">// 如果端口是字符串类型，则表示为命名管道</span></span><br><span class="line">      : <span class="string">&#x27;Port &#x27;</span> + port; <span class="comment">// 如果端口是数字类型，则表示为端口号</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用友好的消息处理特定的监听错误</span></span><br><span class="line">  <span class="keyword">switch</span> (error.<span class="property">code</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;EACCES&#x27;</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(bind + <span class="string">&#x27; requires elevated privileges&#x27;</span>); <span class="comment">// 端口需要更高权限</span></span><br><span class="line">      process.<span class="title function_">exit</span>(<span class="number">1</span>); <span class="comment">// 退出进程并返回状态码1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;EADDRINUSE&#x27;</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(bind + <span class="string">&#x27; is already in use&#x27;</span>); <span class="comment">// 端口已被占用</span></span><br><span class="line">      process.<span class="title function_">exit</span>(<span class="number">1</span>); <span class="comment">// 退出进程并返回状态码1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> error; <span class="comment">// 其它错误抛出</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HTTP服务器&quot;listening&quot;事件的事件监听器.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onListening</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> addr = server.<span class="title function_">address</span>(); <span class="comment">// 获取服务器地址信息</span></span><br><span class="line">  <span class="keyword">var</span> bind = <span class="keyword">typeof</span> addr === <span class="string">&#x27;string&#x27;</span></span><br><span class="line">      ? <span class="string">&#x27;pipe &#x27;</span> + addr <span class="comment">// 如果地址是字符串类型，则表示为命名管道</span></span><br><span class="line">      : <span class="string">&#x27;port &#x27;</span> + addr.<span class="property">port</span>; <span class="comment">// 如果地址是对象类型，则表示为端口号</span></span><br><span class="line">  <span class="title function_">debug</span>(<span class="string">&#x27;Listening on &#x27;</span> + bind); <span class="comment">// 输出调试信息，表示服务器正在监听</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createError = <span class="built_in">require</span>(<span class="string">&#x27;http-errors&#x27;</span>); <span class="comment">// 引入http-errors模块用于创建错误</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>); <span class="comment">// 引入express模块</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>); <span class="comment">// 引入path模块</span></span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>); <span class="comment">// 引入cookie-parser模块用于解析Cookie</span></span><br><span class="line"><span class="keyword">var</span> logger = <span class="built_in">require</span>(<span class="string">&#x27;morgan&#x27;</span>); <span class="comment">// 引入morgan模块用于日志记录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> indexRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/index&#x27;</span>); <span class="comment">// 引入主页路由模块</span></span><br><span class="line"><span class="keyword">var</span> usersRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/users&#x27;</span>); <span class="comment">// 引入用户路由模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>(); <span class="comment">// 创建Express应用实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 视图引擎设置</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>)); <span class="comment">// 设置视图文件夹路径</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;jade&#x27;</span>); <span class="comment">// 设置视图引擎为jade</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">logger</span>(<span class="string">&#x27;dev&#x27;</span>)); <span class="comment">// 使用morgan进行开发环境日志记录</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>()); <span class="comment">// 解析JSON格式的请求体</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;)); <span class="comment">// 解析URL编码的请求体</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>()); <span class="comment">// 解析Cookie</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>))); <span class="comment">// 设置静态文件夹</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, indexRouter); <span class="comment">// 使用主页路由</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/users&#x27;</span>, usersRouter); <span class="comment">// 使用用户路由</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 捕获404错误并转发到错误处理器</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="title function_">next</span>(<span class="title function_">createError</span>(<span class="number">404</span>)); <span class="comment">// 创建404错误并传递到下一个中间件</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误处理器</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">err, req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">// 设置局部变量，仅在开发环境提供错误信息</span></span><br><span class="line">  res.<span class="property">locals</span>.<span class="property">message</span> = err.<span class="property">message</span>; <span class="comment">// 设置错误消息</span></span><br><span class="line">  res.<span class="property">locals</span>.<span class="property">error</span> = req.<span class="property">app</span>.<span class="title function_">get</span>(<span class="string">&#x27;env&#x27;</span>) === <span class="string">&#x27;development&#x27;</span> ? err : &#123;&#125;; <span class="comment">// 如果是开发环境，则提供详细错误信息</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 渲染错误页面</span></span><br><span class="line">  res.<span class="title function_">status</span>(err.<span class="property">status</span> || <span class="number">500</span>); <span class="comment">// 设置响应状态码</span></span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;error&#x27;</span>); <span class="comment">// 渲染错误视图</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = app; <span class="comment">// 导出app模块</span></span><br></pre></td></tr></table></figure><h1 id="使用MySQL实现后端"><a href="#使用MySQL实现后端" class="headerlink" title="使用MySQL实现后端"></a>使用MySQL实现后端</h1><p>好的，我们可以使用 Sequelize 作为 ORM 框架来实现 MySQL 后端。以下是如何使用 Sequelize 和 Express 来实现用户的增、删、改、查操作的示例。</p><h2 id="第一步：安装必要的-npm-包"><a href="#第一步：安装必要的-npm-包" class="headerlink" title="第一步：安装必要的 npm 包"></a>第一步：安装必要的 npm 包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express sequelize mysql2</span><br></pre></td></tr></table></figure><h2 id="第二步：设置-Sequelize-连接"><a href="#第二步：设置-Sequelize-连接" class="headerlink" title="第二步：设置 Sequelize 连接"></a>第二步：设置 Sequelize 连接</h2><p>在项目根目录下创建一个 <code>config</code> 文件夹，然后在其中创建一个 <code>database.js</code> 文件，用于配置 Sequelize 连接：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Sequelize</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;sequelize&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> <span class="title class_">Sequelize</span>(<span class="string">&#x27;mydatabase&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;password&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">dialect</span>: <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = sequelize;</span><br></pre></td></tr></table></figure><h2 id="第三步：定义用户模型"><a href="#第三步：定义用户模型" class="headerlink" title="第三步：定义用户模型"></a>第三步：定义用户模型</h2><p>在项目根目录下创建一个 <code>models</code> 文件夹，然后在其中创建一个 <code>user.js</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Sequelize</span>, <span class="title class_">DataTypes</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;sequelize&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="built_in">require</span>(<span class="string">&#x27;../config/database&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = sequelize.<span class="title function_">define</span>(<span class="string">&#x27;User&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">DataTypes</span>.<span class="property">STRING</span>,</span><br><span class="line">    <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">email</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">DataTypes</span>.<span class="property">STRING</span>,</span><br><span class="line">    <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">unique</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">age</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">DataTypes</span>.<span class="property">INTEGER</span>,</span><br><span class="line">    <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">createdAt</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">DataTypes</span>.<span class="property">DATE</span>,</span><br><span class="line">    <span class="attr">defaultValue</span>: <span class="title class_">Sequelize</span>.<span class="property">NOW</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">User</span>;</span><br></pre></td></tr></table></figure><h2 id="第四步：同步模型和数据库"><a href="#第四步：同步模型和数据库" class="headerlink" title="第四步：同步模型和数据库"></a>第四步：同步模型和数据库</h2><p>在 <code>app.js</code> 文件中同步模型和数据库：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="built_in">require</span>(<span class="string">&#x27;./config/database&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> usersRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/users&#x27;</span>); <span class="comment">// 引入用户路由模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>()); <span class="comment">// 解析 JSON 请求体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步模型和数据库</span></span><br><span class="line">sequelize.<span class="title function_">sync</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Database synced&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error syncing database:&#x27;</span>, err);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/users&#x27;</span>, usersRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视图引擎设置</span></span><br><span class="line"><span class="comment">// ........</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = app;</span><br></pre></td></tr></table></figure><h2 id="第五步：创建用户路由"><a href="#第五步：创建用户路由" class="headerlink" title="第五步：创建用户路由"></a>第五步：创建用户路由</h2><p>在 <code>routes</code> 文件夹中创建 <code>users.js</code> 路由文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = <span class="built_in">require</span>(<span class="string">&#x27;../models/user&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @route   GET /users</span></span><br><span class="line"><span class="comment">// @desc    Get all users</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findAll</span>();</span><br><span class="line">    res.<span class="title function_">json</span>(users);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @route   GET /users/:id</span></span><br><span class="line"><span class="comment">// @desc    Get user by ID</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/:id&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findByPk</span>(req.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">    <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;User not found&#x27;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">json</span>(user);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @route   POST /users</span></span><br><span class="line"><span class="comment">// @desc    Create a new user</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, email, age &#125; = req.<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">const</span> newUser = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">create</span>(&#123; name, email, age &#125;);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">json</span>(newUser);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @route   PUT /users/:id</span></span><br><span class="line"><span class="comment">// @desc    Update a user</span></span><br><span class="line">router.<span class="title function_">put</span>(<span class="string">&#x27;/:id&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, email, age &#125; = req.<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findByPk</span>(req.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">    <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;User not found&#x27;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    user.<span class="property">name</span> = name || user.<span class="property">name</span>;</span><br><span class="line">    user.<span class="property">email</span> = email || user.<span class="property">email</span>;</span><br><span class="line">    user.<span class="property">age</span> = age || user.<span class="property">age</span>;</span><br><span class="line">    <span class="keyword">await</span> user.<span class="title function_">save</span>();</span><br><span class="line">    res.<span class="title function_">json</span>(user);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @route   DELETE /users/:id</span></span><br><span class="line"><span class="comment">// @desc    Delete a user</span></span><br><span class="line">router.<span class="title function_">delete</span>(<span class="string">&#x27;/:id&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findByPk</span>(req.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">    <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;User not found&#x27;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> user.<span class="title function_">destroy</span>();</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;User deleted&#x27;</span> &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><h2 id="第六步：在-app-js-中使用用户路由"><a href="#第六步：在-app-js-中使用用户路由" class="headerlink" title="第六步：在 app.js 中使用用户路由"></a>第六步：在 <code>app.js</code> 中使用用户路由</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> usersRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/users&#x27;</span>); <span class="comment">// 引入用户路由模块</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/users&#x27;</span>, usersRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视图引擎设置</span></span><br><span class="line"><span class="comment">// ........</span></span><br></pre></td></tr></table></figure><h2 id="CRUD-操作文档"><a href="#CRUD-操作文档" class="headerlink" title="CRUD 操作文档"></a>CRUD 操作文档</h2><h3 id="1-创建-Create"><a href="#1-创建-Create" class="headerlink" title="1. 创建 (Create)"></a>1. 创建 (Create)</h3><p>在 Sequelize 中，创建一个新的记录是通过实例化模型并调用 <code>create()</code> 方法来完成的。</p><p><strong>作用</strong>：创建一个新的记录并将其保存到数据库中。</p><p><strong>例子</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = <span class="built_in">require</span>(<span class="string">&#x27;../models/user&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newUser = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jane Smith&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;jane.smith@example.com&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">create</span>(newUser)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">savedUser</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;User saved:&#x27;</span>, savedUser);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error saving user:&#x27;</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="2-读取-Read"><a href="#2-读取-Read" class="headerlink" title="2. 读取 (Read)"></a>2. 读取 (Read)</h3><p>读取操作涉及查询数据库以检索记录。</p><p><strong>作用</strong>：从数据库中检索一个或多个记录。</p><p><strong>例子</strong>：</p><ul><li>查询所有记录：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">findAll</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Users found:&#x27;</span>, users);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error finding users:&#x27;</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>查询特定记录：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">findOne</span>(&#123; <span class="attr">where</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;Jane Smith&#x27;</span> &#125; &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;User found:&#x27;</span>, user);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error finding user:&#x27;</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="3-更新-Update"><a href="#3-更新-Update" class="headerlink" title="3. 更新 (Update)"></a>3. 更新 (Update)</h3><p>更新操作用于修改已存在的记录。</p><p><strong>作用</strong>：在数据库中更新一个记录的字段。</p><p><strong>例子</strong>：</p><ul><li>使用 <code>update()</code> 更新一个记录：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">update</span>(&#123; <span class="attr">age</span>: <span class="number">26</span> &#125;, &#123; <span class="attr">where</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;Jane Smith&#x27;</span> &#125; &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;User updated&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error updating user:&#x27;</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>使用 <code>findByPk()</code> 和 <code>save()</code> 更新一个记录（需要知道记录的 ID）：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">findByPk</span>(userId)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (user) &#123;</span><br><span class="line">      user.<span class="property">age</span> = <span class="number">26</span>;</span><br><span class="line">      <span class="keyword">return</span> user.<span class="title function_">save</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;User not found&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">updatedUser</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;User updated:&#x27;</span>, updatedUser);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error updating user:&#x27;</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="4-删除-Delete"><a href="#4-删除-Delete" class="headerlink" title="4. 删除 (Delete)"></a>4. 删除 (Delete)</h3><p>删除操作用于从数据库中移除记录。</p><p><strong>作用</strong>：删除一个或多个数据库中的记录。</p><p><strong>例子</strong>：</p><ul><li>删除一个记录：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">destroy</span>(&#123; <span class="attr">where</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;Jane Smith&#x27;</span> &#125; &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;User deleted&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error deleting user:&#x27;</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>删除所有记录：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">destroy</span>(&#123; <span class="attr">where</span>: &#123;&#125; &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;All users deleted&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error deleting users:&#x27;</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h1 id="使用MongoDB实现后端"><a href="#使用MongoDB实现后端" class="headerlink" title="使用MongoDB实现后端"></a>使用MongoDB实现后端</h1><p>当然，这里是一个完整的示例，展示如何在MongoDB中使用Mongoose和Express实现用户的增、删、改、查操作。</p><h2 id="第一步：在-app-js-中连接数据库并添加相关路由"><a href="#第一步：在-app-js-中连接数据库并添加相关路由" class="headerlink" title="第一步：在 app.js 中连接数据库并添加相关路由"></a>第一步：在 <code>app.js</code> 中连接数据库并添加相关路由</h2><p>修改 <code>app.js</code> 文件，添加用户路由，下面的代码为提取过的只关于连接的部分：</p><p>在这里设置MongoDB连接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> usersRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/users&#x27;</span>); <span class="comment">// 引入用户路由模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置MongoDB连接</span></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://localhost:27017/mydatabase&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> db = mongoose.<span class="property">connection</span>;</span><br><span class="line">db.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="variable language_">console</span>.<span class="property">error</span>.<span class="title function_">bind</span>(<span class="variable language_">console</span>, <span class="string">&#x27;connection error:&#x27;</span>));</span><br><span class="line">db.<span class="title function_">once</span>(<span class="string">&#x27;open&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Connected to MongoDB&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视图引擎设置</span></span><br><span class="line"><span class="comment">// .........</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = app;</span><br></pre></td></tr></table></figure><p>当然也可以使用环境变量的方式储存配置</p><p>首先下载<code>dotenv</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install dotenv</span><br></pre></td></tr></table></figure><p>然后新建<code>.env</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DATABASE_URL=mongodb://localhost:27017/expressDemo</span><br></pre></td></tr></table></figure><p>最后是更改<code>app.js</code>中的链接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;dotenv&#x27;</span>).<span class="title function_">config</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> indexRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/index&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> usersRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/users&#x27;</span>); <span class="comment">// 引入用户路由模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置MongoDB连接</span></span><br><span class="line">mongoose.<span class="title function_">connect</span>(process.<span class="property">env</span>.<span class="property">DATABASE_URL</span>, &#123;</span><br><span class="line">  <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> db = mongoose.<span class="property">connection</span>;</span><br><span class="line">db.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="variable language_">console</span>.<span class="property">error</span>.<span class="title function_">bind</span>(<span class="variable language_">console</span>, <span class="string">&#x27;connection error:&#x27;</span>));</span><br><span class="line">db.<span class="title function_">once</span>(<span class="string">&#x27;open&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Connected to MongoDB&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视图引擎设置</span></span><br><span class="line"><span class="comment">// ........</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = app;</span><br></pre></td></tr></table></figure><h2 id="第二步：定义用户模式-Schema"><a href="#第二步：定义用户模式-Schema" class="headerlink" title="第二步：定义用户模式(Schema)"></a>第二步：定义用户模式(Schema)</h2><p>在 <code>models</code> 文件夹中创建 <code>User.js</code> 模型文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserSchema</span> = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">email</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">unique</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">age</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">        <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">date</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Date</span>,</span><br><span class="line">        <span class="attr">default</span>: <span class="title class_">Date</span>.<span class="property">now</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建模型（Model）</span></span><br><span class="line"><span class="comment">// 模型是从模式编译而来的,用于创建、查询、更新和删除数据。</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;User&#x27;</span>, <span class="title class_">UserSchema</span>);</span><br></pre></td></tr></table></figure><p>需要注意的部分是<code>module.exports = mongoose.model(&#39;User&#39;, UserSchema);</code>并不是mongodb的<code>collectionname</code>，正确的<code>collectionname</code>逻辑如下：模型名称是 <code>User</code>，所以Mongoose会自动使用集合名称 <code>users</code>。这意味着 <code>users.js</code> 路由文件中的所有操作都对应于MongoDB数据库中的 <code>users</code> 集合。</p><h2 id="第三步：创建用户路由"><a href="#第三步：创建用户路由" class="headerlink" title="第三步：创建用户路由"></a>第三步：创建用户路由</h2><p>在 <code>routes</code> 文件夹中创建 <code>users.js</code> 路由文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = <span class="built_in">require</span>(<span class="string">&#x27;../models/User&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @route   GET /users</span></span><br><span class="line"><span class="comment">// @desc    Get all users</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">find</span>();</span><br><span class="line">        res.<span class="title function_">json</span>(users);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @route   GET /users/:id</span></span><br><span class="line"><span class="comment">// @desc    Get user by ID</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/:id&#x27;</span>, getUser, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(res.<span class="property">user</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @route   POST /users</span></span><br><span class="line"><span class="comment">// @desc    Create a new user</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">new</span> <span class="title class_">User</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: req.<span class="property">body</span>.<span class="property">name</span>,</span><br><span class="line">        <span class="attr">email</span>: req.<span class="property">body</span>.<span class="property">email</span>,</span><br><span class="line">        <span class="attr">age</span>: req.<span class="property">body</span>.<span class="property">age</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> newUser = <span class="keyword">await</span> user.<span class="title function_">save</span>();</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">json</span>(newUser);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @route   PUT /users/:id</span></span><br><span class="line"><span class="comment">// @desc    Update a user</span></span><br><span class="line">router.<span class="title function_">put</span>(<span class="string">&#x27;/:id&#x27;</span>, getUser, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">name</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">        res.<span class="property">user</span>.<span class="property">name</span> = req.<span class="property">body</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">email</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">        res.<span class="property">user</span>.<span class="property">email</span> = req.<span class="property">body</span>.<span class="property">email</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">age</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">        res.<span class="property">user</span>.<span class="property">age</span> = req.<span class="property">body</span>.<span class="property">age</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> updatedUser = <span class="keyword">await</span> res.<span class="property">user</span>.<span class="title function_">save</span>();</span><br><span class="line">        res.<span class="title function_">json</span>(updatedUser);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @route   DELETE /users/:id</span></span><br><span class="line"><span class="comment">// @desc    Delete a user</span></span><br><span class="line">router.<span class="title function_">delete</span>(<span class="string">&#x27;/:id&#x27;</span>, getUser, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> res.<span class="property">user</span>.<span class="title function_">remove</span>();</span><br><span class="line">        res.<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;User deleted&#x27;</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Middleware function to get user by ID</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getUser</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> user;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findById</span>(req.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;Cannot find user&#x27;</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.<span class="property">user</span> = user;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><h2 id="CRUD-操作文档-1"><a href="#CRUD-操作文档-1" class="headerlink" title="CRUD 操作文档"></a>CRUD 操作文档</h2><h3 id="1-创建-Create-1"><a href="#1-创建-Create-1" class="headerlink" title="1. 创建 (Create)"></a>1. 创建 (Create)</h3><p>在 Mongoose 中，创建一个新的文档是通过实例化模型并调用 <code>save()</code> 方法来完成的。</p><p><strong>作用</strong>：创建一个新的文档并将其保存到数据库中。</p><p><strong>例子</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;User&#x27;</span>, userSchema);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newUser = <span class="keyword">new</span> <span class="title class_">User</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jane Smith&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;jane.smith@example.com&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">newUser.<span class="title function_">save</span>(<span class="function">(<span class="params">err, savedUser</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="title function_">handleError</span>(err);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;User saved:&#x27;</span>, savedUser);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-读取-Read-1"><a href="#2-读取-Read-1" class="headerlink" title="2. 读取 (Read)"></a>2. 读取 (Read)</h3><p>读取操作涉及查询数据库以检索文档。</p><p><strong>作用</strong>：从数据库中检索一个或多个文档。</p><p><strong>例子</strong>：</p><ul><li><p>查询所有文档：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">find</span>(&#123;&#125;, <span class="function">(<span class="params">err, users</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="title function_">handleError</span>(err);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Users found:&#x27;</span>, users);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>查询特定文档：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">findOne</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Jane Smith&#x27;</span> &#125;, <span class="function">(<span class="params">err, user</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="title function_">handleError</span>(err);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;User found:&#x27;</span>, user);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-更新-Update-1"><a href="#3-更新-Update-1" class="headerlink" title="3. 更新 (Update)"></a>3. 更新 (Update)</h3><p>更新操作用于修改已存在的文档。</p><p><strong>作用</strong>：在数据库中更新一个文档的字段。</p><p><strong>例子</strong>：</p><ul><li><p>使用 <code>findOneAndUpdate()</code> 更新一个文档：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">findOneAndUpdate</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Jane Smith&#x27;</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">26</span> &#125;, <span class="function">(<span class="params">err, user</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="title function_">handleError</span>(err);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;User updated:&#x27;</span>, user);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>findByIdAndUpdate()</code> 更新一个文档（需要知道文档的 ID）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">findByIdAndUpdate</span>(userId, &#123; <span class="attr">age</span>: <span class="number">26</span> &#125;, <span class="function">(<span class="params">err, user</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="title function_">handleError</span>(err);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;User updated:&#x27;</span>, user);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-删除-Delete-1"><a href="#4-删除-Delete-1" class="headerlink" title="4. 删除 (Delete)"></a>4. 删除 (Delete)</h3><p>删除操作用于从数据库中移除文档。</p><p><strong>作用</strong>：删除一个或多个数据库中的文档。</p><p><strong>例子</strong>：</p><ul><li><p>删除一个文档：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">findOneAndDelete</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Jane Smith&#x27;</span> &#125;, <span class="function">(<span class="params">err, user</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="title function_">handleError</span>(err);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;User deleted:&#x27;</span>, user);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>删除所有文档：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">deleteMany</span>(&#123;&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="title function_">handleError</span>(err);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;All users deleted&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>已经实现了一个完整的用户管理API，支持增、删、改、查操作。例如：</p><ul><li><code>GET /users</code> - 获取所有用户</li><li><code>GET /users/:id</code> - 获取特定ID的用户</li><li><code>POST /users</code> - 创建新用户</li><li><code>PUT /users/:id</code> - 更新特定ID的用户</li><li><code>DELETE /users/:id</code> - 删除特定ID的用户</li></ul><h1 id="基础代码："><a href="#基础代码：" class="headerlink" title="基础代码："></a>基础代码：</h1><h2 id="app-js-1"><a href="#app-js-1" class="headerlink" title="app.js"></a>app.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createError = <span class="built_in">require</span>(<span class="string">&#x27;http-errors&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> logger = <span class="built_in">require</span>(<span class="string">&#x27;morgan&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// var mongoose = require(&#x27;mongoose&#x27;);</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql2&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;dotenv&#x27;</span>).<span class="title function_">config</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> indexRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/index&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> usersRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/users&#x27;</span>); <span class="comment">// 引入用户路由模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置MongoDB连接</span></span><br><span class="line"><span class="comment">// mongoose.connect(process.env.DATABASE_URL, &#123;</span></span><br><span class="line"><span class="comment">//   useNewUrlParser: true,</span></span><br><span class="line"><span class="comment">//   useUnifiedTopology: true,</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// const db = mongoose.connection;</span></span><br><span class="line"><span class="comment">// db.on(&#x27;error&#x27;, console.error.bind(console, &#x27;connection error:&#x27;));</span></span><br><span class="line"><span class="comment">// db.once(&#x27;open&#x27;, () =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;Connected to MongoDB&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置MySQL连接</span></span><br><span class="line"><span class="keyword">const</span> db = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;12345678&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;go&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">db.<span class="title function_">getConnection</span>(<span class="function">(<span class="params">err, connection</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error connecting to MySQL:&#x27;</span>, err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Connected to MySQL&#x27;</span>);</span><br><span class="line">    connection.<span class="title function_">release</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 视图引擎设置</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;jade&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">logger</span>(<span class="string">&#x27;dev&#x27;</span>));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, indexRouter);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/users&#x27;</span>, usersRouter); <span class="comment">// 使用用户路由</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 捕获404错误并转发到错误处理器</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="title function_">next</span>(<span class="title function_">createError</span>(<span class="number">404</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误处理器</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">err, req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="property">locals</span>.<span class="property">message</span> = err.<span class="property">message</span>;</span><br><span class="line">  res.<span class="property">locals</span>.<span class="property">error</span> = req.<span class="property">app</span>.<span class="title function_">get</span>(<span class="string">&#x27;env&#x27;</span>) === <span class="string">&#x27;development&#x27;</span> ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">status</span>(err.<span class="property">status</span> || <span class="number">500</span>);</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = app;</span><br></pre></td></tr></table></figure><h2 id="models-x2F-index-js"><a href="#models-x2F-index-js" class="headerlink" title="models&#x2F;index.js"></a>models&#x2F;index.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Sequelize</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;sequelize&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> <span class="title class_">Sequelize</span>(<span class="string">&#x27;go&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">    <span class="attr">dialect</span>: <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = sequelize;</span><br></pre></td></tr></table></figure><h2 id="models-x2F-User-js"><a href="#models-x2F-User-js" class="headerlink" title="models&#x2F;User.js"></a>models&#x2F;User.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Sequelize</span>, <span class="title class_">DataTypes</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;sequelize&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="built_in">require</span>(<span class="string">&#x27;./index&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = sequelize.<span class="title function_">define</span>(<span class="string">&#x27;User&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">user_id</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">DataTypes</span>.<span class="property">INTEGER</span>,</span><br><span class="line">        <span class="attr">autoIncrement</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">primaryKey</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">user_name</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">DataTypes</span>.<span class="property">STRING</span>,</span><br><span class="line">        <span class="attr">allowNull</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">user_psw</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">DataTypes</span>.<span class="property">STRING</span>,</span><br><span class="line">        <span class="attr">allowNull</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">user_email</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">DataTypes</span>.<span class="property">STRING</span>,</span><br><span class="line">        <span class="attr">allowNull</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">tableName</span>: <span class="string">&#x27;user&#x27;</span>, <span class="comment">// 指定数据库表名为 &#x27;user&#x27;</span></span><br><span class="line">    <span class="attr">timestamps</span>: <span class="literal">false</span> <span class="comment">// 如果没有 createdAt 和 updatedAt 字段，可以禁用时间戳</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">User</span>;</span><br></pre></td></tr></table></figure><h2 id="routes-x2F-index-js"><a href="#routes-x2F-index-js" class="headerlink" title="routes&#x2F;index.js"></a>routes&#x2F;index.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;Express&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><h2 id="routes-x2F-users-js"><a href="#routes-x2F-users-js" class="headerlink" title="routes&#x2F;users.js"></a>routes&#x2F;users.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = <span class="built_in">require</span>(<span class="string">&#x27;../models/User&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @route   GET /users</span></span><br><span class="line"><span class="comment">// @desc    Get all users</span></span><br><span class="line"><span class="comment">// 获取所有用户</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findAll</span>();</span><br><span class="line">    res.<span class="title function_">json</span>(users);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @route   GET /users/:id</span></span><br><span class="line"><span class="comment">// @desc    Get user by ID</span></span><br><span class="line"><span class="comment">// 获取指定ID的用户</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/:id&#x27;</span>, getUser, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">json</span>(res.<span class="property">user</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @route   POST /users</span></span><br><span class="line"><span class="comment">// @desc    Create a new user</span></span><br><span class="line"><span class="comment">// 创建新用户</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">new</span> <span class="title class_">User</span>(&#123;</span><br><span class="line">    <span class="attr">user_name</span>: req.<span class="property">body</span>.<span class="property">user_name</span>,</span><br><span class="line">    <span class="attr">user_psw</span>: req.<span class="property">body</span>.<span class="property">user_psw</span>,</span><br><span class="line">    <span class="attr">user_email</span>: req.<span class="property">body</span>.<span class="property">user_email</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> newUser = <span class="keyword">await</span> user.<span class="title function_">save</span>();</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">json</span>(newUser);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @route   PUT /users/:id</span></span><br><span class="line"><span class="comment">// @desc    Update a user</span></span><br><span class="line"><span class="comment">// 更新用户</span></span><br><span class="line">router.<span class="title function_">put</span>(<span class="string">&#x27;/:id&#x27;</span>, getUser, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">user_name</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">    res.<span class="property">user</span>.<span class="property">user_name</span> = req.<span class="property">body</span>.<span class="property">user_name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">user_psw</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">    res.<span class="property">user</span>.<span class="property">user_psw</span> = req.<span class="property">body</span>.<span class="property">user_psw</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">user_email</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">    res.<span class="property">user</span>.<span class="property">user_email</span> = req.<span class="property">body</span>.<span class="property">user_email</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> updatedUser = <span class="keyword">await</span> res.<span class="property">user</span>.<span class="title function_">save</span>();</span><br><span class="line">    res.<span class="title function_">json</span>(updatedUser);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @route   DELETE /users/:id</span></span><br><span class="line"><span class="comment">// @desc    Delete a user</span></span><br><span class="line"><span class="comment">// 删除用户</span></span><br><span class="line">router.<span class="title function_">delete</span>(<span class="string">&#x27;/:id&#x27;</span>, getUser, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> res.<span class="property">user</span>.<span class="title function_">destroy</span>();</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;User deleted&#x27;</span> &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Middleware function to get user by ID</span></span><br><span class="line"><span class="comment">// 通过ID获取用户的中间件函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getUser</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> user;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findByPk</span>(req.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;Cannot find user&#x27;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  res.<span class="property">user</span> = user;</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学工部就业相关网站项目经验</title>
      <link href="/posts/87103406.html"/>
      <url>/posts/87103406.html</url>
      
        <content type="html"><![CDATA[<h1 id="element-plus地点选择器"><a href="#element-plus地点选择器" class="headerlink" title="element plus地点选择器"></a>element plus地点选择器</h1><p>参考链接：<a href="https://blog.csdn.net/m0_63209237/article/details/134030737">https://blog.csdn.net/m0_63209237/article/details/134030737</a></p><p>value为string数组</p><p>第一步，安装中国全省市区的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install element-china-area-data -S</span><br></pre></td></tr></table></figure><p>第二步，在要使用地址选择器的页面导入数据</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  provinceAndCityData,</span><br><span class="line">  pcTextArr,</span><br><span class="line">  regionData,</span><br><span class="line">  pcaTextArr,</span><br><span class="line">  codeToText,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;element-china-area-data&quot;</span>;</span><br></pre></td></tr></table></figure><p>导入数据说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">provinceAndCityData：省市二级联动数据,汉字+code</span><br><span class="line">regionData：省市区三级联动数据</span><br><span class="line">pcTextArr：省市联动数据，纯汉字</span><br><span class="line">pcaTextArr：省市区联动数据，纯汉字</span><br><span class="line">codeToText：是个大对象，属性是区域码，属性值是汉字 用法例如：codeToText[<span class="string">&#x27;110000&#x27;</span>]输出北京市</span><br></pre></td></tr></table></figure><p>html 部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;el-cascader</span><br><span class="line">      size=&quot;large&quot;</span><br><span class="line">      :options=&quot;pcaTextArr&quot;</span><br><span class="line">      v-model=&quot;area&quot; </span><br><span class="line">      placeholder=&quot;请点击选择区域&quot;&gt;</span><br><span class="line">    &lt;/el-cascader&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>js 部分</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; pcaTextArr &#125; <span class="keyword">from</span> <span class="string">&#x27;element-china-area-data&#x27;</span></span><br><span class="line"><span class="keyword">const</span> area = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="MP-分页实现"><a href="#MP-分页实现" class="headerlink" title="MP 分页实现"></a>MP 分页实现</h1><p>访问：<a href="http://localhost:8080/activity?page=1&amp;size=1">http://localhost:8080/activity?page=1&amp;size=1</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过构建一个分页查询接口，实现获取activity表中所有数据的接口</span></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&lt;Activity&gt;&gt; <span class="title function_">getAll</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> <span class="type">int</span> page,</span></span><br><span class="line"><span class="params">                                    <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> <span class="type">int</span> size)</span> &#123;</span><br><span class="line">  <span class="comment">// 创建分页对象</span></span><br><span class="line">  Page&lt;Activity&gt; activityPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, size);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 使用 MyBatis Plus 进行分页查询</span></span><br><span class="line">  Page&lt;Activity&gt; result = activityService.page(activityPage);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> R.ok(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意需要加配置项</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="日历实现"><a href="#日历实现" class="headerlink" title="日历实现"></a>日历实现</h1><p><strong>功能描述</strong></p><p>在日历中展示未来的活动，使用变深颜色标记有活动的日期。当点击该日期时，显示活动详情，包括活动名称、时间和地点。</p><p><strong>实现步骤</strong></p><p>​1.<strong>活动日期的标记：</strong></p><p>​•在每个日期单元格中，判断该日期是否有活动。</p><p>​•如果该日期有活动，将日期单元格的背景颜色变深（如#BFDFFF），设置成圆形，并将文字变为白色，以示区分。</p><p>​•当日期处于当前月，透明度为1；否则，透明度减半（0.5）。</p><p>​2.<strong>日期点击触发活动详情展示：</strong></p><p>​•点击某一日期后，检查是否有活动数据。</p><p>​•如果该日期有活动数据，切换 Popover 的显示状态，以展示活动信息；如果无活动数据，则隐藏 Popover。</p><p>​3.<strong>Popover 组件用于显示活动详细信息：</strong></p><p>​•弹出活动详情，包含：</p><p>​•<strong>活动名称</strong>：以粗体显示。</p><p>​•<strong>活动时间</strong>：以本地时间格式显示（格式：年-月-日 时:分:秒）。</p><p>​•<strong>活动地点</strong>：显示活动举办地点。</p><p>​•Popover 弹出位置为下方（placement&#x3D;”bottom”），宽度设置为200px，并且不使用teleport，以避免重定位。</p><p>​4.<strong>数据加载和格式化：</strong></p><p>​•在组件挂载时调用getAllActivity接口，加载所有活动数据。</p><p>​•将活动按日期（startTime字段的日期部分）分组存储到activityByDate中，便于按日期查询活动。</p><p>​5.<strong>关键变量</strong></p><p>​•activityByDate：按日期组织的活动数据对象，结构为 { [key: string]: Activity[] }。</p><p>​•popoverVisible：记录每个日期是否显示活动详情 Popover 的布尔状态。</p><p><strong>代码说明</strong></p><p>​•<code>&lt;el-calendar&gt;</code> 组件展示日历，并通过 #date-cell 插槽自定义日期单元格。</p><p>​•handleDateClick 函数切换 Popover 的显示状态。</p><p>​•getAllActivity 异步获取活动数据，并处理数据格式。</p><p>​•Activity 接口定义了活动对象的基本信息，包括 id、name、startTime、place 等字段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;pt-10 px-10&quot;&gt;</span><br><span class="line">        &lt;el-calendar&gt;</span><br><span class="line">            &lt;!-- 自定义日期单元格 --&gt;</span><br><span class="line">            &lt;template #date-cell=&quot;&#123; data &#125;&quot;&gt;</span><br><span class="line">                &lt;div :style=&quot;&#123;</span><br><span class="line">                    backgroundColor: activityByDate[data.day] ? &#x27;#BFDFFF&#x27; : &#x27;&#x27;,</span><br><span class="line">                    color: activityByDate[data.day] ? &#x27;white&#x27; : &#x27;&#x27;,</span><br><span class="line">                    opacity: data.type === &#x27;current-month&#x27; ? 1 : 0.5,</span><br><span class="line">                    width: &#x27;100%&#x27;,</span><br><span class="line">                    height: &#x27;100%&#x27;,</span><br><span class="line">                    display: &#x27;flex&#x27;,</span><br><span class="line">                    alignItems: &#x27;center&#x27;,</span><br><span class="line">                    justifyContent: &#x27;center&#x27;,</span><br><span class="line">                    cursor: &#x27;pointer&#x27;,</span><br><span class="line">                    position: &#x27;relative&#x27;</span><br><span class="line">                &#125;&quot; @click=&quot;handleDateClick(data.day)&quot;&gt;</span><br><span class="line">                    &#123;&#123; data.day.split(&#x27;-&#x27;)[2] &#125;&#125; &lt;!-- 显示日期的日部分 --&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;!-- 动态 Popover 展示活动信息 --&gt;</span><br><span class="line">                    &lt;el-popover</span><br><span class="line">                        v-if=&quot;popoverVisible[data.day]&quot;</span><br><span class="line">                        v-model:visible=&quot;popoverVisible[data.day]&quot;</span><br><span class="line">                        width=&quot;100%&quot;</span><br><span class="line">                        :teleported=&quot;false&quot;</span><br><span class="line">                    &gt;</span><br><span class="line">                        &lt;div v-for=&quot;activity in activityByDate[data.day]&quot; :key=&quot;activity.id&quot;&gt;</span><br><span class="line">                            &lt;p&gt;&lt;strong&gt;&#123;&#123; activity.name &#125;&#125;&lt;/strong&gt;&lt;/p&gt;</span><br><span class="line">                            &lt;p&gt;时间: &#123;&#123; new Date(activity.startTime).toLocaleString() &#125;&#125;&lt;/p&gt;</span><br><span class="line">                            &lt;p&gt;地点: &#123;&#123; activity.place &#125;&#125;&lt;/p&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/el-popover&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/el-calendar&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; ElMessage &#125; from &#x27;element-plus&#x27;;</span><br><span class="line"></span><br><span class="line">import &#123; Activity &#125; from &#x27;../interfaces/Activity&#x27;;</span><br><span class="line">import &#123; getAllActivity &#125; from &#x27;../api/activity&#x27;;</span><br><span class="line"></span><br><span class="line">const loading = ref(false);</span><br><span class="line">const allData = ref&lt;Activity[]&gt;([]);</span><br><span class="line">const activityByDate = ref&lt;&#123; [key: string]: Activity[] &#125;&gt;(&#123;&#125;);</span><br><span class="line">const popoverVisible = ref&lt;&#123; [key: string]: boolean &#125;&gt;(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">onMounted(async () =&gt; &#123;</span><br><span class="line">    loading.value = true;</span><br><span class="line">    try &#123;</span><br><span class="line">        const res = await getAllActivity();</span><br><span class="line">        allData.value = res.data.records;</span><br><span class="line"></span><br><span class="line">        // 按日期字符串组织活动</span><br><span class="line">        allData.value.forEach((activity) =&gt; &#123;</span><br><span class="line">            const date = activity.startTime.split(&#x27;T&#x27;)[0];</span><br><span class="line">            if (!activityByDate.value[date]) &#123;</span><br><span class="line">                activityByDate.value[date] = [];</span><br><span class="line">            &#125;</span><br><span class="line">            activityByDate.value[date].push(activity);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">        ElMessage.error(&#x27;加载活动数据失败&#x27;);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        loading.value = false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 点击日期显示活动详情的 Popover</span><br><span class="line">const handleDateClick = (day: string) =&gt; &#123;</span><br><span class="line">    if (activityByDate.value[day]) &#123;</span><br><span class="line">        // 切换 Popover 可见状态</span><br><span class="line">        popoverVisible.value[day] = !popoverVisible.value[day];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        popoverVisible.value[day] = false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="日期不显示"><a href="#日期不显示" class="headerlink" title="日期不显示"></a>日期不显示</h2><ol><li>一开始将date作为Date类型使用，准备用解析日期的方式获取<code>yyyy-MM-dd</code>格式的数据，但是实际上EP已经准备了对应的插槽数据，date底下就有一个<code>.day</code>属性，格式好了所有的日期</li><li>date-cell插槽中数据的是固定的，就你说使用data，而不是date，否则会获取不到数据(类型：{ data: { type: ‘prev-month’ | ‘current-month’ | ‘next-month’, isSelected: boolean, day: string, date: Date } })</li></ol><h2 id="el-popover位置错位问题"><a href="#el-popover位置错位问题" class="headerlink" title="el-popover位置错位问题"></a>el-popover位置错位问题</h2><p>需要将需要定位的元素作为relative，并将el-popover移动至元素下面（其实一般是使用插槽去实现，但是会与日历组件冲突）、开启teleported，最大的踩坑点在于需要是<code>:teleported</code>，冒号是不能忘记的</p><h1 id="上传获取图片"><a href="#上传获取图片" class="headerlink" title="上传获取图片"></a>上传获取图片</h1><p>首先代码</p><p>将文件目录作为静态资源路径，以便可以通过 URL 访问到上传的图片。可以在 Spring Boot 的配置文件中指定静态资源路径。</p><p>在 Spring Boot 的配置文件中定义上传目录的路径，方便管理和更改。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-locations:</span> <span class="string">file:/Users/tec/Desktop/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">file:</span></span><br><span class="line">  <span class="attr">upload-dir:</span> <span class="string">/Users/tec/Desktop</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tec.campuscareerbackend.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> com.tec.campuscareerbackend.common.R;</span><br><span class="line"><span class="keyword">import</span> com.tec.campuscareerbackend.entity.Activity;</span><br><span class="line"><span class="keyword">import</span> com.tec.campuscareerbackend.service.IActivityService;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 活动信息表 前端控制器</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> TECNB</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024-10-31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/activity&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActivityController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义文件存储的目录路径（可以通过 application.yml 或 application.properties 配置）</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;file.upload-dir&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String uploadDir;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IActivityService activityService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传活动照片到服务器</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/file&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">uploadFile</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (file.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;文件不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建上传目录（如果不存在）</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadDir);</span><br><span class="line">            <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">                dir.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 保存文件到指定目录</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">uploadFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir, file.getOriginalFilename());</span><br><span class="line">            file.transferTo(uploadFile);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> R.ok(<span class="string">&quot;文件上传成功：&quot;</span> + uploadFile.getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;文件上传失败：&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着安全性考虑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>) <span class="comment">// 匹配所有 URL 路径</span></span><br><span class="line">                .allowedOrigins(<span class="string">&quot;http://localhost:5173&quot;</span>) <span class="comment">// 允许的前端地址</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>) <span class="comment">// 允许的请求方法</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>) <span class="comment">// 允许的请求头</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>) <span class="comment">// 允许携带 Cookie</span></span><br><span class="line">                .maxAge(<span class="number">3600</span>); <span class="comment">// 设置预检请求的缓存时间（单位：秒）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关联表"><a href="#关联表" class="headerlink" title="关联表"></a>关联表</h2><p>踩坑点在于必须使用<code>@TableField(exist = false)</code>禁止将该属性映射到数据库表中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@TableName(&quot;activity&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Activity</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 活动ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 活动图片链接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String activityImage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储活动的所有图片路径，不映射到数据库表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; imagePaths;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="下载并打包为压缩包"><a href="#下载并打包为压缩包" class="headerlink" title="下载并打包为压缩包"></a>下载并打包为压缩包</h1><h2 id="文件名乱码问题"><a href="#文件名乱码问题" class="headerlink" title="文件名乱码问题"></a>文件名乱码问题</h2><p>不使用默认java提供的ZipArchiveOutputStream</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-compress<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;ByteArrayResource&gt; <span class="title function_">downloadAttachmentsZip</span><span class="params">(<span class="meta">@RequestBody</span> EmploymentDatabase employmentDatabase)</span> &#123;</span><br><span class="line">    List&lt;EmploymentDatabaseAttachment&gt; urls = employmentDatabase.getAttachment();</span><br><span class="line"></span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">ZipArchiveOutputStream</span> <span class="variable">zipOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipArchiveOutputStream</span>(byteArrayOutputStream)) &#123;</span><br><span class="line">        <span class="comment">// 设置 ZipOutputStream 的编码为 UTF-8</span></span><br><span class="line">        zipOutputStream.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (EmploymentDatabaseAttachment url : urls) &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">fileUrl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(url.getFilePath());</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> fileUrl.openStream()) &#123;</span><br><span class="line">                <span class="comment">// 使用 UTF-8 编码的文件名</span></span><br><span class="line">                <span class="type">ZipArchiveEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipArchiveEntry</span>(url.getFileName());</span><br><span class="line">                zipOutputStream.putArchiveEntry(entry);</span><br><span class="line"></span><br><span class="line">                <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="type">int</span> len;</span><br><span class="line">                <span class="keyword">while</span> ((len = inputStream.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    zipOutputStream.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">                &#125;</span><br><span class="line">                zipOutputStream.closeArchiveEntry();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">ByteArrayResource</span> <span class="variable">byteArrayResource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayResource</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">    <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    headers.add(HttpHeaders.CONTENT_DISPOSITION, <span class="string">&quot;attachment; filename=attachments.zip&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok()</span><br><span class="line">            .headers(headers)</span><br><span class="line">            .contentLength(byteArrayResource.contentLength())</span><br><span class="line">            .contentType(org.springframework.http.MediaType.APPLICATION_OCTET_STREAM)</span><br><span class="line">            .body(byteArrayResource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="el-tree-select"><a href="#el-tree-select" class="headerlink" title="el-tree-select"></a>el-tree-select</h1><p>注意使用multiple可以多选，并且可以通过其他命令调整大标题是否可选</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 第六行 --&gt;</span><br><span class="line">&lt;div class=&quot;flex flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">            &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;网申链接：&lt;/p&gt;</span><br><span class="line">            &lt;el-input v-model=&quot;applicationLink&quot; placeholder=&quot;请输入链接&quot; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">            &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;发送人群：&lt;/p&gt;</span><br><span class="line">            &lt;el-tree-select</span><br><span class="line">                v-model=&quot;targetAudience&quot;</span><br><span class="line">                :data=&quot;treeData&quot;</span><br><span class="line">                placeholder=&quot;请点击选择发送人群&quot;</span><br><span class="line">                size=&quot;large&quot;</span><br><span class="line">                clearable</span><br><span class="line">                :props=&quot;defaultProps&quot;</span><br><span class="line">                multiple</span><br><span class="line">                show-checkbox</span><br><span class="line">                collapse-tags</span><br><span class="line">                class=&quot;dynamic-height-select&quot;</span><br><span class="line">            /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>配置树状选择栏部分</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义目标受众的响应式变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> targetAudience = ref&lt;<span class="built_in">any</span>&gt;([]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义树形选择的数据结构</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> treeData = <span class="title function_">ref</span>([</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;21级本科&#x27;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;电子信息2101&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;电子信息2101&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;电子信息2102&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;电子信息2102&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;电子信息2103&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;电子信息2103&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;电子信息2104&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;电子信息2104&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;软件工程2101&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;软件工程2101&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;软件工程2102&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;软件工程2102&#x27;</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;22级本科&#x27;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;电子信息2201&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;电子信息2201&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;电子信息2202&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;电子信息2202&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;电子信息2203&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;电子信息2203&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;电子信息2204&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;电子信息2204&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;软件工程2201&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;软件工程2201&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;软件工程2202&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;软件工程2202&#x27;</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;23级本科&#x27;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;电子信息2301&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;电子信息2301&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;电子信息2302&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;电子信息2302&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;电子信息2303&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;电子信息2303&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;电子信息2304&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;电子信息2304&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;软件工程2301&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;软件工程2301&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;软件工程2302&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;软件工程2302&#x27;</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;24级本科&#x27;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;电子信息2401&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;电子信息2401&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;电子信息2402&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;电子信息2402&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;电子信息2403&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;电子信息2403&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;电子信息2404&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;电子信息2404&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;软件工程2401&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;软件工程2401&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">label</span>: <span class="string">&#x27;软件工程2402&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;软件工程2402&#x27;</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 el-tree-select 的属性配置</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> defaultProps = &#123;</span><br><span class="line">    <span class="attr">children</span>: <span class="string">&#x27;children&#x27;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;label&#x27;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="通过key的方式对子组件强制渲染"><a href="#通过key的方式对子组件强制渲染" class="headerlink" title="通过key的方式对子组件强制渲染"></a>通过key的方式对子组件强制渲染</h1><p>参考：<a href="https://www.cnblogs.com/zhangycun/p/13268577.html">https://www.cnblogs.com/zhangycun/p/13268577.html</a></p><p>Vue 3 提供的响应式 API 可以通过事件触发和 ref 变量的方式更简洁地实现刷新操作，无需直接操作子组件的内部方法。你可以在父组件中使用状态（如refreshKey）来驱动子组件刷新。以下是这种更符合 Vue 3 哲学的实现方法：</p><ol><li><p><strong>在父组件中</strong>，定义一个 refreshKey 的 ref，并在上传成功后更改 refreshKey 的值，子组件会自动响应这个变化：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fileInput = ref&lt;<span class="title class_">HTMLInputElement</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">const</span> refreshKey = <span class="title function_">ref</span>(<span class="number">0</span>); <span class="comment">// 用于触发子组件重新渲染</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleFileUpload</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    fileInput.<span class="property">value</span>?.<span class="title function_">click</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onFileChange</span> = <span class="keyword">async</span> (<span class="params">event: Event</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> target = event.<span class="property">target</span> <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span>;</span><br><span class="line">    <span class="keyword">const</span> file = target.<span class="property">files</span>?.[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (!file) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:5173/api/user-detail/importExcel&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">            <span class="attr">body</span>: formData,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">ok</span>) &#123;</span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&#x27;文件上传成功！&#x27;</span>);</span><br><span class="line">            refreshKey.<span class="property">value</span> += <span class="number">1</span>; <span class="comment">// 上传成功后更改 refreshKey 值，触发子组件刷新</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;文件上传失败，请重试！&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;上传过程中出现错误！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>在模板中</strong>，将 refreshKey 传递给 <code>&lt;UserDetailTable&gt; </code>组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;UserDetailTable :key=&quot;refreshKey&quot; :dateOrder=&quot;dateOrder&quot; :typeOrder=&quot;typeOrder&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; ref=&quot;fileInput&quot; @change=&quot;onFileChange&quot; accept=&quot;.xls, .xlsx&quot; style=&quot;display: none&quot; /&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>在</strong> <code>&lt;UserDetailTable&gt;</code> <strong>子组件中</strong>，每次接收到新的 key 值时会自动重新加载，因此你只需要在 onMounted 钩子中调用 fetchTableData：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fetchTableData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    loading.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">getAllUserDetails</span>();</span><br><span class="line">        tableData.<span class="property">value</span> = response.<span class="property">data</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        loading.<span class="property">value</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(fetchTableData); <span class="comment">// 页面加载时获取数据</span></span><br></pre></td></tr></table></figure></li></ol><p>通过更改 key 值，Vue 会自动重新渲染 <code>&lt;UserDetailTable&gt; </code>组件，这样可以避免直接调用子组件方法，保持代码更加简洁。</p><h1 id="手机适配"><a href="#手机适配" class="headerlink" title="手机适配"></a>手机适配</h1><p>参考链接：<a href="https://juejin.cn/post/7265129339195424827">https://juejin.cn/post/7265129339195424827</a></p><h2 id="taliwincss-常用样式"><a href="#taliwincss-常用样式" class="headerlink" title="taliwincss 常用样式"></a>taliwincss 常用样式</h2><p>踩坑点主要有需要加上<code>!</code>增加其样式的优先级，以及 elementui 部分的内含样式太多，不好轻易改，所以通过媒体查询+v-if的方式去进行手机的适配</p><p>手机存在，大屏幕不存在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class=<span class="string">&quot;!hidden md:!block&quot;</span></span><br></pre></td></tr></table></figure><p>字体调整</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class=<span class="string">&quot;md:text-4xl font-extrabold text-3xl&quot;</span></span><br></pre></td></tr></table></figure><p>IndexView.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;IndexView flex p-0 md:p-5&quot;&gt;</span><br><span class="line">        &lt;!-- 仅在大屏幕上显示 sidebar (大于md) --&gt;</span><br><span class="line">        &lt;div class=&quot;min-w-52 hidden md:block&quot;&gt;</span><br><span class="line">            &lt;Sidebar device=&quot;pc&quot;/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;md:w-[86%] w-full h-full&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;&quot;&gt;</span><br><span class="line">                &lt;Header /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;h-[93%]&quot;&gt;</span><br><span class="line">                &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import Sidebar from &#x27;../components/Sidebar.vue&#x27;</span><br><span class="line">// 引入Header</span><br><span class="line">import Header from &#x27;../components/Header.vue&#x27;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.IndexView &#123;</span><br><span class="line">    height: 100vh;</span><br><span class="line">    background: #F2F8FC;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>slider转为点击图标出现菜单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;Header rounded-none md:rounded-2xl md:mx-6 md:mb-6 m-0 px-5&quot;&gt;</span><br><span class="line">        &lt;el-icon size=&quot;20&quot; class=&quot;!block md:!hidden mr-2&quot; @click=&quot;showSlider&quot;&gt;</span><br><span class="line">                &lt;Menu/&gt;</span><br><span class="line">            &lt;/el-icon&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Sidebar device=&quot;phone&quot; v-if=&quot;ifShowSidebar&quot;/&gt;</span><br><span class="line">        &lt;MaskLayer :ifShow=&quot;ifShowSidebar&quot; @click=&quot;showSlider&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-scrollbar height=&quot;100%&quot;&gt;</span><br><span class="line">    &lt;el-table :data=&quot;tableData&quot; class=&quot;tableBox&quot; table-layout=&quot;fixed&quot; @selection-change=&quot;handleSelectionChange&quot;</span><br><span class="line">      v-loading=&quot;loading&quot; :row-style=&quot;&#123; height: &#x27;80px&#x27; &#125;&quot;&gt;</span><br><span class="line">      &lt;!-- v-if实现隐藏和显示的逻辑 --&gt;</span><br><span class="line">      &lt;el-table-column</span><br><span class="line">        v-if=&quot;isMediumScreen&quot;</span><br><span class="line">        type=&quot;selection&quot;</span><br><span class="line">        width=&quot;40&quot;</span><br><span class="line">        :class=&quot;&#123; &#x27;hidden-md&#x27;: !isMediumScreen &#125;&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">  &lt;/el-scrollbar&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, onMounted, onBeforeUnmount &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">// 定义是否处于中等屏幕以上的状态</span><br><span class="line">const isMediumScreen = ref(false);</span><br><span class="line"></span><br><span class="line">// 更新屏幕宽度的响应式逻辑</span><br><span class="line">const updateScreenSize = () =&gt; &#123;</span><br><span class="line">  isMediumScreen.value = window.innerWidth &gt;= 768;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  updateScreenSize(); // 初始化时检查屏幕大小</span><br><span class="line">  window.addEventListener(&quot;resize&quot;, updateScreenSize); // 监听窗口变化</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">onBeforeUnmount(() =&gt; &#123;</span><br><span class="line">  window.removeEventListener(&quot;resize&quot;, updateScreenSize); // 组件卸载时移除监听器</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const handleSelectionChange = (selection: any) =&gt; &#123;</span><br><span class="line">  console.log(&quot;Selection changed:&quot;, selection);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="Vue-3-router-addroute-no-match-found"><a href="#Vue-3-router-addroute-no-match-found" class="headerlink" title="Vue 3 router addroute no match found"></a>Vue 3 router addroute no match found</h1><p>参考链接：<a href="https://www.jianshu.com/p/95569fd0b20a">https://www.jianshu.com/p/95569fd0b20a</a></p><p>原因：当 <code>name</code> 名相同时，后面的路由会覆盖前端的路由。</p><h1 id="easyexcel-报错ExceptionInInitializerError"><a href="#easyexcel-报错ExceptionInInitializerError" class="headerlink" title="easyexcel 报错ExceptionInInitializerError"></a>easyexcel 报错ExceptionInInitializerError</h1><p>参考链接：<a href="https://github.com/alibaba/easyexcel/issues/2040%E3%80%81https://github.com/alibaba/easyexcel/issues/2240">https://github.com/alibaba/easyexcel/issues/2040、https://github.com/alibaba/easyexcel/issues/2240</a></p><p>官网：<a href="https://easyexcel.opensource.alibaba.com/docs/current/quickstart/read">https://easyexcel.opensource.alibaba.com/docs/current/quickstart/read</a></p><p>原因：easyexcel 版本设定低了，应该按照下面版本，修复了在JDK17中的适配问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--表格导入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="java自带ZipOutputStream压缩文件名为中文的乱码问题"><a href="#java自带ZipOutputStream压缩文件名为中文的乱码问题" class="headerlink" title="java自带ZipOutputStream压缩文件名为中文的乱码问题"></a>java自带ZipOutputStream压缩文件名为中文的乱码问题</h1><p>参考链接：<a href="https://blog.csdn.net/cqstart116/article/details/44728821">https://blog.csdn.net/cqstart116/article/details/44728821</a></p><p>原因：java自带的工具就没有设定编码的功能，所以改用apache的工具</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件上传 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-compress<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>       </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/employment-database&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmploymentDatabaseController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IEmploymentDatabaseService employmentDatabaseService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IEmploymentDatabaseAttachmentService employmentDatabaseAttachmentService; <span class="comment">// 用于保存附件路径</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/download&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ByteArrayResource&gt; <span class="title function_">downloadAttachmentsZip</span><span class="params">(<span class="meta">@RequestBody</span> EmploymentDatabase employmentDatabase)</span> &#123;</span><br><span class="line">        List&lt;EmploymentDatabaseAttachment&gt; urls = employmentDatabase.getAttachment();</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ZipArchiveOutputStream</span> <span class="variable">zipOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipArchiveOutputStream</span>(byteArrayOutputStream)) &#123;</span><br><span class="line">            <span class="comment">// 设置 ZipOutputStream 的编码为 UTF-8</span></span><br><span class="line">            zipOutputStream.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (EmploymentDatabaseAttachment url : urls) &#123;</span><br><span class="line">                <span class="type">URL</span> <span class="variable">fileUrl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(url.getFilePath());</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> fileUrl.openStream()) &#123;</span><br><span class="line">                    <span class="comment">// 使用 UTF-8 编码的文件名</span></span><br><span class="line">                    <span class="type">ZipArchiveEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipArchiveEntry</span>(url.getFileName());</span><br><span class="line">                    zipOutputStream.putArchiveEntry(entry);</span><br><span class="line"></span><br><span class="line">                    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="type">int</span> len;</span><br><span class="line">                    <span class="keyword">while</span> ((len = inputStream.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        zipOutputStream.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">                    &#125;</span><br><span class="line">                    zipOutputStream.closeArchiveEntry();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayResource</span> <span class="variable">byteArrayResource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayResource</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">        headers.add(HttpHeaders.CONTENT_DISPOSITION, <span class="string">&quot;attachment; filename=attachments.zip&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok()</span><br><span class="line">                .headers(headers)</span><br><span class="line">                .contentLength(byteArrayResource.contentLength())</span><br><span class="line">                .contentType(org.springframework.http.MediaType.APPLICATION_OCTET_STREAM)</span><br><span class="line">                .body(byteArrayResource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ElementPlus-upload-fileList为空"><a href="#ElementPlus-upload-fileList为空" class="headerlink" title="ElementPlus upload fileList为空"></a>ElementPlus upload fileList为空</h1><p>参考链接：<a href="https://www.sunzhongwei.com/vue-element-ui-upload-file-upload-component-after-file-list-is-empty-array">https://www.sunzhongwei.com/vue-element-ui-upload-file-upload-component-after-file-list-is-empty-array</a></p><ol><li><p>不使用 action 可以避免用户上传了图片，但是没保存表单，导致图片冗余的问题，但是实际上不使用 action fileList又为空，导致极难获取到上传到图片，所以这个还没有实现</p></li><li><p>使用 action 上传</p></li></ol><h1 id="带属性搜索"><a href="#带属性搜索" class="headerlink" title="带属性搜索"></a>带属性搜索</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/employment-database&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmploymentDatabaseController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IEmploymentDatabaseService employmentDatabaseService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IEmploymentDatabaseAttachmentService employmentDatabaseAttachmentService; <span class="comment">// 用于保存附件路径</span></span><br><span class="line">    <span class="comment">// 搜索就业信息</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/search&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&lt;EmploymentDatabase&gt;&gt; <span class="title function_">searchEmploymentDatabase</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(required = false)</span> String filterField,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(required = false)</span> String filterValue,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam</span> <span class="type">int</span> page,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam</span> <span class="type">int</span> size)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Page&lt;EmploymentDatabase&gt; employmentDatabasePage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, size);</span><br><span class="line">        QueryWrapper&lt;EmploymentDatabase&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据字段名动态添加查询条件</span></span><br><span class="line">        <span class="keyword">if</span> (filterField != <span class="literal">null</span> &amp;&amp; filterValue != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (filterField) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;category&quot;</span>:</span><br><span class="line">                    queryWrapper.like(<span class="string">&quot;category&quot;</span>, filterValue);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;title&quot;</span>:</span><br><span class="line">                    queryWrapper.like(<span class="string">&quot;title&quot;</span>, filterValue);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;attachment&quot;</span>:</span><br><span class="line">                    queryWrapper.like(<span class="string">&quot;attachment&quot;</span>, filterValue);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;details&quot;</span>:</span><br><span class="line">                    queryWrapper.like(<span class="string">&quot;details&quot;</span>, filterValue);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;createdAt&quot;</span>:</span><br><span class="line">                    queryWrapper.like(<span class="string">&quot;created_at&quot;</span>, filterValue);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> R.error(<span class="string">&quot;无效的筛选字段&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Page&lt;EmploymentDatabase&gt; result = employmentDatabaseService.page(employmentDatabasePage, queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> R.ok(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="智能匹配岗位"><a href="#智能匹配岗位" class="headerlink" title="智能匹配岗位"></a>智能匹配岗位</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/job-search&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobSearchController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IJobSearchService jobSearchService;</span><br><span class="line">    <span class="comment">// 智能匹配岗位接口，通过 studentId 获取 className 后再匹配岗位</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/match&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&lt;JobSearch&gt;&gt; <span class="title function_">matchJobsByStudentId</span><span class="params">(<span class="meta">@RequestParam</span> String studentId,</span></span><br><span class="line"><span class="params">                                                   <span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> <span class="type">int</span> page,</span></span><br><span class="line"><span class="params">                                                   <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> <span class="type">int</span> size)</span> &#123;</span><br><span class="line">        Page&lt;JobSearch&gt; result = jobSearchService.matchJobsByStudentId(studentId, page, size);</span><br><span class="line">        <span class="keyword">return</span> R.ok(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="导入excel"><a href="#导入excel" class="headerlink" title="导入excel"></a>导入excel</h1><p><strong>关键实现步骤</strong></p><p>​1.<strong>上传文件</strong></p><p>​•使用 @RequestParam(“file”) MultipartFile file 接收用户上传的文件。</p><p>​•通过 file.getInputStream() 获取文件的输入流。</p><p>​2.<strong>读取 Excel 数据</strong></p><p>​•使用 <strong>EasyExcel</strong> 的 read 方法读取文件内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDetailExcelDto&gt; userList = EasyExcel.read(file.getInputStream())</span><br><span class="line">    .head(UserDetailExcelDto.class)</span><br><span class="line">    .sheet()</span><br><span class="line">    .doReadSync();</span><br></pre></td></tr></table></figure><p>​•head(UserDetailExcelDto.class)：指定 Excel 数据对应的实体类 UserDetailExcelDto，表示每一行数据将被映射到该对象。</p><p>​•sheet()：默认读取第一个工作表。</p><p>​•doReadSync()：同步读取数据，结果存储为一个 List<UserDetailExcelDto>。</p><p>​3.<strong>数据校验和保存</strong></p><p>​•遍历 userList，对每条数据进行处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (UserDetailExcelDto dto : userList) &#123;</span><br><span class="line">  <span class="keyword">if</span> (dto.getName() == <span class="literal">null</span> || dto.getName().isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">return</span> R.ok(<span class="string">&quot;导入成功&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​•检查关键字段（如 dto.getName()）是否为空，跳过空白行。</p><p>​4.<strong>保存到数据库</strong></p><p>​•<strong>保存到</strong> user_detail <strong>表</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UserDetail</span> <span class="variable">userDetail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDetail</span>();</span><br><span class="line">userDetail.setName(dto.getName());</span><br><span class="line">userDetail.setGender(dto.getGender());</span><br><span class="line">userDetail.setClassName(dto.getClassName());</span><br><span class="line">userDetail.setStudentId(dto.getStudentId());</span><br><span class="line">userDetail.setContactNumber(dto.getContactNumber());</span><br><span class="line">userDetail.setClassTeacher(dto.getClassTeacher());</span><br><span class="line">userDetail.setGraduationTutor(dto.getGraduationTutor());</span><br><span class="line">userDetailService.save(userDetail);</span><br></pre></td></tr></table></figure><p>将 Excel 数据映射到 UserDetail 实体类，并调用 userDetailService.save 保存到数据库。</p><p>​•<strong>保存到</strong> users <strong>表</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Users</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">user.setStudentId(dto.getStudentId());</span><br><span class="line">user.setUsername(dto.getName());</span><br><span class="line"><span class="type">String</span> <span class="variable">initialPassword</span> <span class="operator">=</span> dto.getStudentId().substring(dto.getStudentId().length() - <span class="number">6</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> generateSalt();</span><br><span class="line"><span class="type">String</span> <span class="variable">passwordHash</span> <span class="operator">=</span> encryptHv(initialPassword, salt);</span><br><span class="line">user.setPasswordHash(passwordHash);</span><br><span class="line">user.setSalt(salt);</span><br><span class="line">user.setUserType(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">user.setPhone(dto.getContactNumber());</span><br><span class="line">usersService.save(user);</span><br></pre></td></tr></table></figure><p>初始化用户账号信息：</p><p>​•生成默认密码：学号后 6 位。</p><p>​•调用加密方法 encryptHv 进行密码加密。</p><p>​•调用 usersService.save 保存到数据库。</p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user-detail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IUserDetailService userDetailService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IUsersService usersService;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/importExcel&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">importExcel</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 读取Excel数据并过滤只获取需要的字段</span></span><br><span class="line">            List&lt;UserDetailExcelDto&gt; userList = EasyExcel.read(file.getInputStream())</span><br><span class="line">                    .head(UserDetailExcelDto.class)</span><br><span class="line">                    .sheet()</span><br><span class="line">                    .doReadSync();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (UserDetailExcelDto dto : userList) &#123;</span><br><span class="line">                <span class="comment">// 检查关键字段是否为空，判断是否为空白行</span></span><br><span class="line">                <span class="keyword">if</span> (dto.getName() == <span class="literal">null</span> || dto.getName().isEmpty()) &#123;</span><br><span class="line">                    <span class="comment">// 遇到空白行，跳出循环并返回成功</span></span><br><span class="line">                    <span class="keyword">return</span> R.ok(<span class="string">&quot;导入成功&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 保存到 user_detail 表</span></span><br><span class="line">                <span class="type">UserDetail</span> <span class="variable">userDetail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDetail</span>();</span><br><span class="line">                userDetail.setName(dto.getName());</span><br><span class="line">                userDetail.setGender(dto.getGender());</span><br><span class="line">                userDetail.setClassName(dto.getClassName());</span><br><span class="line">                userDetail.setStudentId(dto.getStudentId());</span><br><span class="line">                userDetail.setContactNumber(dto.getContactNumber());</span><br><span class="line">                userDetail.setClassTeacher(dto.getClassTeacher());</span><br><span class="line">                userDetail.setGraduationTutor(dto.getGraduationTutor());</span><br><span class="line">                userDetailService.save(userDetail);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 初始化保存到 users 表</span></span><br><span class="line">                <span class="type">Users</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">                user.setStudentId(dto.getStudentId());</span><br><span class="line">                user.setUsername(dto.getName());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 生成初始密码为学号后6位</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">initialPassword</span> <span class="operator">=</span> dto.getStudentId().substring(dto.getStudentId().length() - <span class="number">6</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> generateSalt();</span><br><span class="line">                <span class="type">String</span> <span class="variable">passwordHash</span> <span class="operator">=</span> encryptHv(initialPassword, salt);</span><br><span class="line"></span><br><span class="line">                user.setPasswordHash(passwordHash);</span><br><span class="line">                user.setSalt(salt);</span><br><span class="line">                user.setUserType(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">                user.setPhone(dto.getContactNumber());</span><br><span class="line">                usersService.save(user);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> R.ok(<span class="string">&quot;导入成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;导入失败: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="GPT新建表惯例"><a href="#GPT新建表惯例" class="headerlink" title="GPT新建表惯例"></a>GPT新建表惯例</h1><ol><li><p>请根据下面的表单，修改其表单字段名称，多余的属性删去，缺少的属性补上：</p></li><li><p>根据上面的字段为我创建一个名为conversation_records的数据表，请你把sql语句给我</p></li><li><p>请给我对应的rowjson，方便我测试添加接口，注意驼峰</p></li><li><p>请你参考下面的Dto，根据上面的字段编写一份ConversationRecordsExcelDto,多余的属性删去，缺少的属性补上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailExcelDto</span> &#123;</span><br><span class="line">  <span class="meta">@ExcelProperty(&quot;姓名&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="meta">@ExcelProperty(&quot;性别&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String gender;</span><br><span class="line">  <span class="meta">@ExcelProperty(&quot;所在班级&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String className;</span><br><span class="line">  <span class="meta">@ExcelProperty(&quot;学号&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String studentId;</span><br><span class="line">  <span class="meta">@ExcelProperty(&quot;手机号码&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String contactNumber;</span><br><span class="line">  <span class="meta">@ExcelProperty(&quot;班主任&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String classTeacher;</span><br><span class="line">  <span class="meta">@ExcelProperty(&quot;导师&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String graduationTutor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>请你参考下面的importExcel接口，根据上面的字段编写一份新的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/importExcel&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">importActivityTargetAudienceExcel</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用 EasyExcel 读取 Excel 数据</span></span><br><span class="line">            List&lt;ActivityTargetAudienceExcelDto&gt; audienceList = EasyExcel.read(file.getInputStream())</span><br><span class="line">                    .head(ActivityTargetAudienceExcelDto.class)</span><br><span class="line">                    .sheet()</span><br><span class="line">                    .doReadSync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 过滤掉空白行</span></span><br><span class="line">            List&lt;ActivityTargetAudienceExcelDto&gt; validAudienceList = audienceList.stream()</span><br><span class="line">                    .filter(dto -&gt; dto.getAudienceLabel() != <span class="literal">null</span> &amp;&amp; !dto.getAudienceLabel().isEmpty())</span><br><span class="line">                    .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将 DTO 转换为实体列表</span></span><br><span class="line">            List&lt;ActivityTargetAudience&gt; audienceEntities = validAudienceList.stream().map(dto -&gt; &#123;</span><br><span class="line">                <span class="type">ActivityTargetAudience</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActivityTargetAudience</span>();</span><br><span class="line">                entity.setId(dto.getId());</span><br><span class="line">                entity.setMajor(dto.getMajor());</span><br><span class="line">                entity.setAudienceLabel(dto.getAudienceLabel());</span><br><span class="line">                entity.setAudienceValue(dto.getAudienceValue());</span><br><span class="line">                <span class="keyword">return</span> entity;</span><br><span class="line">            &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 批量保存或更新</span></span><br><span class="line">            <span class="keyword">if</span> (!audienceEntities.isEmpty()) &#123;</span><br><span class="line">                activityTargetAudienceService.saveOrUpdateBatch(audienceEntities);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> R.ok(<span class="string">&quot;导入成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;导入失败: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="GPT新建表格导入规范惯例"><a href="#GPT新建表格导入规范惯例" class="headerlink" title="GPT新建表格导入规范惯例"></a>GPT新建表格导入规范惯例</h1><ol><li><p>我有一个excel导入数据库的功能，现在需要我为每个excel的每个标题定一个存入标准，防止存入时报错，请你根据字段以及对应sql语句，给我相关的文字标准描述：</p><p>序号展位号招聘企业招聘岗位HR名称联系电话所需专业招聘人数薪资待遇地区网申链接其他要求企业简介</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> job_search;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> job_search (</span><br><span class="line">  id <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  company_name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;企业名称&#x27;</span>,</span><br><span class="line">  position_name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;岗位名称&#x27;</span>,</span><br><span class="line">  hr_name <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;HR名称&#x27;</span>,</span><br><span class="line">  hr_phone <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;联系电话&#x27;</span>,</span><br><span class="line">  major_requirement <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;专业要求&#x27;</span>,</span><br><span class="line">  participant_count <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;招聘人数&#x27;</span>,</span><br><span class="line">  money <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;薪资待遇&#x27;</span>,</span><br><span class="line">  area <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;工作地点&#x27;</span>,</span><br><span class="line">  application_link text COMMENT <span class="string">&#x27;网申链接&#x27;</span>,</span><br><span class="line">  additional_requirements text COMMENT <span class="string">&#x27;其他要求&#x27;</span>,</span><br><span class="line">  company_description text COMMENT <span class="string">&#x27;企业简介&#x27;</span>,</span><br><span class="line">  created_at <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  updated_at <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">19</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci COMMENT<span class="operator">=</span><span class="string">&#x27;岗位发布详情表&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>参考JobSearchExcellmportListener，为我编写一个ActivityTargetAudienceImportListener，错误消息要求逻辑为第2列班级必填、第3列专业名称必填且不允许出现“专升本”这三个字、第4列年级必填，且只能为数字，由于我的audienceValue存入时是string，具体的逻辑，可以是先尝试转化为Integer，如果失败则抛出然后存入错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobSearchExcelImportListener</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;JobSearchExcelDto&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;JobSearchExcelDto&gt; jobList;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Map&lt;Integer, String&gt;&gt; errorDataList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JobSearchExcelImportListener</span><span class="params">(List&lt;JobSearchExcelDto&gt; jobList, List&lt;Map&lt;Integer, String&gt;&gt; errorDataList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jobList = jobList;</span><br><span class="line">        <span class="built_in">this</span>.errorDataList = errorDataList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(JobSearchExcelDto dto, AnalysisContext context)</span> &#123;</span><br><span class="line">        Map&lt;Integer, String&gt; errors = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验第 3 列: 招聘企业</span></span><br><span class="line">        <span class="keyword">if</span> (dto.getCompanyName() == <span class="literal">null</span> || dto.getCompanyName().isEmpty()) &#123;</span><br><span class="line">            errors.put(<span class="number">2</span>, <span class="string">&quot;招聘企业不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验第 4 列: 招聘岗位</span></span><br><span class="line">        <span class="keyword">if</span> (dto.getPositionName() == <span class="literal">null</span> || dto.getPositionName().isEmpty()) &#123;</span><br><span class="line">            errors.put(<span class="number">3</span>, <span class="string">&quot;招聘岗位不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验第 7 列: 所需专业</span></span><br><span class="line">        <span class="keyword">if</span> (dto.getMajorRequirement() == <span class="literal">null</span> || dto.getMajorRequirement().isEmpty()) &#123;</span><br><span class="line">            errors.put(<span class="number">6</span>, <span class="string">&quot;所需专业不能为空&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!Pattern.matches(<span class="string">&quot;^[\\w/\\u4e00-\\u9fa5]+$&quot;</span>, dto.getMajorRequirement())) &#123;</span><br><span class="line">            errors.put(<span class="number">6</span>, <span class="string">&quot;所需专业必须使用“/”分割&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验第 8 列: 招聘人数</span></span><br><span class="line">        <span class="keyword">if</span> (dto.getParticipantCount() == <span class="literal">null</span>) &#123;</span><br><span class="line">            errors.put(<span class="number">7</span>, <span class="string">&quot;招聘人数不能为空&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (dto.getParticipantCount() == <span class="number">0</span>) &#123;</span><br><span class="line">            errors.put(<span class="number">7</span>, <span class="string">&quot;招聘人数必须为数字整数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验第 9 列: 薪资待遇</span></span><br><span class="line">        <span class="keyword">if</span> (dto.getMoney() == <span class="literal">null</span> || dto.getMoney().isEmpty()) &#123;</span><br><span class="line">            errors.put(<span class="number">8</span>, <span class="string">&quot;薪资待遇不能为空&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            List&lt;String&gt; validSalaries = Arrays.asList(<span class="string">&quot;2000-5000&quot;</span>, <span class="string">&quot;5000-8000&quot;</span>, <span class="string">&quot;8000-15000&quot;</span>, <span class="string">&quot;15000以上&quot;</span>,<span class="string">&quot;面议&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!validSalaries.contains(dto.getMoney())) &#123;</span><br><span class="line">                errors.put(<span class="number">8</span>, <span class="string">&quot;薪资待遇格式错误，仅支持以下格式: 2000-5000, 5000-8000, 8000-15000, 15000以上, 面议&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验第 10 列: 地区</span></span><br><span class="line">        <span class="keyword">if</span> (dto.getArea() == <span class="literal">null</span> || dto.getArea().isEmpty()) &#123;</span><br><span class="line">            errors.put(<span class="number">9</span>, <span class="string">&quot;地区不能为空&quot;</span>);</span><br><span class="line">        &#125;  <span class="keyword">else</span> <span class="keyword">if</span> (!Pattern.matches(<span class="string">&quot;^[\\w,\\u4e00-\\u9fa5]+$&quot;</span>, dto.getArea())) &#123;</span><br><span class="line">            errors.put(<span class="number">9</span>, <span class="string">&quot;地区必须使用英文逗号分割&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存错误信息到 dto</span></span><br><span class="line">        dto.setErrorMessages(errors);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 dto 和错误信息添加到列表</span></span><br><span class="line">        jobList.add(dto);</span><br><span class="line">        errorDataList.add(errors.isEmpty() ? <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;() : errors);  <span class="comment">// 确保每行都有一个 Map</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span> &#123;</span><br><span class="line">        <span class="comment">// 全部解析完成后的处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ActivityTargetAudienceExcelDto：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActivityTargetAudienceExcelDto</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;序号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;年级&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String audienceLabel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;班级&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String audienceValue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;专业名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String major;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, String&gt; errorMessages = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>参考JobSearchController的importExcel修改ActivityTargetAudienceController的importExcel</p><p>JobSearchController的importExcel：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/importExcel&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">importJobSearchExcel</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 存储读取的数据和错误信息</span></span><br><span class="line">            List&lt;JobSearchExcelDto&gt; jobList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            List&lt;Map&lt;Integer, String&gt;&gt; errorDataList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建 ExcelImportListener</span></span><br><span class="line">            <span class="type">JobSearchExcelImportListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JobSearchExcelImportListener</span>(jobList, errorDataList);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用 EasyExcel 读取 Excel 数据，使用自定义监听器</span></span><br><span class="line">            EasyExcel.read(file.getInputStream(), JobSearchExcelDto.class, listener)</span><br><span class="line">                    .sheet()</span><br><span class="line">                    .doReadSync();  <span class="comment">// 使用同步读取方式，确保读取所有行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果没有数据，则返回提示</span></span><br><span class="line">            <span class="keyword">if</span> (jobList.isEmpty()) &#123;</span><br><span class="line">                response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">                response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                response.getWriter().write(<span class="string">&quot;&#123;\&quot;message\&quot;:\&quot;导入数据为空\&quot;&#125;&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检查是否存在错误</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">hasErrors</span> <span class="operator">=</span> jobList.stream()</span><br><span class="line">                    .anyMatch(dto -&gt; dto.getErrorMessages() != <span class="literal">null</span> &amp;&amp; !dto.getErrorMessages().isEmpty());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (hasErrors) &#123;</span><br><span class="line">                <span class="comment">// 如果有错误，生成错误文件并返回</span></span><br><span class="line">                response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">                response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=error_data.xlsx&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 调用 EasyExcel 写入错误数据</span></span><br><span class="line">                EasyExcel.write(response.getOutputStream(), JobSearchExcelDto.class)</span><br><span class="line">                        .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">ErrorCellStyleHandler</span>(errorDataList))</span><br><span class="line">                        .sheet(<span class="string">&quot;错误数据&quot;</span>)</span><br><span class="line">                        .doWrite(jobList);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用 mapToJobSearch 将 DTO 转换为实体列表</span></span><br><span class="line">            List&lt;JobSearch&gt; jobEntities = jobList.stream()</span><br><span class="line">                    .map(<span class="built_in">this</span>::mapToJobSearch)  <span class="comment">// 调用 mapToJobSearch 方法</span></span><br><span class="line">                    .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 批量保存或更新</span></span><br><span class="line">            <span class="keyword">if</span> (!jobEntities.isEmpty()) &#123;</span><br><span class="line">                jobSearchService.saveOrUpdateBatch(jobEntities);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回成功信息</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;&#123;\&quot;message\&quot;:\&quot;导入成功\&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">                response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                response.getWriter().write(<span class="string">&quot;&#123;\&quot;message\&quot;:\&quot;导入失败: &quot;</span> + e.getMessage() + <span class="string">&quot;\&quot;&#125;&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">                ioException.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li></li></ol><h1 id="利用-CASE-语句，将-money-转换为数值后按从高到低排序"><a href="#利用-CASE-语句，将-money-转换为数值后按从高到低排序" class="headerlink" title="利用 CASE 语句，将 money 转换为数值后按从高到低排序"></a>利用 CASE 语句，将 money 转换为数值后按从高到低排序</h1><p>在代码中，CASE 语句用于将文字形式的薪资范围（如 “2000-5000”）转换为对应的数值，以便进行条件过滤和排序操作。以下是具体解析：</p><p><strong>CASE 语句基本结构</strong></p><p>CASE 是 SQL 中的一种条件表达式，类似于编程语言中的 if-else 或 switch-case，用于根据条件返回不同的值。</p><p>语法如下：</p><p>CASE</p><p>  WHEN condition1 THEN result1</p><p>  WHEN condition2 THEN result2</p><p>  …</p><p>  ELSE resultN</p><p>END</p><p>​•WHEN condition1 THEN result1：如果 condition1 为真，返回 result1。</p><p>​•ELSE resultN：当没有任何条件为真时，返回 resultN（可以省略）。</p><p>在我们的代码中，CASE 被用在 QueryWrapper.apply 和 orderByDesc 中。</p><p><strong>用法 1：映射薪资范围到数值</strong></p><p>queryWrapper.lambda()</p><p>  .apply(“CASE “ +</p><p>​      “WHEN money &#x3D; ‘2000-5000’ THEN 2000 “ +</p><p>​      “WHEN money &#x3D; ‘5000-8000’ THEN 5000 “ +</p><p>​      “WHEN money &#x3D; ‘8000-15000’ THEN 8000 “ +</p><p>​      “WHEN money &#x3D; ‘15000以上’ THEN 15000 “ +</p><p>​      “ELSE 0 END &gt;&#x3D; {0}”, lowSalaryValue);</p><p><strong>解析：</strong></p><p>​1.money &#x3D; ‘2000-5000’：</p><p>​•如果 JobSearch.money 为 “2000-5000”，返回 2000。</p><p>​2.money &#x3D; ‘5000-8000’：</p><p>​•如果 JobSearch.money 为 “5000-8000”，返回 5000。</p><p>​3.ELSE 0：</p><p>​•如果 JobSearch.money 的值不在已知范围内，返回 0。</p><p>最终，这段 CASE 的结果是一个整数值，可以用来和用户的最低薪资需求（lowSalaryValue）进行数值比较。</p><p>例如：如果用户的 lowSalaryValue 是 8000，那么查询条件会变成：</p><p>CASE</p><p>  WHEN money &#x3D; ‘2000-5000’ THEN 2000</p><p>  WHEN money &#x3D; ‘5000-8000’ THEN 5000</p><p>  WHEN money &#x3D; ‘8000-15000’ THEN 8000</p><p>  WHEN money &#x3D; ‘15000以上’ THEN 15000</p><p>  ELSE 0</p><p>END &gt;&#x3D; 8000</p><p>这将筛选出薪资范围为 “8000-15000” 和 “15000以上” 的数据。</p><p><strong>用法 2：排序</strong></p><p>queryWrapper.orderByDesc(“CASE “ +</p><p>​    “WHEN money &#x3D; ‘2000-5000’ THEN 2000 “ +</p><p>​    “WHEN money &#x3D; ‘5000-8000’ THEN 5000 “ +</p><p>​    “WHEN money &#x3D; ‘8000-15000’ THEN 8000 “ +</p><p>​    “WHEN money &#x3D; ‘15000以上’ THEN 15000 “ +</p><p>​    “ELSE 0 END”);</p><p><strong>解析：</strong></p><p>​1.CASE 的逻辑同上，将文字形式的 money 映射为可比较的数值。</p><p>​2.orderByDesc 按照这些数值从大到小排序。</p><p>例如：</p><p>​•“15000以上” -&gt; 15000</p><p>​•“8000-15000” -&gt; 8000</p><p>​•“5000-8000” -&gt; 5000</p><p>​•“2000-5000” -&gt; 2000</p><p>最终，结果将按这些映射值从高到低排序。</p><p><strong>SQL 执行逻辑示例</strong></p><p>假设表 JobSearch 中有如下数据：</p><p><strong>money</strong></p><p>2000-5000</p><p>5000-8000</p><p>8000-15000</p><p>15000以上</p><p>SQL 查询语句：</p><p>SELECT *</p><p>FROM JobSearch</p><p>WHERE </p><p>  CASE</p><p>​    WHEN money &#x3D; ‘2000-5000’ THEN 2000</p><p>​    WHEN money &#x3D; ‘5000-8000’ THEN 5000</p><p>​    WHEN money &#x3D; ‘8000-15000’ THEN 8000</p><p>​    WHEN money &#x3D; ‘15000以上’ THEN 15000</p><p>​    ELSE 0</p><p>  END &gt;&#x3D; 8000</p><p>ORDER BY</p><p>  CASE</p><p>​    WHEN money &#x3D; ‘2000-5000’ THEN 2000</p><p>​    WHEN money &#x3D; ‘5000-8000’ THEN 5000</p><p>​    WHEN money &#x3D; ‘8000-15000’ THEN 8000</p><p>​    WHEN money &#x3D; ‘15000以上’ THEN 15000</p><p>​    ELSE 0</p><p>  END DESC;</p><p>执行结果：</p><p>​•WHERE 过滤出 money &gt;&#x3D; 8000 的数据，即：”8000-15000” 和 “15000以上”。</p><p>​•ORDER BY 按映射值排序，最终结果：</p><p>​1.“15000以上”</p><p>​2.“8000-15000”</p><p><strong>总结</strong></p><p>​•CASE 用于将无法直接比较的文字形式数据（薪资范围）转换为数值。</p><p>​•筛选通过 CASE 结合 WHERE 实现。</p><p>​•排序通过 CASE 映射值结合 ORDER BY 实现。</p><p>​•这种方法兼容文字范围的动态映射，同时保留了高效的 SQL 查询能力。</p><h1 id="如何让item-title部分的p标签保持只有一行，多处一行的部分用…代替"><a href="#如何让item-title部分的p标签保持只有一行，多处一行的部分用…代替" class="headerlink" title="如何让item.title部分的p标签保持只有一行，多处一行的部分用…代替"></a>如何让item.title部分的p标签保持只有一行，多处一行的部分用…代替</h1><p><strong>Tailwind 的 truncate 类作用</strong></p><p>truncate 类的实际效果等同于以下 CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden; <span class="comment">/* 超出部分隐藏 */</span></span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis; <span class="comment">/* 显示省略号 */</span></span><br><span class="line"><span class="attribute">white-space</span>: nowrap; <span class="comment">/* 文本不换行 */</span></span><br></pre></td></tr></table></figure><p><strong>效果</strong></p><p>​1.文本长度超过容器宽度时，会自动加上 …。</p><p>​2.文本强制保持单行，不会因为内容过多而换行。</p><p><strong>自定义宽度容器</strong></p><p>如果需要限制 title 的最大显示宽度以便触发省略号，可以添加 max-w-* 类。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-lg text-blue-400 cursor-pointer hover:text-black truncate max-w-[200px]&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; item.title &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中：</p><p>​•max-w-[200px]：限制最大宽度为 200px（可以根据设计需求调整）。</p><p>​•这将确保在宽度超过 200px 时文本溢出，触发省略号效果。</p><h1 id="esayexcel"><a href="#esayexcel" class="headerlink" title="esayexcel"></a>esayexcel</h1><h2 id="esayexcel导入失败"><a href="#esayexcel导入失败" class="headerlink" title="esayexcel导入失败"></a>esayexcel导入失败</h2><p>参考链接：<a href="https://segmentfault.com/q/1010000018526018">https://segmentfault.com/q/1010000018526018</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">导入失败: Text <span class="string">&#x27;2024-11-23&#x27;</span> could not be parsed: Unable to obtain LocalDateTime from TemporalAccessor: &#123;&#125;,ISO resolved to 2024-11-23 of <span class="built_in">type</span> java.time.format.Parsed</span><br></pre></td></tr></table></figure><p>导入失败原因：<code>LocalDateTime</code> 不能转换 <code>yyyy-MM-dd</code> 这种格式的字符串，LocalDateTime 是 LocalDate + LocalTime 两部分都得有，也就是说上面的格式字符串缺少了小时分钟以及秒，将类似的类型改为LocalDate就行</p><h2 id="esayexcel导出"><a href="#esayexcel导出" class="headerlink" title="esayexcel导出"></a>esayexcel导出</h2><p>后端接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/exportJobSearchExcel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportJobSearchExcel</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 查询数据库中的 JobSearch 数据</span></span><br><span class="line">        List&lt;JobSearch&gt; jobSearchList = jobSearchService.list();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jobSearchList.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;无数据可导出&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将实体对象转换为 DTO 对象</span></span><br><span class="line">        List&lt;JobSearchExcelDto&gt; jobSearchDtoList = jobSearchList.stream()</span><br><span class="line">                .map(<span class="built_in">this</span>::mapToJobSearchExcelDto)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置响应头，确保文件正确下载</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;求职信息&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename*=UTF-8&#x27;&#x27;&quot;</span> + fileName + <span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 EasyExcel 写入数据到响应流</span></span><br><span class="line">        EasyExcel.write(response.getOutputStream(), JobSearchExcelDto.class)</span><br><span class="line">                .sheet(<span class="string">&quot;求职信息&quot;</span>)</span><br><span class="line">                .doWrite(jobSearchDtoList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 导出失败时返回 JSON 错误信息</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;&#123;\&quot;message\&quot;:\&quot;导出失败: &quot;</span> + e.getMessage() + <span class="string">&quot;\&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">            ioException.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将 JobSearch 实体对象转换为 JobSearchExcelDto</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> JobSearchExcelDto <span class="title function_">mapToJobSearchExcelDto</span><span class="params">(JobSearch jobSearch)</span> &#123;</span><br><span class="line">    <span class="type">JobSearchExcelDto</span> <span class="variable">dto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JobSearchExcelDto</span>();</span><br><span class="line">    dto.setId(jobSearch.getId());</span><br><span class="line">    dto.setCompanyName(jobSearch.getCompanyName());</span><br><span class="line">    dto.setPositionName(jobSearch.getPositionName());</span><br><span class="line">    dto.setHrName(jobSearch.getHrName());</span><br><span class="line">    dto.setHrPhone(jobSearch.getHrPhone());</span><br><span class="line">    dto.setMajorRequirement(jobSearch.getMajorRequirement());</span><br><span class="line">    dto.setParticipantCount(jobSearch.getParticipantCount());</span><br><span class="line">    dto.setMoney(jobSearch.getMoney());</span><br><span class="line">    dto.setArea(jobSearch.getArea());</span><br><span class="line">    dto.setApplicationLink(jobSearch.getApplicationLink());</span><br><span class="line">    dto.setAdditionalRequirements(jobSearch.getAdditionalRequirements());</span><br><span class="line">    dto.setCompanyDescription(jobSearch.getCompanyDescription());</span><br><span class="line">    <span class="keyword">return</span> dto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端请求：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleExport</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 发送导出请求</span></span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;http://localhost:5173/api/user-info/exportExcel&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">ok</span>) &#123;</span><br><span class="line">            <span class="comment">// 将响应转换为 Blob 对象</span></span><br><span class="line">            <span class="keyword">const</span> blob = <span class="keyword">await</span> response.<span class="title function_">blob</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建下载链接</span></span><br><span class="line">            <span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">            <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">            link.<span class="property">href</span> = url;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置文件名，确保与后端导出一致</span></span><br><span class="line">            link.<span class="title function_">setAttribute</span>(<span class="string">&quot;download&quot;</span>, <span class="string">&quot;用户信息.xlsx&quot;</span>);</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(link);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 自动触发下载</span></span><br><span class="line">            link.<span class="title function_">click</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 清理临时链接</span></span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(link);</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(url);</span><br><span class="line"></span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&quot;文件导出成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&quot;文件导出失败，请重试！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;导出过程中出现错误：&quot;</span>, error);</span><br><span class="line">        <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&quot;导出过程中出现错误！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="esayexcel标红错误部分数据的单元格"><a href="#esayexcel标红错误部分数据的单元格" class="headerlink" title="esayexcel标红错误部分数据的单元格"></a>esayexcel标红错误部分数据的单元格</h2><p>注意别忘了ExcelDto里加上<code>errorMessages</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActivityTargetAudienceExcelDto</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;序号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;年级&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String audienceLabel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;班级&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String audienceValue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;专业名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String major;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, String&gt; errorMessages = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体步骤</p><ol><li><strong>数据读取与校验</strong>：<ul><li>通过 <code>EasyExcel</code> 读取用户上传的 Excel 文件。</li><li>使用自定义监听器（<code>JobSearchExcelImportListener</code>）对每一行数据进行校验，记录错误信息。</li></ul></li><li><strong>标注错误单元格</strong>：<ul><li>如果检测到错误，通过自定义的 <code>ErrorCellStyleHandler</code> 在输出的 Excel 中将错误单元格标红，并在最后一列记录对应的错误信息。</li></ul></li><li><strong>导出错误文件</strong>：<ul><li>如果存在错误数据，将处理后的 Excel 数据（包含标注）作为错误文件导出。</li><li>如果没有错误，则将数据保存到数据库。</li></ul></li></ol><p>ErrorCellStyleHandler</p><p><strong>作用</strong>：</p><ul><li>对包含错误数据的单元格进行样式修改（标红）。</li><li>在最后一列追加错误描述。</li></ul><p><strong>关键逻辑</strong>：</p><ul><li><code>afterCellDispose</code>：<ul><li>检测当前单元格是否包含错误信息。</li><li>如果有错误，则设置背景色为红色。</li></ul></li><li><code>afterRowDispose</code>：<ul><li>如果是标题行，在最后一列添加“错误信息”标题。</li><li>如果是数据行，在最后一列写入当前行的错误描述。</li></ul></li></ul><p><strong>注意事项</strong>：</p><ul><li>样式设置时，确保未覆盖已有样式。</li><li>行索引与列索引从 0 开始，容易混淆。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorCellStyleHandler</span> <span class="keyword">implements</span> <span class="title class_">CellWriteHandler</span>, RowWriteHandler &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Map&lt;Integer, String&gt;&gt; errorDataList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ErrorCellStyleHandler</span><span class="params">(List&lt;Map&lt;Integer, String&gt;&gt; errorDataList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.errorDataList = errorDataList;</span><br><span class="line">        System.out.println(<span class="string">&quot;ErrorCellStyleHandler initialized&quot;</span>+errorDataList.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCellDispose</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        <span class="comment">// 检查是否是数据行（非表头）</span></span><br><span class="line">        <span class="keyword">if</span> (Boolean.TRUE.equals(context.getHead())) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前行索引和列索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rowIndex</span> <span class="operator">=</span> context.getRowIndex();</span><br><span class="line">        <span class="type">int</span> <span class="variable">columnIndex</span> <span class="operator">=</span> context.getColumnIndex();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查当前单元格是否存在错误</span></span><br><span class="line">        <span class="keyword">if</span> (rowIndex &gt; <span class="number">0</span> &amp;&amp; rowIndex - <span class="number">1</span> &lt; errorDataList.size()) &#123; <span class="comment">// rowIndex 是从 1 开始的</span></span><br><span class="line">            Map&lt;Integer, String&gt; errorMap = errorDataList.get(rowIndex - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (errorMap.containsKey(columnIndex)) &#123;</span><br><span class="line">                <span class="comment">// 获取或创建样式</span></span><br><span class="line">                WriteCellData&lt;?&gt; cellData = context.getFirstCellData();</span><br><span class="line">                <span class="type">WriteCellStyle</span> <span class="variable">writeCellStyle</span> <span class="operator">=</span> cellData.getOrCreateStyle();</span><br><span class="line">                writeCellStyle.setFillPatternType(FillPatternType.SOLID_FOREGROUND);</span><br><span class="line">                writeCellStyle.setFillForegroundColor(IndexedColors.RED.getIndex());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 输出日志，便于调试</span></span><br><span class="line">                System.out.println(<span class="string">&quot;标记错误: 行 &quot;</span> + (rowIndex + <span class="number">1</span>) + <span class="string">&quot;, 列 &quot;</span> + (columnIndex + <span class="number">1</span>) + <span class="string">&quot;, 错误信息: &quot;</span> + errorMap.get(columnIndex));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterRowDispose</span><span class="params">(RowWriteHandlerContext context)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果是头部行，添加“错误信息”标题</span></span><br><span class="line">        <span class="keyword">if</span> (BooleanUtils.isTrue(context.getHead())) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">lastColumnIndex</span> <span class="operator">=</span> context.getRow().getLastCellNum();</span><br><span class="line">            <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> context.getRow().createCell(lastColumnIndex, CellType.STRING);</span><br><span class="line">            cell.setCellValue(<span class="string">&quot;错误信息&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> context.getWriteWorkbookHolder().getWorkbook();</span><br><span class="line">            <span class="type">CellStyle</span> <span class="variable">headerStyle</span> <span class="operator">=</span> workbook.createCellStyle();</span><br><span class="line">            <span class="type">Font</span> <span class="variable">font</span> <span class="operator">=</span> workbook.createFont();</span><br><span class="line">            font.setBold(<span class="literal">true</span>);</span><br><span class="line">            headerStyle.setFont(font);</span><br><span class="line">            cell.setCellStyle(headerStyle);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果不是头部，处理错误信息列</span></span><br><span class="line">        <span class="keyword">if</span> (context.getRelativeRowIndex() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rowIndex</span> <span class="operator">=</span> context.getRelativeRowIndex();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rowIndex &lt; errorDataList.size()) &#123;</span><br><span class="line">                Map&lt;Integer, String&gt; errorMap = errorDataList.get(rowIndex);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (errorMap != <span class="literal">null</span> &amp;&amp; !errorMap.isEmpty()) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">lastColumnIndex</span> <span class="operator">=</span> context.getRow().getLastCellNum();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> String.join(<span class="string">&quot;; &quot;</span>, errorMap.values());</span><br><span class="line">                    <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> context.getRow().createCell(lastColumnIndex, CellType.STRING);</span><br><span class="line">                    cell.setCellValue(errorMessage);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 设置样式（如红色字体）</span></span><br><span class="line">                    <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> context.getWriteWorkbookHolder().getWorkbook();</span><br><span class="line">                    <span class="type">CellStyle</span> <span class="variable">errorStyle</span> <span class="operator">=</span> workbook.createCellStyle();</span><br><span class="line">                    <span class="type">Font</span> <span class="variable">font</span> <span class="operator">=</span> workbook.createFont();</span><br><span class="line">                    font.setColor(IndexedColors.RED.getIndex());</span><br><span class="line">                    errorStyle.setFont(font);</span><br><span class="line">                    cell.setCellStyle(errorStyle);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JobSearchExcellmportListener</p><p><strong>作用</strong>：</p><ul><li>负责监听 Excel 的数据解析过程。</li><li>对每一行的关键字段（如招聘企业、岗位、薪资等）进行校验，记录错误信息。</li></ul><p><strong>关键逻辑</strong>：</p><ul><li>利用 <code>Map&lt;Integer, String&gt;</code> 存储每一行错误信息，其中键为列索引，值为错误描述。</li><li><code>errorDataList</code> 保存所有行的错误信息，用于后续处理。</li></ul><p><strong>注意事项</strong>：</p><ul><li>检查逻辑需要与业务需求保持一致，例如字段是否为必填、格式是否正确等。</li><li>注意之前确保每行都有一个 Map部分的代码有误，现在是修正版本，否则只是储存了有错误的数据，实际上每行都要存入，即使该行没错误</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobSearchExcelImportListener</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;JobSearchExcelDto&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;JobSearchExcelDto&gt; jobList;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Map&lt;Integer, String&gt;&gt; errorDataList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JobSearchExcelImportListener</span><span class="params">(List&lt;JobSearchExcelDto&gt; jobList, List&lt;Map&lt;Integer, String&gt;&gt; errorDataList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jobList = jobList;</span><br><span class="line">        <span class="built_in">this</span>.errorDataList = errorDataList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(JobSearchExcelDto dto, AnalysisContext context)</span> &#123;</span><br><span class="line">        Map&lt;Integer, String&gt; errors = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验第 3 列: 招聘企业</span></span><br><span class="line">        <span class="keyword">if</span> (dto.getCompanyName() == <span class="literal">null</span> || dto.getCompanyName().isEmpty()) &#123;</span><br><span class="line">            errors.put(<span class="number">2</span>, <span class="string">&quot;招聘企业不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验第 4 列: 招聘岗位</span></span><br><span class="line">        <span class="keyword">if</span> (dto.getPositionName() == <span class="literal">null</span> || dto.getPositionName().isEmpty()) &#123;</span><br><span class="line">            errors.put(<span class="number">3</span>, <span class="string">&quot;招聘岗位不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验第 7 列: 所需专业</span></span><br><span class="line">        <span class="keyword">if</span> (dto.getMajorRequirement() == <span class="literal">null</span> || dto.getMajorRequirement().isEmpty()) &#123;</span><br><span class="line">            errors.put(<span class="number">6</span>, <span class="string">&quot;所需专业不能为空&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!Pattern.matches(<span class="string">&quot;^[\\w/\\u4e00-\\u9fa5]+$&quot;</span>, dto.getMajorRequirement())) &#123;</span><br><span class="line">            errors.put(<span class="number">6</span>, <span class="string">&quot;所需专业必须使用“/”分割&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验第 8 列: 招聘人数</span></span><br><span class="line">        <span class="keyword">if</span> (dto.getParticipantCount() == <span class="literal">null</span>) &#123;</span><br><span class="line">            errors.put(<span class="number">7</span>, <span class="string">&quot;招聘人数不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验第 9 列: 薪资待遇</span></span><br><span class="line">        <span class="keyword">if</span> (dto.getMoney() == <span class="literal">null</span> || dto.getMoney().isEmpty()) &#123;</span><br><span class="line">            errors.put(<span class="number">8</span>, <span class="string">&quot;薪资待遇不能为空&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            List&lt;String&gt; validSalaries = Arrays.asList(<span class="string">&quot;2000-5000&quot;</span>, <span class="string">&quot;5000-8000&quot;</span>, <span class="string">&quot;8000-15000&quot;</span>, <span class="string">&quot;15000以上&quot;</span>,<span class="string">&quot;面议&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!validSalaries.contains(dto.getMoney())) &#123;</span><br><span class="line">                errors.put(<span class="number">8</span>, <span class="string">&quot;薪资待遇格式错误，仅支持以下格式: 2000-5000, 5000-8000, 8000-15000, 15000以上, 面议&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验第 10 列: 地区</span></span><br><span class="line">        <span class="keyword">if</span> (dto.getArea() == <span class="literal">null</span> || dto.getArea().isEmpty()) &#123;</span><br><span class="line">            errors.put(<span class="number">9</span>, <span class="string">&quot;地区不能为空&quot;</span>);</span><br><span class="line">        &#125;  <span class="keyword">else</span> <span class="keyword">if</span> (!Pattern.matches(<span class="string">&quot;^[\\w,\\u4e00-\\u9fa5]+$&quot;</span>, dto.getArea())) &#123;</span><br><span class="line">            errors.put(<span class="number">9</span>, <span class="string">&quot;地区必须使用英文逗号分割&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存错误信息到 dto</span></span><br><span class="line">        dto.setErrorMessages(errors);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 dto 和错误信息添加到列表</span></span><br><span class="line">        jobList.add(dto);</span><br><span class="line">        errorDataList.add(errors.isEmpty() ? <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;() : errors);  <span class="comment">// 确保每行都有一个 Map</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span> &#123;</span><br><span class="line">        <span class="comment">// 全部解析完成后的处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JobSearchController</p><p><strong>作用</strong>：</p><ul><li>读取用户上传的文件，并根据错误情况决定后续操作：<ol><li>如果没有错误，直接保存数据。</li><li>如果有错误，生成包含错误标注的文件并返回给用户。</li></ol></li></ul><p><strong>关键逻辑</strong>：</p><ul><li>判断是否存在错误：<code>jobList.stream().anyMatch(...)</code>。</li><li>使用 <code>EasyExcel</code> 写入时，注册 <code>ErrorCellStyleHandler</code> 以实现错误标注。</li></ul><p><strong>注意事项</strong>：</p><ul><li>返回 Excel 文件时需要正确设置 <code>Content-Type</code> 和 <code>Content-Disposition</code>。</li><li>处理异常时需要保证响应的输出流关闭。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/importExcel&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">importJobSearchExcel</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 存储读取的数据和错误信息</span></span><br><span class="line">            List&lt;JobSearchExcelDto&gt; jobList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            List&lt;Map&lt;Integer, String&gt;&gt; errorDataList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建 ExcelImportListener</span></span><br><span class="line">            <span class="type">JobSearchExcelImportListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JobSearchExcelImportListener</span>(jobList, errorDataList);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用 EasyExcel 读取 Excel 数据，使用自定义监听器</span></span><br><span class="line">            EasyExcel.read(file.getInputStream(), JobSearchExcelDto.class, listener)</span><br><span class="line">                    .sheet()</span><br><span class="line">                    .doReadSync();  <span class="comment">// 使用同步读取方式，确保读取所有行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果没有数据，则返回提示</span></span><br><span class="line">            <span class="keyword">if</span> (jobList.isEmpty()) &#123;</span><br><span class="line">                response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">                response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                response.getWriter().write(<span class="string">&quot;&#123;\&quot;message\&quot;:\&quot;导入数据为空\&quot;&#125;&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检查是否存在错误</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">hasErrors</span> <span class="operator">=</span> jobList.stream()</span><br><span class="line">                    .anyMatch(dto -&gt; dto.getErrorMessages() != <span class="literal">null</span> &amp;&amp; !dto.getErrorMessages().isEmpty());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (hasErrors) &#123;</span><br><span class="line">                <span class="comment">// 如果有错误，生成错误文件并返回</span></span><br><span class="line">                response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">                response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=error_data.xlsx&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 调用 EasyExcel 写入错误数据</span></span><br><span class="line">                EasyExcel.write(response.getOutputStream(), JobSearchExcelDto.class)</span><br><span class="line">                        .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">ErrorCellStyleHandler</span>(errorDataList))</span><br><span class="line">                        .sheet(<span class="string">&quot;错误数据&quot;</span>)</span><br><span class="line">                        .doWrite(jobList);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用 mapToJobSearch 将 DTO 转换为实体列表</span></span><br><span class="line">            List&lt;JobSearch&gt; jobEntities = jobList.stream()</span><br><span class="line">                    .map(<span class="built_in">this</span>::mapToJobSearch)  <span class="comment">// 调用 mapToJobSearch 方法</span></span><br><span class="line">                    .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 批量保存或更新</span></span><br><span class="line">            <span class="keyword">if</span> (!jobEntities.isEmpty()) &#123;</span><br><span class="line">                jobSearchService.saveOrUpdateBatch(jobEntities);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回成功信息</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;&#123;\&quot;message\&quot;:\&quot;导入成功\&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">                response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                response.getWriter().write(<span class="string">&quot;&#123;\&quot;message\&quot;:\&quot;导入失败: &quot;</span> + e.getMessage() + <span class="string">&quot;\&quot;&#125;&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">                ioException.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>CustomlntegerConverter</p><p><strong>自定义类型转换：<code>CustomIntegerConverter</code></strong></p><ul><li>作用：<ul><li>解决 Excel 数据中整数字段可能为空、格式错误的问题。</li><li>在读取或写入过程中，将错误数据转换为默认值（如 0），但保留错误信息。</li></ul></li><li>关键逻辑：<ul><li>**<code>convertToJavaData</code>**：解析单元格数据，确保其为合法的整数格式，否则返回默认值。</li><li>**<code>convertToExcelData</code>**：在写入 Excel 时，优先输出原始错误数据。</li></ul></li><li>注意事项：<ul><li>注意字符串转换为数字时可能抛出的 <code>NumberFormatException</code>。</li><li>确保 <code>errorData</code> 在多线程情况下不会被共享导致数据错误。</li><li>原始错误信息保留这块通过解析单元格数据时存入，在写入 Excel 时通过变量改变实现的，否则是无法存入不同类型的数据的</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomIntegerConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">errorData</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">convertToJavaData</span><span class="params">(ReadCellData cellData, ExcelContentProperty contentProperty, GlobalConfiguration globalConfiguration)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cellValue</span> <span class="operator">=</span> cellData.getStringValue();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是 null 或者空字符串，尝试读取为数字</span></span><br><span class="line">        <span class="keyword">if</span> (cellValue == <span class="literal">null</span> || cellValue.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 尝试使用数字格式获取值</span></span><br><span class="line">            <span class="keyword">if</span> (cellData.getNumberValue() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> cellData.getNumberValue().intValue();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// 错误格式时返回 0</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 尝试将表格中的字符串转换为 Integer</span></span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(cellValue);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            <span class="comment">// 如果字符串不能转换为整数，返回 0</span></span><br><span class="line">            errorData = cellValue;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// 错误格式时返回 0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> WriteCellData&lt;?&gt; convertToExcelData(Integer value, ExcelContentProperty contentProperty, GlobalConfiguration globalConfiguration) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;convertToExcelData-errorData: &quot;</span> + errorData);</span><br><span class="line">        <span class="comment">// 如果值为 null 或 0，则写入空字符串，避免写入错误数据</span></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span> || value == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WriteCellData</span>&lt;&gt;(errorData); <span class="comment">// 返回空字符串</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 正常转换 Integer 为字符串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WriteCellData</span>&lt;&gt;(String.valueOf(value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学生信息表备份：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;h-full&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=&quot;flex justify-center items-center px-8&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;h-full&quot;&gt;</span><br><span class="line">                &lt;p class=&quot;md:text-4xl font-extrabold text-2xl&quot; v-if=&quot;userInfo.user?.userType == &#x27;student&#x27;&quot;&gt;个人信息登记详情&lt;/p&gt;</span><br><span class="line">                &lt;p class=&quot;md:text-4xl font-extrabold text-2xl text-center&quot; v-if=&quot;userInfo.user?.userType == &#x27;teacher&#x27;&quot;&gt;&#123;&#123; userDetail.name &#125;&#125;学生信息表&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;el-scrollbar height=&quot;90%&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;main flex flex-col justify-center gap-10 p-10&quot;&gt;</span><br><span class="line">                &lt;!-- 第一行 --&gt;</span><br><span class="line">                &lt;div class=&quot;flex flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;学生照片：&lt;/p&gt;</span><br><span class="line">                        &lt;img :src=&quot;userDetail.imageUrl&quot; class=&quot;avatar&quot; /&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;姓名：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;性别：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.gender &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                &lt;!-- 第二行 --&gt;</span><br><span class="line">                &lt;div class=&quot;md:flex md:flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;手机号：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.phone &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;学号：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.studentId &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center mt-4 md:mt-0&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;身份证号：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.idCard &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                &lt;!-- 第三行 --&gt;</span><br><span class="line">                &lt;div class=&quot;md:flex md:flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;年级：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.grade &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center mt-4 md:mt-0&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;专业：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.major &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;班级：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.className &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                &lt;!-- 出生日期相关 --&gt;</span><br><span class="line">                &lt;div class=&quot;md:flex md:flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;出生日期：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.birthDate &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;入学日期：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.admissionDate &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;预计毕业时间：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.expectedGraduation &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                &lt;!-- 其他信息 --&gt;</span><br><span class="line">                &lt;div class=&quot;md:flex md:flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;籍贯：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.nativePlace &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;生源地：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.sourcePlace &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;民族：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.ethnicity &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &lt;!-- 第四行 --&gt;</span><br><span class="line">                &lt;div class=&quot;flex flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;班级职务：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.classRole &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;专业方向：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.specialization &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                &lt;div class=&quot;md:flex md:flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;户口所在地：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.residence &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;家庭住址：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.homeAddress &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;md:flex md:flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;辅导员：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.counselor &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;辅导员手机号：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.counselorPhone &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;md:flex md:flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;班主任：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.classTeacher &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;班主任手机号：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.classTeacherPhone &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;md:flex md:flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;毕设导师：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.graduationTutor &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;毕设导师手机号：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.graduationTutorPhone &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                &lt;div class=&quot;md:flex md:flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;寝室号：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.dormitoryNumber &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;红旗网络：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.networkStatus &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;md:flex md:flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;寝室成员名单：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.dormitoryMembers &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;md:flex md:flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;政治面貌：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.politicalStatus &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;入党进度：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.partyProgress &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;md:flex md:flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;入党培训进度：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.partyTrainingProgress &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;所在支部：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.branchName &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;md:flex md:flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;入党申请时间：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.applicationDate &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;入党积极分子时间：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.activistDate &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;md:flex md:flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;发展对象时间：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.developmentDate &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;预备党员时间：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.probationaryDate &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;md:flex md:flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;发展转正时间：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.fullMemberDate &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;党建工时：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.partyHours &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;md:flex md:flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;党支部书记姓名：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.branchSecretary &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;党支部副书记姓名：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.branchDeputySecretary &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;md:flex md:flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;电子邮箱：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.email &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;QQ号码：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.qqNumber &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;md:flex md:flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;微信号码：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.wechatId &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;抖音账号：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.douyinId &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;md:flex md:flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;!-- 家长1信息 --&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;家长1姓名：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.parent1Name &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;家长1手机号：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.parent1Phone &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;md:flex md:flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;家长1工作单位：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.parent1Company &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;家长1职业：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.parent1Job &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;md:flex md:flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;!-- 家长2信息 --&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;家长2姓名：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.parent2Name &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;家长2手机号：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.parent2Phone &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;md:flex md:flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;家长2工作单位：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.parent2Company &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;家长2职业：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.parent2Job &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;md:flex md:flex-1 justify-between items-center gap-10&quot;&gt;</span><br><span class="line">                    &lt;!-- 紧急联系人信息 --&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;紧急联系人姓名：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.emergencyContactName &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;flex flex-1 justify-start items-center&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;紧急联系人手机号：&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;text-xl font-bold whitespace-nowrap&quot;&gt;&#123;&#123; userDetail.emergencyContactPhone &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/el-scrollbar&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; Delete, Download, Plus, ZoomIn &#125; from &#x27;@element-plus/icons-vue&#x27;;</span><br><span class="line">import router from &#x27;../router/index&#x27;;</span><br><span class="line">import &#123; useRoute &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">import &#123; ElMessage &#125; from &#x27;element-plus&#x27;;</span><br><span class="line">import &#123; pcaTextArr &#125; from &quot;element-china-area-data&quot;;</span><br><span class="line">import type &#123; UploadProps &#125; from &#x27;element-plus&#x27;</span><br><span class="line"></span><br><span class="line">// 引入接口方法</span><br><span class="line">import &#123; addUserInfo, getUserInfoById, editUserInfo &#125; from &#x27;../api/userInfo&#x27;;</span><br><span class="line">import type &#123; UploadFile &#125; from &#x27;element-plus&#x27;;</span><br><span class="line">import &#123; userInfoStore &#125; from &quot;../stores/UserInfoStore&quot;;</span><br><span class="line">const userInfo = userInfoStore();</span><br><span class="line"></span><br><span class="line">// 是否为修改模式</span><br><span class="line">const route = useRoute();</span><br><span class="line">const isEdit = ref(false);</span><br><span class="line">const loading = ref(false);</span><br><span class="line"></span><br><span class="line">// 定义表单字段</span><br><span class="line">const id = ref(&#x27;&#x27;);</span><br><span class="line">const name = ref(&#x27;&#x27;);</span><br><span class="line">const gender = ref&lt;&#x27;男&#x27; | &#x27;女&#x27;&gt;(&#x27;男&#x27;);</span><br><span class="line">const className = ref(&#x27;&#x27;);</span><br><span class="line">const studentId = ref(&#x27;&#x27;);</span><br><span class="line">const contactNumber = ref(&#x27;&#x27;);</span><br><span class="line">const classTeacher = ref(&#x27;&#x27;);</span><br><span class="line">const graduationTutor = ref(&#x27;&#x27;);</span><br><span class="line">const futurePlan = ref(&#x27;&#x27;);</span><br><span class="line">const salary = ref(&#x27;&#x27;);</span><br><span class="line">const companyNature = ref(&#x27;&#x27;);</span><br><span class="line">const workLocation = ref([]);</span><br><span class="line">const employmentStatus = ref(&#x27;实习&#x27;);</span><br><span class="line">const companyName = ref(&#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">const userDetail = ref&lt;any&gt;(&#123;</span><br><span class="line">    id: &#x27;&#x27;, // 用户ID</span><br><span class="line">    name: &#x27;&#x27;, // 姓名</span><br><span class="line">    gender: &#x27;男&#x27;, // 性别</span><br><span class="line">    studentId: &#x27;&#x27;, // 学号</span><br><span class="line">    idCard: &#x27;&#x27;, // 身份证号</span><br><span class="line">    grade: &#x27;&#x27;, // 年级</span><br><span class="line">    major: &#x27;&#x27;, // 专业</span><br><span class="line">    className: &#x27;&#x27;, // 班级</span><br><span class="line">    classRole: &#x27;&#x27;, // 班级职务</span><br><span class="line">    specialization: &#x27;&#x27;, // 专业方向</span><br><span class="line">    birthDate: &#x27;&#x27;, // 出生日期</span><br><span class="line">    admissionDate: &#x27;&#x27;, // 入学日期</span><br><span class="line">    expectedGraduation: &#x27;&#x27;, // 预计毕业时间</span><br><span class="line">    nativePlace: &#x27;&#x27;, // 籍贯</span><br><span class="line">    sourcePlace: &#x27;&#x27;, // 生源地</span><br><span class="line">    ethnicity: &#x27;&#x27;, // 民族</span><br><span class="line">    residence: &#x27;&#x27;, // 户口所在地</span><br><span class="line">    homeAddress: &#x27;&#x27;, // 家庭住址</span><br><span class="line">    counselor: &#x27;&#x27;, // 辅导员姓名</span><br><span class="line">    counselorPhone: &#x27;&#x27;, // 辅导员手机号</span><br><span class="line">    classTeacher: &#x27;&#x27;, // 班主任姓名</span><br><span class="line">    classTeacherPhone: &#x27;&#x27;, // 班主任手机号</span><br><span class="line">    graduationTutor: &#x27;&#x27;, // 毕设导师姓名</span><br><span class="line">    graduationTutorPhone: &#x27;&#x27;, // 毕设导师手机号</span><br><span class="line">    dormitoryNumber: &#x27;&#x27;, // 寝室号</span><br><span class="line">    networkStatus: &#x27;&#x27;, // 红旗网络</span><br><span class="line">    dormitoryMembers: &#x27;&#x27;, // 寝室成员名单</span><br><span class="line">    politicalStatus: &#x27;&#x27;, // 政治面貌</span><br><span class="line">    partyProgress: &#x27;&#x27;, // 入党进度</span><br><span class="line">    partyTrainingProgress: &#x27;&#x27;, // 入党培训进度</span><br><span class="line">    branchName: &#x27;&#x27;, // 所在支部</span><br><span class="line">    applicationDate: &#x27;&#x27;, // 入党申请时间</span><br><span class="line">    activistDate: &#x27;&#x27;, // 入党积极分子时间</span><br><span class="line">    developmentDate: &#x27;&#x27;, // 发展对象时间</span><br><span class="line">    probationaryDate: &#x27;&#x27;, // 预备党员时间</span><br><span class="line">    fullMemberDate: &#x27;&#x27;, // 发展转正时间</span><br><span class="line">    partyHours: &#x27;&#x27;, // 党建工时</span><br><span class="line">    branchSecretary: &#x27;&#x27;, // 党支部书记姓名</span><br><span class="line">    branchDeputySecretary: &#x27;&#x27;, // 党支部副书记姓名</span><br><span class="line">    email: &#x27;&#x27;,</span><br><span class="line">    qqNumber: &#x27;&#x27;,</span><br><span class="line">    wechatId: &#x27;&#x27;,</span><br><span class="line">    douyinId: &#x27;&#x27;,</span><br><span class="line">    parent1Name: &#x27;&#x27;,</span><br><span class="line">    parent1Phone: &#x27;&#x27;,</span><br><span class="line">    parent1Company: &#x27;&#x27;,</span><br><span class="line">    parent1Job: &#x27;&#x27;,</span><br><span class="line">    parent2Name: &#x27;&#x27;,</span><br><span class="line">    parent2Phone: &#x27;&#x27;,</span><br><span class="line">    parent2Company: &#x27;&#x27;,</span><br><span class="line">    parent2Job: &#x27;&#x27;,</span><br><span class="line">    emergencyContactName: &#x27;&#x27;,</span><br><span class="line">    emergencyContactPhone: &#x27;&#x27;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 定义上传文件列表</span><br><span class="line">const fileList = ref&lt;UploadFile[]&gt;([]);</span><br><span class="line"></span><br><span class="line">// 初始化</span><br><span class="line">onMounted(async () =&gt; &#123;</span><br><span class="line">    await getUserInfoById(route.params.id as string).then((res) =&gt; &#123;</span><br><span class="line">        const data = res.data;</span><br><span class="line">        console.log(&quot;userDetail.value&quot;, userDetail.value);</span><br><span class="line">        // 如果不为空则填充表单字段,如果为空则重置表单字段</span><br><span class="line">        if (data) &#123;</span><br><span class="line">            populateFormFields(data);</span><br><span class="line">            isEdit.value = true;</span><br><span class="line">            loading.value = true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            isEdit.value = false;</span><br><span class="line">            resetFormFields();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        loading.value = false;</span><br><span class="line">    &#125;).catch((err) =&gt; &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 重置表单字段</span><br><span class="line">const resetFormFields = () =&gt; &#123;</span><br><span class="line">    name.value = &#x27;&#x27;;</span><br><span class="line">    gender.value = &#x27;男&#x27;;</span><br><span class="line">    className.value = &#x27;&#x27;;</span><br><span class="line">    studentId.value = &#x27;&#x27;;</span><br><span class="line">    contactNumber.value = &#x27;&#x27;;</span><br><span class="line">    classTeacher.value = &#x27;&#x27;;</span><br><span class="line">    graduationTutor.value = &#x27;&#x27;;</span><br><span class="line">    futurePlan.value = &#x27;&#x27;;</span><br><span class="line">    salary.value = &#x27;&#x27;;</span><br><span class="line">    companyNature.value = &#x27;&#x27;;</span><br><span class="line">    workLocation.value = [];</span><br><span class="line">    employmentStatus.value = &#x27;实习&#x27;;</span><br><span class="line">    companyName.value = &#x27;&#x27;;</span><br><span class="line">    fileList.value = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const populateFormFields = (data: any) =&gt; &#123;</span><br><span class="line">    Object.assign(userDetail.value, data);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.fade-enter-active,</span><br><span class="line">.fade-leave-active &#123;</span><br><span class="line">    transition: opacity 0.3s ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fade-enter-from,</span><br><span class="line">.fade-leave-to &#123;</span><br><span class="line">    opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 下面为el-select部分</span><br><span class="line">@mixin select_radius &#123;</span><br><span class="line">    border-radius: 12px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 控制el-select的长度以及圆角</span><br><span class="line">:deep(.el-select__wrapper) &#123;</span><br><span class="line">    height: 50px;</span><br><span class="line">    @include select_radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 控制el-select中文字的样式</span><br><span class="line">:deep(.el-select__placeholder) &#123;</span><br><span class="line"></span><br><span class="line">    font-size: 16px;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 控制点击后的边框颜色</span><br><span class="line">:deep(.el-select__wrapper.is-focused) &#123;</span><br><span class="line">    box-shadow: 0 0 0 1px var(--accent-100);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 下面为下拉框部分</span><br><span class="line">// 下面用于控制整体的下拉框圆角</span><br><span class="line">:deep(.el-select__popper.el-popper) &#123;</span><br><span class="line">    @include select_radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//下拉框的文本未选中的样式</span><br><span class="line">// .el-select-dropdown__item &#123;</span><br><span class="line"></span><br><span class="line">// &#125;</span><br><span class="line">//下拉框的文本颜色选中之后的样式</span><br><span class="line">.el-select-dropdown__item.is-selected &#123;</span><br><span class="line">    color: var(--accent-200);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-input &#123;</span><br><span class="line">    height: 50px;</span><br><span class="line"></span><br><span class="line">    border-radius: 12px;</span><br><span class="line">    border: 0.5px solid var(--text-200);</span><br><span class="line">    border: 0;</span><br><span class="line">    background-color: var(--bg-200);</span><br><span class="line"></span><br><span class="line">    font-size: 16px;</span><br><span class="line">    font-weight: bold;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    :deep(.el-input__wrapper) &#123;</span><br><span class="line">        border-radius: 12px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    :deep(.is-focus) &#123;</span><br><span class="line">        box-shadow: 0 0 0 1px var(--accent-100)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 下面是日期选择组件的自定义样式</span><br><span class="line">:deep(.el-date-editor.el-input, .el-date-editor.el-input__wrapper) &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 50px;</span><br><span class="line">    border-radius: 12px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-date-editor-style &#123;</span><br><span class="line">    --el-input-border-radius: 12px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 下面是数字选择组件的自定义样式</span><br><span class="line">.el-input-number &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:deep(.el-input) &#123;</span><br><span class="line">    box-shadow: 0 0 0 1px var(--accent-200, var(--accent-100)) inset;</span><br><span class="line">    border-radius: 12px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:deep(.el-input-number__increase:hover~.el-input:not(.is-disabled) .el-input__wrapper) &#123;</span><br><span class="line">    box-shadow: 0 0 0 1px var(--accent-200, var(--accent-100)) inset;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:deep(.el-input-number__decrease:hover~.el-input:not(.is-disabled) .el-input__wrapper) &#123;</span><br><span class="line">    box-shadow: 0 0 0 1px var(--accent-200, var(--accent-100)) inset;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:deep(.el-input-number__increase:hover) &#123;</span><br><span class="line">    color: var(--accent-200);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:deep(.el-input-number__decrease:hover) &#123;</span><br><span class="line">    color: var(--accent-200);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:deep(.el-input__wrapper.is-focus) &#123;</span><br><span class="line">    box-shadow: 0 0 0 1px var(--accent-200, var(--accent-100)) inset !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 下面是textarea组件的自定义样式</span><br><span class="line">.el-textarea &#123;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    font-weight: bold;</span><br><span class="line"></span><br><span class="line">    --el-input-focus-border-color: var(--accent-200);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 下面是地区选择组件的自定义样式</span><br><span class="line">:deep(.el-cascader--large) &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:deep(.el-cascader .el-input) &#123;</span><br><span class="line">    height: 50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:deep(.el-input--large .el-input__wrapper) &#123;</span><br><span class="line">    border-radius: 12px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:deep(.el-cascader .el-input .el-input__inner) &#123;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.avatar-uploader .avatar &#123;</span><br><span class="line">    width: 80px;</span><br><span class="line">    height: 112px;</span><br><span class="line">    /* 80px * (35/25) */</span><br><span class="line">    display: block;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.avatar-uploader .el-upload &#123;</span><br><span class="line">    border: 1px dashed var(--el-border-color);</span><br><span class="line">    border-radius: 6px;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    position: relative;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    transition: var(--el-transition-duration-fast);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.avatar-uploader .el-upload:hover &#123;</span><br><span class="line">    border-color: var(--el-color-primary);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-icon.avatar-uploader-icon &#123;</span><br><span class="line">    font-size: 28px;</span><br><span class="line">    color: #8c939d;</span><br><span class="line">    width: 80px;</span><br><span class="line">    height: 112px;</span><br><span class="line">    /* 80px * (35/25) */</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="Vue3-打印实现"><a href="#Vue3-打印实现" class="headerlink" title="Vue3 打印实现"></a>Vue3 打印实现</h1><p><strong>Vue3 中使用 html2canvas + jspdf + print-js 实现打印的详细方案</strong></p><p>这套方案适合复杂页面的打印需求，尤其是在需要高精度 PDF 输出、支持跨域图片加载以及良好页面布局控制的情况下。</p><p><strong>核心功能简介</strong></p><p>​1.html2canvas：</p><p>​•将指定的 DOM 元素渲染为 canvas 图像。</p><p>​•支持动态内容（如样式、图片）。</p><p>​•配合 useCORS 参数解决图片跨域问题。</p><p>​2.jspdf：</p><p>​•将 canvas 转换为 PDF 文件。</p><p>​•支持多页 PDF 输出。</p><p>​3.print-js：</p><p>​•支持直接打印 HTML 或 PDF 文件。</p><p>​•提供弹窗式的打印预览，体验更友好。</p><p><strong>实现步骤</strong></p><p><strong>1. 安装依赖</strong></p><p>运行以下命令安装相关库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html2canvas jspdf print-js</span><br></pre></td></tr></table></figure><p><strong>2. 代码实现</strong></p><p><strong>(1) 基础模板代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">  &lt;!-- 打印区域 --&gt;</span><br><span class="line">    &lt;div id=&quot;printArea&quot; class=&quot;p-5 bg-white&quot;&gt;</span><br><span class="line">   &lt;h1 class=&quot;text-xl font-bold&quot;&gt;学生信息表&lt;/h1&gt;</span><br><span class="line">      &lt;div class=&quot;flex items-center gap-4&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;p&gt;姓名: &#123;&#123; userDetail.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">          &lt;p&gt;学号: &#123;&#123; userDetail.studentId &#125;&#125;&lt;/p&gt;</span><br><span class="line">          &lt;p&gt;专业: &#123;&#123; userDetail.major &#125;&#125;&lt;/p&gt;</span><br><span class="line">​    &lt;/div&gt;</span><br><span class="line">​        &lt;img :src=&quot;userDetail.imageUrl&quot; class=&quot;w-32 h-32 border&quot; /&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 按钮操作 --&gt;</span><br><span class="line">    &lt;div class=&quot;mt-5&quot;&gt;</span><br><span class="line">   &lt;button @click=&quot;exportToPDF&quot; class=&quot;px-4 py-2 bg-blue-500 text-white rounded&quot;&gt;导出 PDF&lt;/button&gt;</span><br><span class="line">   &lt;button @click=&quot;printPDF&quot; class=&quot;px-4 py-2 bg-green-500 text-white rounded&quot;&gt;打印&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import html2canvas from &#x27;html2canvas&#x27;;</span><br><span class="line">import jsPDF from &#x27;jspdf&#x27;;</span><br><span class="line">import printJS from &#x27;print-js&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 导出为 PDF 并打印</span><br><span class="line">const handleExportToPDF = async () =&gt; &#123;</span><br><span class="line">    const element = document.getElementById(&#x27;printArea&#x27;);</span><br><span class="line">    if (!element) &#123;</span><br><span class="line">        console.error(&#x27;打印区域未找到&#x27;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        // 将 DOM 转为图片</span><br><span class="line">        const canvas = await html2canvas(element, &#123;</span><br><span class="line">            scale: 2,</span><br><span class="line">            useCORS: true, // 启用跨域支持</span><br><span class="line">        &#125;);</span><br><span class="line">        const imgData = canvas.toDataURL(&#x27;image/jpeg&#x27;, 1.0);</span><br><span class="line"></span><br><span class="line">        // 创建 PDF</span><br><span class="line">        const pdf = new jsPDF(&#x27;p&#x27;, &#x27;mm&#x27;, &#x27;a4&#x27;);</span><br><span class="line">        const pdfWidth = pdf.internal.pageSize.getWidth();</span><br><span class="line">        const pdfHeight = (canvas.height * pdfWidth) / canvas.width;</span><br><span class="line">        pdf.addImage(imgData, &#x27;JPEG&#x27;, 0, 0, pdfWidth, pdfHeight);</span><br><span class="line"></span><br><span class="line">        // 导出 PDF 文件 Blob URL</span><br><span class="line">        const pdfBlob = pdf.output(&#x27;blob&#x27;);</span><br><span class="line">        const pdfUrl = URL.createObjectURL(pdfBlob);</span><br><span class="line"></span><br><span class="line">        // 使用 print-js 打印 PDF</span><br><span class="line">        printJS(&#123; printable: pdfUrl, type: &#x27;pdf&#x27;, showModal: true &#125;);</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">        console.error(&#x27;生成 PDF 失败:&#x27;, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>常见问题与解决方法</strong></p><p><strong>1. 图片跨域问题</strong></p><p>​•原因：html2canvas 对跨域资源有限制。</p><p>​•解决方案：</p><p>​1.使用 useCORS: true 参数。</p><p>​2.确保图片服务器启用了 CORS 并设置 Access-Control-Allow-Origin: *。</p><p><strong>2. 样式丢失</strong></p><p>​•原因：部分样式未被内联，或者浏览器限制外部样式加载。</p><p>​•解决方案：</p><p>​•不要直接使用printjs打印，而是转成pdf再打印</p><p><strong>最终建议</strong></p><p>​•<strong>简单需求</strong>：直接使用 print-js 打印。</p><p>​•<strong>复杂需求</strong>：结合 html2canvas + jspdf 输出 PDF，再通过 print-js 打印，适配性更强。</p><p>​•<strong>样式控制</strong>：确保打印专用样式定义清晰，避免内容超出页面或影响用户体验。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习</title>
      <link href="/posts/1cb512bf.html"/>
      <url>/posts/1cb512bf.html</url>
      
        <content type="html"><![CDATA[<h1 id="后端学习一般路线"><a href="#后端学习一般路线" class="headerlink" title="后端学习一般路线"></a>后端学习一般路线</h1><p>1.后端编程语言（基础语法）</p><p>2.后端框架（用于快速构建一套API）</p><p>3.软件包管理器</p><p>微服务</p><p>将每个单独的方法拿出来，放在一个服务器中</p><p>副数据库选择</p><p>比如快速搜索采用Elasticsearch，缓存使用redis提高性能，异步通信采用Rabbit MQ这样的消息队列</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>安装链接：<a href="https://go.dev/doc/install">下载并安装 - The Go Programming Language</a></p><p>检验安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E6%88%AA%E5%B1%8F2024-05-15%2015.07.56.png" alt="截屏2024-05-15 15.07.56"></p><p>当然可以！以下是你提供的 Golang 笔记标题的补全内容：</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>Go语言的语法设计简洁明了，主要特点包括静态类型、编译型、垃圾回收、并发支持等。以下是一些关键语法点：</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul><li><p><strong>变量声明</strong>：使用 <code>var</code> 关键字或 <code>:=</code> 短声明形式。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="type">int</span></span><br><span class="line">y := <span class="number">10</span></span><br></pre></td></tr></table></figure><p>变量声明使用 <code>var</code> 关键字显式声明类型，或者使用 <code>:=</code> 自动推断类型。</p></li><li><p><strong>常量</strong>：使用 <code>const</code> 关键字。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Pi = <span class="number">3.14</span></span><br></pre></td></tr></table></figure><p>常量声明使用 <code>const</code> 关键字，值在编译时确定，不能修改。</p></li><li><p><strong>数据类型</strong>：基本类型包括 <code>int</code>, <code>float64</code>, <code>string</code>, <code>bool</code> 等。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">float64</span> = <span class="number">2.5</span></span><br><span class="line"><span class="keyword">var</span> c <span class="type">string</span> = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="keyword">var</span> d <span class="type">bool</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>Go语言支持多种基本数据类型，使用 <code>var</code> 关键字声明并初始化。</p></li><li><p><strong>控制结构</strong>：包括 <code>if-else</code>、<code>for</code> 循环、<code>switch-case</code> 等。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// do something else</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> day &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;Monday&quot;</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;Start of the week&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;Friday&quot;</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;End of the work week&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;Midweek&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go语言的控制结构类似于其他C系语言，<code>if</code>语句和<code>for</code>循环都非常直观，<code>switch</code>语句支持多种情况。</p></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><p><strong>函数声明</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数声明使用 <code>func</code> 关键字，参数类型和返回类型都必须明确。</p></li><li><p><strong>多返回值</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">string</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> y, x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go函数可以返回多个值，常用于返回结果和错误信息。</p></li><li><p><strong>匿名函数和闭包</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum := <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sum(<span class="number">3</span>, <span class="number">4</span>))  <span class="comment">// 输出: 7</span></span><br></pre></td></tr></table></figure><p>Go支持匿名函数和闭包，可以在函数内部定义并使用函数。</p></li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li><p><strong>声明和初始化</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">arr := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><p>数组有固定长度，声明时需指定长度，初始化时可以使用字面值。</p></li></ul><h2 id="切片-Slices"><a href="#切片-Slices" class="headerlink" title="切片(Slices)"></a>切片(Slices)</h2><p>由于数组是固定的，在实际的应用场景中受限很大，所以通过切片(Slices)提供更加灵活的数组</p><p>语法上只需要省略定义数组时所需要写的长度即可</p><p>需要注意的是切片底层是使用指针的，如果你直接把一个变量<code>=</code>该切片的话，改变切片的值的同时，该变量也会一起改变</p><ul><li><p><strong>声明和初始化</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s []<span class="type">int</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>切片是动态数组，可以动态调整大小，常用 <code>append</code> 函数追加元素。</p></li><li><p><strong>切片操作</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">sub := s[<span class="number">1</span>:<span class="number">3</span>]  <span class="comment">// sub == []int&#123;2, 3&#125;</span></span><br></pre></td></tr></table></figure><p>切片可以从一个数组或另一个切片中截取部分元素。</p></li></ul><h2 id="映射-Maps"><a href="#映射-Maps" class="headerlink" title="映射 (Maps)"></a>映射 (Maps)</h2><ul><li><p><strong>声明和初始化</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line">m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">m[<span class="string">&quot;one&quot;</span>] = <span class="number">1</span></span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;one&quot;</span>: <span class="number">1</span>, <span class="string">&quot;two&quot;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>映射是键值对集合，使用 <code>make</code> 函数创建并初始化。</p></li></ul><h2 id="循环-range"><a href="#循环-range" class="headerlink" title="循环(range)"></a>循环(range)</h2><ul><li><p><strong>遍历数组和切片</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> arr &#123;</span><br><span class="line">    fmt.Println(i, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>range</code> 关键字遍历数组和切片。</p></li><li><p><strong>遍历映射</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">    fmt.Println(k, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>range</code> 关键字遍历映射，获取键和值。</p></li></ul><h2 id="字符串-string"><a href="#字符串-string" class="headerlink" title="字符串(string)"></a>字符串(string)</h2><ul><li><p><strong>声明和操作</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str := <span class="string">&quot;Hello, 世界&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(str))  <span class="comment">// 字符串长度（字节数）</span></span><br></pre></td></tr></table></figure><p>字符串是不可变的字节序列，可以获取长度和进行切片操作。</p></li></ul><h2 id="符文-Runes"><a href="#符文-Runes" class="headerlink" title="符文(Runes)"></a>符文(Runes)</h2><p><code>Runes</code>的存在是因为字符串的底层原因，会导致字符串长度并不是字符数，而是字节数，因为比如说中文表达为<code>uft-8</code>时，需要两份字节，所以最后<code>len(str)</code>会多出一格长度，而<code>Runes</code>则能够正常获取到字符数</p><ul><li><p><strong>声明和操作</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystring = []<span class="type">rune</span>（<span class="string">&quot;resume&quot;</span>）</span><br><span class="line"><span class="keyword">var</span> indexed = myString[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v, %T\n&quot;</span>, indexed, indexed)</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> myString &#123;</span><br><span class="line">    fmt.Println(i, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>rune</code> 表示单个Unicode字符</p></li></ul><h2 id="结构体-Structs"><a href="#结构体-Structs" class="headerlink" title="结构体 (Structs)"></a>结构体 (Structs)</h2><p>结构体是一种聚合数据类型，它将多个不同类型的字段组合成一个类型，用于表示一个实体。例如，一个人的信息可以用一个结构体来表示。</p><ul><li><p><strong>声明和初始化</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个结构体类型</span></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个结构体实例</span></span><br><span class="line">    p := Person&#123;Name: <span class="string">&quot;Alice&quot;</span>, Age: <span class="number">30</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问结构体字段</span></span><br><span class="line">    fmt.Println(p.Name) <span class="comment">// 输出: Alice</span></span><br><span class="line">    fmt.Println(p.Age)  <span class="comment">// 输出: 30</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改结构体字段</span></span><br><span class="line">    p.Age = <span class="number">31</span></span><br><span class="line">    fmt.Println(p.Age)  <span class="comment">// 输出: 31</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体是用户定义的类型，包含多个字段，可以使用字面值初始化。</p></li></ul><h2 id="接口-Interfaces"><a href="#接口-Interfaces" class="headerlink" title="接口 (Interfaces)"></a>接口 (Interfaces)</h2><p>接口是一种抽象类型，它定义了一组方法（方法集），但是并不实现它们。任何类型只要实现了接口中的方法，就被认为是实现了该接口。接口在Go语言中用于实现多态和解耦。</p><ul><li><p><strong>声明和实现</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个接口</span></span><br><span class="line"><span class="keyword">type</span> Speaker <span class="keyword">interface</span> &#123;</span><br><span class="line">    Speak()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个结构体类型</span></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为结构体类型实现接口中的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span></span> Speak() &#123;</span><br><span class="line">    fmt.Println(p.Name, <span class="string">&quot;says hello!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义另一个结构体类型</span></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为结构体类型实现接口中的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Dog)</span></span> Speak() &#123;</span><br><span class="line">    fmt.Println(d.Name, <span class="string">&quot;barks!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 创建结构体实例</span></span><br><span class="line">    p := Person&#123;Name: <span class="string">&quot;Alice&quot;</span>&#125;</span><br><span class="line">    d := Dog&#123;Name: <span class="string">&quot;Buddy&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个接口类型的变量</span></span><br><span class="line">    <span class="keyword">var</span> s Speaker</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将结构体实例赋值给接口类型变量</span></span><br><span class="line">    s = p</span><br><span class="line">    s.Speak() <span class="comment">// 输出: Alice says hello!</span></span><br><span class="line"></span><br><span class="line">    s = d</span><br><span class="line">    s.Speak() <span class="comment">// 输出: Buddy barks!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口定义一组方法，任何实现这些方法的类型都隐式实现了该接口。</p></li></ul><h2 id="指针-Pointers"><a href="#指针-Pointers" class="headerlink" title="指针 (Pointers)"></a>指针 (Pointers)</h2><p>指针实际上是为了减少因为创建数据副本，导致多出来的性能消耗，这点在函数中尤为明显，因为正常的函数传递值都是去创建副本，而如果指定参数为指针的话就可以改变这一点</p><ul><li><p><strong>指针声明和操作</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p *<span class="type">int</span></span><br><span class="line">x := <span class="number">5</span></span><br><span class="line">p = &amp;x</span><br><span class="line">fmt.Println(*p)  <span class="comment">// 输出: 5</span></span><br></pre></td></tr></table></figure><p>指针保存变量的内存地址，使用 <code>&amp;</code> 获取地址，使用 <code>*</code> 解引用指针。</p></li><li><p><strong>修改指针指向的值</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*p = <span class="number">10</span></span><br><span class="line">fmt.Println(x)  <span class="comment">// 输出: 10</span></span><br></pre></td></tr></table></figure><p>通过指针可以修改变量的值。</p></li><li><p>使用指针的原因和场景</p><ol><li><strong>修改变量的值：</strong></li></ol><p>函数传参时，默认是值传递，这意味着函数内部修改参数的副本，而不影响原变量。如果希望函数能够修改传入的变量，可以使用指针。</p><p><strong>例子：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">increment</span><span class="params">(x *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    *x = *x + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> num <span class="type">int</span> = <span class="number">5</span></span><br><span class="line">    increment(&amp;num)  <span class="comment">// 传递num的指针</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;increment 后的 num:&quot;</span>, num)  <span class="comment">// 输出: increment 后的 num: 6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>提高性能：</strong></li></ol><p>在处理大数据结构（如大型数组或结构体）时，传递指针而不是整个数据结构，可以避免数据的拷贝，减少内存和时间开销。</p><p><strong>例子：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LargeStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">    data [<span class="number">1000</span>]<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modifyStruct</span><span class="params">(ls *LargeStruct)</span></span> &#123;</span><br><span class="line">    ls.data[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ls LargeStruct</span><br><span class="line">    modifyStruct(&amp;ls)</span><br><span class="line">    fmt.Println(<span class="string">&quot;修改后的 LargeStruct:&quot;</span>, ls.data[<span class="number">0</span>])  <span class="comment">// 输出: 修改后的 LargeStruct: 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>共享数据：</strong></li></ol><p>当多个函数或多个goroutine需要共享和修改相同的数据时，可以使用指针。</p><p><strong>例子：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Counter <span class="keyword">struct</span> &#123;</span><br><span class="line">    mu    sync.Mutex</span><br><span class="line">    value <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Counter)</span></span> Increment() &#123;</span><br><span class="line">    c.mu.Lock()</span><br><span class="line">    c.value++</span><br><span class="line">    c.mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    counter := &amp;Counter&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            counter.Increment()</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println(<span class="string">&quot;最终计数器的值:&quot;</span>, counter.value)  <span class="comment">// 输出: 最终计数器的值: 1000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Go-routines-线程"><a href="#Go-routines-线程" class="headerlink" title="Go routines (线程)"></a>Go routines (线程)</h2><p>Goroutines 是 Go 语言（Golang）中的一种轻量级线程。它们允许你在同一地址空间中并发执行函数，具有高效的内存和处理开销。Goroutines 是 Go 并发编程的核心特性，能够简化多线程编程的复杂性。</p><h3 id="Go-routines-的作用"><a href="#Go-routines-的作用" class="headerlink" title="Go routines 的作用"></a>Go routines 的作用</h3><ol><li><strong>并发执行</strong>：Goroutines 使得多个函数可以并发执行，而不是依次执行，从而提升程序的性能。</li><li><strong>轻量级</strong>：相比操作系统线程，Goroutines 更轻量级，启动和切换的开销更小。</li><li><strong>独立性</strong>：每个 Goroutine 都有自己的调用栈，并且该栈大小可以动态增长。</li></ol><h3 id="Go-routines-的使用"><a href="#Go-routines-的使用" class="headerlink" title="Go routines 的使用"></a>Go routines 的使用</h3><p>要启动一个 Goroutine，只需在函数调用前加上 <code>go</code> 关键字。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        time.Sleep(<span class="number">100</span> * time.Millisecond)</span><br><span class="line">        fmt.Println(s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> say(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">    say(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解释</p><ol><li>**函数 <code>say</code>**：该函数接收一个字符串参数，并在一个循环中打印该字符串。</li><li><strong>启动 Goroutine</strong>：在 <code>main</code> 函数中，使用 <code>go say(&quot;world&quot;)</code> 启动一个新的 Goroutine 并发执行 <code>say</code> 函数。</li><li><strong>主 Goroutine</strong>：主 Goroutine 继续执行 <code>say(&quot;hello&quot;)</code>，与新的 Goroutine 并发运行。</li></ol><h3 id="并发问题及其解决"><a href="#并发问题及其解决" class="headerlink" title="并发问题及其解决"></a>并发问题及其解决</h3><p>如果在 <code>main</code> 函数中启动 Goroutines 后立即返回，程序会退出，导致 Goroutines 可能没有机会执行。可以使用 <code>sync.WaitGroup</code> 或 <code>time.Sleep</code> 来解决这个问题。</p><h4 id="使用-sync-WaitGroup"><a href="#使用-sync-WaitGroup" class="headerlink" title="使用 sync.WaitGroup"></a>使用 <code>sync.WaitGroup</code></h4><p><code>sync.WaitGroup</code> 用于等待一组 Goroutines 完成。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">time.Sleep(<span class="number">100</span> * time.Millisecond)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line">wg.Done() <span class="comment">// 线程完成</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">wg.Add(<span class="number">2</span>) <span class="comment">// 增加 WaitGroup 计数器，表示有两个 Goroutine</span></span><br><span class="line"><span class="keyword">go</span> say(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"><span class="keyword">go</span> say(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line">wg.Wait()<span class="comment">// // 等待所有 Goroutine 完成</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-time-Sleep"><a href="#使用-time-Sleep" class="headerlink" title="使用 time.Sleep"></a>使用 <code>time.Sleep</code></h4><p>另一种方法是使用 <code>time.Sleep</code> 暂时阻止 <code>main</code> 函数退出，以便让 Goroutines 有时间执行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        time.Sleep(<span class="number">100</span> * time.Millisecond)</span><br><span class="line">        fmt.Println(s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> say(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">    <span class="keyword">go</span> say(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line">    time.Sleep(<span class="number">1</span> * time.Second) <span class="comment">// 延长 main 函数的生命周期</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并发存入数据及其解决"><a href="#并发存入数据及其解决" class="headerlink" title="并发存入数据及其解决"></a>并发存入数据及其解决</h3><p>当你希望将 Goroutines 产生的结果存入一个共享的切片时，可能会遇到并发写入问题，因为多个 Goroutines 同时写入同一个切片可能会导致数据竞争和不一致的问题。为了解决这个问题，你可以使用同步机制来保护对切片的并发访问。以下是两种常见的解决方案：使用 <code>sync.Mutex</code> 或使用 Channels。</p><h4 id="使用-sync-Mutex"><a href="#使用-sync-Mutex" class="headerlink" title="使用 sync.Mutex"></a>使用 <code>sync.Mutex</code></h4><p><code>sync.Mutex</code> 提供了一种互斥锁机制，确保在同一时间只有一个 Goroutine 可以访问共享资源。</p><p>示例代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="type">int</span>, wg *sync.WaitGroup, mu *sync.Mutex, results *[]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">result := id * <span class="number">2</span> <span class="comment">// 假设计算结果是 id 的两倍</span></span><br><span class="line">mu.Lock()</span><br><span class="line">*results = <span class="built_in">append</span>(*results, result)</span><br><span class="line">mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">var</span> mu sync.Mutex</span><br><span class="line">results := []<span class="type">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">numGoroutines := <span class="number">5</span></span><br><span class="line">wg.Add(numGoroutines)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numGoroutines; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> worker(i, &amp;wg, &amp;mu, &amp;results)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;Results:&quot;</span>, results)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解释</p><ol><li><strong>引入 <code>sync</code> 包</strong>：导入 <code>sync</code> 包以使用 <code>WaitGroup</code> 和 <code>Mutex</code>。</li><li>**声明 <code>WaitGroup</code> 和 <code>Mutex</code>**：在 <code>main</code> 函数中声明 <code>WaitGroup</code> 变量 <code>wg</code> 和 <code>Mutex</code> 变量 <code>mu</code>。</li><li><strong>定义 <code>worker</code> 函数</strong>：该函数接收一个 ID、<code>WaitGroup</code>、<code>Mutex</code> 和结果切片。计算结果后，使用 <code>mu.Lock()</code> 和 <code>mu.Unlock()</code> 保护对切片的并发写入。</li><li><strong>启动 Goroutines</strong>：在 <code>main</code> 函数中启动多个 Goroutines，传递 <code>wg</code>、<code>mu</code> 和结果切片的指针。</li><li><strong>等待 Goroutines 完成</strong>：使用 <code>wg.Wait()</code> 等待所有 Goroutines 完成。</li><li><strong>打印结果</strong>：输出结果切片。</li></ol><h4 id="使用-Channels"><a href="#使用-Channels" class="headerlink" title="使用 Channels"></a>使用 Channels</h4><p>Channels 提供了一种安全的并发数据传递方式，可以避免数据竞争。</p><p>示例代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="type">int</span>, wg *sync.WaitGroup, ch <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">result := id * <span class="number">2</span> <span class="comment">// 假设计算结果是 id 的两倍</span></span><br><span class="line">ch &lt;- result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">results := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">5</span>) <span class="comment">// 创建一个带缓冲区的通道</span></span><br><span class="line"></span><br><span class="line">numGoroutines := <span class="number">5</span></span><br><span class="line">wg.Add(numGoroutines)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numGoroutines; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> worker(i, &amp;wg, ch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动一个 Goroutine 来等待所有 worker 完成，然后关闭通道</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">wg.Wait()</span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取通道中的数据</span></span><br><span class="line"><span class="keyword">for</span> result := <span class="keyword">range</span> ch &#123;</span><br><span class="line">results = <span class="built_in">append</span>(results, result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;Results:&quot;</span>, results)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解释</p><ol><li><strong>创建通道</strong>：在 <code>main</code> 函数中创建一个带缓冲区的通道 <code>ch</code>。</li><li><strong>定义 <code>worker</code> 函数</strong>：该函数接收一个 ID、<code>WaitGroup</code> 和通道。计算结果后，将结果发送到通道。</li><li><strong>启动 Goroutines</strong>：在 <code>main</code> 函数中启动多个 Goroutines，传递 <code>wg</code> 和通道。</li><li><strong>关闭通道</strong>：启动一个 Goroutine 来等待所有 <code>worker</code> 完成，然后关闭通道 <code>ch</code>。</li><li><strong>读取通道数据</strong>：使用 <code>range</code> 从通道中读取数据并将其追加到结果切片中。</li><li><strong>打印结果</strong>：输出结果切片。</li></ol><h2 id="Channels"><a href="#Channels" class="headerlink" title="Channels"></a>Channels</h2><p>Golang（也称为Go）中的Channels是用于在不同goroutine之间进行通信和同步的机制。它们可以让你安全地在多个goroutine之间传递数据，而无需使用复杂的锁机制。Channels可以看作是一个管道，通过它一个goroutine可以将数据发送给另一个goroutine。</p><h3 id="声明和创建"><a href="#声明和创建" class="headerlink" title="声明和创建"></a>声明和创建</h3><p>你可以使用<code>make</code>函数来创建一个channel，指定其传递的数据类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br></pre></td></tr></table></figure><p>这里我们创建了一个传递<code>int</code>类型数据的channel。</p><h3 id="发送和接收"><a href="#发送和接收" class="headerlink" title="发送和接收"></a>发送和接收</h3><p>使用<code>&lt;-</code>操作符来发送和接收数据：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送数据到channel</span></span><br><span class="line">ch &lt;- <span class="number">42</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从channel接收数据</span></span><br><span class="line">value := &lt;-ch</span><br></pre></td></tr></table></figure><h3 id="无缓冲和有缓冲的Channels"><a href="#无缓冲和有缓冲的Channels" class="headerlink" title="无缓冲和有缓冲的Channels"></a>无缓冲和有缓冲的Channels</h3><ul><li><strong>无缓冲Channel</strong>：发送操作会阻塞直到另一个goroutine准备好接收这个值，接收操作会阻塞直到另一个goroutine发送一个值。</li><li><strong>有缓冲Channel</strong>：你可以在创建channel时指定缓冲区的大小。发送操作只有在缓冲区满时才会阻塞，接收操作只有在缓冲区为空时才会阻塞。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个缓冲区大小为2的channel</span></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送数据到有缓冲的channel</span></span><br><span class="line">ch &lt;- <span class="number">1</span></span><br><span class="line">ch &lt;- <span class="number">2</span> <span class="comment">// 这两个发送操作不会阻塞</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再次发送会阻塞，直到有goroutine接收数据</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch &lt;- <span class="number">3</span> <span class="comment">// 这会阻塞</span></span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><h3 id="基本例子"><a href="#基本例子" class="headerlink" title="基本例子"></a>基本例子</h3><p>下面是一个简单的例子，展示了如何在两个goroutine之间使用channel进行通信：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动一个goroutine</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">        ch &lt;- <span class="string">&quot;Hello from goroutine&quot;</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从channel接收数据（这会阻塞，直到有数据可接收）</span></span><br><span class="line">    msg := &lt;-ch</span><br><span class="line">    fmt.Println(msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，主goroutine启动了一个新的goroutine，该goroutine在2秒后向channel发送一条消息。主goroutine则阻塞在接收操作，直到收到消息并打印出来。</p><h3 id="使用有缓冲Channel"><a href="#使用有缓冲Channel" class="headerlink" title="使用有缓冲Channel"></a>使用有缓冲Channel</h3><p>下面的例子展示了如何使用有缓冲的channel：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    ch &lt;- <span class="number">1</span></span><br><span class="line">    ch &lt;- <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(&lt;-ch)</span><br><span class="line">    fmt.Println(&lt;-ch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，channel有一个缓冲区，可以存放两个<code>int</code>值。我们在发送两个值后，从channel接收并打印它们。</p><h3 id="Select语句"><a href="#Select语句" class="headerlink" title="Select语句"></a>Select语句</h3><p><code>select</code>语句可以让你同时等待多个channel操作。它类似于<code>switch</code>语句，但每个case都必须是一个channel操作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line">    ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">        ch1 &lt;- <span class="string">&quot;one&quot;</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">        ch2 &lt;- <span class="string">&quot;two&quot;</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> msg1 := &lt;-ch1:</span><br><span class="line">            fmt.Println(<span class="string">&quot;Received&quot;</span>, msg1)</span><br><span class="line">        <span class="keyword">case</span> msg2 := &lt;-ch2:</span><br><span class="line">            fmt.Println(<span class="string">&quot;Receive d&quot;</span>, msg2)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们启动了两个goroutine，每个goroutine在不同的时间间隔后向各自的channel发送消息。<code>select</code>语句用于等待任意一个channel的消息，并打印接收到的消息。</p><h2 id="泛型-Generics"><a href="#泛型-Generics" class="headerlink" title="泛型 (Generics)"></a>泛型 (Generics)</h2><p>在Go语言（Golang）中，Generics（泛型）是一种允许编写更加灵活和可重用代码的特性。通过使用泛型，可以定义能够处理多种数据类型的函数和数据结构，而无需为每种类型单独编写代码。Go 1.18开始正式支持泛型。</p><h3 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h3><p>一个泛型函数可以接收任意类型的参数。例如，一个用于获取切片中最大值的泛型函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个类型约束，T 可以是任何支持比较运算的类型</span></span><br><span class="line"><span class="keyword">type</span> Ordered <span class="keyword">interface</span> &#123;</span><br><span class="line">~<span class="type">int</span> | ~<span class="type">float64</span> | ~<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Max 函数，返回切片中的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Max</span>[<span class="title">T</span> <span class="title">Ordered</span>]<span class="params">(slice []T)</span></span> T &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(slice) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">var</span> zero T</span><br><span class="line"><span class="keyword">return</span> zero</span><br><span class="line">&#125;</span><br><span class="line">max := slice[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> slice[<span class="number">1</span>:] &#123;</span><br><span class="line"><span class="keyword">if</span> v &gt; max &#123;</span><br><span class="line">max = v</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">intSlice := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">floatSlice := []<span class="type">float64</span>&#123;<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>, <span class="number">5.5</span>&#125;</span><br><span class="line">stringSlice := []<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(Max(intSlice))    <span class="comment">// 输出: 5</span></span><br><span class="line">fmt.Println(Max(floatSlice))  <span class="comment">// 输出: 5.5</span></span><br><span class="line">fmt.Println(Max(stringSlice)) <span class="comment">// 输出: e</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Max</code> 函数使用了类型参数 <code>T</code>，并且通过 <code>Ordered</code> 接口约束了 <code>T</code> 必须是支持比较运算的类型。</p><h3 id="泛型数据结构"><a href="#泛型数据结构" class="headerlink" title="泛型数据结构"></a>泛型数据结构</h3><p>你也可以使用泛型来定义数据结构。例如，一个简单的栈（Stack）数据结构：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Stack 数据结构，使用泛型</span></span><br><span class="line"><span class="keyword">type</span> Stack[T any] <span class="keyword">struct</span> &#123;</span><br><span class="line">items []T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Push 方法，向栈中添加元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Stack[T])</span></span> Push(item T) &#123;</span><br><span class="line">s.items = <span class="built_in">append</span>(s.items, item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pop 方法，从栈中移除并返回顶部元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Stack[T])</span></span> Pop() T &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(s.items) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">var</span> zero T</span><br><span class="line"><span class="keyword">return</span> zero</span><br><span class="line">&#125;</span><br><span class="line">item := s.items[<span class="built_in">len</span>(s.items)<span class="number">-1</span>]</span><br><span class="line">s.items = s.items[:<span class="built_in">len</span>(s.items)<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> item</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">intStack := Stack[<span class="type">int</span>]&#123;&#125;</span><br><span class="line">intStack.Push(<span class="number">1</span>)</span><br><span class="line">intStack.Push(<span class="number">2</span>)</span><br><span class="line">fmt.Println(intStack.Pop()) <span class="comment">// 输出: 2</span></span><br><span class="line">fmt.Println(intStack.Pop()) <span class="comment">// 输出: 1</span></span><br><span class="line"></span><br><span class="line">stringStack := Stack[<span class="type">string</span>]&#123;&#125;</span><br><span class="line">stringStack.Push(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">stringStack.Push(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">fmt.Println(stringStack.Pop()) <span class="comment">// 输出: world</span></span><br><span class="line">fmt.Println(stringStack.Pop()) <span class="comment">// 输出: hello</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Stack</code> 数据结构使用了泛型类型参数 <code>T</code>，因此可以创建处理不同类型的栈实例。</p><h1 id="网络请求框架"><a href="#网络请求框架" class="headerlink" title="网络请求框架"></a>网络请求框架</h1><p>在Golang中，常用的网络请求框架包括 <code>net/http</code> 和 <code>gin</code> 等。</p><h2 id="net-http"><a href="#net-http" class="headerlink" title="net/http"></a><code>net/http</code></h2><ul><li><strong>创建简单的HTTP服务器</strong>：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, handler)</span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="gin"><a href="#gin" class="headerlink" title="gin"></a><code>gin</code></h2><ul><li><strong>使用 <code>gin</code> 框架创建API</strong>：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">            <span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    r.Run()  <span class="comment">// 默认监听并服务于 0.0.0.0:8080</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="连接数据库实现增删改查"><a href="#连接数据库实现增删改查" class="headerlink" title="连接数据库实现增删改查"></a>连接数据库实现增删改查</h1><p>Golang 提供了多种方法来连接和操作数据库，常用库有 <code>database/sql</code> 和 <code>gorm</code>。</p><h2 id="使用-database-sql"><a href="#使用-database-sql" class="headerlink" title="使用 database/sql"></a>使用 <code>database/sql</code></h2><ul><li><p><strong>连接数据库</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;database/sql&quot;</span></span><br><span class="line">    _ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    db, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;user:password@tcp(127.0.0.1:3306)/dbname&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> db.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>查询数据</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">rows, err := db.Query(<span class="string">&quot;SELECT id, name FROM users&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">    <span class="keyword">var</span> id <span class="type">int</span></span><br><span class="line">    <span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line">    <span class="keyword">if</span> err := rows.Scan(&amp;id, &amp;name); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(id, name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>插入数据</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">stmt, err := db.Prepare(<span class="string">&quot;INSERT INTO users(name) VALUES(?)&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">res, err := stmt.Exec(<span class="string">&quot;John Doe&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">lastId, err := res.LastInsertId()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(lastId)</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用-gorm"><a href="#使用-gorm" class="headerlink" title="使用 gorm"></a>使用 <code>gorm</code></h2><ul><li><p><strong>连接数据库</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line">    <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    dsn := <span class="string">&quot;user:password@tcp(127.0.0.1:3306)/dbname&quot;</span></span><br><span class="line">    db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;failed to connect database&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>定义模型并迁移</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID   <span class="type">uint</span></span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.AutoMigrate(&amp;User&#123;&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>插入数据</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.Create(&amp;User&#123;Name: <span class="string">&quot;John Doe&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>查询数据</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user User</span><br><span class="line">db.First(&amp;user, <span class="number">1</span>)  <span class="comment">// 查询主键为1的用户</span></span><br><span class="line">db.First(&amp;user, <span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;John Doe&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>更新数据</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.Model(&amp;user).Update(<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;Jane Doe&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>删除数据</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.Delete(&amp;user, <span class="number">1</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><p>Golang 在微服务开发中非常流行，常用框架有 <code>go-micro</code> 和 <code>grpc</code>。</p><h2 id="go-micro"><a href="#go-micro" class="headerlink" title="go-micro"></a><code>go-micro</code></h2><ul><li><strong>创建微服务</strong>：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/micro/go-micro/v2&quot;</span></span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Greeter <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *Greeter)</span></span> Hello(ctx context.Context, req *Request, rsp *Response) <span class="type">error</span> &#123;</span><br><span class="line">    rsp.Msg = <span class="string">&quot;Hello &quot;</span> + req.Name</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    service := micro.NewService(</span><br><span class="line">        micro.Name(<span class="string">&quot;greeter&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">    service.Init()</span><br><span class="line"></span><br><span class="line">    micro.RegisterHandler(service.Server(), <span class="built_in">new</span>(Greeter))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err := service.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="grpc"><a href="#grpc" class="headerlink" title="grpc"></a><code>grpc</code></h2><ul><li><strong>创建 gRPC 服务</strong>：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc/reflection&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net&quot;</span></span><br><span class="line">    pb <span class="string">&quot;path/to/proto&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span> &#123;</span><br><span class="line">    pb.UnimplementedGreeterServer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *server)</span></span> SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;pb.HelloReply&#123;Message: <span class="string">&quot;Hello &quot;</span> + in.Name&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    lis, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:50051&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;failed to listen: %v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    s := grpc.NewServer()</span><br><span class="line">    pb.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class="line">    reflection.Register(s)</span><br><span class="line">    <span class="keyword">if</span> err := s.Serve(lis); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;failed to serve: %v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>以上是各个部分的补全内容，希望对你有所帮助！</p><h1 id="项目Demo"><a href="#项目Demo" class="headerlink" title="项目Demo"></a>项目Demo</h1><h2 id="GORM-Gin实现API"><a href="#GORM-Gin实现API" class="headerlink" title="GORM+Gin实现API"></a>GORM+Gin实现API</h2><p>好的，我们将项目修改为使用 GORM 框架来代替原生 SQL 查询，并将 <code>Item</code> 更改为一个更具体的名称，例如 <code>Product</code>。以下是修改后的代码和项目结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">gin-mysql-api/</span><br><span class="line">├── main.go</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── config/</span><br><span class="line">│   └── config.go</span><br><span class="line">├── controllers/</span><br><span class="line">│   └── product.go</span><br><span class="line">├── models/</span><br><span class="line">│   └── product.go</span><br><span class="line">├── routers/</span><br><span class="line">│   └── router.go</span><br><span class="line">└── database/</span><br><span class="line">    └── database.go</span><br></pre></td></tr></table></figure><h3 id="1-main-go"><a href="#1-main-go" class="headerlink" title="1. main.go"></a>1. <code>main.go</code></h3><p>主文件，用于启动应用程序。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;GoAPIDemo/config&quot;</span></span><br><span class="line"><span class="string">&quot;GoAPIDemo/routers&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化配置</span></span><br><span class="line">config.LoadConfig()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置路由</span></span><br><span class="line">r := routers.SetupRouter()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行服务器</span></span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-config-config-go"><a href="#2-config-config-go" class="headerlink" title="2. config/config.go"></a>2. <code>config/config.go</code></h3><p>配置文件，包含数据库连接的配置。</p><p>注意这里的<code>?charset=utf8&amp;parseTime=true</code>不配置这个的话，会导致无法访问时间类的字段，导致报错，无法返回对应的数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;GoAPIDemo/database&quot;</span></span><br><span class="line"><span class="string">&quot;GoAPIDemo/models&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoadConfig</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化数据库</span></span><br><span class="line">dsn := <span class="string">&quot;root:12345678@tcp(127.0.0.1:3306)/gpAPIDemo?charset=utf8&amp;parseTime=true&quot;</span></span><br><span class="line"><span class="keyword">if</span> err := database.InitDB(dsn); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动迁移模型</span></span><br><span class="line">database.DB.AutoMigrate(&amp;models.Product&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-database-database-go"><a href="#3-database-database-go" class="headerlink" title="3. database/database.go"></a>3. <code>database/database.go</code></h3><p>数据库初始化和连接管理。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> database</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DB *gorm.DB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitDB</span><span class="params">(dsn <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">DB, err = gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-models-product-go"><a href="#4-models-product-go" class="headerlink" title="4. models/product.go"></a>4. <code>models/product.go</code></h3><p>定义数据模型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">ID        <span class="type">uint</span>      <span class="string">`gorm:&quot;primaryKey&quot; json:&quot;id&quot;`</span></span><br><span class="line">Name      <span class="type">string</span>    <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Price     <span class="type">int</span>       <span class="string">`json:&quot;price&quot;`</span></span><br><span class="line">CreatedAt time.Time <span class="string">`json:&quot;created_at&quot;`</span></span><br><span class="line">UpdatedAt time.Time <span class="string">`json:&quot;updated_at&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-controllers-product-go"><a href="#5-controllers-product-go" class="headerlink" title="5. controllers/product.go"></a>5. <code>controllers/product.go</code></h3><p>处理器函数，实现增删改查操作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controllers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;GoAPIDemo/database&quot;</span></span><br><span class="line"><span class="string">&quot;GoAPIDemo/models&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetProducts</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;进入GetProducts&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> products []models.Product</span><br><span class="line"><span class="keyword">if</span> err := database.DB.Find(&amp;products).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;err:&quot;</span>, err)</span><br><span class="line">c.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;products:&quot;</span>, products)</span><br><span class="line">c.JSON(http.StatusOK, products)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateProduct</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> product models.Product</span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBindJSON(&amp;product); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := database.DB.Create(&amp;product).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.JSON(http.StatusOK, product)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateProduct</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">id := c.Param(<span class="string">&quot;id&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> product models.Product</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := database.DB.First(&amp;product, id).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusNotFound, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Product not found&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBindJSON(&amp;product); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := database.DB.Save(&amp;product).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.JSON(http.StatusOK, product)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DeleteProduct</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">id := c.Param(<span class="string">&quot;id&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> product models.Product</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := database.DB.First(&amp;product, id).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusNotFound, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Product not found&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := database.DB.Delete(&amp;product).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Product deleted&quot;</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-routers-router-go"><a href="#6-routers-router-go" class="headerlink" title="6. routers/router.go"></a>6. <code>routers/router.go</code></h3><p>设置路由。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;GoAPIDemo/controllers&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetupRouter</span><span class="params">()</span></span> *gin.Engine &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/products&quot;</span>, controllers.GetProducts)</span><br><span class="line">r.POST(<span class="string">&quot;/products&quot;</span>, controllers.CreateProduct)</span><br><span class="line">r.PUT(<span class="string">&quot;/products/:id&quot;</span>, controllers.UpdateProduct)</span><br><span class="line">r.DELETE(<span class="string">&quot;/products/:id&quot;</span>, controllers.DeleteProduct)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整的-go-mod-文件"><a href="#完整的-go-mod-文件" class="headerlink" title="完整的 go.mod 文件"></a>完整的 <code>go.mod</code> 文件</h3><p>确保你在项目根目录下初始化了 <code>go mod</code> 并安装了必要的依赖项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">go mod init gin-mysql-api</span><br><span class="line">go get -u github.com/gin-gonic/gin</span><br><span class="line">go get -u gorm.io/gorm</span><br><span class="line">go get -u gorm.io/driver/mysql</span><br></pre></td></tr></table></figure><p>这样，你的项目使用了 GORM 框架来简化数据库操作，并且代码结构更加清晰和易于维护。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自动化部署</title>
      <link href="/posts/65a883f4.html"/>
      <url>/posts/65a883f4.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>官方文档：<a href="https://docs.docker.com/reference/dockerfile/">Dockerfile 参考 |Docker 文档</a></p><h2 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h2><p>参考：<a href="https://blog.csdn.net/weixin_43755251/article/details/127512751">Linux安装最新版Docker完整教程（建议收藏）_linux安装docker教程-CSDN博客</a></p><h2 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h2><p>🐳 <strong>常见命令</strong></p><p>![截屏2024-05-04 19.07.15](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Containers&#x2F;me.damir.dropover-mac&#x2F;Data&#x2F;tmp&#x2F;Screenshots&#x2F;截屏2024-05-04 19.07.15.png)</p><p>🐳 <strong>关于 docker run</strong></p><p>![截屏2024-05-04 19.08.00](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Containers&#x2F;me.damir.dropover-mac&#x2F;Data&#x2F;tmp&#x2F;Screenshots&#x2F;截屏2024-05-04 19.08.00.png)</p><p>🐳 <strong>一些命令的带参数使用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -it 参数解释：进入容器后为了能够进行交互操作就需要一个命令行窗口 -it 参数就是为了打开一个可进行交互的命令行窗口</span></span><br><span class="line"><span class="comment"># bash 就是命令行</span></span><br><span class="line"><span class="comment"># 容器完全是隔离于外界的，独立的</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;需要进入的容器名&gt; bash</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> &lt;容器名&gt;</span><br><span class="line"><span class="comment"># 但是必须要首先停止容器的运行</span></span><br><span class="line">docker stop &lt;容器名&gt;</span><br><span class="line"><span class="comment"># 但是我们可以添加参数进行强行删除</span></span><br><span class="line">docker <span class="built_in">rm</span> &lt;容器名&gt; -f</span><br><span class="line"><span class="comment"># 删除容器镜像</span></span><br><span class="line">docker rmi &lt;镜像名&gt;</span><br><span class="line"><span class="comment"># 查看成功启动的容器列表</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 打印容器日志</span></span><br><span class="line">docker logs &lt;容器名&gt;</span><br></pre></td></tr></table></figure><p>🐳 <strong>具体详细命令查看官方文档</strong></p><p><a href="https://docs.docker.com/reference/dockerfile/">https://docs.docker.com/reference/dockerfile/</a></p><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><p>🐳 <strong>案例一：利用Nginx容器部署静态资源<br>⚠️</strong> 所有的容器中准备的都是最小化的系统环境，只具备容器必须的使用的命令<br>⚠️ 为了能够解决上述问题，引入“数据卷”的概念</p><ul><li>案例需求<ul><li>常见Nginx容器，修改容器内部html目录下的index.html文件，查看变化</li><li>将静态资源部署到nginx的html目录中</li><li>寻找该目录我们可以在DockerHub中的Nginx详情中去找</li></ul></li></ul><p>🐳 <strong>数据卷基本知识</strong></p><ul><li>这是一个虚拟目录，是容器内目录与宿主机目录之间映射的桥梁</li><li>这个目录只存在于逻辑中，现实中并不存在</li><li>当容器中的目录与数据卷虚拟目录产生映射后，会在宿主机中创建一个对应的同名目录<ul><li>数据卷创建成功后，宿主机中的目录会和数据卷产生映射，数据卷再和容器目录产生映射。于是宿主机目录和容器目录产生简介映射</li></ul></li><li>宿主机目录或者是容器目录有任何一方产生改变，都会影响对方目录（双向映射）</li></ul><p>🐳 <strong>实现案例一</strong></p><ul><li><p>命令依旧是 docker run</p></li><li><p>但是添加参数 <strong>-v 数据卷:容器内目录</strong> 这样就可以完成挂载数据卷</p></li><li><p>当创建容器时候，如果挂载了数据卷但是数据卷不存在，那么就会自动创建数据卷</p><ul><li>也就是说不需要再使用 docker volume create 这个命令进行数据卷的创建</li></ul></li><li><p>使用这样的命令指定容器中的文件目录和本地文件夹进行映射（非数据卷挂载，目录挂载）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name nginx -p 80:80 -v /Users/yqc_forest/nginx-html:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure><p>首先应该确保在我们本地中拥有这样的一个nginx-html文件夹（但是如果不存在是可以自动创建的好像），数据卷绑定成功后在文件夹中新建一个index.html文件，就可以实现与nginx容器中的index.html双向绑定，在修改了本地的index.html后，就可以同步修改nginx容器中的index.html。从而能够实现案例一</p><p>⚠️ 这时候我们的本地文件夹与nignx容器中的文件夹产生映射。当我在本地文件夹中添加内容时候，在容器中的文件夹同样可以读取到</p></li><li><p>⚠️ ⚠️ 在使用 <code>-v</code> 或 <code>--mount</code> 参数时，可以同时用于绑定挂载和卷</p><ol><li><p><strong>绑定挂载</strong>：当你指定的目的地路径是主机文件系统中的一个具体路径时，通常表示你在使用绑定挂载。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-v /host/path:/container/path</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这种情况下，<code>/host/path</code> 是主机文件系统中的一个路径，它被挂载到容器中的 <code>/container/path</code> 路径上。</p></li><li><p><strong>卷</strong>：当你指定的目的地路径是一个不直接对应主机文件系统路径的名字时，通常表示你在使用卷。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-v volume_name:/container/path</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--mount source=volume_name,target=/container/path</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这种情况下，<code>volume_name</code> 是一个卷的名称，它被挂载到容器中的 <code>/container/path</code> 路径上。卷的实际路径是由 Docker 管理的，一般位于宿主机的 <code>/var/lib/docker/volumes</code> 目录下，而不是直接映射到宿主机文件系统上的一个路径。</p></li></ol></li></ul><h2 id="自定义镜像"><a href="#自定义镜像" class="headerlink" title="自定义镜像"></a>自定义镜像</h2><p>🐳 <strong>关于镜像的定义</strong><br>镜像就是包含了应用程序、程序运行的系统函数、运行配置等文件的文件包。构建镜像的过程其实就是把上述文件打包的过程</p><p>🐳 <strong>关于Dockerfile</strong></p><p>![截屏2024-05-04 19.07.39](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Containers&#x2F;me.damir.dropover-mac&#x2F;Data&#x2F;tmp&#x2F;Screenshots&#x2F;截屏2024-05-04 19.07.39.png)</p><p><strong>以上只是常用命令，详细命令和参考官方文档：</strong><a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p><p>🐳 <strong>自定义镜像案例完整步骤实现</strong></p><ul><li><p>新建一个文件夹存放我们的练习所需要的资料。包括tar包、Dockerfile以及jar包</p></li><li><p>cd 进入该文件夹，为了方便使用Dockerfile</p></li><li><p>使用命将tar包上传到docker中成为本地镜像</p><ul><li><p>docker load -i &#x2F;Users&#x2F;yqc_forest&#x2F;DockerLocalImages&#x2F;jdk.tar</p></li><li><p>关于 docker load 后面两个可选参数的解释</p><ul><li><p><code>docker load</code> 命令用于从存档文件中加载镜像。它有两个可选参数：</p><ol><li><p><strong>-input&#x2F;-i</strong>：指定输入文件路径。你可以使用 <code>i</code> 参数指定要加载的存档文件的路径。如果不提供此参数，则 <code>docker load</code> 命令将从标准输入流中读取存档数据。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i archive.tar</span><br></pre></td></tr></table></figure></li><li><p><strong>-quiet&#x2F;-q</strong>：静默模式。使用 <code>q</code> 参数可以使 <code>docker load</code> 命令在加载镜像时不输出详细的信息，只显示进度条。这在加载大型镜像时可能会减少输出。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -q -i archive.tar</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul></li><li><p>上传成功后可以使用 docker images 进行查看，确认本地镜像是否存在</p></li><li><p>接着开始构建我们的自定义镜像，使用 docker build命令即可</p><ul><li><p>具体命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t docker_demo .</span><br></pre></td></tr></table></figure></li></ul></li><li><p>构建成功以后我们同样可以使用 docker images 命令去查看，确认是否已经存在镜像</p></li><li><p>接着创建docker容器</p><ul><li><p>执行以下命令进行创建，容器取名为 dd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name <span class="built_in">dd</span> -p 8080:8080 docker_demo</span><br></pre></td></tr></table></figure></li><li><p>运行后使用 docker ps 查看当前正在运行的 docker容器进程</p></li></ul></li><li><p>如果成功出现了 docker_demo的进程，那么我们可以查看进程运行日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f <span class="built_in">dd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#出现了以下的输出信息</span></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___<span class="string">&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span></span><br><span class="line"><span class="string">( ( )\___ | &#x27;</span>_ | <span class="string">&#x27;_| | &#x27;</span>_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  <span class="string">&#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span></span><br><span class="line"><span class="string"> =========|_|==============|___/=/_/_/_/</span></span><br><span class="line"><span class="string"> :: Spring Boot ::               (v2.7.12)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">17:50:24  INFO 1 --- [           main] com.itheima.mp.MpDemoApplication         : Starting MpDemoApplication v0.0.1-SNAPSHOT using Java 11.0.16 on 53ee3e7bdb25 with PID 1 (/app.jar started by root in /)</span></span><br><span class="line"><span class="string">17:50:24 DEBUG 1 --- [           main] com.itheima.mp.MpDemoApplication         : Running with Spring Boot v2.7.12, Spring v5.3.27</span></span><br><span class="line"><span class="string">17:50:24  INFO 1 --- [           main] com.itheima.mp.MpDemoApplication         : No active profile set, falling back to 1 default profile: &quot;default&quot;</span></span><br><span class="line"><span class="string">17:50:25  INFO 1 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)</span></span><br><span class="line"><span class="string">17:50:25  INFO 1 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span></span><br><span class="line"><span class="string">17:50:25  INFO 1 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.75]</span></span><br><span class="line"><span class="string">17:50:25  INFO 1 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span></span><br><span class="line"><span class="string">17:50:25  INFO 1 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 446 ms</span></span><br><span class="line"><span class="string">17:50:25  INFO 1 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">17:50:25  INFO 1 --- [           main] com.itheima.mp.MpDemoApplication         : Started MpDemoApplication in 0.888 seconds (JVM running for 1.057)</span></span><br></pre></td></tr></table></figure></li><li><p>接着可以去浏览器中访问 localhost:8080&#x2F;hello&#x2F;count。访问成功表示我们的自定义镜像构建成功，并在Docker中成功部署</p></li></ul><p>🐳 <strong>总结</strong></p><p>![截屏2024-05-04 19.07.50](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Containers&#x2F;me.damir.dropover-mac&#x2F;Data&#x2F;tmp&#x2F;Screenshots&#x2F;截屏2024-05-04 19.07.50.png)</p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>🐳 默认情况下，所有的容器都是以bridge方式连接到Docker的一个虚拟网桥上</p><p>🐳 <strong>自定义网络 → 加入自定义网络的容器才可以通过容器名相互访问</strong><br>为了解决ip地址变更导致的连接到错误的容器问题</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker network create</td><td>创建一个网络</td></tr><tr><td>docker network ls</td><td>查看所有网络</td></tr><tr><td>docker network rm</td><td>删除指定网络</td></tr><tr><td>docker network prune</td><td>清除未使用的网络</td></tr><tr><td>docker network connect</td><td>使指定容器连接加入某网络</td></tr><tr><td>docker network disconnect</td><td>使指定容器连接离开某网络</td></tr><tr><td>docker network inspect</td><td>查看网络详细信息</td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><p>🐳 <strong>部署数据库</strong><br>使用docker进行数据库的部署</p><p>部署后端项目</p><p>部署前端项目</p><p>实现了成功的访问（包括了后端的正常运行、前端网页的访问、数据库数据的正常读取）</p><h2 id="Vue3部署"><a href="#Vue3部署" class="headerlink" title="Vue3部署"></a>Vue3部署</h2><ol><li>将vue的项目进行构建，输出dist</li></ol><p>这个步骤就相当于是将vue的项目 <code>npm run build</code> 打包到服务器是一样的。</p><ol start="2"><li>准备镜像内容dockerfile</li></ol><p>在<code>dist</code>目录之上新建一个<code>dockerfile</code>文件，该文件没有后缀，文件名即为此。然后输入如下内容：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 使用nginx作为基础镜像</span><br><span class="line"><span class="variable constant_">FROM</span> nginx</span><br><span class="line"></span><br><span class="line"># 移除默认的nginx配置文件</span><br><span class="line"><span class="variable constant_">RUN</span> rm /etc/nginx/conf.<span class="property">d</span>/<span class="keyword">default</span>.<span class="property">conf</span></span><br><span class="line"></span><br><span class="line"># 将自定义的nginx配置文件添加到容器中的nginx配置目录中</span><br><span class="line"><span class="variable constant_">ADD</span> <span class="keyword">default</span>.<span class="property">conf</span> /etc/nginx/conf.<span class="property">d</span>/</span><br><span class="line"></span><br><span class="line"># 将dist目录下的静态文件复制到nginx默认的网站根目录</span><br><span class="line"><span class="variable constant_">COPY</span> dist/ <span class="regexp">/usr/</span>share/nginx/html/</span><br></pre></td></tr></table></figure><ol start="3"><li><p>准备nginx配置default.conf</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">5173</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">        <span class="attribute">index</span>  index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> /admin &#123;</span><br><span class="line">        <span class="attribute">alias</span> C:/wwwroot/xxxxxx/admin;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> /api/ &#123;</span><br><span class="line">        <span class="comment"># 后端的真实接口</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://xxxxxx:8080/;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> /tencent-api &#123;</span><br><span class="line">        <span class="comment"># 后端的真实接口</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> https://aiart.tencentcloudapi.com/;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> /tencent-download-api &#123;</span><br><span class="line">        <span class="comment"># 后端的真实接口</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> https://xxxxx/text_to_img;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> /nginx_status &#123;</span><br><span class="line">        <span class="attribute">allow</span> <span class="number">127.0.0.1</span>;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">        <span class="attribute">stub_status</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>制作镜像</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker build -t 镜像名字 .</span><br><span class="line"><span class="comment"># 比如：</span></span><br><span class="line">docker build -t tecnb/nft .</span><br><span class="line"><span class="comment"># 下面为多平台进行部署，并且直接推送到dockerHub中</span></span><br><span class="line">docker buildx build --platform linux/amd64,linux/arm64 -t tecnb/nft --push .</span><br><span class="line"></span><br><span class="line">docker buildx build --platform linux/amd64,linux/arm64 -t tecnb/ai-report-assistant-frontend --push .</span><br></pre></td></tr></table></figure><p>注意：后面的<code>.</code>不能省略，镜像创建成功之后使用<code>docker images</code>即可看到自己创建的镜像。</p><p>整个制作过程大概为1-5分钟。</p><p><a href="https://image.imqd.cn/docker-images.png"><img src="https://image.imqd.cn/docker-images.png" alt="制作镜像"></a></p><ol start="5"><li>启动镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name 镜像名字 -p 8888:80 vue3project</span><br><span class="line">docker run -d -p 88:5173 --name nftContainer tecnb/nft</span><br></pre></td></tr></table></figure><p>启动命令说明：</p><blockquote><p>-d：容器在后台启动</p><p>—name : 镜像名称</p><p>-p 8888:80 ：将nginx容器的80端口映射到主机的8888端口，我们访问时直接访问主机ip+映射到主机的端口，这里是8888，如果有路径，后面还要带上路径。 比如这里表示访问路径为：localhost:8888</p><p>tecnb&#x2F;nft: 我们刚刚创建的自己的镜像的名称，在创建时就要规划好名字</p></blockquote><p><strong>注意：</strong></p><p>你制作完镜像后，就可以在自己的<code>docker desktop</code>看到镜像，并且在那里直接配置访问端口和将镜像放置在容器中运行。</p><p><a href="https://image.imqd.cn/image-20230105143223421.png"><img src="https://image.imqd.cn/image-20230105143223421.png" alt="在桌面版看到制作好的镜像"></a></p><p>容器：</p><p><a href="https://image.imqd.cn/image-20230105143159097.png"><img src="https://image.imqd.cn/image-20230105143159097.png" alt="docker 容器"></a></p><p>至此，就相当于是将本地的<code>vue</code>的项目打包为一个<code>docker</code>镜像，并且可以在本地运行查看了，就像你部署到了一台虚拟服务器中！</p><ol start="6"><li>发布到docker Hub库中</li></ol><p>发布指令，其实很简单，直接在命令行输入如下命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker push imqdcn/xxx:latest</span><br><span class="line"><span class="comment"># docker push 注册用户名/镜像名:tag名</span></span><br></pre></td></tr></table></figure><p>意味着，你需要先注册和登录<code>docker-desktop</code></p><p><a href="https://image.imqd.cn/image-20230105143809805.png"><img src="https://image.imqd.cn/image-20230105143809805.png" alt="登录"></a></p><p>然后通过命令行，运行<code>docer login </code>登录，看是否命令行也已经登录成功：</p><p><a href="https://image.imqd.cn/docker-login.png"><img src="https://image.imqd.cn/docker-login.png" alt="命令行登录"></a></p><p>如果你的镜像名字在最开始时没起好名或与其他人发布的镜像名有冲突，可以通过如下方式改名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker tag xxx tecnb/xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 表示将xxx改名为 tecnb/xxx,你也可以改为任意你喜欢的名字，比如tecnb/vue3project</span></span><br></pre></td></tr></table></figure><p>以上都完成，就可以使用 第一条发布指令进行发布了。</p><p><a href="https://image.imqd.cn/docker-push.png"><img src="https://image.imqd.cn/docker-push.png" alt="docker-push发布"></a></p><p>你可以在<code>docker-desktop</code>通过搜索该镜像名字找到镜像地址，或打开<a href="https://hub.docker.com/%E6%9F%A5%E6%89%BE%E4%BD%A0%E5%8F%91%E5%B8%83%E7%9A%84%E9%95%9C%E5%83%8F%EF%BC%9A">https://hub.docker.com/查找你发布的镜像：</a></p><p><a href="https://image.imqd.cn/image-20230105145647378.png"><img src="https://image.imqd.cn/image-20230105145647378.png" alt="搜索发布的镜像"></a></p><ol start="7"><li>发布后，其他人如何下载和运行呢？</li></ol><p>镜像作者发给你hub镜像地址后，上面有拉取指令：</p><p>可以在命令行中先通过执行 <code>docker pull</code>下载到本地:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker pull tecnb/xxx</span><br><span class="line"><span class="comment"># 如果后面没有写tagname，则使用默认的tagName：latest</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面为指定平台的写法</span></span><br><span class="line">docker pull --platform linux/amd64 tecnb/nft</span><br><span class="line"><span class="comment"># 如果不确定平台的话可以使用下面的命令</span></span><br><span class="line"><span class="built_in">uname</span> -m</span><br></pre></td></tr></table></figure><p>运行以上指令，即可在<code>docker desktop</code>看到该镜像，并可运行该镜像。</p><p>总结使用的命令，方便直接复制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面为多平台进行部署，并且直接推送到dockerHub中</span></span><br><span class="line">docker buildx build --platform linux/amd64,linux/arm64 -t tecnb/nft --push .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除原先的容器</span></span><br><span class="line">docker <span class="built_in">rm</span> nftContainer -f</span><br><span class="line"><span class="comment"># 删除容器镜像</span></span><br><span class="line">docker rmi tecnb/nft</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器端拉取最新的 amd64 平台的镜像</span></span><br><span class="line">docker pull --platform linux/amd64 tecnb/nft</span><br><span class="line"><span class="comment"># 最后进行启动</span></span><br><span class="line">docker run -d -p 88:5173 --name nftContainer tecnb/nft</span><br><span class="line"><span class="comment"># 查看成功启动的容器列表</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 打印容器日志</span></span><br><span class="line">docker logs nftContainer</span><br><span class="line"></span><br><span class="line">~/deployNft.sh</span><br></pre></td></tr></table></figure><h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><p>思路为直接将构建镜像相关的指令放在yml文件中，省去了在构筑多个镜像时的重复命令</p><p>现在看来好像是用来代替run命令的，上面的理解是错误的</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>参考：<a href="https://developer.baidu.com/article/details/2819402">解决Docker Compose下载报错问题-百度开发者中心 (baidu.com)</a>、<a href="https://www.runoob.com/docker/docker-compose.html">Docker Compose （Docker） 撰写 |菜鸟教程 (runoob.com)</a></p><p>Linux 上我们可以从 Github 上下载它的二进制包来使用，最新发行的版本地址：<a href="https://github.com/docker/compose/releases%E3%80%82">https://github.com/docker/compose/releases。</a></p><p>运行以下命令以下载 Docker Compose 的当前稳定版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>将可执行权限应用于二进制文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>创建软链：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure><p>测试是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose version</span><br><span class="line">cker-compose version 1.24.1, build 4667896b</span><br></pre></td></tr></table></figure><h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h2><p><strong>这里之前使用<code>81:81</code>后面的端口乱填导致了一直无妨访问到网站</strong>，注意后面的端口是容器内部的端口号</p><p>而前面的”81”则是主机上的端口号。</p><p>这意味着当你访问主机的81端口时，Docker会将流量转发到容器内部的82端口，从而实现主机与容器之间的通信。</p><p>注意<code>platform</code>记得切换对应平台<code>linux/amd64 linux/arm64</code></p><p><strong>注意在使用命令前记得把之前的镜像进行删除</strong>，否则无法自动拉取到最新的进行到本地</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nftCompose:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tecnb/nft</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;81:5173&quot;</span></span><br><span class="line">    <span class="attr">platform:</span> <span class="string">linux/amd64</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nftCompose</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nftAdminCompose:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tecnb/nftadmin</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;82:5173&quot;</span></span><br><span class="line">    <span class="attr">platform:</span> <span class="string">linux/amd64</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nftAdminCompose</span></span><br></pre></td></tr></table></figure><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>首先是准备好最最基础的dockerfile用于docker镜像的构建以及推送</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用nginx作为基础镜像</span></span><br><span class="line">FROM nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除默认的nginx配置文件</span></span><br><span class="line">RUN <span class="built_in">rm</span> /etc/nginx/conf.d/default.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将自定义的nginx配置文件添加到容器中的nginx配置目录中</span></span><br><span class="line">ADD default.conf /etc/nginx/conf.d/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将dist目录下的静态文件复制到nginx默认的网站根目录</span></span><br><span class="line">COPY dist/ /usr/share/nginx/html/</span><br></pre></td></tr></table></figure><p>配套所需要的nginx配置文件default.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 5173;</span><br><span class="line">    server_name localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    client_max_body_size 50M;  <span class="comment"># 设置最大请求体大小为 50M</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    location /admin &#123;</span><br><span class="line">        <span class="built_in">alias</span> C:/wwwroot/xxxxxx/admin;</span><br><span class="line">    &#125;</span><br><span class="line">    location /api/ &#123;</span><br><span class="line">        <span class="comment"># 后端的真实接口</span></span><br><span class="line">        proxy_pass http://xxxxxx:8080/;</span><br><span class="line">    &#125;</span><br><span class="line">    location /tencent-api &#123;</span><br><span class="line">        <span class="comment"># 后端的真实接口</span></span><br><span class="line">        proxy_pass https://aiart.tencentcloudapi.com/;</span><br><span class="line">    &#125;</span><br><span class="line">    location /tencent-download-api &#123;</span><br><span class="line">        <span class="comment"># 后端的真实接口</span></span><br><span class="line">        proxy_pass https://xxxxx/text_to_img;</span><br><span class="line">    &#125;</span><br><span class="line">    location /nginx_status &#123;</span><br><span class="line">        allow 127.0.0.1;</span><br><span class="line">        deny all;</span><br><span class="line">        stub_status on;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是需要run build好vue3，然后使用下面的命令推送到dockerhub</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker buildx build --platform linux/amd64,linux/arm64 -t tecnb/stargazer-backend:remote --push .</span><br><span class="line">docker buildx build --platform linux/amd64,linux/arm64 -t tecnb/ai-report-assistant-frontend:remote --push .</span><br><span class="line">docker buildx build --platform linux/amd64,linux/arm64 -t tecnb/campus-career-backend:remote --push .</span><br><span class="line">docker buildx build --platform linux/amd64,linux/arm64 -t tecnb/campus-career-admin:remote --push .</span><br></pre></td></tr></table></figure><p>还有docker-compose.yml不再重复讲了，记得放到对应的nft文件夹就行</p><p>最后编写下面的deployNft.sh脚本，这样后续只需要使用<code>./deployNft.sh</code>命令就可以启动完成部署了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入工作目录</span></span><br><span class="line"><span class="built_in">cd</span> /www</span><br><span class="line"><span class="built_in">cd</span> wwwroot/nft</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除旧的容器</span></span><br><span class="line">docker <span class="built_in">rm</span> nftCompose -f</span><br><span class="line">docker <span class="built_in">rm</span> nftAdminCompose -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除旧的镜像</span></span><br><span class="line">docker rmi tecnb/nft</span><br><span class="line">docker rmi tecnb/nftadmin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动新的容器</span></span><br><span class="line">docker-compose -p nftallcompose up -d</span><br></pre></td></tr></table></figure><h1 id="GitHub-Actions（CI-x2F-CD）"><a href="#GitHub-Actions（CI-x2F-CD）" class="headerlink" title="GitHub Actions（CI&#x2F;CD）"></a>GitHub Actions（CI&#x2F;CD）</h1><p>思路为在提交仓库时，运行npm run build命令，然后将</p><h1 id="WatchTower"><a href="#WatchTower" class="headerlink" title="WatchTower"></a>WatchTower</h1><p>思路为指定每隔多少时间就自动拉取一次镜像，当然可以设置比如说半分钟就拉一次，这样就不需要再手动进行拉取等工作，但是这样的设置会占据很多的带宽，所以可以设置较宽松的拉取时间，将其作为非调试阶段的自动更新，保证服务器端端代码是比较新的状态</p><p>以下是如何使用 Watchtower 实现自动更新的步骤：</p><ol><li><p><strong>快速启动 Watchtower</strong>：执行以下标准命令启动 Watchtower 容器，并每 5 分钟一次检查所有容器的镜像是否为最新版。如果发现镜像更新，Watchtower 会自动停止容器、删除容器、拉取最新镜像，然后使用之前启动容器的命令重新启动容器：<code>docker run</code>: 这是 Docker 命令行工具用于运行容器的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower</span><br></pre></td></tr></table></figure><p><code>-d</code>: 这是一个选项，表示在后台运行容器。</p><p><code>--name watchtower</code>: 这是为容器指定的名称，即容器的标识符。在这种情况下，容器的名称被设置为 “watchtower”。</p><p><code>-v /var/run/docker.sock:/var/run/docker.sock</code>: 这是一个数据卷选项，用于将 Docker 守护程序的 Unix 套接字（socket）文件挂载到容器内的同一路径。这种挂载允许容器与宿主机上的 Docker 守护程序进行通信，从而能够监控并更新其他容器。</p><p><code>containrrr/watchtower</code>: 这是要运行的 Docker 镜像的名称。在这里，使用的是一个名为 “watchtower” 的镜像，由 Containrrr 维护。这个镜像的作用是自动监控并更新其他容器的镜像，保持其最新状态。</p><p>注意：这个命令默认更新所有运行中的容器，包括 Watchtower 自己。如果您只想更新指定的容器，请继续阅读下面的步骤。</p></li><li><p><strong>指定更新容器</strong>：如果您不需要自动更新所有稳定运行的容器，可以配置仅更新指定的容器。首先，使用以下命令查看您 NAS 中运行的所有 Docker 容器的名字：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>假设您需要监控并更新的容器为 <code>librespeed-1</code> 和 <code>portainer</code>，您可以运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower librespeed-1 portainer</span><br></pre></td></tr></table></figure><p>这样，Watchtower 只会更新指定的容器，其他容器将不会被更新。</p></li><li><p><strong>自动清除旧镜像</strong>：默认情况下，Watchtower 长期使用会堆积很多标签为 <code>none</code> 的旧镜像，占用磁盘空间。您可以在命令后面加上 <code>--cleanup</code> 参数，这样每次更新后都会自动删除旧的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup</span><br></pre></td></tr></table></figure><p><code>XXXX</code> 为指定容器名字。</p></li><li><p><strong>指定更新频率</strong>：您可以配置更新的频率。有两种方式可供选择：</p><ul><li><p>设置更新时间间隔（单位为秒），加入的命令参数为 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--interval</span><br></pre></td></tr></table></figure><p>。例如， “watchtower” 容器会每隔 3600 秒（1小时）检查一次：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup --interval 3600</span><br></pre></td></tr></table></figure></li><li><p>设置定时检测，格式为 6 字段 Cron 表达式，加入的命令参数为 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--schedule</span><br></pre></td></tr></table></figure><p>。例如，每天凌晨 3 点检查更新：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup --schedule <span class="string">&quot;0 0 3 * * *&quot;</span></span><br></pre></td></tr></table></figure></li></ul><p><code>XXXX</code> 为指定容器名字。</p></li><li><p><strong>前台模式（手动更新）</strong>：前台模式运行的 Watchtower 是手动模式，即 Watchtower 运行一次后自动退出容器。这对于更新次数较少的容器非常有用。加入的命令参数为 <code>--run-once</code>。例如，检查更新 <code>librespeed-1</code> 和 <code>portainer</code> 并更新后退出 Watchtower 容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup --run-once</span><br></pre></td></tr></table></figure><p><code>XXXX</code> 为指定容器名字。</p></li></ol><p>最常用的命令为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里为5分钟更新一次</span></span><br><span class="line">docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup</span><br><span class="line"><span class="comment"># 进行删除方便后续修改watchtower的配置</span></span><br><span class="line">docker <span class="built_in">rm</span> watchtower -f</span><br><span class="line"><span class="comment"># 修改为60分钟（3600秒）更新一次</span></span><br><span class="line">docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup --interval 3600</span><br></pre></td></tr></table></figure><p>​              </p><h1 id="linux安装宝塔面板"><a href="#linux安装宝塔面板" class="headerlink" title="linux安装宝塔面板"></a>linux安装宝塔面板</h1><p>Linux面板8.1.0万能安装脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f /usr/bin/curl ];<span class="keyword">then</span> curl -sSO https://download.bt.cn/install/install_panel.sh;<span class="keyword">else</span> wget -O install_panel.sh https://download.bt.cn/install/install_panel.sh;<span class="keyword">fi</span>;bash install_panel.sh ed8484bec</span><br></pre></td></tr></table></figure><h1 id="学习步骤"><a href="#学习步骤" class="headerlink" title="学习步骤"></a>学习步骤</h1><ol><li><p><strong>通过 docker 将NFT部署到本地，正常访问</strong></p></li><li><p><strong>服务器实现docker部署NFT（通过ssh安装docker就行）</strong></p></li><li><p><strong>完成WatchTower设置</strong></p></li><li><p><strong>实现使用compose把admin与nft一起打包成镜像，并实现本地访问</strong></p></li><li><p><strong>实现使用compose把admin与nft一起打包成镜像，并实现远程服务器访问</strong></p></li><li><p>使用 GitHub Actions 打包部署NFT</p></li><li><p>使用 GitHub Actions 通过 SSH 将打包后的NFT传到服务器中，实现访问</p></li><li><p>使用 GitHub Actions 创建NFT的 docker 并使用服务器进行部署</p></li></ol><h1 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h1><ol><li><p>由于window配置docker不太具有可参考性于是重新选个linux服务器</p></li><li><p>尝试通过qemu-user-static解决<code>WARNING: The requested image&#39;s platform (linux/arm64) does not match the detected host platform (linux/amd64/v4) and no specific platform was requested</code>的bug，具体报错为启动后无妨访问网页，打开容器的logs后显示报错<code>exec /docker-entrypoint.sh: no such file or directory</code><br>解决方法：<br>参考：<a href="https://blog.csdn.net/zhaocb_Swan/article/details/108474051">x86架构机器上运行arm64 docker（跨平台构建 Docker 镜像）_宿主机x86运行arm的docker镜像 exec format error-CSDN博客</a></p></li><li><p>继续报错<code>exec /docker-entrypoint.sh: permission denied</code>，无法解决，尝试过增加权限，但是完全找不到<code>/docker-entrypoint.sh</code>的位置</p></li><li><p>决定采用buildx，但是使用命令<code>docker buildx build --platform linux/amd64,linux/arm64 -t tecnb/nft --push .</code>出现报错<code>ERROR: Multi-platform build is not supported for the docker driver.</code>,使用<code>bootstrap</code>插件解决<br>解决方法：<br>参考：<a href="https://stackoverflow.com/questions/60080264/docker-cannot-build-multi-platform-images-with-docker-buildx">linux - Docker - Cannot build multi-platform images with docker buildx - Stack Overflow</a>主要还是Copilot问出来的</p><p>这个错误是由于 <strong>Docker Buildx</strong> 不支持在 <strong>docker driver</strong> 下进行多平台构建。</p><p>首先，让我们检查一下您的 <strong>Docker Buildx</strong> 配置。您可以运行以下命令来查看当前的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker buildx inspect</span><br></pre></td></tr></table></figure><p>如果您的配置中没有包含多平台支持，您需要添加一个支持多平台构建的构建器。您可以使用以下命令创建一个新的构建器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker buildx create --use</span><br></pre></td></tr></table></figure><p>然后，您可以使用以下命令来设置多平台支持：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker buildx inspect --bootstrap</span><br></pre></td></tr></table></figure><p>这将为您创建一个支持多平台构建的构建器，并将其设置为默认构建器。接下来，您应该能够使用 <code>docker buildx build</code> 命令进行多平台构建。</p></li><li><p>下载compose后使用<code>docker-compose version</code>后报错<code>ERROR: Failed to Setup IP tables: Unable to enable SKIP DNAT rule: (iptables failed: iptables --wait -t nat -I DOCKER -i br-d19cbe8b08f9 -j RETURN: iptables: No chain/target/match by that name. (exit status 1))</code></p><p>原因：在对 linux 的防火墙进行操作之后，需要重启 docker<br>解决方法：<br>参考：<a href="https://www.cnblogs.com/lovling/p/12515299.html">docker 启动或创建容器是报 Failed to Setup IP tables: Unable to enable SKIP DNAT rule 错误的的解决办法 - 被遗忘的优雅 - 博客园 (cnblogs.com)</a></p><p>重启下就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>远程桌面</title>
      <link href="/posts/ff9765ce.html"/>
      <url>/posts/ff9765ce.html</url>
      
        <content type="html"><![CDATA[<h1 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h1><h2 id="Sunshine"><a href="#Sunshine" class="headerlink" title="Sunshine"></a>Sunshine</h2><p>下载链接：<a href="https://github.com/LizardByte/Sunshine/releases/tag/v0.23.1">Release v0.23.1 · LizardByte&#x2F;Sunshine (github.com)</a></p><p>用处为作为主机端，实现远程控制的效果</p><h2 id="Moonlight"><a href="#Moonlight" class="headerlink" title="Moonlight"></a>Moonlight</h2><p>下载链接：<a href="https://moonlight-stream.org/#">Moonlight Game Streaming：远程玩您的 PC 游戏 (moonlight-stream.org)</a></p><p>用作客户端，实现接收画面</p><p>一般情况下会自动检测同一局域网下面的主机，并进行链接</p><p>初次链接需要，进入localhost:47990进行pin码的输入</p><h1 id="外网串流"><a href="#外网串流" class="headerlink" title="外网串流"></a>外网串流</h1><p>前提需要sunshine在配置中修改为Upnp启用状态，还有IP选择IPv4+IPv6</p><p>记得保存配置有两步：点击保存，再点击应用</p><p>思路有两种</p><ol><li>有公网IP，IPv4和IPv6都行，还要去路由器中把防火墙给关了</li><li>没有公网IP，搭建虚拟网络</li></ol><h2 id="Zerotier"><a href="#Zerotier" class="headerlink" title="Zerotier"></a>Zerotier</h2><p>总体评价：可能是移动的原因，导致整体链接很不稳定</p><p>官网：<a href="https://www.zerotier.com/">首页 - ZeroTier</a></p><p>点击右上角的登录按钮，登录同一账号后，可以看到自己组建的虚拟局域网</p><p>然后进入客户端，选择join，然后输入类似<code>60ee7c034ab114a5</code>的一串代表虚拟局域网的地址</p><p>接着在网页端，对刚才的操作进行授权，要点击<code>Auth</code>这块的选项</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/image-20240609151757378.png" alt="image-20240609151757378"></p><h2 id="Tailscale"><a href="#Tailscale" class="headerlink" title="Tailscale"></a>Tailscale</h2><p>总体评价：虽然不是同一局域网，但是操作更简单，也更加稳定一点，尽管还是没能连接上就是了🙃</p><p>网络配置地址：<a href="https://login.tailscale.com/admin/machines">Machines - Tailscale</a></p><p>只需要登录账号，下载客户端，然后在上面的网络配置页面中获取到暴露出来的主机虚拟IP就行</p><p>好像只需要主机端进行下载，和zerotier的思路不同</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>竞赛数字藏品平台项目经验</title>
      <link href="/posts/d40d83e8.html"/>
      <url>/posts/d40d83e8.html</url>
      
        <content type="html"><![CDATA[<h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><h2 id="vue3-ts-vite初始化项目"><a href="#vue3-ts-vite初始化项目" class="headerlink" title="vue3+ts+vite初始化项目"></a>vue3+ts+vite初始化项目</h2><p>1、使用vite构建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm create vite@latest </span><br></pre></td></tr></table></figure><p>可能会出现输入命令没反应的情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry=https://registry.npmmirror.com </span><br><span class="line"> </span><br><span class="line">//执行以下命令查看是否配置成功</span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><p>2、依次命令</p><p>最后出现初始页，代表成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> NFT-Admin（将文件切换到该文件夹）</span><br><span class="line">npm install （安装项目依赖）</span><br><span class="line">npm run dev （运行项目）</span><br></pre></td></tr></table></figure><p>接着记得给权限，否则无法保存任何文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> -R 777 /Users/tec/NFT-Admin</span><br></pre></td></tr></table></figure><p>3、将项目文件夹拖入VsCode</p><p>但是会出现两个报错</p><p>第一个是找不到模组<code>vue</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// Cannot find module &#x27;vue&#x27;. Did you mean to set the &#x27;moduleResolution&#x27; option to &#x27;node&#x27;, or to add aliases to the &#x27;paths&#x27; option?Vetur(2792)</span></span><br></pre></td></tr></table></figure><p>解决方法为修改<strong>tsconfig.json</strong>文件，然后关闭 VScode ，重新启动一下项目即可。</p><p>将<code>bundler</code>改为<code>node</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &quot;moduleResolution&quot;: &quot;bundler&quot;,</span></span><br><span class="line"><span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>第二个是两个组件<code>Volar</code>和<code>Vetur</code>冲突</p><p>Vetur是针对vue2的，Volar是针对vue3的关一个就行</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HelloWorld.vue&#x27;</span></span><br><span class="line"><span class="comment">// &quot;Module &#x27;\&quot;/Users/tec/NFT-Platform/src/components/HelloWorld.vue\&quot;&#x27; has no default export.&quot;</span></span><br></pre></td></tr></table></figure><p>4、引入<code>element plus</code></p><p>首先通过 npm 下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus --save</span><br></pre></td></tr></table></figure><p>其次安装两个插件实现自动导入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D unplugin-vue-components unplugin-auto-import</span><br></pre></td></tr></table></figure><p>最后配置<code>vite.config.ts</code>文件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>5、引入vue-router</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure><p>新建 router 文件夹，在该文件夹下面新建 index.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory, <span class="title class_">RouteRecordRaw</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 配置路由</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;../views/index.vue&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/hello&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;../components/HelloWorld.vue&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 1.返回一个 router 实列，为函数，里面有配置项（对象） history</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">    routes,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3导出路由   然后去 main.ts 注册 router.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>在 main.ts 中挂载 router</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router/index&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">    .<span class="title function_">use</span>(router)</span><br><span class="line">    .<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>将程序入口 App.vue 内部改为 router入口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>6、一键生成vue模版</p><p>在 VsCode 界面按住 command+shift+P ，然后在上方的输入栏中输入<code>snippets</code>，回车后，再次输入vue，进入 vue.json 的文件中，输入下面的模版</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Print to console&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;&lt;template&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;  &lt;div class=\&quot;\&quot;&gt;&lt;/div&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&lt;/template&gt;\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&lt;script setup lang=\&quot;ts\&quot;&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;import &#123;&#125; from \&quot;vue\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&lt;/script&gt;\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&lt;style lang=\&quot;scss\&quot; scoped&gt;&lt;/style&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;$2&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Log output to console&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后在 vue 文件中，输入 vue 则可得到下面的模版</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; &#125; from &quot;vue&quot;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>7、引入<code>scss</code></p><p>在 vue3+vite 中已经内置了 scss 的相关启动器，只需要下载一个 sass 就行，比 webpack 所需要加入的依赖少得多</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D sass</span><br></pre></td></tr></table></figure><p>8、引入<code>tailwindcss</code></p><p>见下面的<code>tailwindcss</code>学习部分</p><h2 id="Gitee初始化仓库并提交"><a href="#Gitee初始化仓库并提交" class="headerlink" title="Gitee初始化仓库并提交"></a>Gitee初始化仓库并提交</h2><p>首先根据上面的步骤初始化vue项目之后</p><p>1、初始化本地<code>git</code>仓库以及</p><p>打开vscode的<code>SOURCE CONTROL</code>图标，第一次进去会会显示<code>Initialize repository</code>点击这个按钮，也就相当于进行了下面的步骤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><p>下面的是必要的连接远程仓库的命令行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 远程仓库URL</span><br></pre></td></tr></table></figure><p>2、重命名分支</p><p>注意这个时候别提交，应该先更改分支的名字，因为大部分远程仓库主分支名为<code>master</code>，但是本地仓库默认为<code>main</code>为主分支，这时候可以使用vscode里面的<code>Rename Branch...</code>更改名字为<code>master</code>，同等效果的git命令我也放到下面了</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E6%88%AA%E5%B1%8F2024-02-15%2018.36.40.png" alt="截屏2024-02-15 18.36.40"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m 旧分支名 新分支名</span><br></pre></td></tr></table></figure><p>3、提交到远程仓库</p><p>这里要注意如果远程仓库本来就已经有代码时哦，要先拉取代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p>然后再进行提交，这里直接使用vscode的提交就行，当然相关命令我也放在下面，防止忘记</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E6%88%AA%E5%B1%8F2024-02-15%2019.01.41.png" alt="截屏2024-02-15 19.01.41"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交消息&quot;</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h2 id="圆角带图标的输入框效果"><a href="#圆角带图标的输入框效果" class="headerlink" title="圆角带图标的输入框效果"></a>圆角带图标的输入框效果</h2><p>如何实现圆角带图标的输入框</p><p>主要是去掉输入框默认样式:border: 0px;</p><p>Html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;SearchInput&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">:size</span>=<span class="string">&quot;16&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Search</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;搜索&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 输入框样式 */</span></span><br><span class="line"><span class="selector-class">.SearchInput</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: start;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#FFFFFF</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">12px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">input</span> &#123;</span><br><span class="line">        <span class="attribute">outline</span>: none;</span><br><span class="line">        <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>; <span class="comment">/* 调整输入框的宽度 */</span></span><br><span class="line">        <span class="attribute">border</span>: <span class="number">0px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="element-plus引入图标"><a href="#element-plus引入图标" class="headerlink" title="element plus引入图标"></a>element plus引入图标</h2><p>首先通过npm下载图标包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install @element-plus/icons-vue</span><br></pre></td></tr></table></figure><p>接着在<code>main.ts</code>进行配置</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">ElIcons</span> <span class="keyword">from</span> <span class="string">&#x27;@element-plus/icons-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> name <span class="keyword">in</span> <span class="title class_">ElIcons</span>)&#123;</span><br><span class="line">app.<span class="title function_">component</span>(name,(<span class="title class_">ElIcons</span> <span class="keyword">as</span> <span class="built_in">any</span>)[name])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">    .<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br><span class="line"></span><br><span class="line">    .<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>使用图标</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">size</span>=<span class="string">&quot;16&quot;</span> <span class="attr">color</span>=<span class="string">&quot;#000&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">Search</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="改变背景颜色动画效果"><a href="#改变背景颜色动画效果" class="headerlink" title="改变背景颜色动画效果"></a>改变背景颜色动画效果</h2><p>重点关注的其实是如何做到颜色加深或者变浅，参考下面的例子，关键就是调<code>rgba</code>色的透明值部分</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.MainNavbarUserLogin</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--accent-<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 指定转化时的效果 */</span></span><br><span class="line">  <span class="attribute">transition</span>: background-color <span class="number">0.2s</span> ease <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.MainNavbarUserLogin</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--text-<span class="number">200</span>);</span><br><span class="line">  <span class="comment">/* 悬停时的文本颜色 */</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">214</span>, <span class="number">198</span>, <span class="number">225</span>, <span class="number">0.7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="阴影设置"><a href="#阴影设置" class="headerlink" title="阴影设置"></a>阴影设置</h2><p>box-shadow</p><p>box-shadow: 0 10px 10px rgba(0, 0, 0, 0.1);</p><p>属性：水平偏移为0px，垂直偏移为10px，模糊半径为10px，阴影颜色为深度为0.1的黑色。</p><p>transition的解释看下面的<code>向上移动5px的动画</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.CollectionListItem</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>); <span class="comment">/* 调整阴影效果 */</span></span><br><span class="line">    <span class="attribute">transition</span>: box-shadow <span class="number">0.3s</span> ease, transform <span class="number">0.3s</span> ease; <span class="comment">/* 添加过渡效果 */</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.CollectionListItem</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">20px</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>); <span class="comment">/* 鼠标悬停时的阴影效果 */</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">5px</span>); <span class="comment">/* 鼠标悬停时向上移动10px */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="向上移动5px的动画"><a href="#向上移动5px的动画" class="headerlink" title="向上移动5px的动画"></a>向上移动5px的动画</h2><p>ransition: box-shadow 0.3s ease, transform 0.3s ease; &#x2F;* 添加过渡效果 *&#x2F;</p><p>属性：<code>box-shadow</code> 和 <code>transform</code> 属性在0.3秒内以<code>ease</code>（平滑）的方式过渡。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.CollectionListItem</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>); <span class="comment">/* 调整阴影效果 */</span></span><br><span class="line">    <span class="attribute">transition</span>: box-shadow <span class="number">0.3s</span> ease, transform <span class="number">0.3s</span> ease; <span class="comment">/* 添加过渡效果 */</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.CollectionListItem</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">20px</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>); <span class="comment">/* 鼠标悬停时的阴影效果 */</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">5px</span>); <span class="comment">/* 鼠标悬停时向上移动10px */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="图片按照比例缩放"><a href="#图片按照比例缩放" class="headerlink" title="图片按照比例缩放"></a>图片按照比例缩放</h2><p>object-fit</p><p><code>object-fit</code> 是 CSS 中用于控制替换元素（如 <code>&lt;img&gt;</code>、<code>&lt;video&gt;</code> 或 <code>&lt;object&gt;</code>）的尺寸和裁剪的属性。这个属性允许你定义替换元素在其容器内的尺寸和位置，以及如何调整替换元素的内容以适应这些尺寸。</p><p><code>object-fit</code> 属性有以下几个可能的取值：</p><ol><li><code>fill</code>: 默认值。替换元素被<strong>拉伸以填满容器</strong>，可能导致<strong>元素的宽高比发生变化。</strong></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">object-fit</span>: fill;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>contain</code>: 替换元素被缩放以适应容器，<strong>保持其宽高比</strong>，<strong>可能在容器内留有空白</strong>。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">object-fit</span>: contain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>cover</code>: 替换元素被缩放以填满容器，<strong>保持其宽高比</strong>，<strong>可能裁剪超出容器的部分</strong>。（最常用）</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">object-fit</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>none</code>: 替换元素<strong>保持其原始尺寸</strong>，可能溢出容器。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">object-fit</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><code>scale-down</code>: 替换元素的尺寸被缩小以适应容器，但不会超过其原始尺寸，可能留有空白。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">object-fit</span>: scale-down;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>object-fit</code> 属性，你可以更灵活地控制替换元素在容器内的布局和尺寸，以适应设计的需要。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;CollectionListItemImage&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 150px; width: 280px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&quot;height: 100%; width: 100%; border-radius: 20px 20px 0px 0px; object-fit: cover;&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;item.imageUrl&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Pinia使用"><a href="#Pinia使用" class="headerlink" title="Pinia使用"></a>Pinia使用</h2><p>1、首先安装Pinia</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要 cd 到的项目目录下</span></span><br><span class="line">sudo npm install pinia</span><br></pre></td></tr></table></figure><p>2、更改<code>main.ts</code>文件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span> <span class="comment">// 导入 Pinia</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;@/App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">  .<span class="title function_">use</span>(<span class="title function_">createPinia</span>()) <span class="comment">// 启用 Pinia</span></span><br><span class="line">  .<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>3、创建<code>stores</code>文件夹</p><p>在该文件夹下面就可以创建相关的Store文件</p><p>按照之前做过的来说，一般是一个store一个文件的，但是我觉得很多比较重复，所以就相似的放到一起了</p><p><code>SelectedIndexStore.ts</code>:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">SelectedTypeIndexStore</span> = <span class="title function_">defineStore</span>(<span class="string">&#x27;SelectedTypeIndexStore&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">index</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">SelectedUserIndexStore</span> = <span class="title function_">defineStore</span>(<span class="string">&#x27;SelectedUserIndexStore&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">index</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>CollectionStore.ts</code>:<br>注意如何建立数组元素</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/stores/index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">RecommendedCollectionStore</span> = <span class="title function_">defineStore</span>(<span class="string">&#x27;RecommendedCollectionStore&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">collections</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">imageUrl</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">price</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">tradingVolume</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">CollectionRankingStore</span> = <span class="title function_">defineStore</span>(<span class="string">&#x27;CollectionRankingStore&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">collections</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">imageUrl</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">price</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">tradingVolume</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">PopularAnimationCollectionStore</span> = <span class="title function_">defineStore</span>(<span class="string">&#x27;PopularAnimationCollectionStore&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">collections</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">imageUrl</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">price</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">tradingVolume</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、使用 store 实例</p><p>主要首先从store的ts文件中引入</p><p>然后定义示例</p><p>最后根据示例属性进行使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RecommendedCollectionStore</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../stores/CollectionStore&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SelectedTypeIndexStore</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../stores/SelectedIndexStore&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Collection</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../interfaces/Collection&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 像 useRouter 那样定义一个变量拿到实例</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">RecommendedCollection</span> = <span class="title class_">RecommendedCollectionStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始值</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">recommendedCollections</span>: <span class="title class_">Collection</span>[] = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">imageUrl</span>: <span class="string">&#x27;https://i.seadn.io/s/raw/files/6662e4fbea8ad15eb84990bc68351d57.png?auto=format&amp;dpr=1&amp;h=500&amp;fr=1 1x, https://i.seadn.io/s/raw/files/6662e4fbea8ad15eb84990bc68351d57.png?auto=format&amp;dpr=1&amp;h=500&amp;fr=1 2x&#x27;</span>,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Mint Genesis NFT&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="string">&#x27;0.01 ETH&#x27;</span>,</span><br><span class="line">        <span class="attr">tradingVolume</span>: <span class="string">&#x27;68 ETH&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 setState 方法赋值</span></span><br><span class="line"><span class="title class_">RecommendedCollection</span>.<span class="property">collections</span> = recommendedCollections</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="父组件向字组件传值"><a href="#父组件向字组件传值" class="headerlink" title="父组件向字组件传值"></a>父组件向字组件传值</h2><p>上面的Pinia作为全局管理也可以实现一样的效果，但是如果是比较简单的数据，则可以使用下面的方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = defineProps&lt;&#123; <span class="attr">msg</span>: <span class="built_in">string</span> &#125;&gt;()</span><br></pre></td></tr></table></figure><p>父组件使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">CollectionList</span> <span class="attr">msg</span>=<span class="string">&quot;热门动画数字藏品&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>子组件使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const props = defineProps&lt;&#123; msg: string &#125;&gt;()</span><br></pre></td></tr></table></figure><h2 id="点击切换CSS样式"><a href="#点击切换CSS样式" class="headerlink" title="点击切换CSS样式"></a>点击切换CSS样式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;TypeNavbar&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;TypeNavbarItem&quot; @click=&quot;selectType(0)&quot; :class=&quot;&#123; &#x27;selected&#x27;: TypeIndex.index === 0 &#125;&quot;&gt;</span><br><span class="line">            &lt;p&gt;全部&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;TypeNavbarItem&quot; @click=&quot;selectType(1)&quot; :class=&quot;&#123; &#x27;selected&#x27;: TypeIndex.index === 1 &#125;&quot;&gt;</span><br><span class="line">            &lt;p&gt;动画&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;TypeNavbarItem&quot; @click=&quot;selectType(2)&quot; :class=&quot;&#123; &#x27;selected&#x27;: TypeIndex.index === 2 &#125;&quot;&gt;</span><br><span class="line">            &lt;p&gt;现实&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;TypeNavbarItem&quot; @click=&quot;selectType(3)&quot; :class=&quot;&#123; &#x27;selected&#x27;: TypeIndex.index === 3 &#125;&quot;&gt;</span><br><span class="line">            &lt;p&gt;科技&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;TypeNavbarItem&quot; @click=&quot;selectType(4)&quot; :class=&quot;&#123; &#x27;selected&#x27;: TypeIndex.index === 4 &#125;&quot;&gt;</span><br><span class="line">            &lt;p&gt;动物&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123;  &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">import &#123; SelectedTypeIndexStore &#125; from &#x27;../stores/SelectedIndexStore&#x27;</span><br><span class="line"></span><br><span class="line">const TypeIndex = SelectedTypeIndexStore()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const selectType = (index: number) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    TypeIndex.index = index;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.TypeNavbar &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: start;</span><br><span class="line">    align-items: center;</span><br><span class="line">    width: 100%;</span><br><span class="line"></span><br><span class="line">    gap: 50px;</span><br><span class="line">    margin-top: 20px;</span><br><span class="line">    margin-bottom: 50px;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// .TypeNavbarItem &#123;</span><br><span class="line">//     padding: 0px 20px;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">.TypeNavbarItem.selected:hover &#123;</span><br><span class="line">    color: var(--text-200);</span><br><span class="line">    /* 悬停时的文本颜色 */</span><br><span class="line">    background-color: rgba(214, 198, 225, 0.7);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.TypeNavbarItem.selected &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-around;</span><br><span class="line">    align-items: center;</span><br><span class="line"></span><br><span class="line">    padding: 0px 20px;</span><br><span class="line">    height: 40px;</span><br><span class="line">    min-width: 40px;</span><br><span class="line">    border: 1px solid transparent;</span><br><span class="line"></span><br><span class="line">    background-color: var(--accent-100);</span><br><span class="line"></span><br><span class="line">    backdrop-filter: blur(20px);</span><br><span class="line">    border-radius: 16px;</span><br><span class="line">    // 指定转化时的效果</span><br><span class="line">    transition: background-color 0.2s cubic-bezier(0.05, 0, 0.2, 1) 0s;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="切换展示不同组件"><a href="#切换展示不同组件" class="headerlink" title="切换展示不同组件"></a>切换展示不同组件</h2><p>根据index选中的值切换组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;IndexView&quot; v-if=&quot;TypeIndex.index == 0&quot;&gt;</span><br><span class="line">        &lt;MainNavbar /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;IndexView&quot; v-if=&quot;TypeIndex.index == 2&quot;&gt;</span><br><span class="line">        &lt;MainNavbar /&gt;</span><br><span class="line">        &lt;TypeNavbar /&gt;</span><br><span class="line">        &lt;CollectionList msg=&quot;热门现实数字藏品&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;IndexView&quot; v-if=&quot;TypeIndex.index == 3&quot;&gt;</span><br><span class="line">        &lt;MainNavbar /&gt;</span><br><span class="line">        &lt;TypeNavbar /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;CollectionList msg=&quot;热门科技数字藏品&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;IndexView&quot; v-if=&quot;TypeIndex.index == 4&quot;&gt;</span><br><span class="line">        &lt;MainNavbar /&gt;</span><br><span class="line">        &lt;TypeNavbar /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;CollectionList msg=&quot;热门动物数字藏品&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="路由使用"><a href="#路由使用" class="headerlink" title="路由使用"></a>路由使用</h2><p>路由的下载在第一部分讲过了</p><p>1、ts中使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toIndex</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    router.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;IndexView&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、html中使用，主要是可以唤起鼠标的手部图标</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user&quot;</span>&gt;</span>TEC<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用overflow-y-Auto-导致的Bug"><a href="#使用overflow-y-Auto-导致的Bug" class="headerlink" title="使用overflow-y: Auto;导致的Bug"></a>使用overflow-y: Auto;导致的Bug</h2><p>overflow-y: scroll;</p><p>使用<code>overflow-y: Auto</code>容易出现的问题是，同一个界面中，在切换字组件时，部分子组件长度超出父组件，<code>overflow-y:</code>会变为scroll，而部分子组件长度未超出父组件，<code>overflow-y:</code>会变为hidden，这样的情况下，会导致界面布局变化，比如宽度伸长缩短</p><p>解决的方法就是，在决定一定会超父组件时直接使用<code>overflow-y: scroll;</code></p><h2 id="手写上传文件框"><a href="#手写上传文件框" class="headerlink" title="手写上传文件框"></a>手写上传文件框</h2><p>ui部分：</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E6%88%AA%E5%B1%8F2024-02-21%2020.55.43.png" alt="截屏2024-02-21 20.55.43"></p><p>Html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;CreateViewBodyLeft&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 36px; font-weight: bold;&quot;</span>&gt;</span>创建NFT<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 20px; margin-top: 10px;&quot;</span>&gt;</span>铸造项目后，您将无法更改其任何信息。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;CreateViewBodyLeftUpdate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">size</span>=<span class="string">&quot;40&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Upload</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 20px; font-weight: bold; margin-top: 20px;&quot;</span>&gt;</span>拖拽媒体<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 16px; color: var(--primary-100); font-weight: bold;&quot;</span>&gt;</span>浏览文件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 16px;&quot;</span>&gt;</span>最大尺寸: 50MB<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 16px;&quot;</span>&gt;</span>JPG、PNG、GIF、SVG、MP4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Css:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.CreateViewBodyLeft</span> &#123;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">40%</span>; </span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.CreateViewBodyLeftUpdate</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: flex; <span class="comment">/* 使用 Flex 布局 */</span></span><br><span class="line">        <span class="attribute">flex-direction</span>: column; <span class="comment">/* 主轴方向为垂直，交叉轴方向为水平 */</span></span><br><span class="line">        <span class="attribute">justify-content</span>: center; <span class="comment">/* 在主轴上居中对齐 */</span></span><br><span class="line">        <span class="attribute">align-items</span>: center; <span class="comment">/* 在交叉轴上居中对齐 */</span></span><br><span class="line">        <span class="attribute">gap</span>: <span class="number">5px</span>; <span class="comment">/* 设置子元素之间的间距 */</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">height</span>: <span class="number">80%</span>; </span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">min-width</span>: <span class="number">80%</span>; </span><br><span class="line"></span><br><span class="line">        <span class="attribute">max-height</span>: <span class="number">600px</span>; </span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="built_in">var</span>(--text-<span class="number">200</span>); <span class="comment">/* 设置边框为虚线 */</span></span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">20px</span>; </span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="built_in">var</span>(--bg-<span class="number">200</span>); <span class="comment">/* 设置背景颜色，颜色使用 CSS 变量 */</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">transition</span>: background-color <span class="number">0.2s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.05</span>, <span class="number">0</span>, <span class="number">0.2</span>, <span class="number">1</span>) <span class="number">0s</span>; <span class="comment">/* 添加背景颜色过渡效果，持续0.2秒，使用贝塞尔曲线，无延迟 */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.CreateViewBodyLeftUpdate</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--text-<span class="number">200</span>); <span class="comment">/* 设置边框为实线*/</span></span><br><span class="line">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">0.04</span>); <span class="comment">/* 设置半透明背景颜色 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>功能实现部分：</p><h2 id="Flex布局竖向排列元素"><a href="#Flex布局竖向排列元素" class="headerlink" title="Flex布局竖向排列元素"></a>Flex布局竖向排列元素</h2><p>使用<code>flex</code>布局的<code>flex-direction</code>设置为<code>column</code>即可</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.CreateViewBodyLeftUpdate</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex; <span class="comment">/* 使用 Flex 布局 */</span></span><br><span class="line">    <span class="attribute">flex-direction</span>: column; <span class="comment">/* 主轴方向为垂直，交叉轴方向为水平 */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: center; <span class="comment">/* 在主轴上居中对齐 */</span></span><br><span class="line">    <span class="attribute">align-items</span>: center; <span class="comment">/* 在交叉轴上居中对齐 */</span></span><br><span class="line">    <span class="attribute">gap</span>: <span class="number">5px</span>; <span class="comment">/* 设置子元素之间的间距 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="鼠标滑动展示菜单"><a href="#鼠标滑动展示菜单" class="headerlink" title="鼠标滑动展示菜单"></a>鼠标滑动展示菜单</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;MainNavbarUserInfo&quot; @mouseover=&quot;showUserMenu&quot; @mouseleave=&quot;hideUserMenu&quot;&gt;</span><br><span class="line">  &lt;el-icon :size=&quot;20&quot;&gt;</span><br><span class="line">    &lt;User /&gt;</span><br><span class="line">  &lt;/el-icon&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;transition name=&quot;fade&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;MainNavbarUserMenu&quot; v-if=&quot;isUserMenuVisible&quot; @mouseover=&quot;showUserMenu&quot; @mouseleave=&quot;hideUserMenu&quot;&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/transition&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">/* 整个导航栏容器 */</span><br><span class="line"></span><br><span class="line">.fade-enter-active,</span><br><span class="line">.fade-leave-active &#123;</span><br><span class="line">    transition: opacity 0.5s ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fade-enter-from,</span><br><span class="line">.fade-leave-to &#123;</span><br><span class="line">    opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h2><p>主要是使用<code>absolute</code>定位，并使用<code>z-index</code>来使得菜单维持在界面最上方</p><p>但是目前存在缩放后位置有偏差的问题（‼️）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;MainNavbarUserMenu&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;isUserMenuVisible&quot;</span> @<span class="attr">mouseover</span>=<span class="string">&quot;showUserMenu&quot;</span> @<span class="attr">mouseleave</span>=<span class="string">&quot;hideUserMenu&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.MainNavbarUserMenu</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">9999</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">70px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">210px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="卡片式轮播图"><a href="#卡片式轮播图" class="headerlink" title="卡片式轮播图"></a>卡片式轮播图</h2><p>采用的是element-plus中的<code>el-carousel</code>来实现</p><p><code>type</code>属性改为card就能实现卡片轮播，具体实现看下面的示例</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;IndexView&quot; v-if=&quot;TypeIndex.index == 0&quot;&gt;</span><br><span class="line">        &lt;el-carousel :interval=&quot;4000&quot; type=&quot;card&quot; height=&quot;300px&quot; &gt;</span><br><span class="line">            &lt;el-carousel-item v-for=&quot;(item, index) in recommendedCollections&quot; :key=&quot;index&quot; style=&quot;border-radius: 20px 20px 0px 0px;&quot;&gt;</span><br><span class="line">                &lt;img :src=&quot;item.imageUrl&quot; alt=&quot;NFT Image&quot; style=&quot;height: 100%; width: 100%; border-radius: 20px 20px 0px 0px; object-fit: cover;&quot;&gt;</span><br><span class="line">                &lt;h3 text=&quot;2xl&quot; justify=&quot;center&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;/h3&gt;</span><br><span class="line">                &lt;p&gt;&#123;&#123; item.price &#125;&#125;&lt;/p&gt;</span><br><span class="line">                &lt;p&gt;&#123;&#123; item.tradingVolume &#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;/el-carousel-item&gt;</span><br><span class="line">        &lt;/el-carousel&gt;</span><br><span class="line">        &lt;Rank/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.el-carousel__item h3 &#123;</span><br><span class="line">    color: #475669;</span><br><span class="line">    opacity: 0.75;</span><br><span class="line">    line-height: 200px;</span><br><span class="line">    margin: 0;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-carousel__item:nth-child(2n) &#123;</span><br><span class="line">    background-color: #99a9bf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-carousel__item:nth-child(2n + 1) &#123;</span><br><span class="line">    background-color: #d3dce6;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h2><p>1、使用Vue提供的<code>transition</code>组件</p><p>前提是<code>transition</code>中存在<code>v-if</code>来控制组件的出现与否，而且注意<code>v-if</code>的组件必须就位于<code>transition</code>的下一个包裹代码汇总</p><p>这个<code>transition</code>中的过渡时间不生效一直不生效（‼️）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=&quot;fade&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;MainNavbarUserMenu&quot; v-if=&quot;isUserMenuVisible&quot; @mouseover=&quot;showUserMenu&quot; @mouseleave=&quot;hideUserMenu&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/transition&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">/* 整个导航栏容器 */</span><br><span class="line"></span><br><span class="line">.fade-enter-active,</span><br><span class="line">.fade-leave-active &#123;</span><br><span class="line">    transition: opacity 0.5s ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fade-enter-from,</span><br><span class="line">.fade-leave-to &#123;</span><br><span class="line">    opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、使用Css提供的<code>transition</code>属性</p><p><code>transition</code> 属性是 CSS 中用于设置过渡效果的属性。过渡效果可以让元素在状态改变时平滑地过渡到新状态，而不是突然地改变样式。<code>transition</code> 属性可以应用于元素的各种样式属性，如颜色、大小、位置等，以实现平滑的过渡效果。</p><p><code>transition</code> 属性有以下语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transition</span>: property duration timing-function delay;</span><br></pre></td></tr></table></figure><ul><li><p><code>property</code>：指定要过渡的样式属性，可以是一个或多个属性，用逗号分隔。也可以使用关键字 <code>all</code> 表示所有属性。例如：<code>width</code>, <code>height</code>, <code>color</code>, <code>all</code>,<code>background-color</code>。</p></li><li><p><code>duration</code>：指定过渡的持续时间，以秒（s）或毫秒（ms）为单位。例如：<code>0.5s</code>, <code>1000ms</code>。</p></li><li><p><code>timing-function</code>：指定过渡效果的时间函数，用于定义过渡过程中的速度变化。常见的有 <code>ease</code>（默认值，缓慢开始，然后加速）、<code>linear</code>（匀速）、<code>ease-in</code>（缓慢开始）、<code>ease-out</code>（缓慢结束）、<code>ease-in-out</code>（缓慢开始和结束）等。</p></li><li><p><code>delay</code>（可选）：指定在过渡开始之前的延迟时间，以秒（s）或毫秒（ms）为单位。例如：<code>0.2s</code>, <code>300ms</code>。</p></li></ul><p>下面是一个例子，演示了如何使用 <code>transition</code> 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 对于所有属性，持续时间为0.3秒，使用ease时间函数，延迟0.1秒 这个比较常用*/</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease <span class="number">0.1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 对于颜色属性，持续时间为1秒，使用linear时间函数，无延迟 */</span></span><br><span class="line"><span class="selector-class">.element2</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: color <span class="number">1s</span> linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.MainNavbarUserCart</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 指定转化时的效果 */</span></span><br><span class="line">  <span class="attribute">transition</span>: background-color <span class="number">0.2s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.05</span>, <span class="number">0</span>, <span class="number">0.2</span>, <span class="number">1</span>) <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.MainNavbarUserCart</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--text-<span class="number">200</span>);</span><br><span class="line">  <span class="comment">/* 悬停时的文本颜色 */</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">214</span>, <span class="number">198</span>, <span class="number">225</span>, <span class="number">0.7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="排行榜实现"><a href="#排行榜实现" class="headerlink" title="排行榜实现"></a>排行榜实现</h2><p>重点关注如何实现序号正确排列的</p><p>还没好好看（‼️）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;Rank&quot;&gt;</span><br><span class="line">        &lt;div v-for=&quot;(collectionGroup, index) in groupedCollections&quot; :key=&quot;index&quot; class=&quot;RankLeft&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;RankTitle&quot;&gt;</span><br><span class="line">                &lt;p style=&quot;flex: 1;&quot;&gt;#&lt;/p&gt;</span><br><span class="line">                &lt;p style=&quot;flex: 7;&quot;&gt;系列&lt;/p&gt;</span><br><span class="line">                &lt;p style=&quot;flex: 4;text-align: end;&quot;&gt;交易量&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;RankBody&quot;&gt;</span><br><span class="line">                &lt;div v-for=&quot;(collection, innerIndex) in collectionGroup&quot; :key=&quot;innerIndex&quot; class=&quot;RankBodyItem&quot;&gt;</span><br><span class="line">                    &lt;p style=&quot;flex: 1;&quot;&gt;&#123;&#123; collection.rank &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;div style=&quot;flex: 7;&quot; class=&quot;RankBodyItemContent&quot;&gt;</span><br><span class="line">                        &lt;div style=&quot;flex: 0.3;&quot;&gt;</span><br><span class="line">                            &lt;img :src=&quot;collection.imageUrl&quot; alt=&quot;&quot;</span><br><span class="line">                                style=&quot;height: 100%; width: 100%; border-radius: 20px; object-fit: cover; aspect-ratio: 1/1;&quot;&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                        &lt;div style=&quot;padding-left: 20px;&quot;&gt;</span><br><span class="line">                            &lt;p&gt;&#123;&#123; collection.title &#125;&#125;&lt;/p&gt;</span><br><span class="line">                            &lt;p style=&quot;color: var(--text-200); padding-top: 10px;&quot;&gt;地板价:&#123;&#123; collection.price &#125;&#125;&lt;/p&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;p style=&quot;flex: 4; text-align: end;&quot;&gt;&#123;&#123; collection.tradingVolume &#125;&#125;&lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, computed &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const recommendedCollections = ref([</span><br><span class="line">    &#123;</span><br><span class="line">        imageUrl: &#x27;https://i.seadn.io/s/raw/files/6662e4fbea8ad15eb84990bc68351d57.png?auto=format&amp;dpr=1&amp;h=500&amp;fr=1 1x, https://i.seadn.io/s/raw/files/6662e4fbea8ad15eb84990bc68351d57.png?auto=format&amp;dpr=1&amp;h=500&amp;fr=1 2x&#x27;,</span><br><span class="line">        title: &#x27;Mint Genesis NFT&#x27;,</span><br><span class="line">        price: &#x27;0.01 ETH&#x27;,</span><br><span class="line">        tradingVolume: &#x27;68 ETH&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">const groupedCollections = computed(() =&gt; &#123;</span><br><span class="line">    const grouped = [];</span><br><span class="line">    for (let i = 0; i &lt; recommendedCollections.value.length; i += 5) &#123;</span><br><span class="line">        grouped.push(recommendedCollections.value.slice(i, i + 5).map((collection, index) =&gt; (&#123; ...collection, rank: i + index + 1 &#125;)));</span><br><span class="line">    &#125;</span><br><span class="line">    return grouped;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="图片正方形实现"><a href="#图片正方形实现" class="headerlink" title="图片正方形实现"></a>图片正方形实现</h2><p>aspect-ratio: 1&#x2F;1;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;flex: 1;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://xxx.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">style</span>=<span class="string">&quot;height: 100%; width: 100%; border-radius: 20px; object-fit: cover; aspect-ratio: 1/1;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="由于父元素存在padding，导致UserBackground无法铺满横向解决"><a href="#由于父元素存在padding，导致UserBackground无法铺满横向解决" class="headerlink" title="由于父元素存在padding，导致UserBackground无法铺满横向解决"></a>由于父元素存在padding，导致UserBackground无法铺满横向解决</h2><p>margin-left: -50px;</p><p>margin-right: -50px;    </p><p>父组件存在padding，子组件背景颜色想铺满的话，需要加上负的margin</p><h2 id="悬浮图片"><a href="#悬浮图片" class="headerlink" title="悬浮图片"></a>悬浮图片</h2><p>主要是使用<code>absolute</code>定位，使图片悬浮在左下角</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E6%88%AA%E5%B1%8F2024-02-21%2020.56.15.png" alt="截屏2024-02-21 20.56.15"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.UserBackgroundAvatar</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置绝对定位，相对于包含它的 .UserBackground 定位 */</span></span><br><span class="line">    <span class="attribute">left</span>: <span class="number">5%</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">10%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20vh</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20vh</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手写悬浮二级菜单"><a href="#手写悬浮二级菜单" class="headerlink" title="手写悬浮二级菜单"></a>手写悬浮二级菜单</h2><p>这个比较死可以直接拿来用</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E6%88%AA%E5%B1%8F2024-02-21%2020.54.50.png" alt="截屏2024-02-21 20.54.50"></p><p>HTML部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;Condition&quot;&gt;</span><br><span class="line">    &lt;p&gt;最近收到&lt;/p&gt;</span><br><span class="line">    &lt;!-- 根据isConditionListVisible决定class是rotate-0还是rotate-180 --&gt;</span><br><span class="line">    &lt;el-icon :size=&quot;16&quot; @click=&quot;toggleConditionList&quot; :class=&quot;isConditionListVisible ? &#x27;rotate-180&#x27; : &#x27;rotate-0&#x27;&quot;&gt;</span><br><span class="line">        &lt;ArrowDownBold /&gt;</span><br><span class="line">    &lt;/el-icon&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;ConditionList&quot; v-if=&quot;isConditionListVisible&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;ConditionListItem&quot;&gt;</span><br><span class="line">            &lt;p&gt;最近收到&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;ConditionListItem&quot;&gt;</span><br><span class="line">            &lt;p&gt;价格从高到低&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;ConditionListItem&quot;&gt;</span><br><span class="line">            &lt;p&gt;价格从低到高&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;ConditionListItem&quot;&gt;</span><br><span class="line">            &lt;p&gt;最近创建的&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;ConditionListItem&quot;&gt;</span><br><span class="line">            &lt;p&gt;最高销售价格&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;ConditionListItem&quot;&gt;</span><br><span class="line">            &lt;p&gt;最早的&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>TypeScript部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">// 定义变量控制是否展示ConditionList</span><br><span class="line">let isConditionListVisible = ref(false);</span><br><span class="line">// 定义一个函数用于控制ConditionList的显示与隐藏</span><br><span class="line">const toggleConditionList = () =&gt; &#123;</span><br><span class="line">    isConditionListVisible.value = !isConditionListVisible.value;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>CSS部分：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.Condition</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">gap</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#FFFFFF</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0.5px</span> solid <span class="built_in">var</span>(--text-<span class="number">200</span>);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">12px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.rotate-180</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">        <span class="attribute">transition</span>: <span class="number">0.25s</span> ease-out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.rotate-0</span> &#123;</span><br><span class="line">        <span class="attribute">transition</span>: <span class="number">0.25s</span> ease-out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.ConditionList</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">justify-content</span>: center;</span><br><span class="line">        <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">        <span class="attribute">flex-direction</span>: column;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">60px</span>;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#FFFFFF</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.ConditionListItem</span> &#123;</span><br><span class="line">            <span class="attribute">display</span>: flex;</span><br><span class="line">            <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">            <span class="attribute">align-items</span>: center;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.ConditionListItem</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">cursor</span>: pointer;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手写朝着点击方向移动的动画效果"><a href="#手写朝着点击方向移动的动画效果" class="headerlink" title="手写朝着点击方向移动的动画效果"></a>手写朝着点击方向移动的动画效果</h2><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E6%88%AA%E5%B1%8F2024-02-15%2022.38.14.png" alt="截屏2024-02-15 22.38.14"></p><p> 方法一：<br>该方法是纯自己想，缺点在于开局就会转动，优点在于遇到开局需要运动的需求，可以用上这个</p><p> 方法二：</p><p>该方法才是通用的方法，首先是大体的html结构部分，抛弃方法一中的，每个位置上都放置一个白色选择块，再通过点击显示点击位置的白色选择块的方法</p><p>实际上应该只放置一个白色选择块，点击后通过css中的<code>translateX</code>，将该唯一白色选择块移动至点击位置，最后用<code>transition</code>控制移动动画的长度</p><p>HTML部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;FilterSectionType&quot;</span> <span class="attr">style</span>=<span class="string">&quot;flex: 2;&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 应用selectType方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; &#x27;Selected0&#x27;: TypeIndex.index === 0, &#x27;Selected1&#x27;: TypeIndex.index === 1 &#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Content of the div --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">&quot;selectType(0)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute; left: 15%; z-index: 9999;&quot;</span>&gt;</span>热门<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">&quot;selectType(1)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute; right: 15%; z-index: 9999;&quot;</span>&gt;</span>最佳<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>TypeScript部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">// 定义TypeIndex</span><br><span class="line"></span><br><span class="line">let TypeIndex = ref(0)</span><br><span class="line">// 实现selectType方法</span><br><span class="line">const selectType = (index: number) =&gt; &#123;</span><br><span class="line">    TypeIndex.value = index</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>CSS部分：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.FilterSectionType</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--accent-<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 定义共同的样式 */</span></span><br><span class="line">    <span class="keyword">@mixin</span> selected-style &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">80%</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="built_in">var</span>(--bg-<span class="number">100</span>);</span><br><span class="line">        <span class="attribute">transition</span>: <span class="number">0.25s</span> ease-out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.Selected0</span> &#123;</span><br><span class="line">        <span class="keyword">@include</span> selected-style;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">45%</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.Selected1</span> &#123;</span><br><span class="line">        <span class="keyword">@include</span> selected-style;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">45%</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="absolute布局对应偏移对象理解错误"><a href="#absolute布局对应偏移对象理解错误" class="headerlink" title="absolute布局对应偏移对象理解错误"></a>absolute布局对应偏移对象理解错误</h2><p>这个其实是相当基础的问题，但是确实前端这块基础不够扎实</p><p>absolute布局对应偏移对象实际上是在相对于static定位以外的第一个父元素进行定位</p><p>其实就是他自己向上一层一层的找自己的父元素,<br>然后看他们的position属性,谁的position属性不是static他就以谁为标准偏移.<br>如果一直没有的话就会找到body,body也不是的话,但是已经是最后一层了,<br>所以他就只能以body的初始位置为基准了.这就是之前为什么没对齐的原因.<br>注:(所有的块属性的position默认为static)</p><p>后面在写前后翻页的按钮时，发现了妙用，当最外层的<code>app</code>具有padding时，内部的元素无法处于padding的位置上，这时候将<code>app</code>的<code>position</code>设置为<code>relative</code>，就能够避免padding裁掉元素</p><h2 id="absolute布局居中对齐"><a href="#absolute布局居中对齐" class="headerlink" title="absolute布局居中对齐"></a>absolute布局居中对齐</h2><p>参考文章：<a href="https://blog.csdn.net/LzzMandy/article/details/84880843">绝对定位position:absolute；实现居中对齐_position: absolute; 居中-CSDN博客</a></p><p>实现原理为left以及top的布局是根据元素左上角进行定位的，但是我们的需求是元素的中心点居中，那么这个时候再使用<code>translate(-50%, -50%)</code>将从元素左上角变换至元素中心点，达成效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">700px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">background</span>: pink;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;    <span class="comment">/* 起始是在body中，横向距左50%的位置 */</span></span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;     <span class="comment">/* 起始是在body中，纵向距上50%的位置，这个点相当于body的中心点，div的左上角的定位 */</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>); <span class="comment">/* 水平、垂直都居中 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="父子组件通讯"><a href="#父子组件通讯" class="headerlink" title="父子组件通讯"></a>父子组件通讯</h2><p>使用prop&#x2F;emit来实现，</p><p>当使用 <code>prop</code> 和 <code>emit</code> 进行父子组件通信时，主要涉及两个概念：props 和自定义事件。</p><p>下面我将分别从父组件以及子组件介绍用法</p><h3 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a><strong>父组件</strong></h3><p><strong>Props（属性）</strong></p><p>在父组件中，通过 <code>props</code> 可以将数据传递给子组件。在子组件中，可以通过定义 <code>props</code> 属性来接收这些数据。</p><p>下面的例子中<code>props</code>名为<code>ifShow</code>，实际的值来自于<code>isLoginBoxVisible</code>，注意是可以传递多个属性的</p><p><strong>Emit（自定义事件）</strong></p><p>在父组件中，<code>Emit</code>并不是被直接使用，而是定义<code>Emit</code>所需要的事件，这里的事件为<code>updateIfShow</code>，而对应的方法为<code>updateIsLoginBoxVisible</code>，这里注意事件与方法的区别，以及方法的格式是需要参数的</p><p><strong>父组件中的示例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ParentComponent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LoginBox</span> <span class="attr">:ifShow</span>=<span class="string">&quot;isLoginBoxVisible&quot;</span> @<span class="attr">updateIfShow</span>=<span class="string">&quot;updateIsLoginBoxVisible&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 引入LoginBox</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">LoginBox</span> <span class="keyword">from</span> <span class="string">&#x27;../components/LoginBox.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// isLoginBoxVisible设置默认为false</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> isLoginBoxVisible = <span class="title function_">ref</span>(<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// hideMaskLayer方法控制更新isLoginBoxVisible</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">updateIsLoginBoxVisible</span> = (<span class="params">value: boolean</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    isLoginBoxVisible.<span class="property">value</span> = value;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">showLogin</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">updateIsLoginBoxVisible</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h3><p><strong>Props（属性）</strong></p><p>在子组件中，使用<code>defineProps</code>方法接收父组件传进来的<code>Props</code>，使用方法为props.(属性名)（<code>props.ifShow</code>）</p><p><strong>Emit（自定义事件）</strong></p><p>在子组件中，通过 <code>emit</code> 方法可以触发自定义事件，并将数据传递给父组件。使用方法：首先通过<code>defineEmits</code>实例化一个<code>emit</code>，接着需要按照emit(‘事件名’，事件的方法参数)的方式调用父组件的事件</p><p><strong>子组件中的示例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ChildComponent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;LoginBox&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;props.ifShow&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 子组件的其他内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;  &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>([<span class="string">&#x27;ifShow&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">toggleVisibility</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">emit</span>(<span class="string">&#x27;updateIfShow&#x27;</span>, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="手写radio"><a href="#手写radio" class="headerlink" title="手写radio"></a>手写radio</h2><p>将input的type设置为<code>radio</code>即可，需要注意的是如何更改小圆点的颜色，网上查了很多，但是都复杂且无效，实际上只需要更改<code>accent-color</code>就可以更改小圆点颜色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;payMethod&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>支付方式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;paymentMethod&quot;</span> <span class="attr">value</span>=<span class="string">&quot;alipay&quot;</span>&gt;</span></span><br><span class="line">        支付宝</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;paymentMethod&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wechat&quot;</span>&gt;</span></span><br><span class="line">        微信支付</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="鼠标划动事件"><a href="#鼠标划动事件" class="headerlink" title="鼠标划动事件"></a>鼠标划动事件</h2><p>不是hover，而是<code>@mouseover=&quot;handleHover&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Detail&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;!isCartNullVisible&quot;</span> @<span class="attr">mouseover</span>=<span class="string">&quot;handleHover&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ref问题"><a href="#ref问题" class="headerlink" title="ref问题"></a>ref问题</h2><p>使用ref时注意要用<code>.value</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个变量isDeleteVisible</span></span><br><span class="line"><span class="keyword">let</span> isDeleteVisible = <span class="title function_">ref</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 实现showDelete方法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">showDelete</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    isDeleteVisible.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="悬停于v-for形成的元素时，仅其中一个元素-而不是全部都改变"><a href="#悬停于v-for形成的元素时，仅其中一个元素-而不是全部都改变" class="headerlink" title="悬停于v-for形成的元素时，仅其中一个元素,而不是全部都改变"></a>悬停于v-for形成的元素时，仅其中一个元素,而不是全部都改变</h2><p>创建一个对应<code>cartList</code>的数组来实现，首先是通过<code>map</code>创建了一个全是<code>false</code>的数组（序号与<code>cartList</code>对应），该数组内的值会在鼠标移入时触发<code>mouseover</code>事件，将该值改为<code>true</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-for=&quot;(item, index) in cartList&quot; :key=&quot;index&quot; class=&quot;DetailBelow&quot; @mouseover=&quot;showDelete(index)&quot; @mouseleave=&quot;hideDelete()&quot;&gt;</span><br><span class="line">    &lt;div style=&quot;flex: 1;&quot;&gt;</span><br><span class="line">      &lt;p v-if=&quot;isDeleteVisible[index] &amp;&amp; !isDeleteVisible[index].value&quot;&gt;&#123;&#123; item.price &#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;div v-else @click=&quot;deleteCart(index)&quot;&gt;</span><br><span class="line">        &lt;el-icon&gt;</span><br><span class="line">          &lt;Delete /&gt;</span><br><span class="line">        &lt;/el-icon&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// 定义一个变量isDeleteVisible</span><br><span class="line">let isDeleteVisible = cartList.value.map(() =&gt; ref(false));</span><br><span class="line">//当cartList改变时，isDeleteVisible也重新赋值</span><br><span class="line">watch(cartList.value, (newValue, oldValue) =&gt; &#123;</span><br><span class="line">    isDeleteVisible = newValue.map(() =&gt; ref(false));</span><br><span class="line">    console.log(&#x27;watch 已触发&#x27;, oldValue)</span><br><span class="line">&#125;)</span><br><span class="line">// 实现showDelete方法</span><br><span class="line">const showDelete = (index: number) =&gt; &#123;</span><br><span class="line">    isDeleteVisible.forEach((item, i) =&gt; (item.value = i === index));</span><br><span class="line">&#125;;</span><br><span class="line">// 实现hideDelete方法</span><br><span class="line">const hideDelete = () =&gt; &#123;</span><br><span class="line">    isDeleteVisible.forEach((item) =&gt; (item.value = false));</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Uncaught-in-promise-TypeError-Cannot-read-properties-of-undefined-reading-‘value’-‼️"><a href="#Uncaught-in-promise-TypeError-Cannot-read-properties-of-undefined-reading-‘value’-‼️" class="headerlink" title="Uncaught (in promise) TypeError: Cannot read properties of undefined (reading ‘value’)(‼️)"></a>Uncaught (in promise) TypeError: Cannot read properties of undefined (reading ‘value’)(‼️)</h2><p>位于CartList的错误，触发条件为商品添加进全局状态<code>CartListCollection</code>中</p><p>错误报错位于</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;!isDeleteVisible[index].value&quot;</span>&gt;</span>&#123;&#123; item.price &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>补充代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个数组用于储存购物车的内容,并且为响应式</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>记得cartList一定是要放在全局变量里面的，否则清除所有就是清除不了的</span></span><br><span class="line"><span class="keyword">const</span> cartList = ref&lt;<span class="title class_">Collection</span>[]&gt;([])</span><br><span class="line"></span><br><span class="line"><span class="comment">// cartList赋值给CartListCollection</span></span><br><span class="line">cartList.<span class="property">value</span>=<span class="title class_">CartListCollection</span>.<span class="property">collections</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个变量isDeleteVisible</span></span><br><span class="line"><span class="keyword">let</span> isDeleteVisible = cartList.<span class="property">value</span>.<span class="title function_">map</span>(<span class="function">() =&gt;</span> <span class="title function_">ref</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="comment">// 实现showDelete方法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">showDelete</span> = (<span class="params">index: <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">    isDeleteVisible.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, i</span>) =&gt;</span> (item.<span class="property">value</span> = i === index));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 实现hideDelete方法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">hideDelete</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    isDeleteVisible.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> (item.<span class="property">value</span> = <span class="literal">false</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>初步想带到的解决方法为去掉<code>.value</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;!isDeleteVisible[index]&quot;</span>&gt;</span>&#123;&#123; item.price &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>离奇的点在于<code>isDeleteVisible</code>确实是ref属性啊，以及在把商品添加进去之前是可以的，但是添加之后就报错</p><p>接着想到的方法为加上判断</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;isDeleteVisible[index] &amp;&amp; !isDeleteVisible[index].value&quot;</span>&gt;</span>&#123;&#123; item.price &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是只是不报错，它原本的功能没了</p><p>最后发现其实是数组越界，把商品添加进去后，<code>cartList</code>更新了，但是没有更新<code>isDeleteVisible</code>数组，导致同样的<code>index</code>在<code>isDeleteVisible</code>数组会超出范围</p><p>正确的方法为增加watch，在<code>cartList</code>更新时一同更新<code>isDeleteVisible</code>数组，避免数组越界：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cartList = ref&lt;<span class="title class_">Collection</span>[]&gt;([])</span><br><span class="line"></span><br><span class="line">cartList.<span class="property">value</span> = <span class="title class_">CartListCollection</span>.<span class="property">collections</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">watch</span>(cartList.<span class="property">value</span>, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    isDeleteVisible = newValue.<span class="title function_">map</span>(<span class="function">() =&gt;</span> <span class="title function_">ref</span>(<span class="literal">false</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watch 已触发&#x27;</span>, oldValue)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="watch监听失效"><a href="#watch监听失效" class="headerlink" title="watch监听失效"></a>watch监听失效</h2><p>失效的原因是在监听<code>ref</code>对象时，没有加上<code>.value</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cartList = ref&lt;<span class="title class_">Collection</span>[]&gt;([])</span><br><span class="line"></span><br><span class="line">cartList.<span class="property">value</span> = <span class="title class_">CartListCollection</span>.<span class="property">collections</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">watch</span>(cartList.<span class="property">value</span>, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    isDeleteVisible = newValue.<span class="title function_">map</span>(<span class="function">() =&gt;</span> <span class="title function_">ref</span>(<span class="literal">false</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watch 已触发&#x27;</span>, oldValue)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="实现展开隐藏一段文字的效果"><a href="#实现展开隐藏一段文字的效果" class="headerlink" title="实现展开隐藏一段文字的效果"></a>实现展开隐藏一段文字的效果</h2><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E6%88%AA%E5%B1%8F2024-02-21%2020.57.15.png" alt="截屏2024-02-21 20.57.15"></p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E6%88%AA%E5%B1%8F2024-02-21%2020.57.37.png" alt="截屏2024-02-21 20.57.37"></p><p>通过用不同的样式，实现该效果：</p><p>展开之前：</p><p>text-overflow: ellipsis： 用于在文本溢出时显示省略号（…）</p><p>white-space: nowrap：用于防止文本换行</p><p>width: 75vh;限定长度</p><p>展开之后：</p><p>不需要任何样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 展开之前 --&gt;</span><br><span class="line">&lt;div class=&quot;descriptionDetail&quot; v-if=&quot;!isExpanded&quot;&gt;</span><br><span class="line">    &lt;p style=&quot;overflow: hidden; text-overflow: ellipsis; white-space: nowrap; width: 75vh;&quot;&gt;</span><br><span class="line">       一段很长的文字....</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">  &lt;!-- 展开放在div内部实现跟在文字后面的效果 --&gt;</span><br><span class="line">    &lt;p @click=&quot;toggleExpand&quot;&gt;&lt;a href=&quot;#&quot; style=&quot;min-width: 10vh; font-weight: bold;&quot;&gt;展开&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 展开之后 --&gt;</span><br><span class="line">&lt;div class=&quot;descriptionDetail&quot; v-else&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        一段很长的文字....</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 展开放在div内部实现位于文字下一行的效果 --&gt;</span><br><span class="line">&lt;p @click=&quot;toggleExpand&quot; v-if=&quot;isExpanded&quot;&gt;&lt;a href=&quot;#&quot; style=&quot;min-width: 10vh; font-weight: bold;&quot;&gt;收起&lt;/a&gt;&lt;/p&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="箭头反转的动画效果"><a href="#箭头反转的动画效果" class="headerlink" title="箭头反转的动画效果"></a>箭头反转的动画效果</h2><p>关键在于记忆<code>rotate</code>这个旋转度数的<code>transform</code>效果，以及作为<code>transition</code>的例子</p><p>HTML部分：</p><p>点击<code>&lt;el-icon&gt;</code>元素时，通过<code>toggleTypeList</code>方法来切换<code>isTypeListVisible</code>的值，从而改变<code>&lt;el-icon&gt;</code>元素的旋转效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">:size</span>=<span class="string">&quot;16&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;toggleTypeList&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;isTypeListVisible ? &#x27;rotate-180&#x27; : &#x27;rotate-0&#x27;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ArrowDownBold</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS部分：</p><p><code>.rotate-180</code>类将元素旋转180度，并在0.25秒内以<code>ease-out</code>的过渡效果完成</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.rotate-180</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.25s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.rotate-0</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.25s</span> ease-out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手写checkBox"><a href="#手写checkBox" class="headerlink" title="手写checkBox"></a>手写checkBox</h2><p>目前还不能实现改变check的颜色之类的样式，后续再来补‼️</p><p>HTML部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;TypeListItem&quot;&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; name=&quot;type&quot; value=&quot;all&quot; checked&gt;</span><br><span class="line">        &lt;span style=&quot;margin-left: 20px;&quot;&gt;现实&lt;/span&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>CSS部分：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.TypeListItem</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.TypeListItem</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 勾选框变大，勾选背景颜色为var(--bg-100)，勾选时颜色为var(--bg-200) */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tailwindcss学习"><a href="#tailwindcss学习" class="headerlink" title="tailwindcss学习"></a>tailwindcss学习</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>官网完全缺少了<code>vite.config</code>的步骤，还多余了一些步骤‼️</p><p>原文链接：<a href="https://juejin.cn/post/7173549978580123656">vite+vue3使用tailwindcss - 掘金 (juejin.cn)</a>（原文的<code>vite.config</code>配置是有问题的）</p><p><strong>1.利用npm安装tailwindcss</strong></p><p>安装 Tailwind 以及其它依赖项:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D tailwindcss@latest postcss@latest autoprefixer@latest</span><br></pre></td></tr></table></figure><p><strong>2.创建tailwindcss的配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx tailwindcss init</span><br></pre></td></tr></table></figure><p>这将会在您的项目根目录创建一个最小化的 <code>tailwind.config.js</code> 文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** @type &#123;import(&#x27;tailwindcss&#x27;).Config&#125; */</span></span><br><span class="line">module<span class="selector-class">.exports</span> = &#123;</span><br><span class="line">  <span class="attribute">content</span>: [],</span><br><span class="line">  theme: &#123;</span><br><span class="line">    extend: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.在入口中引入tailwind</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;tailwindcss/tailwind.css&quot;</span></span><br></pre></td></tr></table></figure><p><strong>4.配置tailwind.config.js文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">content</span>: [</span><br><span class="line">    <span class="string">&quot;./index.html&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./src/**/*.&#123;vue,js,ts,jsx,tsx&#125;&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>tailwind.config.js</code> 文件中，配置 <code>content</code> 选项指定所有的 pages 和 components ，使得 Tailwind 可以在生产构建中，对未使用的样式进行<code>tree-shaking</code>。</p><p><strong>5.配置vite.config选项</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意引入</span></span><br><span class="line"><span class="keyword">import</span> tailwindcss <span class="keyword">from</span> <span class="string">&#x27;tailwindcss&#x27;</span></span><br><span class="line"><span class="keyword">import</span> autoprefixer <span class="keyword">from</span> <span class="string">&#x27;autoprefixer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="comment">/*plugins: [</span></span><br><span class="line"><span class="comment">    vue(),</span></span><br><span class="line"><span class="comment">    AutoImport(&#123;</span></span><br><span class="line"><span class="comment">      resolvers: [ElementPlusResolver()],</span></span><br><span class="line"><span class="comment">    &#125;),</span></span><br><span class="line"><span class="comment">    Components(&#123;</span></span><br><span class="line"><span class="comment">      resolvers: [ElementPlusResolver()],</span></span><br><span class="line"><span class="comment">    &#125;),</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  ],*/</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//下面是新加入的内容</span></span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">postcss</span>: &#123;</span><br><span class="line">      <span class="attr">plugins</span>: [tailwindcss, autoprefixer]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用<code>postcss</code>的<code>tailwindcss</code>和<code>autoprefixer</code>插件对，css进行处理</p><p><strong>6.配置vscode的代码提示</strong></p><p>这个步骤vscode配过一次就行，其实配置到这里我已经完成对<code>tailwind</code>的安装，但在模板中仍没有智能的提示，此时需要去<code>settings.json</code>中，在末尾添加以下代码段：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;editor.quickSuggestions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;strings&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><ol><li>布局</li></ol><p>- w: width</p><p>- max-w: max-width</p><p>- h: height</p><p>- max-h: max-height</p><p>- m: margin</p><p>- mt: margin-top</p><p>- mb: margin-bottom</p><p>- ml: margin-left</p><p>- mr: margin-right</p><p>- p: padding</p><p>- pt: padding-top</p><p>- pb: padding-bottom</p><p>- pl: padding-left</p><p>- pr: padding-right</p><ol start="2"><li>文本样式</li></ol><p>- font: font-family</p><p>- text: text-color, text-alignment, text-transform, font-size</p><p>- leading：line-height</p><p>- tracking: letter-spacing</p><p>- uppercase: text-transform: uppercase</p><p>- lowercase: text-transform: lowercase</p><ol start="3"><li>背景和边框</li></ol><p>- bg: background-color</p><p>- border: border-style, border-width, border-color</p><p>- rounded: border-radius</p><p>- shadow: box-shadow</p><ol start="4"><li>弹性盒子布局</li></ol><p>- flex: display: flex</p><p>- justify: justify-content</p><p>- items: align-items</p><p>- self: align-self</p><p>- order: order</p><p>- flex-grow: flex-grow</p><p>- flex-shrink: flex-shrink</p><ol start="5"><li>网格布局</li></ol><p>- grid-cols: grid-template-columns</p><p>- grid-rows: grid-template-rows</p><p>- gap: grid-gap</p><ol start="6"><li>响应式设计</li></ol><p>- sm, md, lg, xl: 分别对应移动设备、平板、桌面、大屏幕</p><p>- hover: 鼠标悬停时的样式</p><p>- focus: 元素获取焦点时的样式</p><p>除了上面列举的 Tailwind CSS 缩写和对应含义之外，Tailwind CSS 还提供了很多其他的实用程序类，以下是一些常用的 Tailwind CSS 缩写和对应含义：</p><ol><li>边框和分隔符</li></ol><p>- divide: 分隔符 (border-color, border-style, border-width)</p><p>- divide-x: 水平分隔符 (border-color, border-style, border-width)</p><p>- divide-y: 垂直分隔符 (border-color, border-style, border-width)</p><p>- border-collapse: 设置边框是否合并</p><ol start="2"><li>Flexbox 尺寸和排列</li></ol><p>- flex-wrap: 等同于 flex-flow 中的 wrap</p><p>- flex-row, flex-row-reverse, flex-col, flex-col-reverse: flex-direction 的简写</p><p>- flex-1…flex-12: 设置 flex-grow、flex-shrink 和 flex-basis 属性</p><p>- gap-x: 水平包裹在对象（如 flex 子元素）之间的间距。</p><p>- gap-y: 垂直包裹在对象（如 flex 子元素）之间的间距。</p><p>- space-x: 水平排列中对象（如 flex 子元素）之间的空间</p><p>- space-y: 垂直排列中对象（如 flex 子元素）之间的空间</p><ol start="3"><li>Z-index</li></ol><p>- z-{n}: 设置 z-index 的值，其中 n 为正整数</p><ol start="4"><li>动画</li></ol><p>- animate-{name}: 向元素添加动画（使用 @keyframes 中定义的动画名称）</p><ol start="5"><li>列表样式</li></ol><p>- list-style-{type}: 设置列表项的类型 (disc, decimal, decimal-leading-zero)</p><ol start="6"><li>转换和过渡</li></ol><p>- transform: 让元素旋转、缩放、倾斜、平移等</p><p>- transition-{property}: 用于添加一个过度效果 {property} 的值是必需的。</p><ol><li>颜色</li></ol><p>- text-{color}: 设置文本颜色</p><p>- bg-{color}: 设置背景颜色</p><p>- border-{color}: 设置边框颜色</p><ol start="2"><li>字体权重</li></ol><p>- font-thin: 字体细</p><p>- font-light: 字体轻</p><p>- font-normal: 字体正常</p><p>- font-medium: 字体中等</p><p>- font-semibold: 字体半粗</p><p>- font-bold: 字体粗</p><p>- font-extrabold: 字体特粗</p><p>- font-black: 字体黑</p><ol start="3"><li>SVG</li></ol><p>- fill-{color}: 设置 SVG 填充颜色</p><p>- stroke-{color}: 设置 SVG 描边颜色</p><ol start="4"><li>显示和隐藏</li></ol><p>- hidden: 隐藏元素（display: none）</p><p>- invisible: 隐藏元素，但仍保留该元素的布局和尺寸</p><p>- visible: 显示元素</p><ol start="5"><li>清除浮动</li></ol><p>- clear-{direction}: 清除某个方向的浮动效果</p><ol start="6"><li>容器</li></ol><p>- container: 将内容限制在最大宽度的容器内部</p><p>- mx-auto: 实现水平居中（margin-left 和 margin-right 设置为 auto）</p><p>以上是一些常用的 Tailwind CSS 缩写及其对应的意义，覆盖了基础的布局、文本、背景、边框、弹性盒子布局、网格布局和响应式设计，有助于更快速地开发出具有良好用户体验的 Web 应用程序。</p><h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><p>flex布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex justify-center items-center flex-col gap-2&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>字体大小</p><p>依次加减2px</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-xs text-sm text-base text-lg text-xl&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>字重</p><p>从font-normal开始依次加减100</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;font-light font-normal font-medium font-semibold font-bold font-extrabold&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>字位置偏向</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-left&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>字颜色：</p><p>常用灰色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-neutral-500&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>任意值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-[#50d71e]&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例子：</p><p>灰色的圆形div：</p><p>前面的flex布局时为了，内部的元素水平垂直居中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex justify-center items-start p-3 bg-neutral-300 rounded-full&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">ChatLineSquare</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>圆形且缩放正常的图片：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;w-9 h-9 rounded-full object-cover aspect-square&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../assets/images/Avatar1@2x.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="优化写法"><a href="#优化写法" class="headerlink" title="优化写法"></a>优化写法</h3><p>使用<code>@layer</code>引入自定义样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@layer</span> utilities &#123;</span><br><span class="line">  <span class="selector-class">.content-auto</span> &#123;</span><br><span class="line">    <span class="attribute">content-visibility</span>: auto;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在class中使用自定义样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;lg:dark:content-auto&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS基础单位复盘"><a href="#CSS基础单位复盘" class="headerlink" title="CSS基础单位复盘"></a>CSS基础单位复盘</h2><p>px</p><p>最基础的单位，通常用于有设计稿的情况下，或者不需要进行不同的适配</p><p>rem</p><p>根据字体的单位进行改变，和px兑换的比例为1:4</p><p>%</p><p>具体可看下面的auto与100%的对比</p><p>vh</p><p>根据视图高度进行改变</p><p>vw</p><p>根据视图宽度进行改变</p><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><p><strong>注意max-width为在窗口宽度小于等于 1300px 时，min-width为在窗口宽度大于等于 1300px 时，启用样式</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在窗口宽度小于等于 1300px 时，调整最小宽度 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">1300px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.CollectionListItem</span> &#123;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">155px</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">255px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="点击翻页功能"><a href="#点击翻页功能" class="headerlink" title="点击翻页功能"></a>点击翻页功能</h2><p>主要是通过更新数组来实现（还没好好看‼️）</p><p>这里本来是做一个滑动的动画效果，但是实在是没太多思路，有的思路也到处有问题，于是就换成更新数组来实现了</p><p>HTML部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;CollectionListAll&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;PageBefore&quot; @click=&quot;goToPreviousPage&quot;&gt;</span><br><span class="line">        &lt;el-icon&gt;</span><br><span class="line">            &lt;ArrowLeftBold /&gt;</span><br><span class="line">        &lt;/el-icon&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 使用translateX实现翻页效果 style=&quot;transform:translateX(-280px)&quot; --&gt;</span><br><span class="line">    &lt;div class=&quot;CollectionListItems&quot;&gt;</span><br><span class="line">        &lt;div v-for=&quot;(item, index) in displayedItems&quot; :key=&quot;index&quot; class=&quot;CollectionListItem&quot; @click=&quot;toNft&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;CollectionListItemImage&quot; style=&quot;height: 150px; width: 100%;&quot;&gt;</span><br><span class="line">                &lt;img style=&quot;height: 100%; width: 100%; border-radius: 20px 20px 0px 0px; object-fit: cover;&quot;</span><br><span class="line">                    :src=&quot;item.imageUrl&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;p style=&quot;text-align: left; padding: 10px 20px;&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;div class=&quot;CollectionListItemDetail&quot;&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;p class=&quot;text-base font-normal&quot;&gt;交易价格&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;&#123;&#123; item.price &#125;&#125;&lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;p class=&quot;text-base font-normal&quot;&gt;24小时交易量&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;&#123;&#123; item.tradingVolume &#125;&#125;&lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- TODO:Page应该以fix或者absulute的布局放在外层，目前的布局会与overflow：hidden冲突 --&gt;</span><br><span class="line">    &lt;div class=&quot;PageNext&quot; @click=&quot;goToNextPage&quot;&gt;</span><br><span class="line">        &lt;el-icon&gt;</span><br><span class="line">            &lt;ArrowRightBold /&gt;</span><br><span class="line">        &lt;/el-icon&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>TypeScript部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, onMounted, onBeforeUnmount &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">const currentPage = ref(0);</span><br><span class="line">const displayedItems = ref&lt;Collection[]&gt;([]);</span><br><span class="line"></span><br><span class="line">const updateDisplayedItems = () =&gt; &#123;</span><br><span class="line">    const itemsPerPage = calculateItemsPerPage();</span><br><span class="line">    const startIndex = currentPage.value * itemsPerPage;</span><br><span class="line">    displayedItems.value = collectionItems.slice(startIndex, startIndex + itemsPerPage);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const calculateItemsPerPage = () =&gt; &#123;</span><br><span class="line">    const screenWidth = window.innerWidth;</span><br><span class="line"></span><br><span class="line">    if (screenWidth &lt; 912) &#123;</span><br><span class="line">        return 2;</span><br><span class="line">    &#125; else if (screenWidth &lt; 1235) &#123;</span><br><span class="line">        return 3;</span><br><span class="line">    &#125; else if (screenWidth &lt; 1520) &#123;</span><br><span class="line">        return 4;</span><br><span class="line">    &#125; else if (screenWidth &lt; 1809) &#123;</span><br><span class="line">        return 5;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return 6;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const goToPreviousPage = () =&gt; &#123;</span><br><span class="line">    if (currentPage.value &gt; 0) &#123;</span><br><span class="line">        currentPage.value--;</span><br><span class="line">        updateDisplayedItems();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const goToNextPage = () =&gt; &#123;</span><br><span class="line">    const totalPages = Math.ceil(collectionItems.length / calculateItemsPerPage());</span><br><span class="line">    if (currentPage.value &lt; totalPages - 1) &#123;</span><br><span class="line">        currentPage.value++;</span><br><span class="line">        updateDisplayedItems();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">    updateDisplayedItems();</span><br><span class="line">    window.addEventListener(&#x27;resize&#x27;, updateDisplayedItems);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">onBeforeUnmount(() =&gt; &#123;</span><br><span class="line">    window.removeEventListener(&#x27;resize&#x27;, updateDisplayedItems);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Sass学习"><a href="#Sass学习" class="headerlink" title="Sass学习"></a>Sass学习</h2><p>主要是学习了<code>@mixin</code>结合<code>@include</code>的用法，抽离出css进行封装，多次使用</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义共同的样式</span></span><br><span class="line"><span class="keyword">@mixin</span> selected-style &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--bg-<span class="number">100</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.25s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Selected0</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> selected-style;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">45%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Selected1</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> selected-style;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">45%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="el-scrollbar"><a href="#el-scrollbar" class="headerlink" title="el-scrollbar"></a>el-scrollbar</h2><p>用于替换浏览器原生滚动条。</p><p>比起原生滚动条的优点是，在鼠标移入时才会展示滚动条，以及选定滚动的区域更简单</p><p><strong>注意只要当元素高度超过最大高度，才会起作用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-scrollbar height=&quot;400px&quot;&gt;</span><br><span class="line">    &lt;p v-for=&quot;item in 20&quot; :key=&quot;item&quot; class=&quot;scrollbar-demo-item&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/el-scrollbar&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="important"><a href="#important" class="headerlink" title="!important"></a>!important</h2><p>!important是提高样式规则优先级的声明。当你在样式规则中使用<code>!important</code>时，它会覆盖其他相同样式规则中的属性，并强制应用该规则，即使它的优先级较低。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态引入图标"><a href="#动态引入图标" class="headerlink" title="动态引入图标"></a>动态引入图标</h2><p><a href="https://blog.csdn.net/weixin_44079946/article/details/122792327">vue3.0+新版elementPlus中如何动态插入icon图标的问题_vue3.0 添加图标-CSDN博客</a></p><p>注意<code>is</code>中的内容如下：icon: ‘GoodsFilled’（用图表的名字即可）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;menu.icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多个router-view使用-⚠️"><a href="#多个router-view使用-⚠️" class="headerlink" title="多个router-view使用(⚠️)"></a>多个<code>router-view</code>使用(⚠️)</h2><p>放到子组件里就行</p><p>默认进入某一页面，把<code>children路由</code>的<code>path</code>设置与父路由相同就行</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;../views/IndexView.vue&quot;</span>),</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;../views/HomeView.vue&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="手写侧栏（⚠️）"><a href="#手写侧栏（⚠️）" class="headerlink" title="手写侧栏（⚠️）"></a>手写侧栏（⚠️）</h2><p>通过<code>ul</code>以及<code>li</code>来展示菜单项</p><p>同时把菜单项放入了数组<code>menu</code>中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;Sidebar&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;sidebar-logo-container&quot;&gt;</span><br><span class="line">            &lt;img class=&quot;h-8&quot; src=&quot;https://yiming_chang.gitee.io/vue-pure-admin/logo.svg&quot;&gt;</span><br><span class="line">            &lt;p&gt;HyperStarAdmin&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;el-scrollbar height=&quot;90%&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;!-- 遍历菜单项 --&gt;</span><br><span class="line">                &lt;li v-for=&quot;(menu, index) in menus&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;menu-item&quot; @click=&quot;selectMenu(index, menu.children, menu.path!)&quot;</span><br><span class="line">                        :class=&quot;&#123; &#x27;active-menu&#x27;: selectedMenu === index &#125;&quot;&gt;</span><br><span class="line">                        &lt;el-icon color=&quot;#3E8CFF&quot; v-if=&quot;selectedMenu === index&quot;&gt;</span><br><span class="line">                            &lt;component :is=&quot;menu.icon&quot;&gt;&lt;/component&gt;</span><br><span class="line">                        &lt;/el-icon&gt;</span><br><span class="line">                        &lt;el-icon v-else&gt;</span><br><span class="line">                            &lt;component :is=&quot;menu.icon&quot;&gt;&lt;/component&gt;</span><br><span class="line">                        &lt;/el-icon&gt;</span><br><span class="line">                        &lt;p&gt;&#123;&#123; menu.label &#125;&#125;&lt;/p&gt;</span><br><span class="line">                        &lt;!-- 如果有子菜单，显示箭头 --&gt;</span><br><span class="line">                        &lt;el-icon v-if=&quot;menu.children&quot; class=&quot;ml-7&quot;&gt;</span><br><span class="line">                            &lt;ArrowDownBold v-if=&quot;!ifShowSubMenu&quot; /&gt;</span><br><span class="line">                            &lt;ArrowUpBold v-else /&gt;</span><br><span class="line">                        &lt;/el-icon&gt;</span><br><span class="line">                        </span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;!-- 如果有子菜单，渲染子菜单 --&gt;</span><br><span class="line">                    &lt;ul v-if=&quot;menu.children &amp;&amp; ifShowSubMenu&quot;&gt;</span><br><span class="line">                        &lt;li v-for=&quot;(child, childIndex) in menu.children&quot; :key=&quot;childIndex&quot;&gt;</span><br><span class="line">                            &lt;div class=&quot;menu-item child-menu&quot;</span><br><span class="line">                                @click=&quot;selectSubMenu(index, childIndex, menu.children[childIndex].path!)&quot;</span><br><span class="line">                                :class=&quot;&#123; &#x27;active-menu&#x27;: selectedSubMenu === childIndex &#125;&quot;&gt;</span><br><span class="line">                                &lt;p class=&quot;ml-6&quot;&gt;&#123;&#123; child.label &#125;&#125;&lt;/p&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                        &lt;/li&gt;</span><br><span class="line">                    &lt;/ul&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/el-scrollbar&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// const handleOpen = (key: string, keyPath: string[]) =&gt; &#123;</span><br><span class="line">//     console.log(key, keyPath)</span><br><span class="line">// &#125;</span><br><span class="line">// const handleClose = (key: string, keyPath: string[]) =&gt; &#123;</span><br><span class="line">//     console.log(key, keyPath)</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">// 实例化router</span><br><span class="line">const router = useRouter();</span><br><span class="line"></span><br><span class="line">const selectedMenu = ref&lt;number | null&gt;(null);</span><br><span class="line">const selectedSubMenu = ref&lt;number | null&gt;(null);</span><br><span class="line">// ifShowSubMenu</span><br><span class="line">const ifShowSubMenu = ref&lt;boolean&gt;(false);</span><br><span class="line"></span><br><span class="line">const menus = [</span><br><span class="line">    &#123; label: &#x27;首页&#x27;, icon: &#x27;HomeFilled&#x27;, path: &#x27;/&#x27; &#125;,</span><br><span class="line">    &#123; label: &#x27;数字藏品管理&#x27;, icon: &#x27;GoodsFilled&#x27;, path: &#x27;/goods&#x27; &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        label: &#x27;用户管理&#x27;,</span><br><span class="line">        icon: &#x27;Menu&#x27;,</span><br><span class="line">        path: &#x27;/account&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        label: &#x27;交易管理&#x27;,</span><br><span class="line">        icon: &#x27;List&#x27;,</span><br><span class="line">        path: &#x27;/order&#x27;,</span><br><span class="line">        children: [</span><br><span class="line">            &#123; label: &#x27;订单处理&#x27;, path: &#x27;/audit&#x27; &#125;,</span><br><span class="line">            &#123; label: &#x27;营销与推广&#x27;, path: &#x27;/marketing&#x27; &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; label: &#x27;数据&#x27;, icon: &#x27;TrendCharts&#x27;, path: &#x27;/data&#x27; &#125;,</span><br><span class="line">    &#123; label: &#x27;设置&#x27;, icon: &#x27;Setting&#x27;, path: &#x27;/setting&#x27; &#125;,</span><br><span class="line">];</span><br><span class="line">// 保证第一个选择的是首页</span><br><span class="line">selectedMenu.value = 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const toggleSubMenu = () =&gt; &#123;</span><br><span class="line">    // 翻转子菜单的显示状态</span><br><span class="line">    ifShowSubMenu.value = !ifShowSubMenu.value;</span><br><span class="line">    if (ifShowSubMenu.value) &#123;</span><br><span class="line">        selectedSubMenu.value = 0; // 清除子菜单的选中状态</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const selectMenu = (index: number, ifChildren: any, path: string) =&gt; &#123;</span><br><span class="line">    if (!ifChildren) &#123;</span><br><span class="line">        selectedMenu.value = index;</span><br><span class="line">        selectedSubMenu.value = null; // 清除子菜单的选中状态</span><br><span class="line">        router.push(path)</span><br><span class="line"></span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        selectedMenu.value = null;</span><br><span class="line">        selectedSubMenu.value = 0; // 清除子菜单的选中状态</span><br><span class="line">        router.push(menus[index].children![0].path!);</span><br><span class="line">        toggleSubMenu();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const selectSubMenu = (parentIndex: number, childIndex: number, path: string) =&gt; &#123;</span><br><span class="line">    router.push(path)</span><br><span class="line"></span><br><span class="line">    selectedMenu.value = null;</span><br><span class="line">    selectedSubMenu.value = childIndex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.Sidebar &#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">    border-radius: 24px;</span><br><span class="line">    background: #fff;</span><br><span class="line">    .sidebar-logo-container &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        align-items: center;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        gap: 10px;</span><br><span class="line"></span><br><span class="line">        padding: 20px 0;</span><br><span class="line"></span><br><span class="line">        p &#123;</span><br><span class="line">            font-weight: 800;</span><br><span class="line">            color: var(--text-100);</span><br><span class="line">            font-size: 18px;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .menu-item &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        align-items: center;</span><br><span class="line">        gap: 12px;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        padding: 15px 20px;</span><br><span class="line">        margin: 10px;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        transition: all 0.3s ease; /* 添加过渡效果 */</span><br><span class="line"></span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">            border-radius: 20px;</span><br><span class="line">            background: var(--primary-100);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        p &#123;</span><br><span class="line">            font-size: 16px;</span><br><span class="line">            color: var(--text-100);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &amp;.active-menu &#123;</span><br><span class="line">            border-radius: 20px;</span><br><span class="line">            background: var(--primary-100);</span><br><span class="line"></span><br><span class="line">         </span><br><span class="line">        &#125;</span><br><span class="line">        &amp;.child-menu &#123;</span><br><span class="line">            // 定义子菜单的样式</span><br><span class="line">            &amp;.active-menu &#123;</span><br><span class="line">                background: var(--primary-100);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="手写表格table（⚠️）"><a href="#手写表格table（⚠️）" class="headerlink" title="手写表格table（⚠️）"></a>手写表格table（⚠️）</h2><h2 id="el-table（⚠️）"><a href="#el-table（⚠️）" class="headerlink" title="el-table（⚠️）"></a>el-table（⚠️）</h2><p>基础使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table :data=&quot;tableData&quot; stripe class=&quot;tableBox&quot; table-layout=&quot;fixed&quot; @selection-change=&quot;handleSelectionChange&quot;&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;itemName&quot; label=&quot;藏品名称&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">&lt;/el-table&gt;</span><br></pre></td></tr></table></figure><p>数据设置</p><p>排序按钮</p><p>插入自定义内容</p><p>行高</p><p>原文参考：<a href="https://blog.csdn.net/hhmmj/article/details/130593393">el-table-column设置高度&#x2F;指定高度-CSDN博客</a></p><p>:row-style&#x3D;”{ height: ‘100px’ }”</p><h2 id="el-pagination中文实现"><a href="#el-pagination中文实现" class="headerlink" title="el-pagination中文实现"></a>el-pagination中文实现</h2><p>原文链接：<a href="https://juejin.cn/post/7291487676657238057">el-pagination 分页组件 ‘英文’ 修改为 ‘中文’(Vue3+ElementPlus实现) - 掘金 (juejin.cn)</a></p><p>vue2版好像直接就是中文</p><p>vue3版需要在外面套一层<code>el-config-provider</code>标签进行翻译，并在script中引入中文包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-config-provider :locale=&quot;zhCn&quot;&gt;</span><br><span class="line">    &lt;el-pagination</span><br><span class="line">      class=&quot;h-46 mr-50 flex justify-end&quot;</span><br><span class="line">      v-if=&quot;pagination.isShow &amp;&amp; pagination.total &gt; 0&quot;</span><br><span class="line">      v-model=&quot;pagination.current&quot;</span><br><span class="line">      :layout=&quot;pagination.layout&quot;</span><br><span class="line">      :pager-count=&quot;5&quot;</span><br><span class="line">      :page-sizes=&quot;pagination.pageSizes&quot;</span><br><span class="line">      :total=&quot;pagination.total&quot;</span><br><span class="line">      @size-change=&quot;handleSizeChange&quot;</span><br><span class="line">      @current-change=&quot;handleCurrentChange&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/el-config-provider&gt;</span><br><span class="line">&lt;template/&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">// ElConfigProvider 组件</span><br><span class="line">import &#123; ElConfigProvider &#125; from &#x27;element-plus&#x27;;</span><br><span class="line">// 引入中文包</span><br><span class="line">import zhCn from &#x27;element-plus/es/locale/lang/zh-cn&#x27;;</span><br><span class="line">// 更改分页文字</span><br><span class="line">// zhCn.el.pagination.total = &#x27;共 `&#123;total&#125; 条`&#x27;;</span><br><span class="line">// zhCn.el.pagination.goto = &#x27;跳至&#x27;;</span><br><span class="line">// zhCn.el.pagination.pagesize = &#x27;条/页&#x27;;</span><br><span class="line">// zhCn.el.pagination.pageClassifier = &#x27;页&#x27;;</span><br><span class="line">&lt;script/&gt;</span><br></pre></td></tr></table></figure><h2 id="el-button新版变化"><a href="#el-button新版变化" class="headerlink" title="el-button新版变化"></a>el-button新版变化</h2><p>主要是改变颜色的方式不一样了，现在使用<code>type</code>改变颜色，之前是用<code>type</code>改变按钮的类型</p><p><code>text</code>表示是文字按钮</p><p><code>bg</code>为增加按钮灰色背景</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">  <span class="attr">text</span> <span class="attr">bg</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  上架</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">class</span>=<span class="string">&quot;blueBug&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  下架</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="插槽学习"><a href="#插槽学习" class="headerlink" title="插槽学习"></a>插槽学习</h2><p>原文参考：<a href="https://juejin.cn/post/7197970175479611451">Vue3中slot插槽的使用 详细！！ - 掘金 (juejin.cn)</a></p><p>基本概念：</p><p>使得组件中可以被插入内容，如同<code>HTML</code> 标签之间是可以插入内容的</p><p>虽然 <code>child</code> 不是 <code>HTML</code> 自带的标签，插槽可以使其内部被插入但是它却有着类似的特征，比如我们往<code>&lt;child&gt;&lt;/child&gt;</code>之间插入一点内容</p><p>基础使用：</p><p>子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;child-box&quot;&gt;</span><br><span class="line">    &lt;p&gt;我是子组件&lt;/p&gt;</span><br><span class="line">    &lt;!-- 插槽 --&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>父组件App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;child&gt;</span><br><span class="line">    &lt;div&gt;小猪课堂&lt;/div&gt;</span><br><span class="line">  &lt;/child&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E6%88%AA%E5%B1%8F2024-02-21%2014.45.16.png" alt="截屏2024-02-21 14.45.16"></p><p>进阶使用：</p><p>1、插槽默认内容：</p><p>往<code>slot</code>中加入内容就行，这样会在父组件使用<code>&lt;child&gt;&lt;/child&gt;</code>不加入更多内容时默认出现，<code>&lt;child&gt;&lt;div&gt;小猪课堂&lt;/div&gt;&lt;/child&gt;</code>时则会消失</p><p>子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;child-box&quot;&gt;</span><br><span class="line">    &lt;p&gt;我是子组件&lt;/p&gt;</span><br><span class="line">    &lt;!-- 插槽 --&gt;</span><br><span class="line">    &lt;slot&gt;</span><br><span class="line">      &lt;p&gt;我是默认内容&lt;/p&gt;</span><br><span class="line">    &lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>2、具名插槽</p><p>当子组件中使用多处插槽时，就会需要使用到具名插槽</p><p>子组件：</p><p>注意外层这个<code>header</code>组件，根据我的实验来说是不需要的，不过官网的例子是加上了的,但是估计是可以简写的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;child-box&quot;&gt;</span><br><span class="line">    &lt;p&gt;我是子组件&lt;/p&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">      &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">    &lt;footer&gt;</span><br><span class="line">      &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/footer&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>3、动态插槽名</p><p>外层加一个中括号[ ]就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;base-layout&gt;</span><br><span class="line">  &lt;template #[dynamicSlotName]&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/base-layout&gt;</span><br></pre></td></tr></table></figure><p>父组件：</p><p>注意外层必须嵌套一个<code>template</code>，带上名字,<code>v-slot:header</code>可以使用<code>#header</code>来简写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;child&gt;</span><br><span class="line">    &lt;template v-slot:header&gt;</span><br><span class="line">      &lt;div&gt;我是 header：&#123;&#123; message &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;div&gt;我没有名字：&#123;&#123; message &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;template v-slot:footer&gt;</span><br><span class="line">      &lt;div&gt;我是 footer：&#123;&#123; message &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/child&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>4、默认插槽作用域传值</p><p>用于满足<code>需要在插槽内容中获取子组件数据</code>的需求</p><p>子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;child-box&quot;&gt;</span><br><span class="line">    &lt;p&gt;我是子组件&lt;/p&gt;</span><br><span class="line">    &lt;slot text=&quot;我是子组件小猪课堂&quot; :count=&quot;1&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>父组件：</p><p>在父组件 <code>App.vue</code> 中通过 <code>v-slot=&quot;slotProps&quot;</code>等形式接收子组件传毒过来的数据，<code>slotProps</code> 的名字是可以任意取的，它是一个对象，包含了所有传递过来的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;child v-slot=&quot;slotProps&quot;&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; slotProps.text &#125;&#125;---&#123;&#123; slotProps.count &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/child&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>5、具名插槽作用域传值</p><p>具名插槽作用域之间的传递其实默认插槽作用域传值原理是一样的，只不过写法略微不一样罢了</p><p>子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;child-box&quot;&gt;</span><br><span class="line">    &lt;p&gt;我是子组件&lt;/p&gt;</span><br><span class="line">    &lt;slot name=&quot;header&quot; text=&quot;我是子组件小猪课堂&quot; :count=&quot;1&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;child&gt;</span><br><span class="line">    &lt;template #header=&quot;&#123; text, count &#125;&quot;&gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123; text &#125;&#125;---&#123;&#123; count &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/child&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="el-image组件自定义加载失败内容无效的BUG"><a href="#el-image组件自定义加载失败内容无效的BUG" class="headerlink" title="el-image组件自定义加载失败内容无效的BUG"></a>el-image组件自定义加载失败内容无效的BUG</h2><p>问题描述：</p><p>下面的有关自定义加载失败内容代码，跟官网一样，但是却无法正确显示自定义的加载失败内容</p><p>解决关键：</p><p>注意复制的<code>imageUrl</code>的URL本身是否就带有加载失败URL</p><p>解决过程：</p><p>首先本来使用的是vue2的版本，先去官网找到最新的使用方法</p><p>但是还是无法显示，于是接着看，是不是真的与官网一致，于是发现官网的<code>el-image</code>什么属性都没有加，于是我这样照做后，发现自定义加载失败内容出来了</p><p>接着就是分别去掉我的属性，看看究竟是什么属性导致的错误</p><p>最后发现是来自于<code>src</code>里面的<code>imageUrl</code>由于是直接复制别的网站的URL，该网站自己又有自定义加载失败图片，所以我自己的自定义没有成功，因为实际上图片并没有加载失败</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table-column prop=&quot;imageUrl&quot; label=&quot;图片&quot;&gt;</span><br><span class="line">    &lt;template v-slot=&quot;&#123; row &#125;&quot;&gt;</span><br><span class="line">        &lt;el-image style=&quot;width: auto; height: 40px; border: none; cursor: pointer;&quot; :src=&quot;row.imageUrl&quot;&gt;</span><br><span class="line">            &lt;template #error&gt;</span><br><span class="line">                &lt;div class=&quot;image-slot&quot;&gt;</span><br><span class="line">                    &lt;img src=&quot;../assets/images/no-image.png&quot; style=&quot;width: auto; height: 40px; border: none;&quot;&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/el-image&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/el-table-column&gt;</span><br></pre></td></tr></table></figure><h2 id="width属性100-和auto的区别"><a href="#width属性100-和auto的区别" class="headerlink" title="width属性100%和auto的区别"></a>width属性100%和auto的区别</h2><p>参考文章：<br><a href="https://blog.csdn.net/Tie_may/article/details/113761173">width：100%和width：auto的区别_width:100%-CSDN博客</a></p><p>主要区别：</p><p>width：100%：子元素的宽度和父元素的宽度相等，其中并不包括子元素内外边距以及边框的值，为子元素真正的宽度</p><p>width：auto：auto表示子元素的 宽度+内边距+外边距+边框 才等于父元素的宽度</p><h2 id="点击全屏功能"><a href="#点击全屏功能" class="headerlink" title="点击全屏功能"></a>点击全屏功能</h2><p>这个功能比较死，可以直接copy</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-icon size=&quot;20&quot; @click=&quot;toggleFullScreen&quot; style=&quot;cursor: pointer;&quot;&gt;</span><br><span class="line">    &lt;FullScreen /&gt;</span><br><span class="line">  &lt;/el-icon&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, watch &#125; from &#x27;vue&#x27;;</span><br><span class="line">const isFullScreen = ref(false);</span><br><span class="line"></span><br><span class="line">const toggleFullScreen = () =&gt; &#123;</span><br><span class="line">    if (isFullScreen.value) &#123;</span><br><span class="line">        exitFullScreen();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        enterFullScreen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const enterFullScreen = () =&gt; &#123;</span><br><span class="line">    const element = document.documentElement;</span><br><span class="line"></span><br><span class="line">    if (element.requestFullscreen) &#123;</span><br><span class="line">        element.requestFullscreen();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isFullScreen.value = true;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const exitFullScreen = () =&gt; &#123;</span><br><span class="line">    if (document.exitFullscreen) &#123;</span><br><span class="line">        document.exitFullscreen();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isFullScreen.value = false;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">watch(isFullScreen, (newValue) =&gt; &#123;</span><br><span class="line">    // 在这里可以处理全屏状态变化后的逻辑</span><br><span class="line">    console.log(&#x27;全屏状态变化：&#x27;, newValue);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="el-image预览图片穿透的BUG"><a href="#el-image预览图片穿透的BUG" class="headerlink" title="el-image预览图片穿透的BUG"></a>el-image预览图片穿透的BUG</h2><p>参考文章：<a href="https://juejin.cn/post/7142002854427885576">el-image在el-table中使用时层级问题 - 掘金 (juejin.cn)</a></p><p>问题描述</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E6%88%AA%E5%B1%8F2024-02-21%2019.30.08.png" alt="截屏2024-02-21 19.30.08"></p><p>解决关键：设置<code>preview-teleported</code>为true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-image</span><br><span class="line">    style=&quot;height: 60px; width: 60px; border-radius: 12px; object-fit: cover; aspect-ratio: 1/1;&quot; </span><br><span class="line">    :src=&quot;row.imageUrl&quot;</span><br><span class="line">    :preview-src-list=&quot;[row.imageUrl]&quot;</span><br><span class="line">    :preview-teleported=&quot;true&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;/el-image&gt;</span><br></pre></td></tr></table></figure><p>解决过程：首先是怀疑自己的z-index写多了，然后改掉了几个，问题没解决，然后发现<code>el-image</code>有一个<code>index</code>属性，将其调到无敌高，还是没有解决，最后网上搜下，解决问题</p><h2 id="el-switch学习"><a href="#el-switch学习" class="headerlink" title="el-switch学习"></a>el-switch学习</h2><p>需要注意<code>v-model</code>必须是Boolean类型</p><p><code>size</code>控制大小，参数有large、small、默认（不需要写size属性）</p><p><code>inline-prompt</code>，控制文本是否显示在点内</p><p> <code>inactive-icon</code> 和 <code>active-icon</code> 属性，来添加关闭以及开启时的图标。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-switch</span><br><span class="line">    v-model=&quot;row.availability&quot;</span><br><span class="line">    size=&quot;large&quot;</span><br><span class="line">    inline-prompt</span><br><span class="line">    :active-icon=&quot;Check&quot;</span><br><span class="line">    :inactive-icon=&quot;Close&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h2 id="el-check样式改变-⚠️"><a href="#el-check样式改变-⚠️" class="headerlink" title="el-check样式改变(⚠️)"></a>el-check样式改变(⚠️)</h2><p>注意要使用:deep（&#x2F;deep&#x2F;会报错）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:deep .el-checkbox__inner &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    zoom: <span class="number">150%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">:deep .el-checkbox__inner &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">19px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">19px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">22.5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:deep .el-checkbox__inner::after &#123;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">border-left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border-top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">7px</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:deep .el-checkbox__input.is-checked .el-checkbox__inner::after &#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">50deg</span>) <span class="built_in">scaleY</span>(<span class="number">1.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="el-progress学习"><a href="#el-progress学习" class="headerlink" title="el-progress学习"></a>el-progress学习</h2><p>注意<code>percentage</code>必须是<code>number</code>类型</p><p><code>status</code>属性控制颜色：success（绿）、warning（黄）、exception（红）</p><p><code>stroke-width</code> 属性更改进度条的高度</p><p><code>text-inside</code> 属性，通过布尔值，来改变进度条内部的文字</p><p><code>type</code> 属性来指定使用环形进度条：circle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-progress</span><br><span class="line">    :status=&quot;row.status&quot;</span><br><span class="line">    :text-inside=&quot;true&quot;</span><br><span class="line">    :stroke-width=&quot;18&quot;</span><br><span class="line">    :percentage=&quot;row.salesPercentage&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h2 id="ECharts（⚠️）"><a href="#ECharts（⚠️）" class="headerlink" title="ECharts（⚠️）"></a>ECharts（⚠️）</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>首先下载包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install echarts --save</span><br></pre></td></tr></table></figure><p>然后在想要使用的位置，引入包（这里属于局部引入，个人觉得比全部引入好些）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div ref=&quot;chartContainer&quot; style=&quot;width: 600px; height: 400px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line">import * as echarts from &#x27;echarts&#x27;;</span><br><span class="line"></span><br><span class="line">const chartContainer = ref&lt;HTMLElement | null&gt;(null);</span><br><span class="line">let myChart: echarts.ECharts | null = null;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  // 在组件挂载后初始化 ECharts 实例</span><br><span class="line">  myChart = echarts.init(chartContainer.value!);</span><br><span class="line"></span><br><span class="line">  // 调用渲染图表的方法</span><br><span class="line">  renderChart();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 在这里编写渲染图表的方法</span><br><span class="line">const renderChart = () =&gt; &#123;</span><br><span class="line">  // ECharts 配置项</span><br><span class="line">  const options: echarts.EChartOption = &#123;</span><br><span class="line">    // 在这里配置你的柱状图数据和其他选项</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">      type: &#x27;category&#x27;,</span><br><span class="line">      data: [&#x27;Category 1&#x27;, &#x27;Category 2&#x27;, &#x27;Category 3&#x27;],</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;</span><br><span class="line">      type: &#x27;value&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    series: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: &#x27;Series 1&#x27;,</span><br><span class="line">        type: &#x27;bar&#x27;,</span><br><span class="line">        data: [30, 40, 20],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  // 使用 setOption 方法设置图表配置</span><br><span class="line">  myChart?.setOption(options);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="基础样式"><a href="#基础样式" class="headerlink" title="基础样式"></a>基础样式</h3><p>柱状图：</p><p>改变y轴位置（默认左侧）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ECharts 配置项</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">yAxis</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">        <span class="attr">position</span>: <span class="string">&#x27;right&#x27;</span>, <span class="comment">// 将 Y 轴移到右侧显示</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>桩状增加圆角</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ECharts 配置项</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">                <span class="attr">normal</span>: &#123;</span><br><span class="line">                    <span class="comment">// 这里设置柱形图圆角 [左上角，右上角，右下角，左下角]</span></span><br><span class="line">                    <span class="attr">barBorderRadius</span>: [<span class="number">8</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>桩状改变颜色</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ECharts 配置项</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">color</span>: [<span class="string">&#x27;#5DB1FF&#x27;</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>颠倒柱状图，x轴变为y轴，y轴变为x轴</p><p>调换一下两个轴的<code>type</code>就行</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ECharts 配置项</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">xAxis</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">yAxis</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>默认柱状图或折线图过小的问题</p><p>参考文章：<a href="https://www.jianshu.com/p/c330ecc1c59e">echarts图表的大小调整的解决方案 - 简书 (jianshu.com)</a></p><p>参数具体含义如图所示：<br><img src="https://upload-images.jianshu.io/upload_images/25524960-ed22a8021263bc9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/727/format/webp"></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ECharts 配置项</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">grid</span>: &#123;</span><br><span class="line">        <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">y</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">x2</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">y2</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">borderWidth</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>折线图：</p><p>折线下渐变色，以及弧度大小,以及折线颜色</p><p>原文参考：<a href="https://blog.csdn.net/clearlove7_2018/article/details/124692661">echarts 折线图小圆点修改为实心，折线图下方半透明效果_echarts折线图实心点-CSDN博客</a></p><p>效果参考：</p><p>![截屏2024-02-23 22.01.35](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2024-02-23 22.01.35.png)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ECharts 配置项</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">color</span>: [<span class="string">&#x27;#5DB1FF&#x27;</span>],</span><br><span class="line">            <span class="attr">areaStyle</span>: &#123;</span><br><span class="line">                <span class="attr">color</span>: &#123;</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;linear&#x27;</span>, <span class="comment">//折线颜色</span></span><br><span class="line">                    <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="attr">x2</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="attr">y2</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">colorStops</span>: [</span><br><span class="line">                        &#123; <span class="attr">offset</span>: <span class="number">0</span>, <span class="attr">color</span>: <span class="string">&#x27;rgba(93, 177, 255, 0.2)&#x27;</span> &#125;,  <span class="comment">// 开始颜色</span></span><br><span class="line">                        &#123; <span class="attr">offset</span>: <span class="number">1</span>, <span class="attr">color</span>: <span class="string">&#x27;rgba(93, 177, 255, 0)&#x27;</span> &#125;,  <span class="comment">// 结束颜色</span></span><br><span class="line">                    ],</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">smooth</span>: <span class="number">0.5</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>折线上小圆点大小，以及是否实现</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ECharts 配置项</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">            <span class="attr">symbol</span>: <span class="string">&#x27;circle&#x27;</span>,   <span class="comment">//将小圆点改成实心 不写symbol默认空心</span></span><br><span class="line">            <span class="attr">symbolSize</span>: <span class="number">6</span>,    <span class="comment">//小圆点的大小</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>饼图：</p><p>集大成的效果参考：</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E6%88%AA%E5%B1%8F2024-02-23%2022.38.07.png" alt="截屏2024-02-23 22.38.07">控制图例的位置，摆放方向等各类属性</p><p>原文参考：<a href="https://blog.csdn.net/qq_34790644/article/details/89308738">echarts 饼图以及图例的位置及大小，环图中间字_echarts饼状图文字位置-CSDN博客</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ECharts 配置项</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="comment">// 配置选项</span></span><br><span class="line">    <span class="attr">legend</span>: &#123;</span><br><span class="line">        <span class="attr">data</span>: [<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;未知&#x27;</span>], <span class="comment">// 添加图例名称</span></span><br><span class="line">        <span class="attr">orient</span>: <span class="string">&#x27;vertical&#x27;</span>, <span class="comment">// 控制图例是竖着放还是横着放</span></span><br><span class="line">        <span class="attr">left</span>: <span class="string">&#x27;70%&#x27;</span>,  <span class="comment">// 图例距离左的距离</span></span><br><span class="line">        <span class="attr">y</span>: <span class="string">&#x27;center&#x27;</span>,  <span class="comment">// 图例上下居中</span></span><br><span class="line">        <span class="attr">itemGap</span>: <span class="number">30</span>, <span class="comment">// 控制每一项的间距，也就是图例之间的距离</span></span><br><span class="line">        <span class="attr">itemHeight</span>: <span class="number">15</span>, <span class="comment">// 控制图例图形的高度</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>控制饼图本身的位置大小等各类属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ECharts 配置项</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;Access From&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;pie&#x27;</span>,</span><br><span class="line">            <span class="attr">radius</span>: [<span class="string">&#x27;40%&#x27;</span>, <span class="string">&#x27;70%&#x27;</span>], <span class="comment">// 内圈以及外圈的大小</span></span><br><span class="line">            <span class="attr">center</span>: [<span class="string">&#x27;30%&#x27;</span>, <span class="string">&#x27;50%&#x27;</span>], <span class="comment">// 图的位置，距离左跟上的位置,50%时位于中央</span></span><br><span class="line">            <span class="attr">avoidLabelOverlap</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">                <span class="attr">borderRadius</span>: <span class="number">10</span>,<span class="comment">//圆角</span></span><br><span class="line">                <span class="attr">borderColor</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">                <span class="attr">borderWidth</span>: <span class="number">2</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>外圈+内圈的样式</p><p>官网参考：<a href="https://echarts.apache.org/examples/zh/editor.html?c=pie-borderRadius">Examples - Apache ECharts</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ECharts 配置项</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;Access From&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;pie&#x27;</span>,</span><br><span class="line">            <span class="attr">radius</span>: [<span class="string">&#x27;40%&#x27;</span>, <span class="string">&#x27;70%&#x27;</span>], <span class="comment">// 内圈以及外圈的大小</span></span><br><span class="line">            <span class="attr">center</span>: [<span class="string">&#x27;30%&#x27;</span>, <span class="string">&#x27;50%&#x27;</span>], <span class="comment">// 图的位置，距离左跟上的位置</span></span><br><span class="line">            <span class="attr">avoidLabelOverlap</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">                <span class="attr">borderRadius</span>: <span class="number">10</span>,</span><br><span class="line">                <span class="attr">borderColor</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">                <span class="attr">borderWidth</span>: <span class="number">2</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">label</span>: &#123;</span><br><span class="line">                <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">position</span>: <span class="string">&#x27;center&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">emphasis</span>: &#123;</span><br><span class="line">                <span class="attr">label</span>: &#123;</span><br><span class="line">                    <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">fontSize</span>: <span class="number">30</span>, <span class="comment">// 内圈在选中是的字体大小</span></span><br><span class="line">                    <span class="attr">fontWeight</span>: <span class="string">&#x27;bold&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">labelLine</span>: &#123;</span><br><span class="line">                <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="不使用flex的情况下位于一行中-⚠️"><a href="#不使用flex的情况下位于一行中-⚠️" class="headerlink" title="不使用flex的情况下位于一行中(⚠️)"></a>不使用flex的情况下位于一行中(⚠️)</h2><p>使用<code>inline-block</code>布局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;&quot;&gt;</span><br><span class="line">    &lt;p class=&quot;text-2xl inline-block&quot;&gt;76.345&lt;/p&gt;</span><br><span class="line">    &lt;div class=&quot;inline-block bg-[#5DB1FF] rounded-3xl p-2&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;flex justify-center items-center gap-2&quot;&gt;</span><br><span class="line">            &lt;img class=&quot;size-4&quot; src=&quot;../assets/images/trending-up-white@2x.png&quot;&gt;</span><br><span class="line">            &lt;p class=&quot;text-xs text-white&quot;&gt;23.5% (+10)&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="点击菜单（‼️⚠️）"><a href="#点击菜单（‼️⚠️）" class="headerlink" title="点击菜单（‼️⚠️）"></a>点击菜单（‼️⚠️）</h2><p>重点记忆下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;StatusSelection&quot;&gt;</span><br><span class="line">    &lt;div v-for=&quot;(item, index) in items&quot; :key=&quot;index&quot; class=&quot;item&quot; @click=&quot;handleItemClick(index)&quot; :class=&quot;&#123; active: selectedIndex === index &#125;&quot;&gt;</span><br><span class="line">      &lt;p&gt;&#123;&#123; item &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const items = ref([&#x27;全部订单&#x27;, &#x27;待付款&#x27;, &#x27;代发货&#x27;, &#x27;已发货&#x27;, &#x27;退款中&#x27;, &#x27;已完成&#x27;]);</span><br><span class="line">const selectedIndex = ref(-1);</span><br><span class="line"></span><br><span class="line">const handleItemClick = (index: number) =&gt; &#123;</span><br><span class="line">  selectedIndex.value = index;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.StatusSelection &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: flex-start;</span><br><span class="line">    align-content: center;</span><br><span class="line">    gap: 20px;</span><br><span class="line">    min-height: 80px; /* 为item多留出boder的距离 */</span><br><span class="line">    padding: 16px;</span><br><span class="line"></span><br><span class="line">    .item &#123;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        transition: all 0.1s ease-out;</span><br><span class="line">        padding: 8px 16px;</span><br><span class="line"></span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">            color: var(--accent-100);</span><br><span class="line">            border-bottom: 2px solid var(--accent-100);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &amp;.active &#123;</span><br><span class="line">            color: var(--accent-100);</span><br><span class="line">            border-bottom: 2px solid var(--accent-100);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="el-tag使用（⚠️）"><a href="#el-tag使用（⚠️）" class="headerlink" title="el-tag使用（⚠️）"></a>el-tag使用（⚠️）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-tag :type=&quot;row.orderType&quot;&gt;&#123;&#123; row.orderStatus &#125;&#125;&lt;/el-tag&gt;</span><br></pre></td></tr></table></figure><p>圆角改变</p><h2 id="父元素的padding挡住子元素，导致子元素无法click的BUG-⚠️"><a href="#父元素的padding挡住子元素，导致子元素无法click的BUG-⚠️" class="headerlink" title="父元素的padding挡住子元素，导致子元素无法click的BUG(⚠️)"></a>父元素的padding挡住子元素，导致子元素无法click的BUG(⚠️)</h2><p>原文参考：<a href="https://blog.csdn.net/weixin_44198965/article/details/116521625">CSS - 元素遮挡（层级&#x2F;定位等等）导致无法点击下层元素解决方案_css元素被遮挡-CSDN博客</a></p><p>为父元素加上使用 <strong>鼠标穿透属性</strong> <code>pointer-events</code>就行</p><p>有bug，这样调整完后，父元素本来可以点击的内容又不能点击了</p><p>最后发现改为margin就行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 给父元素(遮挡的元素) */</span></span><br><span class="line"><span class="selector-class">.div</span>&#123;</span><br><span class="line"><span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="历史导航栏（⚠️）"><a href="#历史导航栏（⚠️）" class="headerlink" title="历史导航栏（⚠️）"></a>历史导航栏（⚠️）</h2><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="Git提交信息规范"><a href="#Git提交信息规范" class="headerlink" title="Git提交信息规范"></a>Git提交信息规范</h2><ol><li><p><strong>提交信息结构：</strong></p><ul><li>提交信息分为类型、可选的范围和描述三个部分。</li><li>示例：<code>feat(user-auth): 增加密码重置功能</code></li></ul></li><li><p><strong>类型（Type）：</strong></p><ul><li><code>feat</code>: 新功能</li><li><code>fix</code>: 修复问题</li><li><code>docs</code>: 文档变更</li><li><code>style</code>: 代码格式、空格等非逻辑性的变更</li><li><code>refactor</code>: 重构代码，既不是新增功能也不是修复bug</li><li><code>test</code>: 添加或修改测试</li><li><code>chore</code>: 构建过程或辅助工具的变更</li></ul></li><li><p><strong>可选的范围（Scope）：</strong></p><ul><li>描述变更影响的范围，可以是模块、组件、功能等。例如：<code>(user-auth)</code>。</li></ul></li><li><p><strong>描述（Description）：</strong></p><ul><li>提供详细的变更描述，解释为什么做出这个变更以及变更的具体内容。</li></ul></li><li><p><strong>提交信息长度：</strong></p><ul><li>保持简短，最好不超过50个字符。如果需要更详细的描述，可以使用空行后添加更多信息。</li></ul></li><li><p><strong>动词使用：</strong></p><ul><li>使用动词的现在时来描述变更，例如：<code>增加</code>、<code>修复</code>、<code>更新</code>等。</li></ul></li><li><p><strong>参考任务或问题编号：</strong></p><ul><li>如果有相关的任务、问题或需求编号，可以在提交信息中引用，以便于跟踪。例如：<code>修复 #123</code>。</li></ul></li></ol><p>示例提交信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">feat(user-auth): 增加密码重置功能</span><br><span class="line"></span><br><span class="line">- 增加密码重置的新接口</span><br><span class="line">- 实现了密码重置的邮件通知功能</span><br><span class="line">- 更新用户认证服务以处理密码重置请求</span><br><span class="line">chore(init): 初始化项目结构</span><br></pre></td></tr></table></figure><p>这样的规范有助于更清晰地表达每次提交的目的和内容，有助于团队协作和代码维护。</p><h2 id="Copilot使用"><a href="#Copilot使用" class="headerlink" title="Copilot使用"></a>Copilot使用</h2><p>![截屏2024-01-24 10.35.54](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2024-01-24 10.35.54.png)</p><h2 id="Git怎么修改提交的注释信息"><a href="#Git怎么修改提交的注释信息" class="headerlink" title="Git怎么修改提交的注释信息"></a>Git怎么修改提交的注释信息</h2><p>原文链接：[Git使用小技巧【修改commit注释, 超详细】_git更改commit描述-CSDN博客](<a href="https://blog.csdn.net/xiaoyulike/article/details/119176756#:~:text=%E4%BA%8C%E3%80%81%E4%BF%AE%E6%94%B9%E4%BB%A5%E5%89%8D%E6%8F%90%E4%BA%A4%E7%9A%84%E6%B3%A8%E9%87%8A">https://blog.csdn.net/xiaoyulike/article/details/119176756#:~:text=二、修改以前提交的注释</a> 1 （1）git rebase -i HEAD~2 【 2,（4）%3Awq 【保存退出】 5 （5）git commit –amend 【同上有提示，第一行进行你真正需要的修改%2C 修改完后，保存退出】)</p><p>如果仅仅是想修改最后一次注释</p><p>（1）git commit –amend         【第一行出现注释界面】</p><p>（2）i                                         【进入修改模式, 修改完成】</p><p>（3）Esc                                    【退出编辑模式】</p><p>（4）:wq                                    【保存并退出即可】</p><p>（5）git log                                【 查看提交记录】</p><p>注意按住q可以退出，不要使用关掉终端的方式，否则会报以下的错误，主要是因为上个打开的文件没关，形成了一个临时文件</p><p>参考链接：<a href="https://blog.csdn.net/bean_business/article/details/113477080">成功解决：使用vim修改文件时报错Another program may be editing the same file. If this is the case的问题_another program may be editing the same file. if t-CSDN博客</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">E325: ATTENTION</span><br><span class="line">Found a swap file by the name <span class="string">&quot;~/NFT-Platform/.git/.COMMIT_EDITMSG.swp&quot;</span></span><br><span class="line">          owned by: tec   dated: 一  1 29 22:25:26 2024</span><br><span class="line">         file name: ~tec/NFT-Platform/.git/COMMIT_EDITMSG</span><br><span class="line">          modified: YES</span><br><span class="line">         user name: tec   host name: TECdeMacBook-Pro.<span class="built_in">local</span></span><br><span class="line">        process ID: 15259</span><br><span class="line">While opening file <span class="string">&quot;/Users/tec/NFT-Platform/.git/COMMIT_EDITMSG&quot;</span></span><br><span class="line">             dated: 一  1 29 22:27:40 2024</span><br><span class="line">      NEWER than swap file!</span><br><span class="line"></span><br><span class="line">(1) Another program may be editing the same file.  If this is the <span class="keyword">case</span>,</span><br><span class="line">    be careful not to end up with two different instances of the same</span><br><span class="line">    file when making changes.  Quit, or <span class="built_in">continue</span> with caution.</span><br><span class="line">(2) An edit session <span class="keyword">for</span> this file crashed.</span><br><span class="line">    If this is the <span class="keyword">case</span>, use <span class="string">&quot;:recover&quot;</span> or <span class="string">&quot;vim -r /Users/tec/NFT-Platform/.git/COMMIT_EDITMSG&quot;</span></span><br></pre></td></tr></table></figure><p>解决方法为删除该临时文件就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> -rf /Users/tec/NFT-Platform/.git/.COMMIT_EDITMSG.swp</span><br></pre></td></tr></table></figure><p>然后提交到远程仓库就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --force origin master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库基本概念</title>
      <link href="/posts/eb3d82ea.html"/>
      <url>/posts/eb3d82ea.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据库基本概念"><a href="#数据库基本概念" class="headerlink" title="数据库基本概念"></a>数据库基本概念</h1><h2 id="数据模型与关系模型"><a href="#数据模型与关系模型" class="headerlink" title="数据模型与关系模型"></a>数据模型与关系模型</h2><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>即要面向现实世界，又要面向机器世界，因此需满足三个要求：</p><p>1、能够真实地模拟现实世界；</p><p>2、容易被人们理解；</p><p>3、能够方便地在计算机上实现。</p><p>![截屏2023-11-18 13.46.58](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-11-18 13.46.58.png)</p><h3 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h3><p>也叫信息模型，为了正确直观地反映</p><p>客观事物及其联系，对所研究的信息世界建立一个抽象的模型，是以用户的观点对数据和信息建</p><p>模。</p><p>概念模型独立于计算机系统</p><p>概念模型也独立于具体的DBVS支持的数据模型</p><p>概念模型也是用产和数据库设计人员交流的工具</p><p>![截屏2023-11-18 13.45.37](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-11-18 13.45.37.png)</p><h3 id="描述概念模型"><a href="#描述概念模型" class="headerlink" title="描述概念模型"></a>描述概念模型</h3><p>最常用方法是实体-联系方法，即<br> E-R方法（也称E一R模型）。使用的工具称E一R图。</p><ul><li>E-R模型的三个基本图素</li></ul><p>实体（长方体）属性（椭圆形）联系（菱形）</p><p>![截屏2023-11-18 13.49.07](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-11-18 13.49.07.png)</p><p>![截屏2023-11-18 13.49.20](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-11-18 13.49.20.png)</p><h3 id="画ER图（‼️）"><a href="#画ER图（‼️）" class="headerlink" title="画ER图（‼️）"></a>画ER图（‼️）</h3><p>用E-R图表示某个工厂物资管理的概念模型</p><p>用矩形表示实体，用圆润矩形表示实体属性，用棱形表示两者关系，并且在该棱形上面，需要加上圆润矩形表示关系产生的属性，最后还要求加上多对多或者多对一的关系</p><p>根据E-R图写关系模式</p><p>首先把主要实体和其属性加上，还要加上多出来的属性，以及区分主键出来（一般就是编号），最后还要记得写联系的实体和属性</p><p>实体</p><p>＞仓库：仓库号、面积、电话号码</p><p>＞零件：零件号、名称、规格、单价、描述</p><p>＞供应商：供应商号、姓名、地址、电话号码、帐号</p><p>＞项目：项目号、预算、开工日期</p><p>＞职工：职工号、姓名、年龄、职称![截屏2023-11-18 13.50.22](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-11-18 13.50.22.png)</p><p>![截屏2023-12-29 14.50.34](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-12-29 14.50.34.png)</p><p>![截屏2023-12-29 14.49.27](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-12-29 14.49.27.png)</p><h3 id="数据模型-1"><a href="#数据模型-1" class="headerlink" title="数据模型"></a>数据模型</h3><ul><li>信息世界的信息在机器世界用数据的形式表示和存储，为正确在机器世界中表示信息而建立的模型称为数据模型，它按计算机系统的观点对<br> 数据建模</li><li>﻿用于提供数据库系统中信息表示和操作手段的形式<br> 框架，主要用于DBWS的实现</li><li>﻿数据模型是数据库系统的核心和基础。</li></ul><p>![截屏2023-11-18 13.51.51](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-11-18 13.51.51.png)</p><h3 id="数据模型三要素"><a href="#数据模型三要素" class="headerlink" title="数据模型三要素"></a>数据模型三要素</h3><p>数据结构—-描述数据集合的结构</p><p>数据操作—-查询、插入，修改，删除</p><p>完整性约束—-数据及其联系的制约和依存规则，保证数据的正确，有效和相容性![截屏2023-11-18 13.53.25](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-11-18 13.53.25.png)</p><h3 id="关系模型的相关概念"><a href="#关系模型的相关概念" class="headerlink" title="关系模型的相关概念"></a>关系模型的相关概念</h3><ul><li><p>﻿关系：一个关系对应着一个二维表，二维表名就是关系名</p></li><li><p>﻿关系模式：对关系的描述，即二维表中列标题的定义称为<br> 关系模式</p></li><li><p>﻿元组：关系中的每一行，称为一个元组。<br> 元组的集合为关系</p></li><li><p>﻿属性：在二维表中的列名，称为属性。属性的个数称为关系的元或度。</p></li><li><p>﻿域：某属性的值的取值范围为域，又称值域</p></li><li><p>分量：元组中一个属性的值</p><p>![截屏2023-11-18 13.56.51](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-11-18 13.56.51.png)</p><p>![截屏2023-11-18 13.57.04](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-11-18 13.57.04.png)</p><p>![截屏2023-11-18 13.57.19](&#x2F;Users&#x2F;tec&#x2F;Desktop&#x2F;截屏2023-11-18 13.57.19.png)</p></li></ul><h3 id="设计该系统的ER图，并转换成关系模式，说明主键及外键"><a href="#设计该系统的ER图，并转换成关系模式，说明主键及外键" class="headerlink" title="设计该系统的ER图，并转换成关系模式，说明主键及外键"></a>设计该系统的ER图，并转换成关系模式，说明主键及外键</h3><p>![截屏2023-11-18 13.59.23](&#x2F;Users&#x2F;tec&#x2F;Desktop&#x2F;截屏2023-11-18 13.59.23.png)</p><p>![截屏2023-11-18 14.00.27](&#x2F;Users&#x2F;tec&#x2F;Desktop&#x2F;截屏2023-11-18 14.00.27.png)</p><h2 id="表操作与约束（‼️）"><a href="#表操作与约束（‼️）" class="headerlink" title="表操作与约束（‼️）"></a>表操作与约束（‼️）</h2><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><h3 id="创建表：CREATE-table"><a href="#创建表：CREATE-table" class="headerlink" title="创建表：CREATE table"></a>创建表：CREATE table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">table</span> student (</span><br><span class="line">    stuNo <span class="type">char</span>(<span class="number">8</span>) <span class="keyword">PRIMARY</span> KEY,#主见约束</span><br><span class="line">    stuName <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    stuSclass <span class="type">char</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="自增：AUTO-INCREMENT"><a href="#自增：AUTO-INCREMENT" class="headerlink" title="自增：AUTO_INCREMENT"></a>自增：AUTO_INCREMENT</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表并定义自增主键</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ExampleTable (</span><br><span class="line">    ID <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    Name <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="comment">-- 其他列</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="数字补零：ZEROFILL"><a href="#数字补零：ZEROFILL" class="headerlink" title="数字补零：ZEROFILL"></a>数字补零：ZEROFILL</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表并使用 ZEROFILL 选项</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ExampleTable (</span><br><span class="line">    ID <span class="type">INT</span> ZEROFILL <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    Amount <span class="type">INT</span> ZEROFILL</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h4><ul><li>﻿主键&#x2F;码约束：唯一标识表中的一条记录，一个表只有一个主键——PRIMARY KEY</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#复合列主键约束</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students (</span><br><span class="line">  id <span class="type">int</span>,</span><br><span class="line">  semester <span class="type">int</span>,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id, semester)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>﻿外键&#x2F;码约束：用来建立两个表之间的关联，约束数据一致性——FOREIGN KEY</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建客户表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Customers (</span><br><span class="line">    CustomerID <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    CustomerName <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="comment">-- 其他客户相关字段</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建订单表，并定义外键约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Orders (</span><br><span class="line">    OrderID <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    OrderNumber <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    CustomerID <span class="type">INT</span>,</span><br><span class="line">    <span class="comment">-- 其他订单相关字段</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (CustomerID) <span class="keyword">REFERENCES</span> Customers(CustomerID)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>﻿唯一约束（候选键码约束）：数据不能重复，也能标识表中的一条记录，与主键不同的是候选键可以有多个——UNIQUE</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#复合列唯一约束</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name(</span><br><span class="line"><span class="keyword">column</span> name1 datatype, </span><br><span class="line">  <span class="keyword">column</span> name2 datatype,</span><br><span class="line">  <span class="keyword">unique</span>(column_name1, column_name2);</span><br><span class="line">) </span><br></pre></td></tr></table></figure><ul><li>﻿默认值约束：不给表中的列输入值时，自动賦值——DEFAULT 0</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表并添加默认值约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ExampleTable (</span><br><span class="line">    ID <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    Name <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;Unknown&#x27;</span>, <span class="comment">-- Name 列的默认值为 &#x27;Unknown&#x27;</span></span><br><span class="line">    Age <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">18</span>, <span class="comment">-- Age 列的默认值为 18</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>﻿非空约束：用来限制表中的某列必须输入值——NOT NULL</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表并添加非空约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ExampleTable (</span><br><span class="line">    ID <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    Name <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- Name 列不允许包含 NULL</span></span><br><span class="line">    Age <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="comment">-- Age 列不允许包含 NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>﻿检查约束：用来限制标准的某列输入值的范围——CHECK</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表并添加检查约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ExampleTable (</span><br><span class="line">    ID <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    Age <span class="type">INT</span> <span class="keyword">CHECK</span> (Age <span class="operator">&gt;=</span> <span class="number">18</span>), <span class="comment">-- Age 列的值必须大于等于 18</span></span><br><span class="line">    Status <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">CHECK</span> (Status <span class="keyword">IN</span> (<span class="string">&#x27;Active&#x27;</span>, <span class="string">&#x27;Inactive&#x27;</span>)) <span class="comment">-- Status 列的值必须是 &#x27;Active&#x27; 或 &#x27;Inactive&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="修改表：ALTER-table"><a href="#修改表：ALTER-table" class="headerlink" title="修改表：ALTER table"></a>修改表：ALTER table</h3><p>基本语法：</p><p>ALTER table table_name add column index|constraint</p><p>alter column {SET DEFAULT literal | DROP DEFAULT} </p><p>change column </p><p>modify column</p><p>drop column|primary key|foreign key</p><h4 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> your_table_name</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">COLUMN</span> new_column_name data_type;</span><br></pre></td></tr></table></figure><h4 id="编辑列"><a href="#编辑列" class="headerlink" title="编辑列"></a>编辑列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> your_table_name</span><br><span class="line">MODIFY <span class="keyword">COLUMN</span> column_name new_data_type;</span><br></pre></td></tr></table></figure><h4 id="修改列名"><a href="#修改列名" class="headerlink" title="修改列名"></a>修改列名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> your_table_name</span><br><span class="line">CHANGE <span class="keyword">COLUMN</span> old_column_name new_column_name data_type;</span><br></pre></td></tr></table></figure><h4 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> your_table_name</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> column_name;</span><br></pre></td></tr></table></figure><h4 id="添加主键"><a href="#添加主键" class="headerlink" title="添加主键"></a>添加主键</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> your_table_name</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (column_name);</span><br></pre></td></tr></table></figure><h4 id="删除主键"><a href="#删除主键" class="headerlink" title="删除主键"></a>删除主键</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> your_table_name</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure><h4 id="添加外键"><a href="#添加外键" class="headerlink" title="添加外键"></a>添加外键</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> your_table_name</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> KEY (column_name) <span class="keyword">REFERENCES</span> another_table_name(referenced_column);</span><br></pre></td></tr></table></figure><h4 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> your_table_name</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY foreign_key_name;</span><br></pre></td></tr></table></figure><h4 id="添加默认值约束"><a href="#添加默认值约束" class="headerlink" title="添加默认值约束"></a>添加默认值约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> your_table_name</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> column_name <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> default_value;</span><br></pre></td></tr></table></figure><h4 id="删除默认值约束"><a href="#删除默认值约束" class="headerlink" title="删除默认值约束"></a>删除默认值约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> your_table_name</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> column_name <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>;</span><br></pre></td></tr></table></figure><h4 id="添加非空约束"><a href="#添加非空约束" class="headerlink" title="添加非空约束"></a>添加非空约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> your_table_name</span><br><span class="line">MODIFY <span class="keyword">COLUMN</span> column_name data_type <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><h4 id="删除非空约束"><a href="#删除非空约束" class="headerlink" title="删除非空约束"></a>删除非空约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> your_table_name</span><br><span class="line">MODIFY <span class="keyword">COLUMN</span> column_name data_type <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><h4 id="添加CHECK约束"><a href="#添加CHECK约束" class="headerlink" title="添加CHECK约束"></a>添加CHECK约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> your_table_name</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> check_constraint_name <span class="keyword">CHECK</span> (<span class="keyword">condition</span>);</span><br></pre></td></tr></table></figure><h4 id="添加-x2F-删除唯一约束"><a href="#添加-x2F-删除唯一约束" class="headerlink" title="添加&#x2F;删除唯一约束"></a>添加&#x2F;删除唯一约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 添加唯一约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> your_table_name</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> unique_constraint_name <span class="keyword">UNIQUE</span> (column_name);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除唯一约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> your_table_name</span><br><span class="line"><span class="keyword">DROP</span> INDEX unique_constraint_name;</span><br></pre></td></tr></table></figure><h4 id="添加自增"><a href="#添加自增" class="headerlink" title="添加自增"></a>添加自增</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> your_table_name</span><br><span class="line">MODIFY <span class="keyword">COLUMN</span> column_name data_type AUTO_INCREMENT;</span><br></pre></td></tr></table></figure><h4 id="取消自增"><a href="#取消自增" class="headerlink" title="取消自增"></a>取消自增</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> your_table_name</span><br><span class="line">MODIFY <span class="keyword">COLUMN</span> column_name data_type;</span><br></pre></td></tr></table></figure><h3 id="删除表：DROP-table"><a href="#删除表：DROP-table" class="headerlink" title="删除表：DROP table"></a>删除表：DROP table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> your_table_name;</span><br></pre></td></tr></table></figure><h2 id="DML-数据操纵语言-操作数据表（‼️）"><a href="#DML-数据操纵语言-操作数据表（‼️）" class="headerlink" title="DML(数据操纵语言)操作数据表（‼️）"></a>DML(数据操纵语言)操作数据表（‼️）</h2><h3 id="数据插入操作：INSERT-x2F-REPLACE"><a href="#数据插入操作：INSERT-x2F-REPLACE" class="headerlink" title="数据插入操作：INSERT&#x2F;REPLACE"></a>数据插入操作：INSERT&#x2F;REPLACE</h3><p>REPLACE在冲突时会更新新的数据</p><p>插入一条记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> your_table_name (column1, column2, column3, ...)</span><br><span class="line"><span class="keyword">VALUES</span> (value1, value2, value3, ...);</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (employee_id, full_name, salary)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;John Doe&#x27;</span>, <span class="number">50000</span>);</span><br></pre></td></tr></table></figure><h3 id="数据更新操作：UPDATE"><a href="#数据更新操作：UPDATE" class="headerlink" title="数据更新操作：UPDATE"></a>数据更新操作：UPDATE</h3><p>更新记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> your_table_name</span><br><span class="line"><span class="keyword">SET</span> column1 <span class="operator">=</span> value1, column2 <span class="operator">=</span> value2, ...</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column_to_order_by</span><br><span class="line">LIMIT number_of_rows;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> employees</span><br><span class="line"><span class="keyword">SET</span> salary <span class="operator">=</span> <span class="number">55000</span></span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date</span><br><span class="line">LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="数据删除操作：DELETE"><a href="#数据删除操作：DELETE" class="headerlink" title="数据删除操作：DELETE"></a>数据删除操作：DELETE</h3><p>删除记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> your_table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column_to_order_by</span><br><span class="line">LIMIT number_of_rows;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date <span class="keyword">ASC</span> #默认就是<span class="keyword">ASC</span>升序排列，使用<span class="keyword">DESC</span>可以实现降序排列</span><br><span class="line">LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="清空表记录：truncate"><a href="#清空表记录：truncate" class="headerlink" title="清空表记录：truncate"></a>清空表记录：truncate</h3><p>快速删除表中的所有行，但保留表的结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> your_table_name;</span><br></pre></td></tr></table></figure><h2 id="关系代数（‼️）"><a href="#关系代数（‼️）" class="headerlink" title="关系代数（‼️）"></a>关系代数（‼️）</h2><p>,&gt;，≥，&lt;，≤，&#x3D;，≠∧（与）,∨（或）,┐（非）∪(并)，∩(交) ， —(差) ，  ×(笛卡尔积σ (选择) ，∏ (投影)，∞ (连接)，÷(除)</p><ol><li><p><strong>选择 (σ)：</strong></p><ul><li>语法：$(\sigma_{条件}(关系)$)</li><li>解释：从给定的关系中选择满足特定条件的元组。</li><li>例子：$(\sigma_{Age &gt; 25}(Employees))$ 选择年龄大于25的员工。</li></ul></li><li><p><strong>投影 (∏)：</strong></p><ul><li>语法：$(\pi_{属性列表}(关系)$)</li><li>解释：从给定的关系中选择特定的属性列，去除重复的元组。</li><li>例子：$(\pi_{Name, Salary}(Employees))$ 从员工关系中选择姓名和工资。</li></ul></li><li><p><strong>连接 (∞)：</strong></p><ul><li>语法：$(关系1 \bowtie_{条件} 关系2$)</li><li>解释：将两个关系的元组按照指定条件连接在一起。</li><li>例子：$(Departments \bowtie_{DeptID} Employees)$ 连接部门和员工关系，条件为部门ID相等。</li></ul></li><li><p><strong>除 (÷)：</strong></p><ul><li>语法：$(关系1 ÷ 关系2$)</li><li>解释：返回属于关系1但不属于关系2的元组。</li><li>例子：$(Projects ÷ (Projects \bowtie_{ProjID} AssignedProjects)$) 返回没有被分配的项目。</li></ul></li><li><p><strong>笛卡尔积 (×)：</strong></p><ul><li>语法：$(关系1 \times 关系2$)</li><li>解释：返回所有可能的关系1和关系2元组的组合。</li><li>例子：$(Employees \times Departments$) 返回所有可能的员工和部门的组合。</li></ul></li><li><p><strong>差 (—)：</strong></p><ul><li>语法：$(关系1 - 关系2$)</li><li>解释：返回属于关系1但不属于关系2的元组。</li><li>例子：$(Students - (Students \cap Graduates)$) 返回没有毕业的学生。</li></ul></li><li><p><strong>并 (∪)：</strong></p><ul><li>语法：$(关系1 \cup 关系2$)</li><li>解释：返回属于关系1或关系2的所有元组，去除重复的元组。</li><li>例子：$(MaleEmployees \cup FemaleEmployees$) 返回所有男性或女性员工的元组。</li></ul></li><li><p><strong>交 (∩)：</strong></p><ul><li>语法：$(关系1 \cap 关系2$)</li><li>解释：返回同时属于关系1和关系2的元组。</li><li>例子：$(Managers \cap Employees$) 返回既是经理又是员工的元组。</li></ul></li><li><p><strong>非 (┐)：</strong></p><ul><li>语法：$(\bar{关系}$) 或者 $(\neg 关系$)</li><li>解释：返回不属于给定关系的所有元组。</li><li>例子：$(\bar{HighlyPaidEmployees}$) 返回不是高薪员工的所有员工。</li></ul></li><li><p><strong>与 (∧)：</strong></p><ul><li>语法：$(条件1 \land 条件2$)</li><li>解释：返回同时满足条件1和条件2的元组。</li><li>例子：$(Age &gt; 30 \land Salary &gt; 50000$) 返回年龄大于30且工资大于50000的员工。</li></ul></li><li><p><strong>或 (∨)：</strong></p><ul><li>语法：$(条件1 \lor 条件2$)</li><li>解释：返回满足条件1或条件2的元组。</li><li>例子：$(Department &#x3D; ‘HR’ \lor Department &#x3D; ‘Finance’$) 返回属于人力资源部或财务部的员工。</li></ul></li><li><p><strong>等于 (&#x3D;)：</strong></p><ul><li>语法：$(关系1 &#x3D; 关系2$)</li><li>解释：判断两个关系是否相等，即包含相同的元组。</li><li>例子：$(Students &#x3D; EnrolledStudents$) 判断学生关系和已注册学生关系是否相等。</li></ul></li><li><p><strong>不等于 (≠)：</strong></p><ul><li>语法：$(关系1 \neq 关系2$)</li><li>解释：判断两个关系是否不相等。</li><li>例子：$(Employees \neq FormerEmployees$) 判断员工关系和离职员工关系是否不相等。</li></ul></li><li><p><strong>大于 (&gt;)：</strong></p><ul><li>语法：$(属性 &gt; 值$)</li><li>解释：选择属性值大于给定值的元组。</li><li>例子：$(Salary &gt; 60000$) 选择工资大于60000的员工。</li></ul></li><li><p><strong>大于等于 (≥)：</strong></p><ul><li>语法：$(属性 \geq 值$)</li><li>解释：选择属性值大于或等于给定值的元组。</li><li>例子：$(Experience \geq 5$) 选择经验大于等于5年的员工。</li></ul></li><li><p><strong>小于 (&lt;)：</strong></p><ul><li>语法：$(属性 &lt; 值$)</li><li>解释：选择属性值小于给定值的元组。</li><li>例子：$(Age &lt; 25$) 选择年龄小于25的员工。</li></ul></li><li><p><strong>小于等于 (≤)：</strong></p><ul><li>语法：$(属性 \leq 值$)</li><li>解释：选择属性值小于或等于给定值的元组。</li><li>例子：$(Rating \leq 3$) 选择评分小于等于3的项目。</li></ul></li></ol><h2 id="简单查询与子查询"><a href="#简单查询与子查询" class="headerlink" title="简单查询与子查询"></a>简单查询与子查询</h2><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>算术运算符：+，-，*，1，％</p><p>比较运算符：＞，＜，&gt;&#x3D;，&lt;&#x3D;，&lt;&gt;，l去答ike, in,between…and.., is null, greatest, least</p><p>逻辑运算符：not, ！I, and, &amp;&amp;, or,||,xor</p><p>位运算符：|，＆，^&lt;&lt;, &gt;&gt;,~</p><h3 id="数据查询数据"><a href="#数据查询数据" class="headerlink" title="数据查询数据"></a>数据查询数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">DISTINCT</span>] </span><br><span class="line">    column1 <span class="keyword">AS</span> output_name1, </span><br><span class="line">    column2 <span class="keyword">AS</span> output_name2, </span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    table1, table2, ...</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    <span class="keyword">condition</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">    group_column1, group_column2, ...</span><br><span class="line"><span class="keyword">HAVING</span> </span><br><span class="line">    group_filter_condition</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">    sort_column1 <span class="keyword">DESC</span>, sort_column2 <span class="keyword">ASC</span></span><br><span class="line">LIMIT </span><br><span class="line">    <span class="keyword">offset</span>, row_count;</span><br><span class="line">    </span><br><span class="line"><span class="comment">-- 选择不重复的州字段，并按州名称升序排序，只选择前5行</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> </span><br><span class="line">    state <span class="keyword">AS</span> state_name, </span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> total_cities</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    cities</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    population <span class="operator">&gt;</span> <span class="number">100000</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">    state</span><br><span class="line"><span class="keyword">HAVING</span> </span><br><span class="line">    total_cities <span class="operator">&gt;</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">    state_name <span class="keyword">ASC</span></span><br><span class="line">LIMIT </span><br><span class="line">    <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h4 id="选择所有列和所有行"><a href="#选择所有列和所有行" class="headerlink" title="选择所有列和所有行"></a>选择所有列和所有行</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> your_table_name;</span><br></pre></td></tr></table></figure><p>例如，从名为 <code>employees</code> 的表中选择所有列和所有行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h4 id="选择特定列和所有行"><a href="#选择特定列和所有行" class="headerlink" title="选择特定列和所有行"></a>选择特定列和所有行</h4><p>选择特定列的所有行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ... <span class="keyword">FROM</span> your_table_name;</span><br></pre></td></tr></table></figure><p>例如，从名为 <code>employees</code> 的表中选择雇员的姓名和薪水：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> full_name, salary <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h4 id="使用-WHERE-子句筛选行"><a href="#使用-WHERE-子句筛选行" class="headerlink" title="使用 WHERE 子句筛选行"></a>使用 WHERE 子句筛选行</h4><p>使用 <code>WHERE</code> 子句筛选特定的行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> your_table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p>例如，从名为 <code>employees</code> 的表中选择薪水大于 50000 的雇员：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> <span class="number">50000</span>;</span><br></pre></td></tr></table></figure><p>Like 用于模糊查询</p><p>使用通配符：</p><p>% 表示任意多个字符</p><p>_ 表示一个字符</p><p>查询姓黄的学生的信息（完整记录）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sname <span class="keyword">LIKE</span> <span class="string">&#x27;黄％&#x27;</span>;</span><br></pre></td></tr></table></figure><p>查询姓黄的单名的学生的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sname <span class="keyword">LIKE</span> <span class="string">&#x27;黄_&#x27;</span>;</span><br></pre></td></tr></table></figure><p>注意事项：</p><p>(1、<code>where ssex=1</code> 2、<code>where Sname like &quot;%燕%&quot;</code>(包含燕)3、where后面如果有多个条件，用AND连接4、<code>where tname like  &quot;刘__&quot;</code>,5、<code> WHERE teachno = 2 OR teachno = 8( IN(2,8) )</code>6、<code>between &quot;1993-8-15&quot; AND &quot;1995-12-13&quot;(where sbirth&gt;=&#39;1993-8-15&#39; and sbirth &lt;=&#39;1995-12-13&#39;)</code>7、<code>WHERE ssex=1 and sbirth NOT BETWEEN &#39;1994-3-12&#39; AND &#39;1995-2-15&#39;(where ssex=1 and（sbirth&lt;&#39;&#39;1994-3-12&#39;&#39; or sbirth &gt;&#39;&#39;1995-2-15&#39;&#39;）)</code>)</p><h4 id="使用-ORDER-BY-子句排序结果"><a href="#使用-ORDER-BY-子句排序结果" class="headerlink" title="使用 ORDER BY 子句排序结果"></a>使用 ORDER BY 子句排序结果</h4><p>使用 <code>ORDER BY</code> 子句对结果进行排序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> your_table_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column_to_order_by;</span><br></pre></td></tr></table></figure><p>例如，从名为 <code>employees</code> 的表中按照薪水降序排序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h4 id="使用-LIMIT-子句限制结果行数"><a href="#使用-LIMIT-子句限制结果行数" class="headerlink" title="使用 LIMIT 子句限制结果行数"></a>使用 LIMIT 子句限制结果行数</h4><p>使用 <code>LIMIT</code> 子句限制结果集的行数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> your_table_name</span><br><span class="line">LIMIT number_of_rows;</span><br></pre></td></tr></table></figure><p>例如，从名为 <code>employees</code> 的表中选择前 10 行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><h4 id="最大值：MAX"><a href="#最大值：MAX" class="headerlink" title="最大值：MAX"></a>最大值：MAX</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) <span class="keyword">AS</span> max_salary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p>这将返回 <code>employees</code> 表中 <code>salary</code> 列的最大值，并将其命名为 <code>max_salary</code>。</p><h4 id="最小值：MIN"><a href="#最小值：MIN" class="headerlink" title="最小值：MIN"></a>最小值：MIN</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary) <span class="keyword">AS</span> min_salary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p>这将返回 <code>employees</code> 表中 <code>salary</code> 列的最小值，并将其命名为 <code>min_salary</code>。</p><h4 id="平均值：AVG"><a href="#平均值：AVG" class="headerlink" title="平均值：AVG"></a>平均值：AVG</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">AS</span> average_salary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p>这将返回 <code>employees</code> 表中 <code>salary</code> 列的平均值，并将其命名为 <code>average_salary</code>。</p><h4 id="求和：SUM"><a href="#求和：SUM" class="headerlink" title="求和：SUM"></a>求和：SUM</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(salary) <span class="keyword">AS</span> total_salary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p>这将返回 <code>employees</code> 表中 <code>salary</code> 列的总和，并将其命名为 <code>total_salary</code>。</p><h4 id="计数：COUNT"><a href="#计数：COUNT" class="headerlink" title="计数：COUNT"></a>计数：COUNT</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(employee_id) <span class="keyword">AS</span> total_employees</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p>这将返回 <code>employees</code> 表中的行数（即总员工数量），并将其命名为 <code>total_employees</code>。</p><p>例子</p><p>查询选课号为1的最高分的学号和成绩</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> g.sNo, g.score</span><br><span class="line"><span class="keyword">FROM</span> grade g</span><br><span class="line"><span class="keyword">WHERE</span> g.teachNo <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span> g.score <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(score) <span class="keyword">FROM</span> grade <span class="keyword">WHERE</span> teachNo <span class="operator">=</span> <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="简单查询小结-‼️"><a href="#简单查询小结-‼️" class="headerlink" title="简单查询小结(‼️)"></a>简单查询小结(‼️)</h3><p>Select 需要的字段列表（*表示全部，字段之间使用<code>,</code>连接，注意别用<code>、</code>） </p><p>from 查询的表名</p><p>where 查询条件</p><p>order by 排序字段列表</p><p>limit 限定行数(注意比如说limit2,2 就是从第二个数组取两个，也就是显示二、三两条数据)</p><p>学习通作业</p><p>院系信息表（院系编号，院系名，办公室，电话，负责人）<br>department（dNo，dName，dOffice，dPhone，leader<br>班级信息表（班级编号，班级名，院系编号，当前人数，额定人数）<br>classinfo（cNo，cName，dNo，cNum，cMaxNum）<br>学生信息表（学号，密码，姓名，性别，出生日期，联系电话，班级编号）<br>student（sNo，sPassword，sName，sSex，sBirth，sPhone，cNo）<br>教师信息表（教师编号，姓名，性别，学历，职称，出生年月，院系编号）<br>teacher（tNo，tName，tSex，tDegree，tTitle，tBirth，dNo）<br>课程信息表（课程号，课程名，学分，类型）<br>course（coNo，coName， coCredit，coType）<br>授课信息表(授课编号，教师编号，课程号，学期，备注)<br>teach(teachNo, tNO, coNo, teachTerm, teachRemark)<br>成绩表（学号，成绩，授课编号，备注）<br>grade（sNo，score，teachNo ，gradeRemark）<br>管理员信息表（用户名，姓名，密码，联系电话，邮箱）<br>admin（adAccount，adName，adPassword，adPhone，adEMail）</p><p>最简单的查询：</p><p>![截屏2023-12-27 15.14.16](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-12-27 15.14.16.png)</p><p>1、select * from department</p><p>2、select teachNo As 选课编号, tNo As 教师编号, coNo As 课程编号,teachTerm As 开课学期 from teach</p><p>3、select * from teach order by teachNo limit 2</p><p>4、select * from teach order by teachNo desc limit 2</p><p>5、select  tNo,tName,tDegree,tBirth  from teacher order by tDegree ask,tBirth desc;</p><p>增加where：</p><p>![截屏2023-12-28 14.24.09](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-12-28 14.24.09.png)</p><p>学生信息表（学号，密码，姓名，性别，出生日期，联系电话，班级编号）<br>student（sNo，sPassword，sName，sSex，sBirth，sPhone，cNo）</p><p>教师信息表（教师编号，姓名，性别，学历，职称，出生年月，院系编号）<br>teacher（tNo，tName，tSex，tDegree，tTitle，tBirth，dNo）<br>课程信息表（课程号，课程名，学分，类型）<br>course（coNo，coName， coCredit，coType）</p><p>成绩表（学号，成绩，授课编号，备注）<br>grade（sNo，score，teachNo ，gradeRemark）</p><p>1、select * from student where ssex&#x3D;1</p><p>2、select sName,sNo,sBirth from student where Sname like “%燕%”</p><p>3、select sName,sNo,cNo from student where Sname like “%飞%” AND ssex&#x3D;1</p><p>4、select * from teacher where tname like  “刘__”</p><p>5、select sNo,sName,sPhone from student order by </p><p>6、select coName,coNo,coCredit from course from course  where coName like “%语%”  AND coType&#x3D;1order by coCredit DESC</p><p>7、SELECT * FROM grade WHERE graderemark&#x3D;’重修’;</p><p>8、SELECT * FROM grade WHERE teachno &#x3D; 2 OR teachno &#x3D; 8( IN(2,8) ) ORDER BY teachno, score DESC;</p><p>9、select sno,sname,ssex,sbirth FROM student where sbirth between “1993-8-15” AND “1995-12-13”(where sbirth&gt;&#x3D;’1993-8-15’ and sbirth &lt;&#x3D;’1995-12-13’)</p><p>10、SELECT sno,sname,sbirth FROM student WHERE ssex&#x3D;1 and sbirth NOT BETWEEN ‘1994-3-12’ AND ‘1995-2-15’;</p><p>用where ssex&#x3D;1 and（sbirth&lt;’’1994-3-12’’ or sbirth &gt;’’1995-2-15’’） 也可以</p><p>增加聚合函数：</p><p>![截屏2023-12-28 17.24.06](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-12-28 17.24.06.png)</p><p>1、</p><p>2、</p><p>3、</p><p>4、</p><p>5、</p><p>6、</p><p>7、</p><p>8、</p><p>9、</p><h2 id="复杂查询（‼️）"><a href="#复杂查询（‼️）" class="headerlink" title="复杂查询（‼️）"></a>复杂查询（‼️）</h2><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><h4 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h4><p>语法</p><p>GROUP BY 字段1：根据字段1分组</p><p>GROUP BY 字段1，字段2：先根据字段1分组，再根据字段2分组</p><p>注意：seleet 后面只能是聚合西数或者是group by之后出现过的列名。 (但是mysql不会报错语法）</p><p>例子</p><p>查询成绩表grade，每个选课号参加学习的学生数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> teachNo, <span class="built_in">COUNT</span>(sNo)</span><br><span class="line"><span class="keyword">FROM</span> grade</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> teachNo;</span><br></pre></td></tr></table></figure><h4 id="HAVING-子句"><a href="#HAVING-子句" class="headerlink" title="HAVING 子句"></a>HAVING 子句</h4><p>语法：</p><p>HAVING 组筛选条件</p><p>用法：</p><p>放在group by 子句后面，选出满足条件的分组</p><p>注意：having和where都用于给出查询条件，但 having只能放在group by子句后面，作为组的筛选条件，不能替代where子句</p><p>例子</p><p>查询选课人数超过2位学生的选课号与选课人数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> teachno,<span class="built_in">COUNT</span>(sno)</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> grade</span><br><span class="line"></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> teachno</span><br><span class="line"></span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(SnO)<span class="operator">&gt;</span><span class="number">2</span></span><br></pre></td></tr></table></figure><p>查询平均分大于80分的选课号和平均分，并按照平均分降序排序，另外平均分统计时不包括重修和补考的成绩记录（即（”正常”的成绩记录）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> teachno,ROUND(<span class="built_in">AVG</span>(score) ,<span class="number">1</span>) <span class="keyword">FROM</span> grade</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> graderemark<span class="operator">=</span><span class="string">&#x27;正常&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> teachno</span><br><span class="line"></span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(SCore)<span class="operator">&gt;</span><span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">AVG</span>(SCOre) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><h4 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h4><p>两个表连接</p><p>语法</p><p>select 表1.宇段1，⋯，表2.宇段1，… </p><p>from 表1，表2</p><p>where 表1.连接字段-表2.连接字段</p><p>例子：</p><p>查询班级表classinfo和学院表department，了解每个班级所属的学院情况（班级名称，学院名称）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cname,dname </span><br><span class="line"><span class="keyword">FROM</span> classinfo, department </span><br><span class="line"><span class="keyword">WHERE</span> classinfo.dno<span class="operator">=</span>department.dno;</span><br></pre></td></tr></table></figure><h4 id="内连接与外连接"><a href="#内连接与外连接" class="headerlink" title="内连接与外连接"></a>内连接与外连接</h4><p>在MySQL中，连接（Join）是一种用于联合两个或多个表中数据的操作。连接分为内连接（Inner Join）和外连接（Outer Join），它们之间的主要区别在于连接条件不满足时对结果的处理方式。</p><p>内连接（Inner Join）：</p><p>内连接是最常见的连接类型，它返回两个表中满足连接条件的行。语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> columns</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> table1.column <span class="operator">=</span> table2.column;</span><br></pre></td></tr></table></figure><p>这个查询将返回两个表中在连接条件上匹配的行。如果某一行在其中一个表中没有匹配行，则不会包含在结果中。</p><p>外连接（Outer Join）：</p><p>外连接分为左外连接（Left Outer Join）、右外连接（Right Outer Join）和全外连接（Full Outer Join）。它们的区别在于连接条件不满足时对左表或右表的处理方式。</p><p>左外连接（Left Outer Join）：</p><p>左外连接返回左表中所有行，以及与左表中的行匹配的右表中的行。如果右表中没有匹配的行，那么结果集中右表的列将包含 NULL 值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> columns</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> table1.column <span class="operator">=</span> table2.column;</span><br></pre></td></tr></table></figure><p>右外连接（Right Outer Join）：</p><p>右外连接与左外连接相反，返回右表中所有行，以及与右表中的行匹配的左表中的行。如果左表中没有匹配的行，那么结果集中左表的列将包含 NULL 值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> columns</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> table1.column <span class="operator">=</span> table2.column;</span><br></pre></td></tr></table></figure><h3 id="合并查询结果"><a href="#合并查询结果" class="headerlink" title="合并查询结果"></a>合并查询结果</h3><p>合并查询结果使用的是 UNION 操作符，它用于组合两个或多个 SELECT 语句的结果集，并去除重复的行。合并的 SELECT 语句必须具有相同数量的列，且相应位置的列的数据类型必须兼容。</p><p>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> columns <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> columns <span class="keyword">FROM</span> table2;</span><br></pre></td></tr></table></figure><p>要注意以下几点：</p><ol><li><p><strong>列的数量和数据类型必须匹配：</strong> 在 UNION 操作中，参与合并的 SELECT 语句必须返回相同数量和类型的列。列的顺序也要一致。</p></li><li><p><strong>去重：</strong> UNION 默认会去除重复的行，如果你希望保留重复行，可以使用 UNION ALL。</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> columns <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> columns <span class="keyword">FROM</span> table2;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>列名可以指定别名：</strong> 如果你想要给 UNION 合并结果的列指定别名，可以在每个 SELECT 子句中使用别名。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1 <span class="keyword">AS</span> alias_name <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> column2 <span class="keyword">AS</span> alias_name <span class="keyword">FROM</span> table2;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>排序：</strong> UNION 不会自动对结果进行排序，如果需要按特定的顺序返回结果，可以在最外层的 SELECT 语句中使用 ORDER BY 子句。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> columns <span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> columns <span class="keyword">FROM</span> table1</span><br><span class="line">    <span class="keyword">UNION</span></span><br><span class="line">    <span class="keyword">SELECT</span> columns <span class="keyword">FROM</span> table2</span><br><span class="line">) <span class="keyword">AS</span> merged_result</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column1;</span><br></pre></td></tr></table></figure><p>通过使用 UNION 操作符，你可以将两个查询的结果集合并成一个结果集，并且自动去除重复的行。</p><p>例子：<br>查询全校师生，按姓名排序后保留前10行记录 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">SELECT</span> tno <span class="keyword">AS</span> 编号, tname <span class="keyword">AS</span> 姓名 <span class="keyword">FROM</span> teacher)</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line">(<span class="keyword">SELECT</span> sno <span class="keyword">AS</span> 编号, sname <span class="keyword">AS</span> 姓名 <span class="keyword">FROM</span> student) <span class="keyword">ORDER</span> <span class="keyword">BY</span> 姓名 LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>当使用order by子句或limit子句时，UNION前后的 (select查询语句必须用小括号括起来</p><h2 id="关系规范化理论"><a href="#关系规范化理论" class="headerlink" title="关系规范化理论"></a>关系规范化理论</h2><h3 id="关系模式设计的问题"><a href="#关系模式设计的问题" class="headerlink" title="关系模式设计的问题"></a>关系模式设计的问题</h3><p>1）数据冗余量大</p><p>学学生姓名，课程名，院系和院长重复出现多次，浪费存储空间</p><p>2）插入异常一一应该存储的信息无法存储</p><p>如果某学生刚入学，没有选课，则由于课程号没有值，但主属性是不能为空的，因此也无法存储学生的学号，姓名， 所在院系这些信息</p><p>再如一个院系刚刚成立，没有学生，则院长的信息也无法存储</p><p>3）删除异常一一不该删除的数据不得不删</p><p>如果某个院系的学生全部毕业了，我们在删除该院系学生信息的同时把课程，院系及院系领导的信息也丢掉了。</p><p>![截屏2023-12-22 14.11.12](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-12-22 14.11.12.png)</p><p>4）更新异常一一修改困难，容易造成数据不一致</p><p>比如院系领导换人了，那么如果有1万条相关记录，必须一一修改，漏政一处，就会导致数据出问题</p><p>再比如，课程名称输入错误，“数据库”写成了 “数据结构” ，则修改量也很大，且容易漏政，导致数据不一致。</p><p>再者，赵六换了学院，则需要修改院系和院系领导，遗忘修改院系领导，则也会造成数据混乱</p><p>![截屏2023-12-22 14.10.45](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-12-22 14.10.45.png)</p><p>事实上，异常现象产生的根源，就是由于关系模式中属性间内部存在着复杂的依赖关系。</p><p>如学生学号和学生姓名、学生学号和院系名称、院系名称和院系系领导之问都存在着依赖关系，这种依赖都称为数据依赖</p><h3 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h3><p>函数依赖极普遍地存在现实生活中，如学生关系：</p><p>学生（学号、姓名、院系、院长）</p><p>语义：一个学号只对应一个学生，</p><p>一个学生只属于一个学院，</p><p> 一个院系只有一个院长；</p><p>那么</p><p>学号一&gt;姓名；学号一&gt;院系；院系一&gt;院长</p><p>函数依赖分类：</p><p>这些函数依赖的概念对于关系数据库的设计和规范化过程非常重要。通过了解和分析函数依赖，数据库设计者可以更好地规划表结构，减少数据冗余，提高数据完整性和一致性。</p><p>平凡函数依赖</p><p>这是一种非常简单的函数依赖，指的是A属性的任何一个值都可以确定A属性的其他值。换句话说，A属性完全决定于自身，没有其他属性的参与。</p><p>非平凡函数依赖</p><p>相对于平凡函数依赖，非平凡函数依赖是指属性之间存在一些关系，其中A属性的值不仅仅由自身决定，还受到其他属性的影响。这是关系数据库中更为常见和有用的一种函数依赖。</p><p>完全函数依赖</p><p>完全函数依赖是指在一个组合键（Composite Key）中的任何一个属性都不能单独决定另外一个属性。只有整个组合键能够唯一地确定其他属性的值。这主要涉及到复合主键的情况。</p><p>![截屏2023-12-22 14.12.20](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-12-22 14.12.20.png)</p><p>部分函数依赖</p><p>与完全函数依赖相对，部分函数依赖指的是组合键中的一部分属性能够唯一地决定其他属性的值，而不需要整个组合键。这在设计数据库时可能会引起冗余数据的问题。</p><p>![截屏2023-12-22 14.12.03](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-12-22 14.12.03.png)</p><p>传递函数依赖</p><p>传递函数依赖发生在三个或更多属性之间，其中A决定B，B决定C，从而A间接地决定C。传递函数依赖可能导致冗余数据，因此在数据库设计中应当尽量避免。</p><p>![截屏2023-12-22 14.12.35](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-12-22 14.12.35.png)</p><h3 id="范式。"><a href="#范式。" class="headerlink" title="范式。"></a>范式。</h3><p>1NF ：</p><ul><li>数据表中的每个字段都包含不可再分的原子数据。</li><li>每一列都是单一值，不包含集合、数组或其他非原子数据类型。</li></ul><p>2NF：</p><ul><li>数据表必须符合第一范式。</li><li>所有非主键字段完全依赖于主键，而不是部分依赖。</li><li>也就是说，表中的每个非主键字段都要直接依赖于整个主键，而不是主键的一部分。</li></ul><p>![截屏2023-12-22 14.33.25](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-12-22 14.33.25.png)</p><p>3NF：</p><ul><li>数据表必须符合第二范式。</li><li>所有非主键字段之间不存在传递依赖。</li><li>换句话说，如果有一个字段依赖于另一个非主键字段，那么这两个字段应该共同成为一个表的主键。</li></ul><p>![截屏2023-12-22 14.32.57](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-12-22 14.32.57.png)</p><p>BCNF ：</p><ul><li>数据表必须符合第三范式。</li><li>针对主键的任何非平凡依赖关系，主键的所有属性都必须是这个关系的超键。</li></ul><p>通俗地讲，当且仅当关系中的每个函数依赖的决定因子都是候选码时， 该范式即为BCNF。</p><p>BC范式不存在非主属性和主属性对码的部分函数依赖，和传递函数依赖</p><h3 id="关系模式的分解准则"><a href="#关系模式的分解准则" class="headerlink" title="关系模式的分解准则"></a>关系模式的分解准则</h3><p>模式分解的目的：</p><p>减少数据冗余，消除关系模式的操作异常消除关系模式中存在异常的步骤：</p><p>1、消除非主属性对码的部分函数依赖 </p><p>2、消除非主属性对码的传递函数依赖</p><p> 3、消除主属性对码的部分和传递函数</p><p>依赖模式分解准则：</p><p>模式分解具有无损连接性；</p><p>模式分解能够保持函数依赖</p><p>![截屏2023-12-23 14.52.29](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-12-23 14.52.29.png)</p><p>![截屏2023-12-23 14.52.49](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-12-23 14.52.49.png)</p><h2 id="数据库设计概述"><a href="#数据库设计概述" class="headerlink" title="数据库设计概述"></a>数据库设计概述</h2><h4 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h4><p>需求分析：了解和分析用户需求（信息需求和处理需求） </p><p>概念结构设计：根据需求分析，进行综合、归纳和抽象， 形成独立于DBMS的概念模型 （E-R模型）。</p><p>逻辑结构设计：将E-R模型转化为数据模型（关系模型）， 并进行规范化处理，形成模式。设计视图，形成外模式。</p><p>物理设计：针对应用，选择最适合的物理存储结构和存取方法。设计索引，形成内模式</p><p>数据库实施：数据库的建立和针对应用的操作行为的实现。</p><p>数据库运行与维护：数据库正式运行后的备份，转储，恢复，安全性和完整性控制，性能简单与改进，甚至是数据</p><p>库的重构等</p><p>![截屏2023-12-23 15.07.27](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-12-23 15.07.27.png)</p><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p>重点是两个“流” </p><p>“数据流” 、“处理流”</p><p>数据流图的符号</p><p><strong>矩形</strong>表示外部实体，反映数据的源和去向；</p><p>带箭头的连线表示数据流，反映数据的流动方向；</p><p><strong>椭圆或圆</strong>表示加工，反映对数据的加工处理动作；</p><p><strong>用两条平行线</strong>表示存储一一信息的静态存储，可以代表文件、文件的一部分、数据库的元素等，反映数据的存档情況。&#x2F;</p><p>![截屏2023-12-23 15.18.32](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-12-23 15.18.32.png)</p><h4 id="概念模型设计"><a href="#概念模型设计" class="headerlink" title="概念模型设计"></a>概念模型设计</h4><p>![截屏2023-12-23 15.24.42](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-12-23 15.24.42.png)</p><p>![截屏2023-12-23 15.25.01](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-12-23 15.25.01.png)</p><h4 id="设计局部E-R模型"><a href="#设计局部E-R模型" class="headerlink" title="设计局部E-R模型"></a>设计局部E-R模型</h4><p>一般有三种抽象方法：</p><p><strong>分类、概括、聚集</strong></p><p>分类：将客观世界中具有某些共同特征和行为的对象抽象为一个实体（类），比如学生底下有小明、小红、小李</p><p>概括：概括定义对象类型间的超类与子类的关系，将具有共同属性和行为的实体集类抽象出来，形成一般，更抽象的实体集类，比如学生底下有本科生和研究生</p><p>聚集：聚集定义将某类型的组成成分，将对象的组成成分抽象为实体的属性，比如学生底下有学号、姓名、性别</p><p>![截屏2023-12-23 15.41.53](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-12-23 15.41.53.png)</p><p>![截屏2023-12-23 15.42.07](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-12-23 15.42.07.png)</p><p>![截屏2023-12-23 15.42.37](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-12-23 15.42.37.png)</p><h4 id="全局概念设计"><a href="#全局概念设计" class="headerlink" title="全局概念设计"></a>全局概念设计</h4><p>解决冲突，合并局部E-R图并生成初步E-R图</p><p>•属性冲突：同一属性在不同局部E-R图其类型或取值范围不同</p><p>•命名冲突：同名异义，异名同义</p><p>•结构冲突：不同局部E-R因，同一实体属性不同；联系类型不同；或同一事物有时是实体，有时是属性</p><p>![截屏2023-12-23 15.44.02](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-12-23 15.44.02.png)</p><p>![截屏2023-12-23 15.44.32](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-12-23 15.44.32.png)</p><p>![截屏2024-01-14 14.28.21](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2024-01-14 14.28.21.png)</p><h4 id="逻辑结构设计"><a href="#逻辑结构设计" class="headerlink" title="逻辑结构设计"></a>逻辑结构设计</h4><p>逻辑结构设计阶段任务：</p><p>E-R图向关系模型的转换</p><p>并对数据模型进行优化</p><p>设计外模式</p><p>![截屏2024-01-14 14.28.35](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2024-01-14 14.28.35.png)</p><p>![截屏2024-01-14 22.23.14](&#x2F;Users&#x2F;tec&#x2F;Desktop&#x2F;截屏2024-01-14 22.23.14.png)</p><h4 id="物理结构设计"><a href="#物理结构设计" class="headerlink" title="物理结构设计"></a>物理结构设计</h4><p>数据库的物理设计通常分为两步：</p><p>确定数据库的物理结构；</p><p>对物理结构进行时问和空间效率的评价。</p><p>内容和方法：</p><p>首先，对经常用到的查询和对数据进行更新的事务进行分析，获取物理结构设计所需的参数</p><p>对于数据查询，需要得到如下信息：</p><p>＞查询所涉及的表；</p><p>＞查询条件所涉及的属性；</p><p>＞连接条件所涉及的属性；</p><p>＞查询结果列表中涉及的属性。</p><p>对于更新数据的事务，需得到如下信息：</p><p>＞ 更新所涉及的表；</p><p>＞ 每个表上的更新条件所涉及的属性；</p><p>＞ 更新操作所涉及的属性。</p><p>然后：</p><p>＞确定数据的存取方法；</p><p>＞确定数据的存储结构。</p><p>![截屏2024-01-14 14.36.26](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2024-01-14 14.36.26.png)</p><h4 id="确定存取方法"><a href="#确定存取方法" class="headerlink" title="确定存取方法"></a>确定存取方法</h4><p>一般用户可以通过建立索引的方法来加快数据的查询效率。</p><p>一般原则:</p><p>在经常作为查询条件的属性上建立索引</p><p>在经常作为连接条件的属性上建立索引</p><p>在经常作为分组依据列的属性上建立索引</p><p>对经常进行连接操作的表可以建立索引</p><p>![截屏2024-01-14 14.36.41](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2024-01-14 14.36.41.png)</p><h4 id="确定存储结构"><a href="#确定存储结构" class="headerlink" title="确定存储结构"></a>确定存储结构</h4><p>一般的存储方式有：</p><p>＞顺序存储</p><p>＞散列存储</p><p>＞聚集存储</p><h4 id="物理结构设计的评价"><a href="#物理结构设计的评价" class="headerlink" title="物理结构设计的评价"></a>物理结构设计的评价</h4><p>具体包括：</p><p>＞查询和响应时间 </p><p>＞更新事务开销</p><p>＞生成报告开销</p><p>＞主存储空间的开销</p><p> ＞辅助存储空间的开销</p><h4 id="数据运行与维护"><a href="#数据运行与维护" class="headerlink" title="数据运行与维护"></a>数据运行与维护</h4><p>具体维护工作包括：</p><p>＞数据库的备份和恢复</p><p>＞数据库的安全性和完整性控制 </p><p>＞监视、分析、调整数据库性能 </p><p>＞数据库的重组</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux基本知识</title>
      <link href="/posts/deefafae.html"/>
      <url>/posts/deefafae.html</url>
      
        <content type="html"><![CDATA[<h1 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h1><h2 id="文件和目录操作命令"><a href="#文件和目录操作命令" class="headerlink" title="文件和目录操作命令"></a>文件和目录操作命令</h2><h3 id="ls-命令（‼️）"><a href="#ls-命令（‼️）" class="headerlink" title="ls 命令（‼️）"></a>ls 命令（‼️）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls [选项] [文件或目录]</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-l</code> 列出长格式</li><li><code>-a</code> 列出所有文件,包括隐藏文件</li><li><code>-h</code> 人性化显示文件大小</li><li><code>-R</code> 递归显示子目录</li></ul><p>示例:</p><ul><li><code>ls -l</code> 列出当前目录下所有文件和目录的详细信息</li><li><code>ls -a</code> 列出当前目录下所有文件,包括隐藏文件</li><li><code>ls -lh</code> 人性化显示文件大小</li></ul><h3 id="cd-命令-（‼️）"><a href="#cd-命令-（‼️）" class="headerlink" title="cd 命令  （‼️）"></a>cd 命令  （‼️）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd [目录]</span><br></pre></td></tr></table></figure><p>示例:</p><ul><li><code>cd /home/user</code> 切换到用户主目录</li><li><code>cd ..</code> 切换到上一级目录</li><li><code>cd ~</code> 切换到当前用户的家目录</li></ul><h3 id="mkdir-命令（‼️）"><a href="#mkdir-命令（‼️）" class="headerlink" title="mkdir 命令（‼️）"></a>mkdir 命令（‼️）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir [选项] 目录名</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-p</code> 递归创建目录</li><li><code>-m</code> 设置目录权限</li></ul><p>示例:</p><ul><li><code>mkdir mydir</code> 创建名为mydir的目录</li><li><code>mkdir -p /tmp/a/b/c</code> 递归创建多级目录</li></ul><h3 id="rm-命令（‼️）"><a href="#rm-命令（‼️）" class="headerlink" title="rm 命令（‼️）"></a>rm 命令（‼️）</h3><p>remove缩写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm [选项] 文件或目录</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-r</code> 递归删除目录及其下所有内容</li><li><code>-f</code> 强制删除,不进行提示</li><li><code>-i</code> 删除前逐一询问</li></ul><p>示例:</p><ul><li><code>rm file.txt</code> 删除文件file.txt</li><li><code>rm -r mydir</code> 递归删除目录mydir</li></ul><h3 id="mv-命令（‼️）"><a href="#mv-命令（‼️）" class="headerlink" title="mv 命令（‼️）"></a>mv 命令（‼️）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv [选项] 源文件或目录 目标文件或目录</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-i</code> 移动前逐一询问确认</li><li><code>-u</code> 当源文件比目标文件新时才移动</li></ul><p>示例:</p><ul><li><code>mv file.txt newname.txt</code> 重命名文件</li><li><code>mv *.txt documents/</code> 移动所有txt文件到documents目录</li></ul><h3 id="cat-命令（‼️）"><a href="#cat-命令（‼️）" class="headerlink" title="cat 命令（‼️）"></a>cat 命令（‼️）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat [选项] 文件</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-n</code> 显示行号</li></ul><p>示例:</p><ul><li><code>cat file.txt</code> 查看文件file.txt的内容</li><li><code>cat -n file.txt</code> 显示行号</li></ul><h3 id="pwd-命令（‼️）"><a href="#pwd-命令（‼️）" class="headerlink" title="pwd 命令（‼️）"></a>pwd 命令（‼️）</h3><p>pwd命令是Linux系统中用于显示当前工作目录的绝对路径的命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd [选项]</span><br></pre></td></tr></table></figure><p>常用选项</p><ul><li><code>-L</code> 或 <code>--logical</code>(默认选项) 显示环境变量<code>$PWD</code>的值,即使它是一个符号链接。[1][3][5]</li><li><code>-P</code> 或 <code>--physical</code> 显示当前工作目录的物理路径,不跟随符号链接。[1][3][5]</li><li><code>--help</code> 显示帮助信息。[5]</li><li><code>--version</code> 显示版本信息。[5]</li></ul><p>示例:</p><p>显示当前工作目录路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pwd</span><br><span class="line">/root</span><br></pre></td></tr></table></figure><h3 id="cp-命令"><a href="#cp-命令" class="headerlink" title="cp 命令"></a>cp 命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp [选项] 源文件或目录 目标文件或目录</span><br></pre></td></tr></table></figure><p>常用选项: </p><ul><li><code>-r</code> 复制目录及其子内容</li><li><code>-i</code> 覆盖前逐一询问</li><li><code>-u</code> 当源文件比目标文件新时才复制</li></ul><p>示例:</p><ul><li><code>cp file.txt newfile.txt</code> 复制文件</li><li><code>cp -r mydir newdir</code> 递归复制目录mydir到newdir</li></ul><h3 id="head-命令"><a href="#head-命令" class="headerlink" title="head 命令"></a>head 命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head [选项] 文件</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-n</code> 指定显示行数</li></ul><p>示例:</p><ul><li><code>head file.txt</code> 显示文件开头10行</li><li><code>head -n 20 file.txt</code> 显示文件开头20行</li></ul><h3 id="tail-命令"><a href="#tail-命令" class="headerlink" title="tail 命令"></a>tail 命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail [选项] 文件</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-n</code> 指定显示行数</li><li><code>-f</code> 实时监视文件更新</li></ul><p>示例:</p><ul><li><code>tail file.log</code> 显示文件结尾10行</li><li><code>tail -n 30 file.log</code> 显示文件结尾30行</li><li><code>tail -f app.log</code> 实时监视app.log文件更新</li></ul><h2 id="系统管理命令"><a href="#系统管理命令" class="headerlink" title="系统管理命令"></a>系统管理命令</h2><h3 id="uname-命令（‼️）"><a href="#uname-命令（‼️）" class="headerlink" title="uname 命令（‼️）"></a>uname 命令（‼️）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> [选项]</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-a</code>：显示所有系统信息。</li><li><code>-r</code>：显示内核版本。</li></ul><p>示例:</p><ul><li><p><code>uname</code>: 显示系统名称。</p></li><li><p><code>uname -a</code>: 显示所有系统信息。</p></li><li><p><code>uname -r</code>: 显示内核版本。</p></li></ul><h3 id="ps-命令（‼️）"><a href="#ps-命令（‼️）" class="headerlink" title="ps 命令（‼️）"></a>ps 命令（‼️）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps [选项]</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-e</code> 显示所有进程</li><li><code>-f</code> 全格式显示</li><li><code>-u</code> 显示用户ID</li><li><code>aux</code> 显示所有进程,包括其他用户进程</li></ul><p>示例:</p><ul><li><code>ps</code> 显示当前终端进程</li><li><code>ps -ef</code> 显示所有进程的全格式列表</li><li><code>ps aux</code> 查看所有进程详细信息</li></ul><h3 id="kill-命令（‼️）"><a href="#kill-命令（‼️）" class="headerlink" title="kill 命令（‼️）"></a>kill 命令（‼️）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill [选项] 进程ID</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-9</code> 强制终止进程</li></ul><p>示例:</p><ul><li><code>kill 1234</code> 终止进程ID为1234的进程</li><li><code>kill -9 1234</code> 强制终止进程ID为1234的进程</li></ul><h3 id="shutdown-命令"><a href="#shutdown-命令" class="headerlink" title="shutdown 命令"></a>shutdown 命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown [选项] 时间 [警告消息]</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-r</code> 重启系统</li><li><code>-h</code> 完全关闭系统</li><li><code>-c</code> 取消已经执行的shutdown命令</li></ul><p>示例:</p><ul><li><code>shutdown -r 18:00 &quot;System reboot at 18:00&quot;</code> 设置18:00重启系统</li><li><code>shutdown -h now</code> 立即关闭系统</li><li><code>shutdown -c</code> 取消已经执行的关机&#x2F;重启命令</li></ul><h3 id="reboot-命令"><a href="#reboot-命令" class="headerlink" title="reboot 命令"></a>reboot 命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p>示例:</p><ul><li><code>reboot</code> 重启系统</li></ul><h3 id="top-命令"><a href="#top-命令" class="headerlink" title="top 命令"></a>top 命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top [选项]</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-d</code> 指定更新间隔时间</li><li><code>-p</code> 监视指定进程ID的进程</li></ul><p>示例:</p><ul><li><code>top</code> 查看系统实时运行状态</li><li><code>top -d 2</code> 每2秒更新一次</li><li><code>top -p 1234,2345</code> 监视进程ID为1234和2345的进程</li></ul><h3 id="free-命令"><a href="#free-命令" class="headerlink" title="free 命令"></a>free 命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free [选项]</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-h</code> 人性化显示内存使用量</li><li><code>-m</code> 以MB为单位显示内存使用量</li></ul><p>示例:</p><ul><li><code>free</code> 查看内存使用情况</li><li><code>free -h</code> 人性化显示内存使用量</li></ul><h3 id="df-命令"><a href="#df-命令" class="headerlink" title="df 命令"></a>df 命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df [选项]</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-h</code> 人性化显示磁盘使用量</li><li><code>-T</code> 显示文件系统类型</li></ul><p>示例:</p><ul><li><code>df</code> 查看磁盘使用情况  </li><li><code>df -hT</code> 人性化显示磁盘使用量和文件系统类型</li></ul><h3 id="du-命令"><a href="#du-命令" class="headerlink" title="du 命令"></a>du 命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du [选项] [文件或目录]</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-h</code> 人性化显示文件大小</li><li><code>-s</code> 只显示总计大小</li><li><code>-c</code> 显示总计大小</li></ul><p>示例:</p><ul><li><code>du -h /home</code> 查看&#x2F;home目录大小</li><li><code>du -sh *</code> 查看当前目录下所有文件和子目录的总大小</li></ul><h2 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h2><h3 id="ping-命令（‼️）"><a href="#ping-命令（‼️）" class="headerlink" title="ping 命令（‼️）"></a>ping 命令（‼️）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping [选项] 主机  </span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-c</code> 指定发送包的数量</li><li><code>-i</code> 指定发送包的间隔时间</li></ul><p>示例:</p><ul><li><code>ping 8.8.8.8</code> 测试与8.8.8.8的连通性</li><li><code>ping -c 5 www.example.com</code> 向<a href="http://www.example.com发送5个包/">www.example.com发送5个包</a></li></ul><h3 id="ifconfig-命令"><a href="#ifconfig-命令" class="headerlink" title="ifconfig 命令"></a>ifconfig 命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig [网络设备] [参数]</span><br></pre></td></tr></table></figure><p>常用参数:</p><ul><li><code>up</code> 启用指定网络设备</li><li><code>down</code> 禁用指定网络设备</li><li><code>IP地址</code> 为指定网络设备指定IP地址</li><li><code>netmask</code> 为指定网络设备指定子网掩码</li></ul><p>示例:</p><ul><li><code>ifconfig</code> 查看所有网络接口的状态</li><li><code>ifconfig eth0 up</code> 启用eth0网卡</li><li><code>ifconfig eth0 192.168.1.100 netmask 255.255.255.0</code> 设置eth0的IP和子网掩码</li></ul><h3 id="netstat-命令"><a href="#netstat-命令" class="headerlink" title="netstat 命令"></a>netstat 命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat [选项]</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-a</code> 列出所有连接</li><li><code>-n</code> 不解析主机名和服务名</li><li><code>-p</code> 显示进程ID和程序名</li><li><code>-r</code> 显示路由表</li><li><code>-l</code> 仅列出监听状态的连接</li></ul><p>示例:</p><ul><li><code>netstat -antp</code> 列出所有连接及进程信息</li><li><code>netstat -r</code> 查看路由表</li><li><code>netstat -ln</code> 查看监听端口</li></ul><h3 id="telnet-命令"><a href="#telnet-命令" class="headerlink" title="telnet 命令"></a>telnet 命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet [选项] 主机 [端口]</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-8</code> 允许使用8位数据路径</li><li><code>-E</code> escapre字符改为其他字符</li></ul><p>示例:</p><ul><li><code>telnet www.example.com 80</code> 连接example.com的80端口</li><li><code>telnet 192.168.1.100</code> 连接IP为192.168.1.100的主机</li></ul><h2 id="用户和权限管理命令"><a href="#用户和权限管理命令" class="headerlink" title="用户和权限管理命令"></a>用户和权限管理命令</h2><p>用户权限的描述如下图</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E6%88%AA%E5%B1%8F2024-05-11%2020.24.13.png" alt="截屏2024-05-11 20.24.13"></p><p>文字描述如下</p><p>Linux是一个多用户操作系统,每个文件和目录都有所有者(owner)、所属组(group)和其他用户(others)三种身份类型。</p><p>对于每种身份类型,Linux使用”rwx”三个字母分别表示读(read)、写(write)和执行(execute)三种基本权限。</p><ul><li>r(读权限)允许查看文件内容</li><li>w(写权限)允许修改文件内容</li><li>x(执行权限)允许执行文件或切换到目录</li></ul><p>通过<code>ls -l</code>命令可以查看文件或目录的权限信息,例如”rwxr-xr–”表示:所有者具有读、写、执行权限,所属组只有读和执行权限,其他用户只有读权限。</p><p>权限可以用数字表示,其中r&#x3D;4、w&#x3D;2、x&#x3D;1,三个值相加即为该身份类型的权限值。例如7&#x3D;4+2+1表示所有权限,6&#x3D;4+2表示读写权限。</p><h3 id="chmod-命令（‼️）"><a href="#chmod-命令（‼️）" class="headerlink" title="chmod 命令（‼️）"></a>chmod 命令（‼️）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [选项] 模式 文件或目录</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-R</code> 递归修改目录下所有文件和子目录</li></ul><p>示例:</p><ul><li><code>chmod 777 file.sh</code> 设置file.sh的权限为777</li><li><code>chmod -R 644 documents/</code> 递归设置documents目录下所有文件权限为644</li></ul><h3 id="useradd-命令"><a href="#useradd-命令" class="headerlink" title="useradd 命令"></a>useradd 命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd [选项] 用户名</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-m</code> 自动创建用户家目录</li><li><code>-g</code> 指定用户所属的用户组</li><li><code>-G</code> 指定用户所属的附加组</li><li><code>-s</code> 指定用户登录的shell</li></ul><p>示例:</p><ul><li><code>useradd -m newuser</code> 创建一个新用户newuser并创建家目录</li><li><code>useradd -g devgroup newdev</code> 创建新用户newdev,所属组为devgroup</li></ul><h3 id="userdel-命令"><a href="#userdel-命令" class="headerlink" title="userdel 命令"></a>userdel 命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel [选项] 用户名</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-r</code> 删除用户的同时删除家目录</li></ul><p>示例:</p><ul><li><code>userdel user1</code> 删除用户user1</li><li><code>userdel -r olduser</code> 删除用户olduser及其家目录</li></ul><h3 id="passwd-命令"><a href="#passwd-命令" class="headerlink" title="passwd 命令"></a>passwd 命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd [选项] [用户名]</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-l</code> 锁定用户密码,使密码无效</li><li><code>-u</code> 解锁用户密码</li><li><code>-d</code> 删除用户密码,允许空密码登录</li></ul><p>示例:</p><ul><li><p><code>passwd</code> 修改当前用户密码</p></li><li><p><code>passwd user1</code> 为用户user1修改密码</p></li><li><p><code>passwd -l user2</code> 锁定user2的密码</p></li><li></li></ul><h3 id="chown-命令"><a href="#chown-命令" class="headerlink" title="chown 命令"></a>chown 命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown [选项] 用户[:用户组] 文件或目录</span><br></pre></td></tr></table></figure><p>常用选项: </p><ul><li><code>-R</code> 递归修改目录下所有文件和子目录</li></ul><p>示例:</p><ul><li><code>chown user1 file.txt</code> 将file.txt的所有者改为user1</li><li><code>chown user1:devgroup docs/</code> 将docs目录的所有者改为user1,所属组改为devgroup</li></ul><h2 id="软件包管理命令"><a href="#软件包管理命令" class="headerlink" title="软件包管理命令"></a>软件包管理命令</h2><h3 id="yum-命令-RedHat系"><a href="#yum-命令-RedHat系" class="headerlink" title="yum 命令 (RedHat系)"></a>yum 命令 (RedHat系)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum [选项] [操作] [软件包]</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-y</code> 自动回答yes</li><li><code>--skip-broken</code> 忽略有问题的软件包</li></ul><p>常用操作:</p><ul><li><code>install</code> 安装软件包</li><li><code>update</code> 更新软件包</li><li><code>remove</code> 卸载软件包</li><li><code>list</code> 列出软件包</li><li><code>search</code> 搜索软件包</li></ul><p>示例:</p><ul><li><code>yum install nginx</code> 安装nginx</li><li><code>yum update</code> 更新所有软件包</li><li><code>yum remove httpd</code> 卸载httpd</li><li><code>yum list installed</code> 列出已安装的软件包</li></ul><h3 id="apt-命令-Debian系"><a href="#apt-命令-Debian系" class="headerlink" title="apt 命令 (Debian系)"></a>apt 命令 (Debian系)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt [选项] [操作] [软件包]</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-y</code> 自动回答yes</li></ul><p>常用操作:</p><ul><li><code>install</code> 安装软件包</li><li><code>update</code> 更新软件包列表</li><li><code>upgrade</code> 升级已安装的软件包</li><li><code>remove</code> 卸载软件包</li><li><code>search</code> 搜索软件包</li></ul><p>示例:</p><ul><li><code>apt install apache2</code> 安装apache2</li><li><code>apt update</code> 更新软件包列表</li><li><code>apt upgrade</code> 升级已安装的软件包</li><li><code>apt remove php</code> 卸载php</li><li><code>apt search editor</code> 搜索编辑器软件包</li></ul><h2 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h2><h3 id="man-命令"><a href="#man-命令" class="headerlink" title="man 命令"></a>man 命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man [命令]</span><br></pre></td></tr></table></figure><p>示例:</p><ul><li><code>man ls</code> 查看ls命令的帮助手册</li></ul><h3 id="which-命令"><a href="#which-命令" class="headerlink" title="which 命令"></a>which 命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which [命令]</span><br></pre></td></tr></table></figure><p>示例: </p><ul><li><code>which python</code> 查找python命令的位置</li></ul><h3 id="find-命令"><a href="#find-命令" class="headerlink" title="find 命令"></a>find 命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find [路径] [选项] [查找模式]</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-name</code> 按文件名查找</li><li><code>-iname</code> 按文件名查找,忽略大小写</li><li><code>-user</code> 按文件所有者查找</li><li><code>-size</code> 按文件大小查找</li></ul><p>示例:</p><ul><li><code>find . -name &quot;*.txt&quot;</code> 在当前目录查找txt文件</li><li><code>find /home -iname &quot;README&quot;</code> 在&#x2F;home目录下不分大小写查找README文件</li><li><code>find / -user root</code> 查找所有者为root的文件</li></ul><h3 id="grep-命令"><a href="#grep-命令" class="headerlink" title="grep 命令"></a>grep 命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [选项] 查找模式 [文件]</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-i</code> 忽略大小写</li><li><code>-n</code> 显示匹配行行号</li><li><code>-r</code> 递归查找子目录</li><li><code>-v</code> 反向查找,显示不匹配行</li></ul><p>示例:</p><ul><li><code>grep &quot;error&quot; app.log</code> 在app.log中查找error</li><li><code>grep -i &quot;warning&quot; *.log</code> 忽略大小写在所有log文件中查找warning</li><li><code>grep -rn &quot;TODO&quot; /path</code> 递归查找TODO并显示行号</li></ul><h3 id="tar-命令"><a href="#tar-命令" class="headerlink" title="tar 命令"></a>tar 命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar [选项] [文件或目录]</span><br></pre></td></tr></table></figure><p>常用选项:</p><ul><li><code>-c</code> 创建压缩文件</li><li><code>-x</code> 解压文件</li><li><code>-z</code> 使用gzip压缩</li><li><code>-j</code> 使用bzip2压缩</li><li><code>-v</code> 显示详细信息</li><li><code>-f</code> 指定压缩文件名</li></ul><p>示例:</p><ul><li><code>tar -czf archive.tar.gz files/</code> 使用gzip压缩files目录为archive.</li></ul><h1 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h1><p>它主要分为三种模式:命令模式、插入模式和底行模式。</p><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>命令模式用于控制光标移动、删除文本、复制粘贴等操作,不能直接输入文本。一些常用命令:</p><ul><li><code>h/j/k/l</code>分别控制光标左&#x2F;下&#x2F;上&#x2F;右移动</li><li><code>x</code>删除光标所在字符</li><li><code>dd</code>删除整行（‼️）</li><li><code>yy</code>复制当前行</li><li><code>p/P</code>粘贴到光标后&#x2F;前</li><li><code>/pattern</code>查找pattern</li><li><code>n/N</code>查找下&#x2F;上一个匹配项</li><li><code>u</code> - 撤销上一步操作（‼️）</li><li><code>U</code> - 撤销对当前行的所有操作</li><li><code>Ctrl+r</code> - 重做上一步被撤销的操作（‼️）</li></ul><h2 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h2><p>在命令模式下按<code>i</code>进入插入模式,可以直接输入文本。按<code>Esc</code>键退出插入模式回到命令模式。</p><h2 id="尾行模式"><a href="#尾行模式" class="headerlink" title="尾行模式"></a>尾行模式</h2><p>在命令模式下按<code>:</code>进入底行模式,可执行一些命令:</p><ul><li><code>:w</code>保存文件</li><li><code>:q</code>退出</li><li><code>:wq</code>将当前编辑的文件内容写入磁盘保存,然后退出Vim编辑器（‼️）</li><li><code>:q!</code>强制退出不保存</li><li><code>:x</code>保存并退出</li><li><code>:/pattern</code>查找pattern</li><li><code>:n</code>跳转到第n行</li></ul><p>Vim功能强大,上述只是一些基本用法,还有很多高级技巧如多窗口编辑、代码折叠等,需要持续学习掌握。[1][2][3][4][5]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Compose 学习</title>
      <link href="/posts/d84ff597.html"/>
      <url>/posts/d84ff597.html</url>
      
        <content type="html"><![CDATA[<h1 id="Compose-学习"><a href="#Compose-学习" class="headerlink" title="Compose 学习"></a>Compose 学习</h1><h2 id="布局组件"><a href="#布局组件" class="headerlink" title="布局组件"></a>布局组件</h2><p>Jetpack Compose 中的布局是通过组合函数和组件来构建的，而不是使用传统的 XML 布局文件。Compose 提供了一系列用于构建用户界面的组件和布局函数。以下是一些常见的 Jetpack Compose 布局相关的内容：</p><h3 id="Column"><a href="#Column" class="headerlink" title="Column"></a>Column</h3><p><code>Column</code> 是 Jetpack Compose 中用于垂直排列子元素的布局组件。它允许你按照从上到下的顺序垂直排列各个子元素。以下是一些关于 <code>Column</code> 的详细信息和使用示例：</p><p><strong>创建 Column：</strong></p><p>你可以通过简单地在 <code>Column</code> 中放置子元素来创建垂直布局。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Column &#123;</span><br><span class="line">    <span class="comment">// 子元素 1</span></span><br><span class="line">    <span class="comment">// 子元素 2</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用 Modifier 定制 Column：</strong></p><p>你可以使用 <code>Modifier</code> 对 <code>Column</code> 进行定制，例如设置大小、填充等。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Column(</span><br><span class="line">    modifier = Modifier</span><br><span class="line">        .fillMaxSize()</span><br><span class="line">        .padding(<span class="number">16.</span>dp)</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// 子元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>子元素的定位和对齐：</strong></p><p>可以使用 <code>verticalArrangement</code> 和 <code>horizontalAlignment</code> 参数来调整子元素在 <code>Column</code> 中的垂直和水平排列方式。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Column(</span><br><span class="line">    verticalArrangement = Arrangement.Center,</span><br><span class="line">    horizontalAlignment = Alignment.CenterHorizontally</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// 子元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>设置子元素之间的间距：</strong></p><p>你可以使用 <code>Modifier.padding</code> 为 <code>Column</code> 中的子元素设置间距。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Column(</span><br><span class="line">    modifier = Modifier.padding(<span class="number">8.</span>dp)</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// 子元素 1</span></span><br><span class="line">    <span class="comment">// 子元素 2</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用 weight 分配空间：</strong></p><p>你可以使用 <code>weight</code> 参数来为子元素分配相对空间，实现灵活的布局。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Column &#123;</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .height(<span class="number">100.</span>dp)</span><br><span class="line">            .fillMaxWidth()</span><br><span class="line">            .background(Color.Blue)</span><br><span class="line">            .weight(<span class="number">1f</span>) <span class="comment">// 占据剩余空间的一半</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">// 子元素 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .height(<span class="number">100.</span>dp)</span><br><span class="line">            .fillMaxWidth()</span><br><span class="line">            .background(Color.Red)</span><br><span class="line">            .weight(<span class="number">2f</span>) <span class="comment">// 占据剩余空间的两倍</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">// 子元素 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Row"><a href="#Row" class="headerlink" title="Row"></a>Row</h3><p> <code>Row</code> 是基本的水平布局组件。它们允许您按水平顺序排列其子组件。</p><p>基本使用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Row &#123;</span><br><span class="line">    <span class="comment">// Row 中的每个子元素</span></span><br><span class="line">    Text(<span class="string">&quot;Element 1&quot;</span>)</span><br><span class="line">    Text(<span class="string">&quot;Element 2&quot;</span>)</span><br><span class="line">    Text(<span class="string">&quot;Element 3&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个简单的示例中，<code>Row</code> 包含了三个 <code>Text</code> 组件，它们会水平排列在一行中。</p><p>使用 Modifier 调整布局：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Row(</span><br><span class="line">    modifier = Modifier</span><br><span class="line">        .fillMaxWidth()</span><br><span class="line">        .padding(<span class="number">16.</span>dp)</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// Row 中的每个子元素</span></span><br><span class="line">    Text(<span class="string">&quot;Element 1&quot;</span>)</span><br><span class="line">    Text(<span class="string">&quot;Element 2&quot;</span>)</span><br><span class="line">    Text(<span class="string">&quot;Element 3&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用 <code>Modifier</code>，你可以调整 <code>Row</code> 的外观和行为。在这个例子中，<code>Modifier.fillMaxWidth()</code> 使得 <code>Row</code> 的宽度充满父容器的宽度，而 <code>Modifier.padding(16.dp)</code> 添加了内边距。</p><p>对齐和垂直对齐：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Row(</span><br><span class="line">    modifier = Modifier.fillMaxWidth(),</span><br><span class="line">    horizontalArrangement = Arrangement.SpaceBetween,</span><br><span class="line">    verticalAlignment = Alignment.CenterVertically</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// Row 中的每个子元素</span></span><br><span class="line">    Text(<span class="string">&quot;Element 1&quot;</span>)</span><br><span class="line">    Text(<span class="string">&quot;Element 2&quot;</span>)</span><br><span class="line">    Text(<span class="string">&quot;Element 3&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用 <code>horizontalArrangement</code> 和 <code>verticalAlignment</code> 参数，你可以控制子元素在水平和垂直方向上的排列方式。在这个例子中，<code>Arrangement.SpaceBetween</code> 使得子元素在水平方向上平均分布，并且 <code>Alignment.CenterVertically</code> 使得它们在垂直方向上居中对齐。</p><p>使用 Spacer 创建间隔：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Row &#123;</span><br><span class="line">    Text(<span class="string">&quot;Element 1&quot;</span>)</span><br><span class="line">    Spacer(modifier = Modifier.width(<span class="number">16.</span>dp))</span><br><span class="line">    Text(<span class="string">&quot;Element 2&quot;</span>)</span><br><span class="line">    Spacer(modifier = Modifier.width(<span class="number">16.</span>dp))</span><br><span class="line">    Text(<span class="string">&quot;Element 3&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Spacer</code> 可以用来创建子元素之间的间隔。在这个例子中，每个 <code>Text</code> 元素之间都有一个宽度为 <code>16.dp</code> 的间隔。</p><p>使用 weight 分配空间：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Row &#123;</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .height(<span class="number">50.</span>dp)</span><br><span class="line">            .fillMaxWidth()</span><br><span class="line">            .background(Color.Blue)</span><br><span class="line">            .weight(<span class="number">1f</span>) <span class="comment">// 占据剩余空间的一半</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">// 子元素 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .height(<span class="number">50.</span>dp)</span><br><span class="line">            .fillMaxWidth()</span><br><span class="line">            .background(Color.Red)</span><br><span class="line">            .weight(<span class="number">2f</span>) <span class="comment">// 占据剩余空间的两倍</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">// 子元素 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用 <code>weight</code> 参数，你可以为 <code>Row</code> 中的子元素分配相对空间，实现灵活的布局。</p><p>总体来说，<code>Row</code> 是 Jetpack Compose 中用于水平排列子元素的常用布局组件，它提供了丰富的参数和选项，使得在水平方向上创建灵活的界面布局变得简单而直观。</p><h3 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h3><p><code>Box</code> 是 Jetpack Compose 中用于创建容器的组件，它可以包含其他组件，并允许你对这些组件进行定位、叠加和对齐。以下是一些关于 <code>Box</code> 的详细信息和使用示例：</p><p>基本使用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">BasicBoxExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .background(MaterialTheme.colorScheme.primary)</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">// Box 中的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个基本的示例中，<code>Box</code> 组件充满整个父容器的大小，并设置了背景颜色为 <code>MaterialTheme.colorScheme.primary</code>。</p><p>包含其他组件：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">BoxWithContentExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .background(MaterialTheme.colorScheme.primary)</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">// Box 中包含其他组件</span></span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">&quot;Hello, Box!&quot;</span>,</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .size(<span class="number">200.</span>dp)</span><br><span class="line">                .background(Color.White)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Box</code> 中包含了一个 <code>Text</code> 组件，并设置了 <code>size</code> 和 <code>background</code> 属性。</p><p>对齐和定位：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">BoxAlignmentExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .background(MaterialTheme.colorScheme.primary)</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">// 对齐和定位子元素</span></span><br><span class="line">        Box(</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .size(<span class="number">100.</span>dp)</span><br><span class="line">                .background(Color.White)</span><br><span class="line">                .offset(<span class="number">50.</span>dp, <span class="number">30.</span>dp)</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="comment">// 子元素</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Box</code> 包含一个子 <code>Box</code>，并使用 <code>offset</code> 属性对其进行定位。</p><p>叠加多个组件：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">OverlayExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .background(MaterialTheme.colorScheme.primary)</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">// 叠加多个组件</span></span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">&quot;Text 1&quot;</span>,</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .size(<span class="number">200.</span>dp)</span><br><span class="line">                .background(Color.White)</span><br><span class="line">        )</span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">&quot;Text 2&quot;</span>,</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .size(<span class="number">150.</span>dp)</span><br><span class="line">                .background(Color.Red)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Box</code> 中叠加了两个 <code>Text</code> 组件，它们分别有不同的背景颜色和大小。</p><p><code>Box</code> 是一个非常灵活的容器，可以用于创建各种布局结构，包括对齐、定位和叠加多个组件。通过使用不同的修饰符和嵌套不同的组件，你可以轻松地实现各种复杂的界面布局。</p><h3 id="ConstraintLayout"><a href="#ConstraintLayout" class="headerlink" title="ConstraintLayout"></a>ConstraintLayout</h3><p><code>ConstraintLayout</code> 提供了更灵活的布局，允许您通过设置约束条件来确定子组件的位置。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ConstraintLayout &#123;</span><br><span class="line">    <span class="comment">// 子组件和约束条件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Surface"><a href="#Surface" class="headerlink" title="Surface"></a>Surface</h3><p>在 Jetpack Compose 中，<code>Surface</code> 是一个用于绘制内容的基本容器。它可以用作背景，也可以包含其他组件，以形成更复杂的用户界面。以下是一些关于 <code>Surface</code> 的详细信息和使用示例：</p><p>基本使用：</p><p>主要还是在内部只要一个元素的时候使用，这样就可以不用像 Card 一样需要再加上 Column 来添加背景颜色</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Surface(</span><br><span class="line">    shape = RoundedCornerShape(<span class="number">50.</span>dp),</span><br><span class="line">    color = colorResource(id = R.color.danDanZi), <span class="comment">// 设置圆角</span></span><br><span class="line">) &#123;</span><br><span class="line">    Text(</span><br><span class="line">        text = <span class="string">&quot;学习&quot;</span>,</span><br><span class="line">        color = colorResource(id = R.color.zi),</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .padding(horizontal = <span class="number">10.</span>dp)</span><br><span class="line">            .padding(vertical = <span class="number">4.</span>dp)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Surface</code> 用作一个背景，填充整个可用空间，并设置了填充和颜色属性。<code>Text</code> 组件位于 <code>Surface</code> 中，形成了一个简单的界面。</p><p>Surface 嵌套使用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Surface(</span><br><span class="line">    modifier = Modifier</span><br><span class="line">        .fillMaxSize()</span><br><span class="line">        .padding(<span class="number">16.</span>dp),</span><br><span class="line">    color = Color.Blue</span><br><span class="line">) &#123;</span><br><span class="line">    Surface(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxWidth()</span><br><span class="line">            .padding(<span class="number">16.</span>dp),</span><br><span class="line">        color = Color.Green</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">// 内部 Surface 中的内容</span></span><br><span class="line">        Text(<span class="string">&quot;Nested Surface Content&quot;</span>, color = Color.White)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Surface</code> 组件可以嵌套使用，形成更为复杂的界面层次结构。在这个例子中，外部 <code>Surface</code> 设置为蓝色，内部 <code>Surface</code> 设置为绿色，并包含一个文本内容。</p><p>使用 Material 风格的 Surface：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Surface(</span><br><span class="line">    modifier = Modifier</span><br><span class="line">        .fillMaxSize()</span><br><span class="line">        .padding(<span class="number">16.</span>dp),</span><br><span class="line">    color = MaterialTheme.colorScheme.primary</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// Material 风格的 Surface 中的内容</span></span><br><span class="line">    Text(<span class="string">&quot;Material Surface Content&quot;</span>, color = Color.White)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你在应用中使用 Material Design 风格时，可以直接使用 <code>MaterialTheme.colorScheme</code> 中定义的颜色。</p><p>添加边框和形状：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Surface(</span><br><span class="line">    modifier = Modifier</span><br><span class="line">        .fillMaxSize()</span><br><span class="line">        .padding(<span class="number">16.</span>dp),</span><br><span class="line">    color = Color.Blue,</span><br><span class="line">    shape = RoundedCornerShape(<span class="number">8.</span>dp),</span><br><span class="line">    border = BorderStroke(<span class="number">2.</span>dp, Color.Gray)</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// Surface 中的内容</span></span><br><span class="line">    Text(<span class="string">&quot;Surface with Border and Shape&quot;</span>, color = Color.White)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过设置 <code>shape</code> 属性，可以为 <code>Surface</code> 指定不同的形状，例如圆角。通过设置 <code>border</code> 属性，可以为 <code>Surface</code> 添加边框。</p><p>自定义绘制内容：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Surface(</span><br><span class="line">    modifier = Modifier</span><br><span class="line">        .fillMaxSize()</span><br><span class="line">        .padding(<span class="number">16.</span>dp),</span><br><span class="line">    color = Color.Blue,</span><br><span class="line">    shape = CircleShape</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// 自定义绘制的内容</span></span><br><span class="line">    DrawCircle(color = Color.Yellow)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你还可以使用 <code>Draw</code> 函数来在 <code>Surface</code> 中自定义绘制内容。在这个例子中，通过 <code>DrawCircle</code> 函数绘制了一个黄色的圆形。</p><p>总体来说，<code>Surface</code> 是 Jetpack Compose 中用于绘制内容和创建容器的基础组件之一。它提供了许多属性，允许你设置背景颜色、形状、边框等，以实现各种界面样式。</p><h3 id="Spacer"><a href="#Spacer" class="headerlink" title="Spacer"></a>Spacer</h3><p> <code>Spacer</code> 是一个用于添加空白间隔的组件，可以在布局中调整组件之间的距离。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Spacer(modifier = Modifier.height(<span class="number">16.</span>dp))</span><br></pre></td></tr></table></figure><h3 id="LazyColumn"><a href="#LazyColumn" class="headerlink" title="LazyColumn"></a>LazyColumn</h3><p><code>LazyColumn</code> 是 Jetpack Compose 中用于显示垂直滚动列表的组件。与传统的 <code>RecyclerView</code> 不同，<code>LazyColumn</code> 是一种懒加载的方式，仅在需要时才会加载和绘制可见的项目，这有助于提高性能。以下是一些关于 <code>LazyColumn</code> 的详细信息和使用示例：</p><p>基本使用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LazyColumn &#123;</span><br><span class="line">    items(<span class="number">100</span>) &#123; index -&gt;</span><br><span class="line">        <span class="comment">// 列表中的每个项目</span></span><br><span class="line">        Text(<span class="string">&quot;Item <span class="variable">$index</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个简单的示例中，<code>LazyColumn</code> 包含了一个包含 100 个项目的列表。<code>items</code> 函数用于定义列表的项目，它接受一个项目总数和一个 lambda 表达式，用于定义每个项目的内容。</p><p>懒加载：</p><p><code>LazyColumn</code> 仅在需要时才会加载和绘制可见的项目。这意味着当你滚动列表时，只有当前可见的项目才会被创建和渲染，这有助于提高性能，特别是当列表中有大量项目时。</p><p>项目的交互性：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">LazyColumn &#123;</span><br><span class="line">    items(<span class="number">10</span>) &#123; index -&gt;</span><br><span class="line">        <span class="comment">// 列表中的每个项目</span></span><br><span class="line">        Row(</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .fillMaxWidth()</span><br><span class="line">                .padding(<span class="number">16.</span>dp)</span><br><span class="line">                .clickable &#123;</span><br><span class="line">                    <span class="comment">// 处理项目的点击事件</span></span><br><span class="line">                    <span class="comment">// 可以进行页面导航等操作</span></span><br><span class="line">                    <span class="comment">// 例如：navController.navigate(&quot;detail/$index&quot;)</span></span><br><span class="line">                &#125;</span><br><span class="line">        ) &#123;</span><br><span class="line">            Text(<span class="string">&quot;Item <span class="variable">$index</span>&quot;</span>, fontWeight = FontWeight.Bold)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，每个项目被包装在一个 <code>Row</code> 中，并添加了 <code>clickable</code> 修饰符，以便处理项目的点击事件。你可以在 <code>clickable</code> lambda 中执行任何你想要的操作，例如页面导航。</p><p>使用不同类型的项目：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">ListItem</span>(<span class="keyword">val</span> title: String, <span class="keyword">val</span> subtitle: String)</span><br><span class="line"></span><br><span class="line">LazyColumn &#123;</span><br><span class="line">    items(</span><br><span class="line">        listOf(</span><br><span class="line">            ListItem(<span class="string">&quot;Item 1&quot;</span>, <span class="string">&quot;Subtitle 1&quot;</span>),</span><br><span class="line">            ListItem(<span class="string">&quot;Item 2&quot;</span>, <span class="string">&quot;Subtitle 2&quot;</span>),</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        )</span><br><span class="line">    ) &#123; item -&gt;</span><br><span class="line">        <span class="comment">// 使用不同类型的项目</span></span><br><span class="line">        Column(</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .fillMaxWidth()</span><br><span class="line">                .padding(<span class="number">16.</span>dp)</span><br><span class="line">        ) &#123;</span><br><span class="line">            Text(text = item.title, fontWeight = FontWeight.Bold)</span><br><span class="line">            Text(text = item.subtitle, color = Color.Gray)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，每个项目是一个包含标题和子标题的数据类 <code>ListItem</code>。<code>items</code> 函数接受一个包含不同类型项目的列表，并根据每个项目的类型来定义不同的界面。</p><p>分隔线：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LazyColumn &#123;</span><br><span class="line">    items(<span class="number">10</span>) &#123; index -&gt;</span><br><span class="line">        <span class="comment">// 列表中的每个项目</span></span><br><span class="line">        Text(<span class="string">&quot;Item <span class="variable">$index</span>&quot;</span>)</span><br><span class="line">        Divider(color = Color.Gray, thickness = <span class="number">1.</span>dp)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过在每个项目之后添加 <code>Divider</code> 组件，可以在列表中添加分隔线。</p><p><code>LazyColumn</code> 是构建垂直滚动列表的常用组件，特别适用于大量数据的情况，因为它采用懒加载的方式，只加载当前可见的项目，从而提高性能。</p><h3 id="ScrollableColumn"><a href="#ScrollableColumn" class="headerlink" title="ScrollableColumn"></a>ScrollableColumn</h3><p>允许在超过屏幕空间的情况下滚动显示内容。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ScrollableColumn &#123;</span><br><span class="line">    <span class="comment">// 可滚动的垂直列</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ScrollableRow"><a href="#ScrollableRow" class="headerlink" title="ScrollableRow"></a>ScrollableRow</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ScrollableRow &#123;</span><br><span class="line">    // 可滚动的水平行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Scaffold"><a href="#Scaffold" class="headerlink" title="Scaffold"></a>Scaffold</h3><p><code>Scaffold</code> 是 Jetpack Compose 中用于创建应用程序屏幕结构的组件。它提供了一个标准的应用程序结构，包括应用栏（<code>TopAppBar</code>）、底部导航栏（<code>BottomAppBar</code>）以及主要内容区域。以下是一些关于 <code>Scaffold</code> 的详细信息和使用示例：</p><p>基本使用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">BasicScaffoldExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Scaffold(</span><br><span class="line">        topBar = &#123;</span><br><span class="line">            <span class="comment">// 顶部应用栏</span></span><br><span class="line">            TopAppBar(</span><br><span class="line">                title = &#123; Text(text = <span class="string">&quot;My App&quot;</span>) &#125;,</span><br><span class="line">                navigationIcon = &#123;</span><br><span class="line">                    IconButton(onClick = &#123; <span class="comment">/* Handle navigation icon click */</span> &#125;) &#123;</span><br><span class="line">                        Icon(Icons.Default.Menu, contentDescription = <span class="literal">null</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                actions = &#123;</span><br><span class="line">                    <span class="comment">// 顶部应用栏的操作按钮</span></span><br><span class="line">                    IconButton(onClick = &#123; <span class="comment">/* Handle action click */</span> &#125;) &#123;</span><br><span class="line">                        Icon(Icons.Default.Favorite, contentDescription = <span class="literal">null</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;,</span><br><span class="line">        content = &#123;</span><br><span class="line">            <span class="comment">// 主要内容区域</span></span><br><span class="line">            Text(text = <span class="string">&quot;Hello, Compose!&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        bottomBar = &#123;</span><br><span class="line">            <span class="comment">// 底部导航栏</span></span><br><span class="line">            BottomAppBar(</span><br><span class="line">                content = &#123;</span><br><span class="line">                    <span class="comment">// 底部导航栏的内容</span></span><br><span class="line">                    IconButton(onClick = &#123; <span class="comment">/* Handle bottom bar action click */</span> &#125;) &#123;</span><br><span class="line">                        Icon(Icons.Default.Home, contentDescription = <span class="literal">null</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                backgroundColor = MaterialTheme.colorScheme.primary</span><br><span class="line">            )</span><br><span class="line">        &#125;,</span><br><span class="line">        floatingActionButton = &#123;</span><br><span class="line">            <span class="comment">// 浮动操作按钮</span></span><br><span class="line">            FloatingActionButton(</span><br><span class="line">                onClick = &#123; <span class="comment">/* Handle FAB click */</span> &#125;,</span><br><span class="line">                contentColor = MaterialTheme.colorScheme.primary</span><br><span class="line">            ) &#123;</span><br><span class="line">                Icon(Icons.Default.Add, contentDescription = <span class="literal">null</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        isFloatingActionButtonDocked = <span class="literal">true</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个基本的示例中，<code>Scaffold</code> 包含了一个顶部应用栏、主要内容区域、底部导航栏和一个浮动操作按钮。你可以通过在相应的参数中设置不同的组件和操作来自定义 <code>Scaffold</code>。</p><p>自定义主题：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">CustomThemedScaffold</span><span class="params">()</span></span> &#123;</span><br><span class="line">    MaterialTheme(</span><br><span class="line">        colorScheme = ColorScheme(</span><br><span class="line">            primary = Color.Green,</span><br><span class="line">            secondary = Color.Yellow,</span><br><span class="line">            background = Color.Gray,</span><br><span class="line">            surface = Color.DarkGray,</span><br><span class="line">            onPrimary = Color.Black,</span><br><span class="line">            onSecondary = Color.Black,</span><br><span class="line">            onBackground = Color.White,</span><br><span class="line">            onSurface = Color.White</span><br><span class="line">        )</span><br><span class="line">    ) &#123;</span><br><span class="line">        Scaffold(</span><br><span class="line">            topBar = &#123;</span><br><span class="line">                TopAppBar(</span><br><span class="line">                    title = &#123; Text(text = <span class="string">&quot;Custom Theme&quot;</span>) &#125;,</span><br><span class="line">                    backgroundColor = MaterialTheme.colorScheme.primary</span><br><span class="line">                )</span><br><span class="line">            &#125;,</span><br><span class="line">            content = &#123;</span><br><span class="line">                Text(text = <span class="string">&quot;Hello, Compose!&quot;</span>, color = MaterialTheme.colorScheme.onBackground)</span><br><span class="line">            &#125;,</span><br><span class="line">            bottomBar = &#123;</span><br><span class="line">                BottomAppBar(</span><br><span class="line">                    content = &#123;</span><br><span class="line">                        IconButton(onClick = &#123; <span class="comment">/* Handle bottom bar action click */</span> &#125;) &#123;</span><br><span class="line">                            Icon(Icons.Default.Home, contentDescription = <span class="literal">null</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    backgroundColor = MaterialTheme.colorScheme.primary</span><br><span class="line">                )</span><br><span class="line">            &#125;,</span><br><span class="line">            floatingActionButton = &#123;</span><br><span class="line">                FloatingActionButton(</span><br><span class="line">                    onClick = &#123; <span class="comment">/* Handle FAB click */</span> &#125;,</span><br><span class="line">                    contentColor = MaterialTheme.colorScheme.primary</span><br><span class="line">                ) &#123;</span><br><span class="line">                    Icon(Icons.Default.Add, contentDescription = <span class="literal">null</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            isFloatingActionButtonDocked = <span class="literal">true</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，通过在 <code>MaterialTheme</code> 中设置自定义的颜色方案，可以自定义应用程序的主题。<code>Scaffold</code> 会根据主题中的颜色来渲染应用栏、底部导航栏和浮动操作按钮。</p><p><code>Scaffold</code> 提供了一个简便的方式来组织应用程序的基本结构，使得你可以专注于开发主要内容。你可以通过设置不同的参数和组件来满足应用程序的特定需求。</p><h3 id="ModalNavigationDrawer"><a href="#ModalNavigationDrawer" class="headerlink" title="ModalNavigationDrawer"></a>ModalNavigationDrawer</h3><p>在 Jetpack Compose 中，<code>ModalDrawer</code> 是一个用于实现模态导航抽屉的组件。模态导航抽屉通常用于在屏幕的一侧显示应用程序的导航菜单。以下是关于 <code>ModalDrawer</code> 的一些详细信息和基本使用示例：</p><p>基本使用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OptIn(ExperimentalComposeUiApi::class)</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ModalDrawerExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> drawerState <span class="keyword">by</span> rememberDrawerState(DrawerValue.Closed)</span><br><span class="line">    <span class="keyword">var</span> text <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="string">&quot;Text in main content&quot;</span>) &#125;</span><br><span class="line"></span><br><span class="line">    ModalDrawer(</span><br><span class="line">        drawerState = drawerState,</span><br><span class="line">        gesturesEnabled = drawerState == DrawerValue.Open,</span><br><span class="line">        drawerContent = &#123;</span><br><span class="line">            <span class="comment">// 抽屉内容</span></span><br><span class="line">            Column(</span><br><span class="line">                modifier = Modifier</span><br><span class="line">                    .fillMaxSize()</span><br><span class="line">                    .padding(<span class="number">16.</span>dp)</span><br><span class="line">            ) &#123;</span><br><span class="line">                Text(<span class="string">&quot;Drawer Content&quot;</span>)</span><br><span class="line">                Spacer(modifier = Modifier.height(<span class="number">16.</span>dp))</span><br><span class="line">                Button(onClick = &#123;</span><br><span class="line">                    <span class="comment">// 关闭抽屉</span></span><br><span class="line">                    drawerState = DrawerValue.Closed</span><br><span class="line">                &#125;) &#123;</span><br><span class="line">                    Text(<span class="string">&quot;Close Drawer&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        content = &#123;</span><br><span class="line">            <span class="comment">// 主要内容</span></span><br><span class="line">            Column(</span><br><span class="line">                modifier = Modifier</span><br><span class="line">                    .fillMaxSize()</span><br><span class="line">                    .padding(<span class="number">16.</span>dp)</span><br><span class="line">            ) &#123;</span><br><span class="line">                Text(text)</span><br><span class="line">                Spacer(modifier = Modifier.height(<span class="number">16.</span>dp))</span><br><span class="line">                Button(onClick = &#123;</span><br><span class="line">                    <span class="comment">// 打开抽屉</span></span><br><span class="line">                    drawerState = DrawerValue.Open</span><br><span class="line">                &#125;) &#123;</span><br><span class="line">                    Text(<span class="string">&quot;Open Drawer&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Preview(showBackground = true)</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ModalDrawerExamplePreview</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ModalDrawerExample()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个基本的示例中，通过使用 <code>ModalDrawer</code>，在主要内容区域的一侧实现了一个模态抽屉。通过设置 <code>drawerState</code> 来控制抽屉的打开和关闭状态。抽屉的内容通过在 <code>drawerContent</code> 参数中提供的 <code>Column</code> 中定义。</p><p>自定义抽屉内容：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OptIn(ExperimentalMaterial3Api::class)</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">CustomDrawerContent</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    onDrawerClose: () -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    Column(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .padding(<span class="number">16.</span>dp)</span><br><span class="line">    ) &#123;</span><br><span class="line">        Text(<span class="string">&quot;Custom Drawer Content&quot;</span>)</span><br><span class="line">        Spacer(modifier = Modifier.height(<span class="number">16.</span>dp))</span><br><span class="line">        Button(onClick = &#123;</span><br><span class="line">            <span class="comment">// 关闭抽屉</span></span><br><span class="line">            onDrawerClose()</span><br><span class="line">        &#125;) &#123;</span><br><span class="line">            Text(<span class="string">&quot;Close Drawer&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OptIn(ExperimentalMaterial3Api::class)</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">CustomDrawerExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> drawerState <span class="keyword">by</span> rememberDrawerState(DrawerValue.Closed)</span><br><span class="line">    <span class="keyword">var</span> text <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="string">&quot;Text in main content&quot;</span>) &#125;</span><br><span class="line"></span><br><span class="line">    ModalDrawer(</span><br><span class="line">        drawerState = drawerState,</span><br><span class="line">        gesturesEnabled = drawerState == DrawerValue.Open,</span><br><span class="line">        drawerContent = &#123;</span><br><span class="line">            <span class="comment">// 自定义抽屉内容</span></span><br><span class="line">            CustomDrawerContent(onDrawerClose = &#123;</span><br><span class="line">                drawerState = DrawerValue.Closed</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        content = &#123;</span><br><span class="line">            <span class="comment">// 主要内容</span></span><br><span class="line">            Column(</span><br><span class="line">                modifier = Modifier</span><br><span class="line">                    .fillMaxSize()</span><br><span class="line">                    .padding(<span class="number">16.</span>dp)</span><br><span class="line">            ) &#123;</span><br><span class="line">                Text(text)</span><br><span class="line">                Spacer(modifier = Modifier.height(<span class="number">16.</span>dp))</span><br><span class="line">                Button(onClick = &#123;</span><br><span class="line">                    <span class="comment">// 打开抽屉</span></span><br><span class="line">                    drawerState = DrawerValue.Open</span><br><span class="line">                &#125;) &#123;</span><br><span class="line">                    Text(<span class="string">&quot;Open Drawer&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OptIn(ExperimentalMaterial3Api::class)</span></span><br><span class="line"><span class="meta">@Preview(showBackground = true)</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">CustomDrawerExamplePreview</span><span class="params">()</span></span> &#123;</span><br><span class="line">    CustomDrawerExample()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，通过定义一个自定义的抽屉内容 <code>CustomDrawerContent</code>，使抽屉的内容更具体地展示了自定义的 UI 元素。在 <code>drawerContent</code> 参数中传递 <code>CustomDrawerContent</code>，并在按钮的点击事件中关闭抽屉。</p><p><code>ModalDrawer</code> 提供了简便的方式来实现模态抽屉，它可以灵活地适应各种应用程序的需求。通过在 <code>drawerContent</code> 中使用 Compose 的布局和组件，你可以轻松定制抽屉的外观和功能。</p><h2 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h2><h3 id="Icon"><a href="#Icon" class="headerlink" title="Icon"></a>Icon</h3><p>使用 <code>painterResource</code> 来获取相关的资源，<code>contentDescription</code>是无障碍中对于 Icon 的描述</p><p>以下是一些基本的 <code>Icon</code> 使用示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Icon(imageVector = ImageVector.vectorResource(</span><br><span class="line">    id = R.drawable.ic_svg, contentDescription = <span class="string">&quot;矢量图资源&quot;</span>)</span><br><span class="line">  </span><br><span class="line">Icon(bitmap = ImageBitmap.imageResource(</span><br><span class="line">    id = R.drawable.ic_png), contentDescription = <span class="string">&quot;图片资源&quot;</span>)</span><br><span class="line">    </span><br><span class="line">Icon(painter = painterResource(</span><br><span class="line">    id = R.drawable.ic_both), contentDescription = <span class="string">&quot;任意类型资源&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><p>在 Jetpack Compose 中，<code>Image</code> 是用于显示图像的组件。它可以显示来自不同来源的图像，例如矢量图形、位图、网络图像等。以下是一些关于 <code>Image</code> 的详细信息和使用示例：</p><p>显示本地资源图像：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Image(</span><br><span class="line">    painter = painterResource(id = R.drawable.ic_launcher_foreground),</span><br><span class="line">    contentDescription = <span class="string">&quot;App Icon&quot;</span>,</span><br><span class="line">    modifier = Modifier.size(<span class="number">100.</span>dp)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这个例子中，<code>painterResource</code> 函数用于从本地资源中加载图像，<code>contentDescription</code> 提供了对图像的文本描述，而 <code>modifier</code> 则用于设置图像的大小。</p><p>显示网络图像：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Image(</span><br><span class="line">    painter = rememberImagePainter(</span><br><span class="line">        <span class="keyword">data</span> = <span class="string">&quot;https://example.com/image.jpg&quot;</span>,</span><br><span class="line">        builder = &#123;</span><br><span class="line">            crossfade(<span class="literal">true</span>)</span><br><span class="line">            placeholder(R.drawable.placeholder)</span><br><span class="line">            error(R.drawable.error)</span><br><span class="line">        &#125;</span><br><span class="line">    ),</span><br><span class="line">    contentDescription = <span class="string">&quot;Network Image&quot;</span>,</span><br><span class="line">    modifier = Modifier.size(<span class="number">200.</span>dp)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>rememberImagePainter</code> 函数用于从网络加载图像。它支持一些额外的选项，如交叉淡入淡出效果、占位符和错误图像。这样的构建器提供了更多的控制权。</p><p>使用不同的 ContentScale：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Image(</span><br><span class="line">    painter = painterResource(id = R.drawable.image),</span><br><span class="line">    contentDescription = <span class="string">&quot;Scaled Image&quot;</span>,</span><br><span class="line">    contentScale = ContentScale.Crop,</span><br><span class="line">    modifier = Modifier.fillMaxWidth().height(<span class="number">200.</span>dp)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>ContentScale</code> 参数用于指定图像的缩放方式。<code>ContentScale.Crop</code> 会裁剪图像以填充目标框，而 <code>ContentScale.FillBounds</code> 会将图像缩放以填充目标框，保持其宽高比。</p><p>使用不同的加载方式：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Image(</span><br><span class="line">    painter = rememberCoilPainter(request = <span class="string">&quot;https://example.com/image.jpg&quot;</span>),</span><br><span class="line">    contentDescription = <span class="string">&quot;Coil Image&quot;</span>,</span><br><span class="line">    modifier = Modifier.size(<span class="number">150.</span>dp)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>rememberCoilPainter</code> 函数用于从网络加载图像，它是 Coil 图片加载库的一部分。Jetpack Compose 与 Coil 集成良好，可以通过 <code>rememberCoilPainter</code> 等函数方便地加载网络图像。</p><p>总体而言，<code>Image</code> 是 Jetpack Compose 中用于显示图像的主要组件，它支持各种来源的图像，并提供了多种选项，以满足不同应用场景的需求。</p><h3 id="Card"><a href="#Card" class="headerlink" title="Card"></a>Card</h3><p>在 Jetpack Compose 中，<code>Card</code> 是用于创建卡片样式的组件。卡片通常用于将相关的内容组织在一起，并提供一种清晰的界面结构。以下是一些关于 <code>Card</code> 的详细信息和使用示例：</p><p>基本使用：</p><p>注意 card 和 suface 不同的是背景颜色设置在内置的元素，而 suface 需要设置在自己的 color 的属性里面，以及它们两个的布局逻辑也不太一样</p><p>注意下面的 elevation 踩坑了，设置之后没有任何的阴影出现，而且发现 elevation 的功能少，只能用黑色阴影，相反 .shadow 能够设置的内容就更多</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Card(</span><br><span class="line">    <span class="comment">// elevation = CardDefaults.cardElevation(defaultElevation = 5.dp), //注意 elevation 的写法，现在好了不用注意了，直接送走这位属性</span></span><br><span class="line">    modifier = Modifier</span><br><span class="line">        .padding(top = <span class="number">20.</span>dp)</span><br><span class="line">        .padding(horizontal = <span class="number">10.</span>dp)</span><br><span class="line">  <span class="comment">//.clip(shape = MaterialTheme.shapes.large)</span></span><br><span class="line">  .shadow(<span class="number">25.</span>dp,RoundedCornerShape(<span class="number">20.</span>dp))</span><br><span class="line">        .clip(shape = RoundedCornerShape(<span class="number">20.</span>dp))</span><br><span class="line">        .fillMaxWidth()</span><br><span class="line">) &#123;</span><br><span class="line">    Row(</span><br><span class="line">        horizontalArrangement = Arrangement.SpaceBetween,</span><br><span class="line">        verticalAlignment = Alignment.CenterVertically,</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .background(color = colorResource(id = R.color.danHui))</span><br><span class="line">            .padding(<span class="number">10.</span>dp)</span><br><span class="line">            .fillMaxWidth()</span><br><span class="line">    ) &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个例子中，<code>Card</code> 包裹了一个 <code>Text</code> 组件，通过设置 <code>modifier</code> 可以调整卡片的大小和边距，<code>elevation</code> 参数用于指定卡片的海拔高度，以添加阴影效果。<code>clip</code> 参数实现圆角效果。</p><p>卡片与图片：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Card(</span><br><span class="line">    modifier = Modifier</span><br><span class="line">        .fillMaxWidth()</span><br><span class="line">        .padding(<span class="number">16.</span>dp),</span><br><span class="line">    elevation = <span class="number">8.</span>dp</span><br><span class="line">) &#123;</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .height(<span class="number">200.</span>dp)</span><br><span class="line">            .fillMaxWidth()</span><br><span class="line">    ) &#123;</span><br><span class="line">        Image(</span><br><span class="line">            painter = painterResource(id = R.drawable.image),</span><br><span class="line">            contentDescription = <span class="string">&quot;Card Image&quot;</span>,</span><br><span class="line">            contentScale = ContentScale.Crop,</span><br><span class="line">            modifier = Modifier.fillMaxSize()</span><br><span class="line">        )</span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">&quot;Image Title&quot;</span>,</span><br><span class="line">            color = Color.White,</span><br><span class="line">            fontSize = <span class="number">20.</span>sp,</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .padding(<span class="number">16.</span>dp)</span><br><span class="line">                .align(Alignment.BottomStart)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Card</code> 包含一个带有图片的 <code>Box</code>，通过调整 <code>modifier</code> 设置图片的高度、填充整个宽度。通过在 <code>Box</code> 中添加 <code>Text</code>，可以在图片上叠加标题。</p><p>Card 嵌套使用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Card(</span><br><span class="line">    modifier = Modifier</span><br><span class="line">        .fillMaxWidth()</span><br><span class="line">        .padding(<span class="number">16.</span>dp),</span><br><span class="line">    elevation = <span class="number">8.</span>dp</span><br><span class="line">) &#123;</span><br><span class="line">    Card(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxWidth()</span><br><span class="line">            .padding(<span class="number">16.</span>dp),</span><br><span class="line">        elevation = <span class="number">4.</span>dp</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">// 内部卡片的内容</span></span><br><span class="line">        Text(<span class="string">&quot;Nested Card Content&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Card</code> 组件可以嵌套使用，这样你可以创建更为复杂的布局结构，例如卡片内部包含另一个卡片。</p><p>使用点击事件：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isCardExpanded <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="literal">false</span>) &#125;</span><br><span class="line"></span><br><span class="line">Card(</span><br><span class="line">    modifier = Modifier</span><br><span class="line">        .fillMaxWidth()</span><br><span class="line">        .padding(<span class="number">16.</span>dp)</span><br><span class="line">        .clickable &#123; isCardExpanded = !isCardExpanded &#125;,</span><br><span class="line">    elevation = <span class="number">8.</span>dp</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// 卡片内容</span></span><br><span class="line">    <span class="keyword">if</span> (isCardExpanded) &#123;</span><br><span class="line">        Text(<span class="string">&quot;Expanded Card Content&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Text(<span class="string">&quot;Collapsed Card Content&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过在 <code>Card</code> 的 <code>modifier</code> 中添加 <code>clickable</code>，你可以为卡片添加点击事件。在上面的例子中，点击卡片时切换卡片内容的展开和折叠状态。</p><p>总的来说，<code>Card</code> 是 Jetpack Compose 中用于创建卡片样式的主要组件，它提供了许多选项，以满足不同应用场景下的需求，同时可以通过嵌套使用和添加点击事件等方式实现更为复杂的交互和布局。</p><h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><p><code>Text</code> 是 Jetpack Compose 中用于显示文本的组件。它允许你以声明式的方式定义和呈现文本内容。以下是一些关于 <code>Text</code> 的详细信息和使用示例：</p><p>基本使用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Text(<span class="string">&quot;Hello, Compose!&quot;</span>)</span><br></pre></td></tr></table></figure><p>在这个基本的示例中，<code>Text</code> 组件显示了一个简单的文本内容：”Hello, Compose!”。</p><p>设置文本样式：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Text(</span><br><span class="line">    <span class="string">&quot;Styled Text&quot;</span>,</span><br><span class="line">    fontSize = <span class="number">20.</span>sp,</span><br><span class="line">    fontWeight = FontWeight.Bold,</span><br><span class="line">    color = Color.Blue</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>Text</code> 组件允许你设置多种文本样式，包括字体大小 (<code>fontSize</code>)、字体粗细 (<code>fontWeight</code>)、颜色 (<code>color</code>) 等。在这个例子中，文本的字体大小为 20sp，字体粗细为粗体，颜色为蓝色。</p><p>使用字符串模板：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> name = <span class="string">&quot;John&quot;</span></span><br><span class="line">Text(<span class="string">&quot;Hello, <span class="variable">$name</span>!&quot;</span>)</span><br></pre></td></tr></table></figure><p>你可以使用字符串模板来在文本中插入变量。在这个例子中，变量 <code>name</code> 的值会被插入到文本中。</p><p>设置对齐方式：</p><p>当我们在 <code>Text</code> 中设置了 <code>fillMaxWidth()</code> 之后？，我们可以指定 <code>Text</code> 的对齐方式</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Text(</span><br><span class="line">    <span class="string">&quot;Centered Text&quot;</span>,</span><br><span class="line">    textAlign = TextAlign.Center</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>通过 <code>textAlign</code> 属性，你可以设置文本的对齐方式。在这个例子中，文本被居中对齐。</p><p>多行文本：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Text(</span><br><span class="line">    <span class="string">&quot;This is a long text that may span multiple lines. &quot;</span> +</span><br><span class="line">            <span class="string">&quot;It demonstrates how to use the Text component for displaying multiline text.&quot;</span>,</span><br><span class="line">    maxLines = <span class="number">3</span>,</span><br><span class="line">    overflow = TextOverflow.Ellipsis</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如果文本内容很长，你可以使用 <code>maxLines</code> 属性限制显示的最大行数，并通过 <code>overflow</code> 属性设置溢出文本的处理方式。在这个例子中，文本最多显示 3 行，多余的文本用省略号表示。</p><p>使用 AnnotatedString 进行富文本：</p><p>也就是一行字的样式不同，我觉得还是手写两个 text 比较好</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> styledText = buildAnnotatedString &#123;</span><br><span class="line">    withStyle(style = SpanStyle(fontWeight = FontWeight.Bold, color = Color.Red)) &#123;</span><br><span class="line">        append(<span class="string">&quot;Bold and Red&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    append(<span class="string">&quot; Regular Text &quot;</span>)</span><br><span class="line">    withStyle(style = SpanStyle(textDecoration = TextDecoration.LineThrough)) &#123;</span><br><span class="line">        append(<span class="string">&quot;Strikethrough&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Text(text = styledText)</span><br></pre></td></tr></table></figure><p>通过使用 <code>AnnotatedString</code>，你可以实现富文本效果。在这个例子中，一部分文本被设置为粗体红色，一部分被设置为带有删除线的文本。</p><p>总体来说，<code>Text</code> 是 Jetpack Compose 中用于显示文本的核心组件。它提供了丰富的属性，使得你可以轻松地控制文本的样式、对齐方式等，同时支持富文本效果。</p><h3 id="FloatingActionButton"><a href="#FloatingActionButton" class="headerlink" title="FloatingActionButton"></a>FloatingActionButton</h3><p><code>FloatingActionButton</code> 是 Jetpack Compose 中用于创建浮动操作按钮的组件。浮动操作按钮通常用于显示应用中的主要操作，并且通常位于屏幕的底部右侧。以下是一些关于 <code>FloatingActionButton</code> 的详细信息和使用示例：</p><p>基本使用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">BasicFABExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    FloatingActionButton(</span><br><span class="line">        onClick = &#123; <span class="comment">/* 处理点击事件 */</span> &#125;,</span><br><span class="line">        contentColor = MaterialTheme.colorScheme.primary</span><br><span class="line">    ) &#123;</span><br><span class="line">        Icon(imageVector = Add, contentDescription = <span class="literal">null</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个基本的示例中，<code>FloatingActionButton</code> 包含了一个点击事件的处理程序，并且包含了一个加号图标。</p><p>自定义颜色和形状：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">CustomFABExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    FloatingActionButton(</span><br><span class="line">        onClick = &#123; <span class="comment">/* 处理点击事件 */</span> &#125;,</span><br><span class="line">        contentColor = MaterialTheme.colorScheme.secondary,</span><br><span class="line">        backgroundColor = MaterialTheme.colorScheme.primary,</span><br><span class="line">        shape = MaterialTheme.shapes.medium</span><br><span class="line">    ) &#123;</span><br><span class="line">        Icon(imageVector = Add, contentDescription = <span class="literal">null</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <code>contentColor</code> 和 <code>backgroundColor</code> 属性，你可以自定义浮动操作按钮的前景和背景颜色。<code>shape</code> 属性用于定义按钮的形状。</p><p>在底部应用栏中使用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">FABInBottomAppBarExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    BottomAppBar(</span><br><span class="line">        fabConfiguration = BottomAppBar.FabConfiguration(</span><br><span class="line">            position = FabPosition.End</span><br><span class="line">        )</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">// 底部应用栏的内容</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FloatingActionButton(</span><br><span class="line">        onClick = &#123; <span class="comment">/* 处理点击事件 */</span> &#125;,</span><br><span class="line">        contentColor = MaterialTheme.colorScheme.primary</span><br><span class="line">    ) &#123;</span><br><span class="line">        Icon(imageVector = Add, contentDescription = <span class="literal">null</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在底部应用栏中使用 <code>FloatingActionButton</code> 时，你可以通过 <code>fabConfiguration</code> 属性设置按钮的位置。在这个例子中，按钮位于底部应用栏的右侧。</p><p>使用动画效果：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">AnimatedFABExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> fabTransition = transitionDefinition&lt;<span class="built_in">Boolean</span>&gt; &#123;</span><br><span class="line">        state(<span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>[translationY] = <span class="number">0.</span>dp</span><br><span class="line">        &#125;</span><br><span class="line">        state(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>[translationY] = (-<span class="number">16</span>).dp</span><br><span class="line">        &#125;</span><br><span class="line">        transition &#123;</span><br><span class="line">            translationY using tween(<span class="number">300</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> fabState <span class="keyword">by</span> transitionAsState(fabTransition, targetState = <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    Box &#123;</span><br><span class="line">        FloatingActionButton(</span><br><span class="line">            onClick = &#123; <span class="comment">/* 处理点击事件 */</span> &#125;,</span><br><span class="line">            contentColor = MaterialTheme.colorScheme.primary,</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .translationY(fabState[translationY])</span><br><span class="line">        ) &#123;</span><br><span class="line">            Icon(imageVector = Add, contentDescription = <span class="literal">null</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，通过使用 <code>transitionDefinition</code> 和动画效果，你可以在 <code>FloatingActionButton</code> 上应用一个简单的上下动画。</p><p><code>FloatingActionButton</code> 提供了很多自定义的选项，包括颜色、形状、位置等，使得你可以根据你的设计需求轻松定制。在实际应用中，根据设计规范和用户体验需求选择合适的样式和位置。</p><h3 id="Divider"><a href="#Divider" class="headerlink" title="Divider"></a>Divider</h3><p><code>Divider</code> 是 Jetpack Compose 中用于创建分隔线的组件。它通常用于在布局中分隔不同的部分或列表项。以下是一些关于 <code>Divider</code> 的详细信息和使用示例：</p><p>基本使用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">BasicDividerExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Divider(</span><br><span class="line">        modifier = Modifier.fillMaxWidth()</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个基本的示例中，<code>Divider</code> 组件被用于创建一条横跨整个宽度的分隔线。</p><p>设置颜色和高度：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">CustomDividerExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Divider(</span><br><span class="line">        modifier = Modifier.fillMaxWidth(),</span><br><span class="line">        color = Color.Gray,</span><br><span class="line">        thickness = <span class="number">2.</span>dp</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以通过 <code>color</code> 属性设置分隔线的颜色，通过 <code>thickness</code> 属性设置分隔线的厚度。</p><p>垂直分隔线：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> androidx.compose.foundation.layout.fillMaxHeight</span><br><span class="line"><span class="keyword">import</span> androidx.compose.material3.Divider</span><br><span class="line"><span class="keyword">import</span> androidx.compose.runtime.Composable</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">VerticalDividerExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Divider(</span><br><span class="line">        modifier = Modifier.fillMaxHeight()</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你需要垂直的分隔线，可以使用 <code>fillMaxHeight()</code> 修饰符。</p><p>自定义分隔线样式：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">CustomStyleDividerExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Divider(</span><br><span class="line">        modifier = Modifier.fillMaxWidth(),</span><br><span class="line">        color = MaterialTheme.colorScheme.secondary,</span><br><span class="line">        thickness = <span class="number">4.</span>dp,</span><br><span class="line">        startIndent = <span class="number">16.</span>dp,</span><br><span class="line">        endIndent = <span class="number">16.</span>dp</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过设置 <code>startIndent</code> 和 <code>endIndent</code> 属性，你可以指定分隔线的起始和结束缩进。</p><p>总体来说，<code>Divider</code> 是一个简单但功能强大的组件，用于在 Compose 中创建分隔线，提供了丰富的属性来满足不同场景下的分隔需求。</p><h3 id="CheckBox"><a href="#CheckBox" class="headerlink" title="CheckBox"></a>CheckBox</h3><p><code>CheckBox</code> 是 Jetpack Compose 中用于创建复选框的组件。复选框允许用户选择或取消选择一个或多个项目。以下是一些关于 <code>CheckBox</code> 的详细信息和使用示例：</p><p>基本使用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">BasicCheckBoxExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> checked <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="literal">false</span>) &#125;</span><br><span class="line"></span><br><span class="line">    Checkbox(</span><br><span class="line">        checked = checked,</span><br><span class="line">        onCheckedChange = &#123; isChecked -&gt;</span><br><span class="line">            checked = isChecked</span><br><span class="line">        &#125;,</span><br><span class="line">        modifier = Modifier.padding(<span class="number">16.</span>dp),</span><br><span class="line">        colors = CheckboxDefaults.colors(checkmarkColor = MaterialTheme.colorScheme.secondary)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个基本的示例中，<code>Checkbox</code> 组件用于创建一个基本的复选框。通过 <code>checked</code> 属性和 <code>onCheckedChange</code> 回调，你可以控制复选框的状态。</p><p>使用样式和颜色：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">StyledCheckBoxExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Checkbox(</span><br><span class="line">        checked = <span class="literal">true</span>,</span><br><span class="line">        onCheckedChange = &#123; <span class="comment">/* Handle checked state */</span> &#125;,</span><br><span class="line">        modifier = Modifier.padding(<span class="number">16.</span>dp),</span><br><span class="line">        colors = CheckboxDefaults.colors(</span><br><span class="line">            checkedColor = MaterialTheme.colorScheme.secondary,</span><br><span class="line">            uncheckedColor = MaterialTheme.colorScheme.primary</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用 <code>colors</code> 属性，你可以自定义复选框的颜色，包括选中状态和未选中状态的颜色。</p><p>禁用状态：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">DisabledCheckBoxExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Checkbox(</span><br><span class="line">        checked = <span class="literal">false</span>,</span><br><span class="line">        onCheckedChange = &#123; <span class="comment">/* Handle checked state */</span> &#125;,</span><br><span class="line">        enabled = <span class="literal">false</span>,</span><br><span class="line">        modifier = Modifier.padding(<span class="number">16.</span>dp),</span><br><span class="line">        colors = CheckboxDefaults.colors(</span><br><span class="line">            checkedColor = MaterialTheme.colorScheme.secondary,</span><br><span class="line">            uncheckedColor = MaterialTheme.colorScheme.primary</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过设置 <code>enabled</code> 属性为 <code>false</code>，你可以禁用复选框，使其变为不可点击状态。</p><p>配合文本使用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">CheckBoxWithTextExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> checked <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="literal">false</span>) &#125;</span><br><span class="line"></span><br><span class="line">    Row(</span><br><span class="line">        modifier = Modifier.clickable &#123;</span><br><span class="line">            checked = !checked</span><br><span class="line">        &#125;</span><br><span class="line">    ) &#123;</span><br><span class="line">        Checkbox(</span><br><span class="line">            checked = checked,</span><br><span class="line">            onCheckedChange = &#123; isChecked -&gt;</span><br><span class="line">                checked = isChecked</span><br><span class="line">            &#125;,</span><br><span class="line">            modifier = Modifier.padding(<span class="number">16.</span>dp),</span><br><span class="line">            colors = CheckboxDefaults.colors(checkmarkColor = MaterialTheme.colorScheme.secondary)</span><br><span class="line">        )</span><br><span class="line">        Text(text = <span class="string">&quot;Agree to terms and conditions&quot;</span>, modifier = Modifier.padding(<span class="number">16.</span>dp))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Checkbox</code> 与 <code>Text</code> 组件一起使用，创建了一个带有文本标签的复选框。通过在外部容器上使用 <code>clickable</code> 修饰符，你可以使整个行可点击。</p><p>这些示例展示了 <code>Checkbox</code> 在 Jetpack Compose 中的基本用法和一些自定义选项。你可以根据具体的需求来配置颜色、样式以及与其他组件的结合使用。</p><h3 id="AnimatedVisibility"><a href="#AnimatedVisibility" class="headerlink" title="AnimatedVisibility"></a>AnimatedVisibility</h3><p>在 Jetpack Compose 中，使用动画效果可以为用户界面增添生动感和交互性。以下是一个简单的例子，演示如何使用动画效果来创建一个基本的淡入淡出效果：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">AnimatedExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> visible <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="literal">true</span>) &#125;</span><br><span class="line"></span><br><span class="line">    Column(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .padding(<span class="number">16.</span>dp)</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">// 切换按钮</span></span><br><span class="line">        Button(</span><br><span class="line">            onClick = &#123; visible = !visible &#125;,</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .fillMaxWidth()</span><br><span class="line">                .padding(<span class="number">8.</span>dp)</span><br><span class="line">        ) &#123;</span><br><span class="line">            Text(<span class="keyword">if</span> (visible) <span class="string">&quot;Hide&quot;</span> <span class="keyword">else</span> <span class="string">&quot;Show&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用动画效果的图标</span></span><br><span class="line">        AnimatedVisibility(visible = visible) &#123;</span><br><span class="line">            Icon(</span><br><span class="line">                painter = painterResource(id = R.drawable.ic_launcher_foreground),</span><br><span class="line">                contentDescription = <span class="literal">null</span>,</span><br><span class="line">                modifier = Modifier</span><br><span class="line">                    .size(<span class="number">100.</span>dp)</span><br><span class="line">                    .padding(<span class="number">8.</span>dp)</span><br><span class="line">                    .graphicsLayer(</span><br><span class="line">                        alpha = <span class="keyword">if</span> (visible) <span class="number">1f</span> <span class="keyword">else</span> <span class="number">0f</span>, <span class="comment">// 透明度动画</span></span><br><span class="line">                        scaleX = <span class="keyword">if</span> (visible) <span class="number">1f</span> <span class="keyword">else</span> <span class="number">0.5f</span>, <span class="comment">// X轴缩放动画</span></span><br><span class="line">                        scaleY = <span class="keyword">if</span> (visible) <span class="number">1f</span> <span class="keyword">else</span> <span class="number">0.5f</span> <span class="comment">// Y轴缩放动画</span></span><br><span class="line">                    )</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用动画效果的文本</span></span><br><span class="line">        AnimatedVisibility(</span><br><span class="line">            visible = visible,</span><br><span class="line">            enter = fadeIn() + slideInVertically(),</span><br><span class="line">            exit = fadeOut() + slideOutVertically()</span><br><span class="line">        ) &#123;</span><br><span class="line">            Text(</span><br><span class="line">                text = <span class="string">&quot;Hello, Compose!&quot;</span>,</span><br><span class="line">                style = MaterialTheme.typography.h5,</span><br><span class="line">                modifier = Modifier</span><br><span class="line">                    .padding(<span class="number">8.</span>dp)</span><br><span class="line">                    .background(Color.Gray, RoundedCornerShape(<span class="number">8.</span>dp))</span><br><span class="line">                    .padding(<span class="number">16.</span>dp)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，通过 <code>AnimatedVisibility</code> 自定义了一个带有动画效果的可见性组件，并使用了一些基本的动画效果函数，如 <code>fadeIn()</code>、<code>fadeOut()</code>、<code>slideInVertically()</code>、<code>slideOutVertically()</code>、<code>expandIn()</code> 和 <code>shrinkOut()</code>。</p><p>这个例子包含了以下动画效果：</p><ul><li>图标的淡入淡出和缩放效果。</li><li>文本的淡入淡出、上下滑动和伸缩效果。</li></ul><p>你可以根据自己的需求使用不同的动画效果函数，也可以创建自定义的动画效果来实现更复杂的交互效果。Jetpack Compose 提供了丰富的动画支持，让你能够轻松地为应用添加生动和引人注目的用户界面。</p><h3 id="CircularProgressIndicator"><a href="#CircularProgressIndicator" class="headerlink" title="CircularProgressIndicator"></a>CircularProgressIndicator</h3><p><code>CircularProgressIndicator</code> 是 Jetpack Compose 中用于显示圆形进度指示器的组件。它通常用于表示某个任务正在进行中。以下是一些关于 <code>CircularProgressIndicator</code> 的详细信息和使用示例：</p><p>基本使用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">BasicCircularProgressIndicator</span><span class="params">()</span></span> &#123;</span><br><span class="line">    CircularProgressIndicator(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .size(<span class="number">50.</span>dp)</span><br><span class="line">            .padding(<span class="number">16.</span>dp),</span><br><span class="line">        color = MaterialTheme.colorScheme.primary</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个基本的示例中，<code>CircularProgressIndicator</code> 显示一个默认样式的圆形进度指示器。通过设置 <code>modifier</code> 属性，你可以调整指示器的大小和位置，通过设置 <code>color</code> 属性，你可以自定义指示器的颜色。</p><p>指定进度值：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">DeterminateCircularProgressIndicator</span><span class="params">(progress: <span class="type">Float</span>)</span></span> &#123;</span><br><span class="line">    CircularProgressIndicator(</span><br><span class="line">        progress = progress,</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .size(<span class="number">50.</span>dp)</span><br><span class="line">            .padding(<span class="number">16.</span>dp),</span><br><span class="line">        color = MaterialTheme.colorScheme.primary</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你希望显示特定进度的圆形进度指示器，可以使用 <code>progress</code> 属性。该属性接受一个介于 0 到 1 之间的浮点数，表示进度的百分比。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 Composable 中使用</span></span><br><span class="line">DeterminanteCircularProgressIndicator(progress = <span class="number">0.5f</span>)</span><br></pre></td></tr></table></figure><p>不确定进度：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">IndeterminateCircularProgressIndicator</span><span class="params">()</span></span> &#123;</span><br><span class="line">    CircularProgressIndicator(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .size(<span class="number">50.</span>dp)</span><br><span class="line">            .padding(<span class="number">16.</span>dp),</span><br><span class="line">        color = MaterialTheme.colorScheme.primary,</span><br><span class="line">        isIndeterminate = <span class="literal">true</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你不知道任务的确切进度，可以将 <code>isIndeterminate</code> 属性设置为 <code>true</code>，以显示不确定进度的圆形进度指示器。这时，<code>progress</code> 属性将被忽略。</p><p>自定义样式：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">CustomCircularProgressIndicator</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Surface(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .background(Color.Gray),</span><br><span class="line">        contentColor = Color.White</span><br><span class="line">    ) &#123;</span><br><span class="line">        Column(</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .fillMaxSize()</span><br><span class="line">                .padding(<span class="number">16.</span>dp),</span><br><span class="line">            verticalArrangement = Arrangement.Center,</span><br><span class="line">            horizontalAlignment = Alignment.CenterHorizontally</span><br><span class="line">        ) &#123;</span><br><span class="line">            CircularProgressIndicator(</span><br><span class="line">                modifier = Modifier</span><br><span class="line">                    .size(<span class="number">50.</span>dp)</span><br><span class="line">                    .padding(<span class="number">16.</span>dp),</span><br><span class="line">                color = MaterialTheme.colorScheme.secondary</span><br><span class="line">            )</span><br><span class="line">            CircularProgressIndicator(</span><br><span class="line">                modifier = Modifier</span><br><span class="line">                    .size(<span class="number">50.</span>dp)</span><br><span class="line">                    .padding(<span class="number">16.</span>dp),</span><br><span class="line">                color = MaterialTheme.colorScheme.secondary,</span><br><span class="line">                progress = <span class="number">0.5f</span></span><br><span class="line">            )</span><br><span class="line">            CircularProgressIndicator(</span><br><span class="line">                modifier = Modifier</span><br><span class="line">                    .size(<span class="number">50.</span>dp)</span><br><span class="line">                    .padding(<span class="number">16.</span>dp),</span><br><span class="line">                color = MaterialTheme.colorScheme.secondary,</span><br><span class="line">                isIndeterminate = <span class="literal">true</span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，通过设置不同的 <code>color</code>、<code>progress</code> 和 <code>isIndeterminate</code> 属性，展示了不同样式的圆形进度指示器。</p><p><code>CircularProgressIndicator</code> 是一个非常灵活的组件，可以根据需求进行定制。你可以调整大小、颜色、进度和样式，以满足设计和用户体验的要求。</p><h2 id="基础属性"><a href="#基础属性" class="headerlink" title="基础属性"></a>基础属性</h2><h3 id="Modifier"><a href="#Modifier" class="headerlink" title="Modifier"></a>Modifier</h3><p>在Jetpack Compose中，<code>Modifier</code> 是一种用于修改组件（如布局或绘制元素）行为或外观的强大工具。通过 <code>Modifier</code>，你可以指定诸如大小、颜色、填充、点击处理等属性，从而定制组件的外观和交互。</p><p>以下是一些常见的 <code>Modifier</code> 的使用示例：</p><ol><li><p><strong>设置大小：</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Modifier.size(<span class="number">50.</span>dp)</span><br></pre></td></tr></table></figure><p>这将组件的大小设置为 <code>50.dp</code>。</p></li><li><p><strong>设置边距：</strong></p><p>在 Compose 中，Margin 和 Padding 都用 Modifier.padding() 来设置。在 padding 和 margin 的区别最主要的就是在于背景色的设置。</p><p>边距需要注意，compose 并不存在 margin 属性 ，当只使用一个 padding 时，这个padding就是外边距，在background 后面的 padding 会作为内布局</p><p>并且一定要写在height和width前面不然会不起作用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Modifier.padding(<span class="number">16.</span>dp)</span><br><span class="line">Modifier.padding(vertical = <span class="number">16.</span>dp)</span><br></pre></td></tr></table></figure><p>这将在组件周围添加 <code>16.dp</code> 的内边距以及竖直方向添加 <code>16.dp</code>。</p></li><li><p><strong>设置颜色：</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Modifier.background(colorResource(id = R.color.zi))</span><br></pre></td></tr></table></figure><p>这将为组件设置蓝色的背景。</p></li><li><p><strong>设置点击处理：</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Modifier.clickable &#123; <span class="comment">/* 处理点击事件的逻辑 */</span> &#125;</span><br></pre></td></tr></table></figure><p>这将使组件可点击，并在点击时执行指定的逻辑。</p></li><li><p><strong>设置居中对齐：</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Modifier.align(Alignment.Center)</span><br></pre></td></tr></table></figure><p>这将使组件在其父组件中居中对齐。</p></li><li><p><strong>设置边框：</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Modifier.border(<span class="number">1.</span>dp, Color.Gray)</span><br></pre></td></tr></table></figure><p>这将为组件添加一个 <code>1.dp</code> 宽度、灰色的边框。</p></li><li><p><strong>设置偏移：</strong></p><p>在 Jetpack Compose 中，<code>Offset</code> 是一个用于表示二维平面上的偏移量的数据类。它通常用于指定在屏幕上或在父组件内的位置。<code>Offset</code> 有两个属性，分别是 <code>x</code> 和 <code>y</code>，分别表示水平和垂直方向上的偏移。</p><p>以下是一个简单的示例，演示如何在 Compose 中使用 <code>Offset</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">OffsetExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .size(<span class="number">100.</span>dp)</span><br><span class="line">            .background(MaterialTheme.colorScheme.primary)</span><br><span class="line">            .offset(<span class="number">50.</span>dp, <span class="number">30.</span>dp)</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">// Box 中的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Box</code> 组件的 <code>offset</code> 属性被用来指定这个 <code>Box</code> 相对于其正常位置的偏移量。在这里，<code>x</code> 设置为 <code>50.dp</code>，表示向右偏移 50 个设备独立像素（Density Independent Pixels，dp），而 <code>y</code> 设置为 <code>30.dp</code>，表示向下偏移 30 个 dp。</p><p>需要注意的是，在 Compose 中使用 <code>offset</code> 可以接受两个参数，分别是水平方向和垂直方向的偏移量。这使得在组合中轻松实现元素的相对位置调整成为可能。</p><p>如果你需要在不同的屏幕密度下使用像素而不是 dp，你可以使用 <code>with(LocalDensity.current)</code> 来获取当前的 <code>Density</code> 并进行转换：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">OffsetWithPixelExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> density = LocalDensity.current.density</span><br><span class="line">    <span class="keyword">val</span> offsetX = with(LocalDensity.current) &#123; <span class="number">50.</span>dp.toPx() / density &#125;</span><br><span class="line">    <span class="keyword">val</span> offsetY = with(LocalDensity.current) &#123; <span class="number">30.</span>dp.toPx() / density &#125;</span><br><span class="line"></span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .size(<span class="number">100.</span>dp)</span><br><span class="line">            .background(MaterialTheme.colorScheme.primary)</span><br><span class="line">            .offset(offsetX.dp, offsetY.dp)</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">// Box 中的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>offsetX</code> 和 <code>offsetY</code> 表示在像素中的偏移量，而 <code>toPx()</code> 函数用于将 dp 转换为像素。在设置 <code>offset</code> 时，使用 <code>dp</code> 单位即可。</p></li><li><p><strong>设置占比：</strong></p><p><code>Modifier.weight</code> 是用于在Jetpack Compose中分配相对空间的功能。它主要用于 <code>Column</code> 或 <code>Row</code> 这样的布局组件中，允许你指定子元素在可用空间中的相对权重。这样，你可以创建动态的、响应式的布局，使其中一个子元素占据更多或更少的空间。</p><p>使用示例：</p><p>以下是一个简单的示例，演示如何在 <code>Column</code> 中使用 <code>Modifier.weight</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Column &#123;</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .height(<span class="number">100.</span>dp)</span><br><span class="line">            .fillMaxWidth()</span><br><span class="line">            .background(Color.Blue)</span><br><span class="line">            .weight(<span class="number">1f</span>) <span class="comment">// 子元素 1 占据剩余空间的一半</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">// 子元素 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .height(<span class="number">100.</span>dp)</span><br><span class="line">            .fillMaxWidth()</span><br><span class="line">            .background(Color.Red)</span><br><span class="line">            .weight(<span class="number">2f</span>) <span class="comment">// 子元素 2 占据剩余空间的两倍</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">// 子元素 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Column</code> 包含两个 <code>Box</code>，通过 <code>weight</code> 设置它们的相对权重。第一个 <code>Box</code> 的权重为1，第二个 <code>Box</code> 的权重为2，因此第二个 <code>Box</code> 将占据比第一个 <code>Box</code> 更多的空间。</p><p>适用场景：</p><ul><li><p><strong>动态布局：</strong> 在需要根据数据或屏幕尺寸动态调整子元素大小的情况下，使用 <code>Modifier.weight</code> 是很有用的。</p></li><li><p><strong>比例分配：</strong> 当你希望在父布局中以一定比例分配空间给子元素时，可以使用权重来定义这些比例。</p></li><li><p><strong>响应式设计：</strong> 在设计响应式用户界面时，<code>Modifier.weight</code> 可以帮助你实现不同屏幕尺寸下的灵活布局。</p></li></ul></li><li><p><strong>设置圆角：</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Modifier.clip(RoundedCornerShape(<span class="number">16.</span>dp))</span><br></pre></td></tr></table></figure><p>这将为组件添加一个 <code>16.dp</code> 的圆角。</p></li><li><p><strong>设置其他自定义属性：</strong></p></li></ol>   <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Modifier</span><br><span class="line">    .background(Color.Yellow)</span><br><span class="line">    .padding(<span class="number">8.</span>dp)</span><br><span class="line">    .size(<span class="number">100.</span>dp)</span><br></pre></td></tr></table></figure><p>   这个例子演示了如何通过链式调用多个 <code>Modifier</code> 方法来设置多个属性。</p><h3 id="LaunchedEffect"><a href="#LaunchedEffect" class="headerlink" title="LaunchedEffect"></a>LaunchedEffect</h3><p><code>LaunchedEffect</code> 是 Jetpack Compose 中用于启动协程并在协程完成时执行操作的效果（effect）。它通常用于执行一次性的异步任务，例如启动网络请求、执行动画等。以下是一些关于 <code>LaunchedEffect</code> 的详细信息和使用示例：</p><h3 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OptIn(ExperimentalComposeUiApi::class)</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">LaunchedEffectExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> isLoading <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="literal">false</span>) &#125;</span><br><span class="line">    <span class="keyword">var</span> result <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="string">&quot;&quot;</span>) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> context = LocalContext.current</span><br><span class="line"></span><br><span class="line">    Column(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .padding(<span class="number">16.</span>dp)</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">// 输入框</span></span><br><span class="line">        OutlinedTextField(</span><br><span class="line">            value = result,</span><br><span class="line">            onValueChange = &#123;</span><br><span class="line">                result = it</span><br><span class="line">            &#125;,</span><br><span class="line">            label = &#123; Text(<span class="string">&quot;Type something...&quot;</span>) &#125;,</span><br><span class="line">            keyboardOptions = KeyboardOptions.Default.copy(</span><br><span class="line">                imeAction = ImeAction.Done</span><br><span class="line">            ),</span><br><span class="line">            keyboardActions = KeyboardActions(</span><br><span class="line">                onDone = &#123;</span><br><span class="line">                    <span class="comment">// 启动协程执行异步任务</span></span><br><span class="line">                    LaunchedEffect(<span class="built_in">Unit</span>) &#123;</span><br><span class="line">                        isLoading = <span class="literal">true</span></span><br><span class="line">                        delay(<span class="number">2000</span>) <span class="comment">// 模拟异步任务，比如网络请求</span></span><br><span class="line">                        result = <span class="string">&quot;Task completed&quot;</span></span><br><span class="line">                        isLoading = <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ),</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .fillMaxWidth()</span><br><span class="line">                .padding(<span class="number">8.</span>dp)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 显示结果或加载指示器</span></span><br><span class="line">        <span class="keyword">if</span> (isLoading) &#123;</span><br><span class="line">            CircularProgressIndicator(</span><br><span class="line">                modifier = Modifier</span><br><span class="line">                    .size(<span class="number">50.</span>dp)</span><br><span class="line">                    .padding(<span class="number">16.</span>dp),</span><br><span class="line">                color = MaterialTheme.colorScheme.primary</span><br><span class="line">            )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Spacer(modifier = Modifier.height(<span class="number">16.</span>dp))</span><br><span class="line">            Text(text = result)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>LaunchedEffect</code> 用于在用户完成输入并点击键盘上的 “Done” 按钮时启动一个异步任务。在任务执行期间，显示一个加载指示器。一旦任务完成，显示任务结果。</p><p>使用 <code>LaunchedEffect</code> 处理生命周期事件：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OptIn(ExperimentalComposeUiApi::class)</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">LaunchedEffectWithLifecycleExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="string">&quot;&quot;</span>) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> context = LocalContext.current</span><br><span class="line">    <span class="keyword">val</span> lifecycleOwner = LocalLifecycleOwner.current</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 LaunchedEffect 处理生命周期事件</span></span><br><span class="line">    LaunchedEffect(lifecycleOwner.lifecycle) &#123;</span><br><span class="line">        <span class="keyword">val</span> observer = LifecycleEventObserver &#123; _, event -&gt;</span><br><span class="line">            <span class="keyword">if</span> (event == Lifecycle.Event.ON_STOP) &#123;</span><br><span class="line">                <span class="comment">// 在 Activity 停止时执行的异步任务</span></span><br><span class="line">                result = <span class="string">&quot;Activity stopped&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        lifecycleOwner.lifecycle.addObserver(observer)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在 LaunchedEffect 结束时移除生命周期观察者</span></span><br><span class="line">        onDispose &#123;</span><br><span class="line">            lifecycleOwner.lifecycle.removeObserver(observer)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Column(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .padding(<span class="number">16.</span>dp)</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">// 显示结果</span></span><br><span class="line">        Spacer(modifier = Modifier.height(<span class="number">16.</span>dp))</span><br><span class="line">        Text(text = result)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>LaunchedEffect</code> 用于处理 <code>Lifecycle.Event.ON_STOP</code> 事件，当 <code>Activity</code> 停止时，</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="Composable"><a href="#Composable" class="headerlink" title="@Composable"></a>@Composable</h3><p>在Jetpack Compose中，<code>@Composable</code>是一个注解，用于标记函数或方法，表示这是一个可组合的函数。可组合函数是Compose框架中的基本构建块，用于定义UI界面的一部分。使用<code>@Composable</code>注解的函数被称为可组合函数，因为它们可以组合在一起，形成复杂的用户界面。</p><p>使用<code>@Composable</code>注解有几个关键的作用：</p><ol><li><p><strong>声明可组合函数：</strong> 通过使用<code>@Composable</code>注解，您告诉Compose框架这个函数是一个可组合的函数，它用于构建UI组件。Compose框架会根据需要调用这些可组合函数来构建UI。</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">MyComposableFunction</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// UI 构建逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>自动更新UI：</strong> 当Compose框架检测到可组合函数内部状态的变化时，它会重新调用相应的可组合函数以更新UI。这使得在Compose中构建动态UI变得简单，因为您只需要管理数据的变化，而不必手动操作UI元素。</p></li><li><p><strong>组合性：</strong> 可组合函数可以嵌套和组合在一起，形成更复杂的UI层次结构。这种组合性是Compose框架的一个重要特征，允许您构建具有高度可复用性和模块化的UI组件。</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">MyScreen</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 组合多个可组合函数</span></span><br><span class="line">    MyHeader()</span><br><span class="line">    MyContent()</span><br><span class="line">    MyFooter()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>总的来说，<code>@Composable</code>注解是Compose框架的核心概念之一，它标志着函数是用于构建UI的可组合函数，并且具有自动更新UI和高度组合性的特性。</p><h3 id="DrawableRes"><a href="#DrawableRes" class="headerlink" title="@DrawableRes"></a>@DrawableRes</h3><p>在Jetpack Compose中，<code>@DrawableRes</code> 注解通常用于标记一个参数应该接受一个 Drawable 资源的引用。Drawable 资源是 Android 中用于表示可绘制图形的资源，例如图像、形状等。在 Jetpack Compose 中，你可以使用 <code>@DrawableRes</code> 注解来明确指定某个参数应该接受一个指向 Drawable 资源的引用。</p><p>例如，考虑以下示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">MyImage</span><span class="params">(<span class="meta">@DrawableRes</span> imageResId: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    Image(</span><br><span class="line">        painter = painterResource(id = imageResId),</span><br><span class="line">        contentDescription = <span class="literal">null</span> <span class="comment">// 为了简化示例，这里省略了contentDescription</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，<code>@DrawableRes</code> 注解用于说明 <code>imageResId</code> 参数应该是一个 Drawable 资源的引用。这有助于提高代码的可读性，并让开发者知道这个参数期望接收一个 Drawable 资源的 ID。</p><p>需要注意的是，<code>@DrawableRes</code> 注解本身并没有在 Compose 中引入新的功能，它只是一个标记注解，用于帮助开发者正确使用 Drawable 资源。当你使用这个注解时，编译器会在编译时进行一些检查，以确保你传递给标记有 <code>@DrawableRes</code> 注解的参数的值是一个有效的 Drawable 资源。</p><h2 id="Kotlin基础"><a href="#Kotlin基础" class="headerlink" title="Kotlin基础"></a>Kotlin基础</h2><h3 id="记忆变量"><a href="#记忆变量" class="headerlink" title="记忆变量"></a>记忆变量</h3><p>在Jetpack Compose中，<code>by mutableStateOf</code> 和 <code>remember &#123; mutableStateOf() &#125;</code> 都用于创建可变状态，主要是因为</p><ol><li><p><strong><code>by mutableStateOf</code>：</strong></p><p>通常在<code>ViewModel</code>类下面进行使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count <span class="keyword">by</span> mutableStateOf(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>这是一种直接在组件内部声明和使用可变状态的方式。这种声明方式通常用于短生命周期的组件，例如对话框或临时组件。当 <code>count</code> 的值发生变化时，相关的组件会重新绘制以反映新的状态。</p></li><li><p><strong><code>remember &#123; (mutableStateOf)() &#125;</code>：</strong></p><p>通常在<code>Screen</code>类下面进行使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// val 代表这个属性只可读，所以直接使用 = 连接</span></span><br><span class="line"><span class="keyword">val</span> password = remember &#123; mutableStateOf(<span class="string">&quot;123456&quot;</span>) &#125;</span><br><span class="line"><span class="comment">// var 代表这个属性是可变的，通过 by 关键字将属性的委托给 remember &#123; mutableStateOf(false) &#125; 表达式返回的可变状态。这样，变量的值可以随着时间的推移而改变</span></span><br><span class="line"><span class="keyword">var</span> passwordVisibility <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="literal">false</span>) &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>rememberUpdatedState&#123; mutableStateOf() &#125;</code></strong></p><p>通常用于确保在不同组合之间保持引用相等性</p><p>在下面的代码中，你直接使用 remember 的话是不会和 viewModel.ifShowTarget 的值同步的</p><p>通过使用普通变量 ifShowTarget 的方式的对比，发现是因为 viewModel 都是同一个对象，所以能够实现这样同时变化的效果，使用 remember 无法实现</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 viewModel 方式</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">targetMenuList</span><span class="params">(viewModel: <span class="type">TimerViewModel</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> visibility <span class="keyword">by</span> rememberUpdatedState(newValue = viewModel.ifShowTarget)</span><br><span class="line">    <span class="comment">//val visibility by remember&#123; mutableStateOf(viewModel.ifShowTarget) &#125;</span></span><br><span class="line"></span><br><span class="line">    AnimatedVisibility(</span><br><span class="line">        visible = visibility,</span><br><span class="line">        enter = fadeIn(),</span><br><span class="line">        exit = fadeOut()</span><br><span class="line">    ) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用普通变量 ifShowTarget 的方式</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">targetMenuList</span><span class="params">(ifShowTarget: <span class="type">Boolean</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// val visibility by rememberUpdatedState(newValue = viewModel.ifShowTarget)</span></span><br><span class="line">    <span class="keyword">val</span> visibility <span class="keyword">by</span> rememberUpdatedState(newValue = ifShowTarget)</span><br><span class="line"></span><br><span class="line">    AnimatedVisibility(</span><br><span class="line">        visible = visibility,</span><br><span class="line">        enter = fadeIn(),</span><br><span class="line">        exit = fadeOut()</span><br><span class="line">    ) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li></li></ol><p>综合而言，<code>by mutableStateOf</code> 用于直接在组件内部声明和使用可变状态，而 <code>remember &#123; mutableStateOf() &#125;</code> 则在组件生命周期内保持状态，并通过 <code>remember</code> 函数来确保初始化只在组件首次创建时进行。选择使用哪种方式取决于组件的生命周期和状态管理需求。</p><h3 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h3><p>ViewModel 是一种在 Android 架构组件中用于存储和管理与用户界面相关的数据的类。它的目的是存储和管理与界面相关的持久化数据，以便在配置更改（如屏幕旋转）等情况下，数据仍然可以保持不变。在 Jetpack Compose 中，ViewModel 仍然是一个有用的概念，但需要结合 <code>viewModel()</code> 和 <code>viewModelProvider</code> 使用。</p><p>以下是有关 ViewModel 的一些关键概念：</p><p>创建 ViewModel：</p><p>在 Jetpack Compose 中，通常使用 <code>viewModel()</code> 函数来获取或创建 ViewModel。该函数位于 <code>androidx.lifecycle.viewmodel.compose</code> 包中。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyViewModel</span> : <span class="type">ViewModel</span>() &#123;</span><br><span class="line">    <span class="comment">// 在此处定义与界面相关的数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">MyComposable</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> viewModel: MyViewModel = viewModel()</span><br><span class="line">    <span class="comment">// 使用 viewModel 中的数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 ViewModelProvider 创建 ViewModel：</p><p>在某些情况下，可能需要使用 <code>ViewModelProvider</code> 来手动创建 ViewModel，特别是在 Compose 中使用 Jetpack Navigation 时。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> viewModel: MyViewModel = viewModelProvider()</span><br></pre></td></tr></table></figure><p>使用 ViewModel 存储数据：</p><p>ViewModel 可以用于存储需要在配置更改时保留的数据，例如网络请求的结果、用户输入等。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyViewModel</span> : <span class="type">ViewModel</span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> _data = mutableStateOf(<span class="string">&quot;Initial Value&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">data</span>: State&lt;String&gt; <span class="keyword">get</span>() = _data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">updateData</span><span class="params">(newData: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        _data.value = newData</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">MyComposable</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> viewModel: MyViewModel = viewModel()</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">data</span>: State&lt;String&gt; = viewModel.<span class="keyword">data</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 data 中的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察 LiveData（可选）：</p><p>在传统的 Android 架构组件中，ViewModel 通常与 LiveData 结合使用。在 Compose 中，可以使用 <code>observeAsState()</code> 函数来观察 LiveData。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyViewModel</span> : <span class="type">ViewModel</span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> _data = MutableLiveData(<span class="string">&quot;Initial Value&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">data</span>: LiveData&lt;String&gt; <span class="keyword">get</span>() = _data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">updateData</span><span class="params">(newData: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        _data.value = newData</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">MyComposable</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> viewModel: MyViewModel = viewModel()</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">data</span>: State&lt;String&gt; = viewModel.<span class="keyword">data</span>.observeAsState(<span class="string">&quot;Initial Value&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 data 中的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ViewModel 的使用有助于将数据管理与 UI 层分离，确保数据在配置更改等情况下得以保留。Jetpack Compose 中的 ViewModel 与传统 Android 架构组件中的用法相似，但需要使用相应的 Compose 函数。</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>Jetpack Compose是一种用于构建Android用户界面的现代工具包。在创建Jetpack Compose项目时，一个良好的项目结构可以使代码组织更清晰、易于维护。以下是一个常见的Jetpack Compose项目结构的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">app</span><br><span class="line">|-- src</span><br><span class="line">|   |-- main</span><br><span class="line">|       |-- java/com/example/mycomposeapp</span><br><span class="line">|           |-- di  // 依赖注入相关</span><br><span class="line">|               |-- AppContainer.kt</span><br><span class="line">|               |-- AppModule.kt</span><br><span class="line">|           |-- model  // 数据模型</span><br><span class="line">|               |-- User.kt</span><br><span class="line">|           |-- ui</span><br><span class="line">|               |-- theme  // 主题定义</span><br><span class="line">|                   |-- Color.kt</span><br><span class="line">|                   |-- Typography.kt</span><br><span class="line">|               |-- components  // 可重用组件</span><br><span class="line">|                   |-- ButtonComponent.kt</span><br><span class="line">|                   |-- TextFieldComponent.kt</span><br><span class="line">|               |-- screens  // 各个屏幕或功能的Compose界面</span><br><span class="line">|                   |-- HomeScreen.kt</span><br><span class="line">|                   |-- ProfileScreen.kt</span><br><span class="line">|               |-- navigation  // 导航相关</span><br><span class="line">|                   |-- Navigation.kt</span><br><span class="line">|               |-- viewmodel  // ViewModel层</span><br><span class="line">|                   |-- HomeViewModel.kt</span><br><span class="line">|                   |-- ProfileViewModel.kt</span><br><span class="line">|               |-- MainActivity.kt  // 主Activity</span><br><span class="line">|       |-- res</span><br><span class="line">|           |-- drawable</span><br><span class="line">|           |-- layout</span><br><span class="line">|           |-- mipmap</span><br><span class="line">|           |-- values</span><br><span class="line">|               |-- colors.xml</span><br><span class="line">|               |-- strings.xml</span><br><span class="line">|               |-- themes.xml</span><br><span class="line">|-- build.gradle</span><br><span class="line">|-- proguard-rules.pro</span><br><span class="line">|-- settings.gradle</span><br><span class="line">|-- gradle.properties</span><br><span class="line">|-- local.properties</span><br></pre></td></tr></table></figure><p>解释一下各个目录：</p><ul><li><p><strong>di</strong>: 依赖注入相关的代码，例如使用Dagger Hilt进行依赖注入的相关类。</p></li><li><p><strong>model</strong>: 数据模型类，用于表示应用程序中使用的数据结构。</p></li><li><p><strong>ui&#x2F;theme</strong>: 包含应用程序的主题定义，例如颜色、字体等。</p></li><li><p><strong>ui&#x2F;components</strong>: 包含可重用的Compose组件，例如自定义的按钮、文本字段等。</p></li><li><p><strong>ui&#x2F;screens</strong>: 包含应用程序的不同屏幕或功能的Compose界面。每个屏幕或功能应该有自己的文件。</p></li><li><p><strong>ui&#x2F;navigation</strong>: 导航相关的代码，例如定义应用程序的导航图。</p></li><li><p><strong>ui&#x2F;viewmodel</strong>: 包含ViewModel层的类，负责处理业务逻辑并提供数据给UI。</p></li><li><p><strong>MainActivity.kt</strong>: 应用程序的主Activity，负责设置Compose的根界面。</p></li><li><p><strong>res</strong>: 包含资源文件，例如布局文件、颜色、字符串等。</p></li><li><p><strong>build.gradle</strong>: 项目的构建配置文件。</p></li><li><p><strong>proguard-rules.pro</strong>: ProGuard规则文件，用于混淆和优化代码。</p></li><li><p><strong>settings.gradle</strong>: 包含项目的设置，例如模块的配置。</p></li><li><p><strong>gradle.properties</strong>: 包含项目的全局Gradle属性。</p></li><li><p><strong>local.properties</strong>: 包含本地开发环境的配置，例如SDK路径。</p></li></ul><p>这只是一个示例结构，具体的项目结构可以根据团队的偏好和项目的规模进行调整。使用这样的结构可以使项目更有组织性，易于理解和维护。</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>使用 option + command + M 可以将选中的布局代码提取成一个函数</p><p>输出 prev 自动生成预览模版</p><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><h3 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h3><p>1、封装一个网络请求单例工具类</p><p>基本不需要改什么东西，只需要根据后端地址改<code>SERVER_URL</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> RequestUtils &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> SERVER_URL = <span class="string">&quot;http://42.192.90.134:8181/&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">sendRequest</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        path: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        rawBody: <span class="type">String</span> = <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        method: <span class="type">RequestMethod</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span> = withContext(Dispatchers.IO) &#123;</span><br><span class="line">        <span class="keyword">val</span> url = <span class="string">&quot;<span class="subst">$&#123;SERVER_URL&#125;</span><span class="subst">$&#123;path&#125;</span>&quot;</span></span><br><span class="line">        Log.i(<span class="string">&quot;PostUrl&quot;</span>, url)</span><br><span class="line">        Log.i(<span class="string">&quot;RequestBody&quot;</span>, rawBody)</span><br><span class="line">        <span class="comment">// 构造 OkHttpClient</span></span><br><span class="line">        <span class="keyword">val</span> client = OkHttpClient()</span><br><span class="line">        <span class="keyword">val</span> mediaType = <span class="string">&quot;application/json&quot;</span>.toMediaTypeOrNull()</span><br><span class="line">        <span class="keyword">val</span> requestBody = rawBody.toRequestBody(mediaType)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建POST请求</span></span><br><span class="line">        <span class="keyword">val</span> requestBuilder = Request.Builder()</span><br><span class="line">        requestBuilder.url(url)</span><br><span class="line">        <span class="keyword">if</span> (method == RequestMethod.POST) &#123;</span><br><span class="line">            requestBuilder.post(requestBody)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            requestBuilder.<span class="keyword">get</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> request = requestBuilder.build()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送请求并获取响应</span></span><br><span class="line">        client.newCall(request).execute().use &#123;</span><br><span class="line">            <span class="keyword">if</span> (it.isSuccessful) &#123;</span><br><span class="line">                <span class="keyword">val</span> responseBody = it.body?.string().toString()</span><br><span class="line">                Log.i(<span class="string">&quot;ResponseBody&quot;</span>, responseBody)</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;\&quot;code\&quot;: 0,&quot;</span> <span class="keyword">in</span> responseBody) <span class="keyword">throw</span> IOException(responseBody)</span><br><span class="line">                <span class="keyword">return</span><span class="symbol">@withContext</span> responseBody</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">val</span> errorMessage = it.body?.string().toString()</span><br><span class="line">                Log.e(<span class="string">&quot;RequestFailed&quot;</span>, errorMessage)</span><br><span class="line">                <span class="keyword">throw</span> IOException(errorMessage)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">sendPost</span><span class="params">(path: <span class="type">String</span>, rawBody: <span class="type">String</span> = <span class="string">&quot;&quot;</span>)</span></span> = withContext(Dispatchers.IO) &#123;</span><br><span class="line">        <span class="keyword">return</span><span class="symbol">@withContext</span> sendRequest(path, rawBody, RequestMethod.POST)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">sendGet</span><span class="params">(path: <span class="type">String</span>)</span></span> = withContext(Dispatchers.IO) &#123;</span><br><span class="line">        sendRequest(path, method = RequestMethod.GET)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title class_">RequestMethod</span> &#123;</span><br><span class="line">    POST, GET</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、编写 Model 类，作为返回值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Response类</span></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Response</span>&lt;<span class="type">T</span>&gt;(</span><br><span class="line">    <span class="keyword">val</span> code: String?,</span><br><span class="line">    <span class="keyword">val</span> message: String?,</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">data</span>: T</span><br><span class="line">)</span><br><span class="line"><span class="comment">// TargetModel类</span></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">TargetModel</span>(</span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Int</span>?,</span><br><span class="line">    <span class="keyword">var</span> userId: <span class="built_in">Int</span>?,</span><br><span class="line">    <span class="keyword">var</span> userEmail: String?,</span><br><span class="line">    <span class="keyword">var</span> targetName: String?,</span><br><span class="line">    <span class="keyword">var</span> targetDescribe: String?,</span><br><span class="line">    <span class="keyword">var</span> targetColor: <span class="built_in">Int</span>?,</span><br><span class="line">    <span class="keyword">var</span> targetPoint: String?,</span><br><span class="line">    <span class="keyword">var</span> deadline: String?,</span><br><span class="line">    <span class="keyword">var</span> status: String?,</span><br><span class="line">    <span class="keyword">var</span> deadlineString: String?,</span><br><span class="line">    <span class="keyword">var</span> ifPoints: <span class="built_in">Int</span>?,</span><br><span class="line">    <span class="keyword">var</span> ifTargetNull: String?,</span><br><span class="line">    <span class="keyword">var</span> ifTargetUpdate: <span class="built_in">Int</span>?,</span><br><span class="line">    <span class="keyword">var</span> targetId: String?</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>3、再进一步封装一个专门为 target 提供请求方法的工具单例类</p><p>注意这里需要改的东西很多，包括</p><p>请求的参数(userEmail、ifTargetUpdate)</p><p>网络请求的返回值(success:(model: 返回值的格式)-&gt; Unit)</p><p>网络请求具体地址(“target&#x2F;get”)</p><p>请求参数封装类(GetTargetList)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例对象 `Target`，包含一个用于获取目标数据的函数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">object</span> Target &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于获取目标数据的函数。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userEmail 请求目标数据的用户电子邮件地址。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ifTargetUpdate 标志，指示是否更新目标数据。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scope 用于启动协程的 [CoroutineScope]。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> success 在成功检索到目标数据时调用的回调函数。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> failed 在过程中发生异常时调用的回调函数。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> complete 在成功或失败后调用的回调函数，用于执行任何清理或附加操作。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">fetchTargetData</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        userEmail: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        ifTargetUpdate: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        scope: <span class="type">CoroutineScope</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        success: (<span class="type">model</span>: <span class="type">List</span>&lt;<span class="type">TargetModel</span>&gt;) -&gt; <span class="type">Unit</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        failed: (<span class="type">e</span>: <span class="type">Exception</span>) -&gt; <span class="type">Unit</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        complete: () -&gt; <span class="type">Unit</span> = &#123;&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span> = scope.launch(Dispatchers.Main) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用指定的用户电子邮件地址和更新标志创建 GetTargetList 对象</span></span><br><span class="line">            <span class="keyword">val</span> postRequest = GetTargetList(userEmail, ifTargetUpdate)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用 Gson 将 GetTargetList 对象转换为 JSON</span></span><br><span class="line">            <span class="keyword">val</span> requestJson = Gson().toJson(postRequest)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发送带有目标数据请求的 POST 请求到服务器</span></span><br><span class="line">            <span class="keyword">val</span> response = RequestUtils.sendPost(<span class="string">&quot;target/get&quot;</span>, requestJson)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用 Gson 解析 JSON 响应并提取目标数据</span></span><br><span class="line">            <span class="keyword">val</span> gson = Gson()</span><br><span class="line">            <span class="keyword">val</span> type = <span class="keyword">object</span> : TypeToken&lt;Response&lt;List&lt;TargetModel&gt;&gt;&gt;() &#123;&#125;.type</span><br><span class="line">            <span class="keyword">val</span> targetModel = gson.fromJson&lt;Response&lt;List&lt;TargetModel&gt;&gt;&gt;(response, type).<span class="keyword">data</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用检索到的目标数据调用成功回调</span></span><br><span class="line">            success(targetModel)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            <span class="comment">// 在发生异常时调用失败回调</span></span><br><span class="line">            failed(e)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用完成回调执行任何清理或附加操作</span></span><br><span class="line">        complete()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求参数封装类(GetTargetList)</span></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">GetTargetList</span>(</span><br><span class="line">    <span class="keyword">val</span> userEmail: String,</span><br><span class="line">    <span class="keyword">val</span> ifTargetUpdate: <span class="built_in">Int</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>4、将封装好的 target 方法在 ViewModel进行定义,方便后续使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TimerViewModel</span>:<span class="type">ViewModel</span>() &#123;</span><br><span class="line">    <span class="keyword">var</span> ifShowTarget:<span class="built_in">Boolean</span> <span class="keyword">by</span> mutableStateOf(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getTargetMenuList</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Target.fetchTargetData(</span><br><span class="line">            userEmail = <span class="string">&quot;3489044730@qq.com&quot;</span>,</span><br><span class="line">            ifTargetUpdate = <span class="number">1</span>,</span><br><span class="line">            scope = viewModelScope,</span><br><span class="line">            success = &#123;</span><br><span class="line">                Log.i(<span class="string">&quot;getTargetMenuList请求成功&quot;</span>, it.toString())</span><br><span class="line">            &#125;,</span><br><span class="line">            failed = &#123;</span><br><span class="line">                Log.e(<span class="string">&quot;getTargetMenuList请求失败&quot;</span>, it.message.toString())</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、在 Screen 中使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Image(</span><br><span class="line">    painter = painterResource(id = R.drawable.arrowdown),</span><br><span class="line">    contentDescription = <span class="literal">null</span>,</span><br><span class="line">    modifier = Modifier</span><br><span class="line">        .clickable &#123;</span><br><span class="line">            viewModel.ifShowTarget = !viewModel.ifShowTarget</span><br><span class="line">            viewModel.getTargetMenuList()</span><br><span class="line">        &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="变量传递"><a href="#变量传递" class="headerlink" title="变量传递"></a>变量传递</h3><p>这块挺基础的，就是主要是注意 ViewModel 类不能用单例对象，应该直接使用类</p><p>以及如何正确使用<code>mutableStateOf</code></p><p>在Compose中，通常不建议将<code>ViewModel</code>设计为单例对象，因为<code>ViewModel</code>的设计目的是为了存储与界面相关的数据，并且可以在配置更改（如屏幕旋转）等情况下保留这些数据。如果将<code>ViewModel</code>设计为单例对象，它将在整个应用的生命周期中存在，并且在配置更改后不会被销毁和重新创建。</p><p>1、ViewModel 类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TimerViewModel</span>:<span class="type">ViewModel</span>() &#123;</span><br><span class="line">    <span class="keyword">var</span> ifShowTarget:<span class="built_in">Boolean</span> <span class="keyword">by</span> mutableStateOf(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getTargetMenuList</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Target.fetchTargetData(</span><br><span class="line">            userEmail = <span class="string">&quot;3489044730@qq.com&quot;</span>,</span><br><span class="line">            ifTargetUpdate = <span class="number">1</span>,</span><br><span class="line">            scope = viewModelScope,</span><br><span class="line">            success = &#123;</span><br><span class="line">                Log.i(<span class="string">&quot;getTargetMenuList请求成功&quot;</span>, it.toString())</span><br><span class="line">            &#125;,</span><br><span class="line">            failed = &#123;</span><br><span class="line">                Log.e(<span class="string">&quot;getTargetMenuList请求失败&quot;</span>, it.message.toString())</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、Screen 使用</p><p>注意 TimerScreen 的参数 viewModel，这个基本上任何一个 Screen 都会用到</p><p>Preview 中参数 viewModel 使用 TimerViewModel()</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">TimerScreen</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    viewModel: <span class="type">TimerViewModel</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    Column(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .padding(<span class="number">15.</span>dp)</span><br><span class="line">    ) &#123;</span><br><span class="line">        topNav()</span><br><span class="line">        targetMenu(viewModel)</span><br><span class="line">        Box &#123;</span><br><span class="line">            Card(</span><br><span class="line"></span><br><span class="line">            ) &#123;</span><br><span class="line">                <span class="comment">// 省略部分代码...</span></span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">            targetMenuList(viewModel)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">targetMenu</span><span class="params">(viewModel: <span class="type">TimerViewModel</span>)</span></span> &#123;</span><br><span class="line">    Card(</span><br><span class="line">        <span class="comment">// 省略部分代码...</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        Row(</span><br><span class="line">            <span class="comment">// 省略部分代码...</span></span><br><span class="line">        ) &#123;</span><br><span class="line">            Text(</span><br><span class="line">                <span class="comment">// 省略部分代码...</span></span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">if</span> (viewModel.ifShowTarget) &#123;</span><br><span class="line">                Image(</span><br><span class="line">                    <span class="comment">// 省略部分代码...</span></span><br><span class="line">                )</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Image(</span><br><span class="line">                    <span class="comment">// 省略部分代码...</span></span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Preview(showBackground = true)</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">GreetingPreview2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    TimerScreen(TimerViewModel())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、组件里面使用</p><p>注意 visibility 的创建，实际上visibility</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">targetMenuList</span><span class="params">(viewModel: <span class="type">TimerViewModel</span>)</span></span> &#123;</span><br><span class="line">  <span class="comment">// 注意下面的使用方法</span></span><br><span class="line">    <span class="keyword">val</span> visibility <span class="keyword">by</span> rememberUpdatedState(newValue = viewModel.ifShowTarget)</span><br><span class="line"></span><br><span class="line">    AnimatedVisibility(</span><br><span class="line">        visible = visibility,</span><br><span class="line">        enter = fadeIn(),</span><br><span class="line">        exit = fadeOut()</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">// 省略部分代码...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LazyColumn-具体实现"><a href="#LazyColumn-具体实现" class="headerlink" title="LazyColumn 具体实现"></a>LazyColumn 具体实现</h3><p>1、首先创建 ViewModel 的相关方法</p><p>注意这里的 targetMenuList 属性的创建方法</p><p>以及如何赋值给 targetMenuList</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TimerViewModel</span>:<span class="type">ViewModel</span>() &#123;</span><br><span class="line"><span class="comment">// 注意创建方法，这里使用 listOf() 创建了一个空的数组作为初始值</span></span><br><span class="line">    <span class="keyword">var</span> targetMenuList <span class="keyword">by</span> mutableStateOf&lt;List&lt;TargetModel&gt;&gt;(listOf())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getTargetMenuList</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Target.fetchTargetData(</span><br><span class="line">            userEmail = <span class="string">&quot;3489044730@qq.com&quot;</span>,</span><br><span class="line">            ifTargetUpdate = <span class="number">1</span>,</span><br><span class="line">            scope = viewModelScope,</span><br><span class="line">            success = &#123;</span><br><span class="line">                targetMenuList=it</span><br><span class="line">                Log.i(<span class="string">&quot;getTargetMenuList请求成功&quot;</span>, it.toString())</span><br><span class="line">            &#125;,</span><br><span class="line">            failed = &#123;</span><br><span class="line">                Log.e(<span class="string">&quot;getTargetMenuList请求失败&quot;</span>, it.message.toString())</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、其次通过网络请求获取到相关数据，再将数据传入组件 targetMenuList 中</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">AnimatedVisibility(</span><br><span class="line">    visible = visibility,</span><br><span class="line">    enter = fadeIn(),</span><br><span class="line">    exit = fadeOut()</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="comment">// 调用 TimerViewModel 中的 getTargetMenuList 方法</span></span><br><span class="line">  viewModel.getTargetMenuList()</span><br><span class="line">  <span class="comment">// 然后传入组件中供 LazyColumn 使用</span></span><br><span class="line">    targetMenuList(viewModel.targetMenuList)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、最后编写组件 targetMenuList 的相应布局</p><p>使用箭头函数的方式，获取到 targetMenuList 中的每个元素，再使用字符串的插值语法<code>$&#123;&#125;</code>写入获取到的元素的相关属性值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">targetMenuList</span><span class="params">(targetMenuList: <span class="type">List</span>&lt;<span class="type">TargetModel</span>&gt;)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    Card(</span><br><span class="line">        <span class="comment">// 省略代码</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        LazyColumn &#123;</span><br><span class="line">            items(targetMenuList) &#123; target -&gt;</span><br><span class="line">                Row(</span><br><span class="line">                    <span class="comment">// 省略代码</span></span><br><span class="line">                ) &#123;</span><br><span class="line">                    Text(</span><br><span class="line">                        text = <span class="string">&quot;<span class="subst">$&#123;target.targetName&#125;</span>&quot;</span>,</span><br><span class="line">                        fontSize = <span class="number">18.</span>sp,</span><br><span class="line">                        color = colorResource(id = R.color.hui)</span><br><span class="line">                    )</span><br><span class="line">                    Row(</span><br><span class="line">                        horizontalArrangement = Arrangement.SpaceBetween,</span><br><span class="line">                        verticalAlignment = Alignment.CenterVertically,</span><br><span class="line">                    ) &#123;</span><br><span class="line">                        Image(</span><br><span class="line">                            painter = painterResource(id = R.drawable.coin),</span><br><span class="line">                            contentDescription = <span class="literal">null</span>,</span><br><span class="line">                            modifier = Modifier</span><br><span class="line">                        )</span><br><span class="line">                        Text(</span><br><span class="line">                            text = <span class="string">&quot;X<span class="subst">$&#123;target.targetPoint&#125;</span>&quot;</span>,</span><br><span class="line">                            fontSize = <span class="number">18.</span>sp,</span><br><span class="line">                            color = colorResource(id = R.color.hui),</span><br><span class="line">                            fontWeight = FontWeight.Bold</span><br><span class="line">                        )</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h3><h2 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h2><ol><li><p>在 card 中使用阴影报错<code>Type mismatch: inferred type is Dp but CardElevation was expected</code></p><p>解决如下</p><p>不能直接使用 5.dp 的方式，需要加上外面这层包装</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elevation = CardDefaults.cardElevation(defaultElevation = <span class="number">5.</span>dp) </span><br></pre></td></tr></table></figure></li><li><p>在 Card 中使用阴影踩坑了，不能使用 elevation 来指定阴影</p><p>原因在于：设置之后没有任何的阴影出现，以及 elevation 的功能少，只能用黑色阴影，相反 .shadow 能够设置的内容就更多</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Card(</span><br><span class="line">    <span class="comment">// elevation = CardDefaults.cardElevation(defaultElevation = 5.dp), //注意 elevation 的写法，现在好了不用注意了，直接送走这位属性</span></span><br><span class="line">    modifier = Modifier</span><br><span class="line">        .padding(top = <span class="number">20.</span>dp)</span><br><span class="line">        .padding(horizontal = <span class="number">10.</span>dp)</span><br><span class="line">  </span><br><span class="line">  .shadow(<span class="number">25.</span>dp,RoundedCornerShape(<span class="number">20.</span>dp))</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//.clip(shape = MaterialTheme.shapes.large)</span></span><br><span class="line">        .clip(shape = RoundedCornerShape(<span class="number">20.</span>dp))</span><br><span class="line">        .fillMaxWidth()</span><br><span class="line">) &#123;</span><br><span class="line">    Row(</span><br><span class="line">        horizontalArrangement = Arrangement.SpaceBetween,</span><br><span class="line">        verticalAlignment = Alignment.CenterVertically,</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .background(color = colorResource(id = R.color.danHui))</span><br><span class="line">            .padding(<span class="number">10.</span>dp)</span><br><span class="line">            .fillMaxWidth()</span><br><span class="line">    ) &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用动画效果时，发现内部的阴影展示有问题</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">targetMenuList</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> visibility <span class="keyword">by</span> rememberUpdatedState(newValue = TimerViewModel.ifShowTarget)</span><br><span class="line"></span><br><span class="line">    AnimatedVisibility(</span><br><span class="line">        visible = visibility,</span><br><span class="line">        enter = fadeIn(),</span><br><span class="line">        exit = fadeOut()</span><br><span class="line">    ) &#123;</span><br><span class="line">        Card(</span><br><span class="line">            modifier = Modifier</span><br><span class="line">          <span class="comment">//.padding(top = 20.dp)</span></span><br><span class="line">          .padding(vertical = <span class="number">30.</span>dp)</span><br><span class="line">          </span><br><span class="line">                .padding(horizontal = <span class="number">10.</span>dp)</span><br><span class="line">          </span><br><span class="line">                .shadow(<span class="number">25.</span>dp, RoundedCornerShape(<span class="number">20.</span>dp))</span><br><span class="line">                .clip(shape = RoundedCornerShape(<span class="number">20.</span>dp))</span><br><span class="line">                .fillMaxWidth(),</span><br><span class="line">        ) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可恶还没有解决！！！！！🥲</p><p>解决了，发现是 padding 的下面不相同，导致阴影被截断</p></li><li><p>网络请求这块遇到<code>CLEARTEXT communication to ************* not permitted by network security policy</code>报错</p><p>解决方法：</p><p>在<code>AndroidManifest.xml</code>中加入<code>android:usesCleartextTraffic=&quot;true&quot;</code>以及<code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</code></p><p>分别是允许 http 访问（在安卓9 往上只允许 https 访问）以及获取用户网络请求的权限</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:usesCleartextTraffic</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:targetApi</span>=<span class="string">&quot;31&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在网络请求获取<code>targetMenuList</code>时，想要打印其数据，但是打印出来的 targetMenuList 为空：</p><p>原因是在打印 targetMenuList 时，它的数据还没有被获取到，这一点从打印日志中可以推断出来</p><p>解决方法：</p><p>通过<code>LaunchedEffect</code>再去打印</p><pre><code class="kotlin">LaunchedEffect(viewModel.targetMenuList) &#123;    // 当 targetMenuList 变化时，此块将被执行    Log.i(&quot;targetMenuList&quot;, &quot;targetMenuList:$&#123;viewModel.targetMenuList&#125;&quot;)&#125;AnimatedVisibility(    visible = visibility,    enter = fadeIn(),    exit = fadeOut()) &#123;    targetMenuList(viewModel.targetMenuList)&#125;</code></pre></li><li></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课程bug管理系统的项目经验</title>
      <link href="/posts/af7721a8.html"/>
      <url>/posts/af7721a8.html</url>
      
        <content type="html"><![CDATA[<h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><h2 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h2><h3 id="打印出对象的全部属性"><a href="#打印出对象的全部属性" class="headerlink" title="打印出对象的全部属性"></a>打印出对象的全部属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(params, <span class="literal">null</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>这行代码使用了JavaScript中的<code>console.log</code>函数和<code>JSON.stringify</code>方法来打印一个JavaScript对象的字符串表示形式到控制台。</p><p><code>JSON.stringify(params, null, 2)</code>:</p><ul><li><p><code>JSON.stringify</code>是一个用于将JavaScript对象转换为JSON字符串的方法。</p></li><li><p><code>params</code>是要转换的对象。</p></li><li><p>第二个参数是用于转换过程的replacer函数，这里传入了<code>null</code>，表示不使用任何替换函数。</p></li><li><p>第三个参数是用于缩进输出的空格数，这里传入了<code>2</code>，表示每一层嵌套的缩进为2个空格。</p></li></ul><p>综合起来，这行代码的作用是将JavaScript对象 <code>params</code> 转换为一个格式化的JSON字符串，然后将该字符串输出到控制台。通过传递第三个参数为2，输出的JSON字符串会以每一层嵌套缩进2个空格的方式格式化，使其更易读。这通常用于调试和查看对象的结构和内容。</p><h3 id="去除对象中的其中几个属性并赋值给另一个变量"><a href="#去除对象中的其中几个属性并赋值给另一个变量" class="headerlink" title="去除对象中的其中几个属性并赋值给另一个变量"></a>去除对象中的其中几个属性并赋值给另一个变量</h3><p>起因是出现了参数不对的bug，发现直接直接把row赋值给params，而row中的imageUrlList1, imageUrlList2参数都是不需要的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; imageUrlList1, imageUrlList2, ...params &#125; = row;</span><br></pre></td></tr></table></figure><p>这段代码是使用解构赋值语法，它通常用于从对象中提取值。让我们逐步解释这行代码：</p><ol start="2"><li><p><code>&#123; imageUrlList1, imageUrlList2, ...params &#125;</code>: 这是解构赋值的语法。通过这个语法，我们从对象 <code>row</code> 中提取了 <code>imageUrlList1</code>、<code>imageUrlList2</code> 这两个属性的值，并将它们分别赋给了同名的变量 <code>imageUrlList1</code> 和 <code>imageUrlList2</code>。另外，<code>...params</code> 表示将对象中除了 <code>imageUrlList1</code> 和 <code>imageUrlList2</code> 之外的所有属性都放入一个名为 <code>params</code> 的新对象中。</p></li><li><p><code>= row</code>: 这表示将解构得到的值从对象 <code>row</code> 中获取。也就是说，<code>row</code> 是包含了我们想要解构的属性的源对象。</p></li></ol><p>综合起来，这行代码的作用是从对象 <code>row</code> 中提取 <code>imageUrlList1</code>、<code>imageUrlList2</code> 以及其他所有属性的值，并分别赋给变量 <code>imageUrlList1</code>、<code>imageUrlList2</code> 和 <code>params</code>。这样，就实现了去除对象中的其中几个属性并赋值给另一个变量的需求</p><h2 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h2><h3 id="在flex布局下如何使得其中一个元素位于最右侧"><a href="#在flex布局下如何使得其中一个元素位于最右侧" class="headerlink" title="在flex布局下如何使得其中一个元素位于最右侧"></a>在flex布局下如何使得其中一个元素位于最右侧</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button-group</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: auto;&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;userInfo.position == &#x27;teacher&#x27;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;downloadExcel()&quot;</span>&gt;</span>导出Excel<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-button-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>外层的 line1 为 flex 布局，而需要<code>导出Excel</code>按钮位于最右侧，此时采用<code>margin-left: auto</code>就可以轻松实现</p><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="Element-UI"><a href="#Element-UI" class="headerlink" title="Element-UI"></a>Element-UI</h3><h4 id="el-select"><a href="#el-select" class="headerlink" title="el-select"></a>el-select</h4><p>需要注意如何设置默认值，为 chapterName 赋上值就行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;chapterName&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;筛选章节来源&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in modelList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item.name&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item.name&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bug复盘"><a href="#Bug复盘" class="headerlink" title="Bug复盘"></a>Bug复盘</h2><h3 id="参数错误"><a href="#参数错误" class="headerlink" title="参数错误"></a>参数错误</h3><p>错误描述：</p><p>网络请求接口时，后端报参数错误，原因在于前端传递的参数</p><p>解决方法：</p><p>将作为参数传递的<code>params</code>使用解构赋值语法改为正确参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; imageUrlList1, imageUrlList2, ...params &#125; = row;</span><br></pre></td></tr></table></figure><h3 id="网络请求卡死-提示信息：注意：请求尚未完成！"><a href="#网络请求卡死-提示信息：注意：请求尚未完成！" class="headerlink" title="网络请求卡死(提示信息：注意：请求尚未完成！)"></a>网络请求卡死(提示信息：注意：请求尚未完成！)</h3><p>错误描述：</p><p>在访问成绩统计这个界面时，当选择第九章时，网络请求卡死，网站也会被卡死，然后进入开发者模式的网络部分查看，发现网络请求是发出了，但是没有任何数据</p><p>解决方法：</p><p>这个解决的过程比较曲折，首先是搜索了<code>注意：请求尚未完成</code>这个信息，搜出来的结果是，可能前端对不合规的值没有做好判断（比如某些地方不能负数），这个情况之前也出现过，当时是 Echarts 框架的饼图部分接受的数据要大于0</p><p>所以接下来，我就去后端打印返回的饼图配置等数据，发现数据都是大于0的，这时候我就有点迷糊了</p><p>便转向前端找问题所在，首先我想到，如果是语法或者空值或者类型的问题的话，try-catch 肯定会直接抛出错误，而不是像现在这样</p><p>然后我再去 try 语句里面每个为配置赋值的语句前面加上注释，查看是进行到哪一步卡死，最后发现来自于<code>好评Bug</code>这个饼图的配置中，但是<code>差评Bug</code>这个饼图的配置，却能够正常赋值</p><p>于是我再一次回到后端，查看这两个配置的返回值有所不同，思索一些时间后，首先是数据类型一样，接着是属性一样，最后发现是长度不一样，一个长度为5，一个长度为4，在我理所应当以为长度不一样怎么会影响前端的时候</p><p>突然看到<code>limit 5</code>这个语句，想起来自己加这条语句是为了预防太多数据放在饼图里面，我灵光一闪，会不会是 Echarts 这个框架不予许饼图里面的数据超过4个，最后修改语句为<code>limit 4</code>，成功解决bug</p><h3 id="只报错can-39-t-read-length-，可视化数据却不显示"><a href="#只报错can-39-t-read-length-，可视化数据却不显示" class="headerlink" title="只报错can&#39;t read length.....，可视化数据却不显示"></a>只报错<code>can&#39;t read length.....</code>，可视化数据却不显示</h3><p>错误原因：</p><p>没有意识到 catch 到错误后，try后面的内容不会被执行</p><p>解决方法：</p><p>去除错误的部分代码，使网页不报错，可视化数据就会进行显示，这是头疼砍头的做法，下一个Bug会具体讲怎么解决</p><h3 id="报错can-39-t-read-length-of-null"><a href="#报错can-39-t-read-length-of-null" class="headerlink" title="报错can&#39;t read length of null"></a>报错<code>can&#39;t read length of null</code></h3><p>错误原因：</p><p>类型不对，我返回的是数据是<code>[]</code>，但是作为 js 看来这不是一个数组，后面改为返回null，也是一样的问题</p><p>解决方法：</p><p>首先是对于前端传来的<code>dislikedBugPieChartOption</code>做一个空值判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新饼图配置</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">dislikedBugPieChartOption</span>.<span class="property">legend</span>.<span class="property">data</span> = <span class="variable language_">this</span>.<span class="property">analyticsData</span>.<span class="property">dislikedBugPieChartOption</span>?.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">name</span>) || [];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">dislikedBugPieChartOption</span>.<span class="property">series</span>[<span class="number">0</span>].<span class="property">data</span> = <span class="variable language_">this</span>.<span class="property">analyticsData</span>.<span class="property">dislikedBugPieChartOption</span>?.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">name</span>: item.<span class="property">name</span>,</span><br><span class="line">    <span class="attr">value</span>: item.<span class="property">count</span>,</span><br><span class="line">    <span class="attr">itemStyle</span>: &#123; <span class="attr">color</span>: <span class="variable language_">this</span>.<span class="title function_">getRandomColor</span>() &#125;,</span><br><span class="line">&#125;)) || [];</span><br></pre></td></tr></table></figure><p>然后是修改判断的逻辑，不使用<code>length==0</code>来判断，改为非空判断，因为后来是改为返回null，如果后端返回的是<code>[]</code>是不能这样判断的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">analyticsData</span>.<span class="property">dislikedBugPieChartOption</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dislikedBugPieChartOptionNull</span> = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dislikedBugPieChartOptionNull</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="Mybatis-plus"><a href="#Mybatis-plus" class="headerlink" title="Mybatis-plus"></a>Mybatis-plus</h3><p>queryWrapper.orderByDesc():降序排序</p><p>queryWrapper.orderByAsc():升序排序</p><p>queryWrapper.last(“LIMIT 1”):限定第1条数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LambdaQueryWrapper&lt;Bug&gt; bugLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">bugLambdaQueryWrapper</span><br><span class="line">        .eq(Bug::getChapterName, chosenChapter)</span><br><span class="line">        .orderByDesc(Bug::getLikedCount) <span class="comment">// 降序排序</span></span><br><span class="line">        .orderByAsc(Bug::getDislikedCount) <span class="comment">// 升序排序</span></span><br><span class="line">        .last(<span class="string">&quot;LIMIT 1&quot;</span>); <span class="comment">// 限定第1条数据</span></span><br></pre></td></tr></table></figure><p>queryWrapper.or():构建或者关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper</span><br><span class="line">    .eq(Bug::getIsApproved, <span class="literal">false</span>)</span><br><span class="line">    .eq(Bug::getCreateUser, userId)</span><br><span class="line">    .or()</span><br><span class="line">    .eq(Bug::getIsRemake, <span class="literal">true</span>)</span><br><span class="line">    .eq(Bug::getCreateUser, userId);</span><br></pre></td></tr></table></figure><h3 id="实现根据ratingList的bugId值找到list中id一样的值的逻辑"><a href="#实现根据ratingList的bugId值找到list中id一样的值的逻辑" class="headerlink" title="实现根据ratingList的bugId值找到list中id一样的值的逻辑"></a>实现根据ratingList的bugId值找到list中id一样的值的逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历 BugDto 列表</span></span><br><span class="line"><span class="keyword">for</span> (BugDto bugDto : list) &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">found</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 Rating 列表中查找匹配的 bugId</span></span><br><span class="line">    <span class="keyword">for</span> (Rating rating : ratingList) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bugDto.getId().equals(rating.getBugId())) &#123;</span><br><span class="line">            <span class="comment">// 找到匹配的 bugId，设置 isLiked 和 isDisliked 属性</span></span><br><span class="line">            bugDto.setIsLiked(rating.getIsLiked());</span><br><span class="line">            bugDto.setIsDisliked(rating.getIsDisliked());</span><br><span class="line">            found = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;  <span class="comment">// 找到匹配的数据后可以提前结束循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果在 Rating 列表中没有找到匹配的 bugId，设置 isLiked 和 isDisliked 属性为 false</span></span><br><span class="line">    <span class="keyword">if</span> (!found) &#123;</span><br><span class="line">        bugDto.setIsLiked(<span class="literal">false</span>);</span><br><span class="line">        bugDto.setIsDisliked(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="I-x2F-O流"><a href="#I-x2F-O流" class="headerlink" title="I&#x2F;O流"></a>I&#x2F;O流</h3><p>参考链接：<a href="https://blog.csdn.net/qq_44715943/article/details/116501936">Java IO流（超详细！）-CSDN博客</a></p><p>目前我觉得比较常用的有下面的内容</p><p>文件专属：<br>java.io.FileInputStream<br>java.io.FileOutputStream</p><p>转换流：（将字节流转换成字符流）<br>java.io.InputStreamReader<br>java.io.OutputStreamWriter</p><p>下面展示具体代码</p><p>操作文件下载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeDataToExcel</span><span class="params">(List&lt;String[]&gt; data, String filePath)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>()) &#123;</span><br><span class="line">        <span class="comment">// 将工作簿写入文件路径 filePath 中</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath)) &#123;</span><br><span class="line">            workbook.write(outputStream);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Excel 文件已成功创建：&quot;</span> + filePath);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转化为二进制流：</p><p>注意参数<code>HttpServletResponse</code>的设置，以及 try-catch 包裹，最后还有惯例的<code> outputStream.flush()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/downloadExcel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadExcel</span><span class="params">(HttpServletRequest request, HttpServletResponse response, String chosenChapter)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        <span class="comment">// 写入数据到 Excel 文件</span></span><br><span class="line">        writeDataToExcel(result, outputStream);</span><br><span class="line">        <span class="comment">// 刷新流</span></span><br><span class="line">        outputStream.flush();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">// 处理异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeDataToExcel</span><span class="params">(List&lt;String[]&gt; data, OutputStream outputStream)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>()) &#123;</span><br><span class="line">        <span class="comment">// 将工作簿写入文件</span></span><br><span class="line">        workbook.write(outputStream);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="导出Excel"><a href="#导出Excel" class="headerlink" title="导出Excel"></a>导出Excel</h3><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 其他依赖 ... --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 请根据最新版本进行更改 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>构建表格列表</p><p>注意第一行就是表格最后的标题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/downloadExcel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadExcel</span><span class="params">(HttpServletRequest request, HttpServletResponse response, String chosenChapter)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个列表用于存储结果</span></span><br><span class="line">    List&lt;String[]&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 添加固定的标题行</span></span><br><span class="line">    result.add(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;学号&quot;</span>, <span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;班级&quot;</span>, <span class="string">&quot;章节&quot;</span>, <span class="string">&quot;完成bug数&quot;</span>, <span class="string">&quot;未完成bug数&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建查询条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;Grade&gt; gradeLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取符合条件的 Grade 列表</span></span><br><span class="line">    List&lt;Grade&gt; gradeList = gradeService.list(gradeLambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换 Grade 对象为 ExcelData 对象，去掉 createTime 和 updateTime</span></span><br><span class="line">    List&lt;ExcelData&gt; excelDataList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Grade grade : gradeList) &#123;</span><br><span class="line">        <span class="type">ExcelData</span> <span class="variable">excelData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExcelData</span>();</span><br><span class="line">        excelData.setStudentId(grade.getStudentId());</span><br><span class="line">        excelData.setId(grade.getId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 ExcelData 对象添加到列表</span></span><br><span class="line">        excelDataList.add(excelData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 ExcelData 对象转换为字符串数组，用于写入 Excel 文件</span></span><br><span class="line">    <span class="keyword">for</span> (ExcelData excelData : excelDataList) &#123;</span><br><span class="line">        String[] rowData = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                String.valueOf(excelData.getStudentId()),</span><br><span class="line">                excelData.getStudentName(),</span><br><span class="line">        &#125;;</span><br><span class="line">        result.add(rowData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置响应头</span></span><br><span class="line">    response.setContentType(<span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);</span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=output.xlsx&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        <span class="comment">// 写入数据到 Excel 文件</span></span><br><span class="line">        writeDataToExcel(result, outputStream);</span><br><span class="line">        <span class="comment">// 刷新流</span></span><br><span class="line">        outputStream.flush();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">// 处理异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出表格具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeDataToExcel</span><span class="params">(List&lt;String[]&gt; data, OutputStream outputStream)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>()) &#123;</span><br><span class="line">        <span class="comment">// 创建一个工作表</span></span><br><span class="line">        <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.createSheet(<span class="string">&quot;Sheet1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历数据并写入单元格</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rowNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (String[] rowData : data) &#123;</span><br><span class="line">            <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(rowNum++);</span><br><span class="line">            <span class="type">int</span> <span class="variable">colNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (String cellData : rowData) &#123;</span><br><span class="line">                <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.createCell(colNum++);</span><br><span class="line">                cell.setCellValue(cellData);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将工作簿写入文件</span></span><br><span class="line">        workbook.write(outputStream);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端部分查看下面的内容</p><p>最后总结一下我比较疑惑的点</p><p>其实就是明明我的 java 返回的是 void 类型，没有任何的参数，那前端是如何做到获取到我的数据的呢</p><p>最后了解发现，当方法返回类型为 <code>void</code> 时，通常表示该方法是一个”无返回值”的方法，它不会返回具体的数据给调用方。而不是说什么都不返回了</p><p>这里回顾一下目前接触过的返回方式有：JSON 格式的响应还是 HTTP 响应流，最终返回的方式取决于你在方法参数中是否加入<code>HttpServletResponse response</code></p><p>虽然从常规思路上来讲，方法参数不会影响返回方式，但是在这个方法中，<code>HttpServletResponse</code> 参数 <code>response</code> 是用于设置响应的一种手段。通过该对象，你可以设置响应头、操作输出流等，从而影响最终的响应内容。</p><p>后面测试也发现不设置相应头也能够正常下载正确的文件，目前看来更多像是一种规范，不过之前处理3d模型文件时还是用到请求头了的</p><h3 id="唤起浏览器下载功能"><a href="#唤起浏览器下载功能" class="headerlink" title="唤起浏览器下载功能"></a>唤起浏览器下载功能</h3><p>在正常接口下面，增加一个设置响应类型为 blob 就行</p><p>后端部分格式和上面一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">downloadExcel</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/grade/downloadExcel&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        params,</span><br><span class="line">        <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span>, <span class="comment">// 设置响应类型为 blob</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>js部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">downloadExcel</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> params = &#123;</span><br><span class="line">        <span class="attr">chosenChapter</span>: <span class="variable language_">this</span>.<span class="property">selectedchapter</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span>; <span class="comment">// 开始加载</span></span><br><span class="line">        <span class="comment">// 调用下载 Excel 文件的 API</span></span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">downloadExcel</span>(params);</span><br><span class="line">        <span class="comment">// 创建 Blob 对象，用于存储二进制数据</span></span><br><span class="line">        <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([res.<span class="property">data</span>]);</span><br><span class="line">        <span class="comment">// 生成下载链接</span></span><br><span class="line">        <span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">        <span class="comment">// 创建一个a标签用于下载</span></span><br><span class="line">        <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        link.<span class="property">href</span> = url;</span><br><span class="line">        link.<span class="property">download</span> = <span class="variable language_">this</span>.<span class="property">selectedchapter</span> + <span class="string">&#x27;.xlsx&#x27;</span>; <span class="comment">// 指定下载文件名</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(link);</span><br><span class="line">        <span class="comment">// 模拟用户点击下载链接</span></span><br><span class="line">        link.<span class="title function_">click</span>();</span><br><span class="line">        <span class="comment">// 移除临时创建的a标签</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(link);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span>; <span class="comment">// 加载完成</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求出错了：&#x27;</span> + err);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span>; <span class="comment">// 加载完成（出错）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="其他部分"><a href="#其他部分" class="headerlink" title="其他部分"></a>其他部分</h2><h3 id="教训"><a href="#教训" class="headerlink" title="教训"></a>教训</h3><p>一定要记住任何项目开始的时候都要建立仓库，方便后续版本更新，以及项目记录🥲</p><p>明确需求，提前做好调研，第一次只需要完成初步任务</p><h3 id="Centos-7系统的Linux服务器部署前端Vue项目"><a href="#Centos-7系统的Linux服务器部署前端Vue项目" class="headerlink" title="Centos 7系统的Linux服务器部署前端Vue项目"></a>Centos 7系统的Linux服务器部署前端Vue项目</h3><p>部署基础条件：Mac自带的shell软件、安装Centos7系统的Linux服务器</p><p>初步参考：<a href="https://zhuanlan.zhihu.com/p/431796992">前端Vue项目打包部署实战教程 - 知乎 (zhihu.com)</a></p><p>部署步骤：</p><p>1、通过shell连接到服务器</p><p>(1)打开Mac的终端，查看左上角的菜单，选择Shell的新建远程连接</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/clip_image001.png" alt="图形用户界面, 文本, 应用程序  描述已自动生成"></p><p>(2)配置远程连接的相关参数，最后点击连接</p><p>![图形用户界面, 文本, 应用程序  描述已自动生成](Users&#x2F;tec&#x2F;Library&#x2F;Group Containers&#x2F;UBF8T346G9.Office&#x2F;TemporaryItems&#x2F;msohtmlclip&#x2F;clip_image002.png)</p><p>(3)进入终端后输入密码后，显示上一次登录时间代表成功登录</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/clip_image003.png" alt="img"></p><p>2、安装nginx</p><p>(1) 先查看服务器是否有nginx</p><p>命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure><p>如果出现如下界面，则代表未安装nginx</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/clip_image004.png" alt="文本  描述已自动生成"></p><p>(2)使用yum安装Nginx</p><p>注意如果出现报错，可能是没有配置好yum的包管理</p><p>需要输入下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install epel-release</span><br></pre></td></tr></table></figure><p>连续输入两次y后会显示安装成功</p><p>此时再输入安装nginx的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nginx</span><br></pre></td></tr></table></figure><p>(3) 检查nginx是否安装成功</p><p>命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/clip_image005.png" alt="img"></p><p>3、修改nginx配置</p><p>(1) 先查看服务器的nginx文件地址</p><p>命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/clip_image006.png" alt="img"></p><p>(2)进入&#x2F;etc&#x2F;nginx目录下</p><p>此时&#x2F;etc&#x2F;nginx则是nginx配置文件存放位置，进入该文件夹命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/clip_image007.png" alt="img"></p><p>(3)使用nano文本编辑器对nginx.conf进行修改</p><p>注意如果显示不存在nano命令，需要先安装nano，方法和上面安装nginx命令一样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nano</span><br></pre></td></tr></table></figure><p>修改命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano nginx.conf</span><br></pre></td></tr></table></figure><p>运行后修改下面第一个方框的内容，修改为前端需要部署的端口</p><p>添加第二个方框的内容，指定前端打包后存放的位置</p><p>添加第三个方框的内容，具体原因会在最后一步访问页面时解释</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/clip_image008.png" alt="img"></p><p>输入control+x进行保存，后续会要求输入yes，以及是否改名，直接回车就可以</p><p>如果nginx正在启动中，需要重启nginx，来适配新修改的配置，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>4、启动nginx</p><p>(1)命令行输入启动命令</p><p>命令如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><p>(2)查看页面是否已经启动nginx</p><p>输入网址，比如说刚才指定的10.248.6.72:9000 端口</p><p>这时候会访问不到nginx的欢迎页</p><p>原因在于防火墙没有开放9000端口</p><p>下一步将去开放9000端口</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/clip_image009.png" alt="图形用户界面, 文本, 应用程序  描述已自动生成"></p><p>5、防火墙开启指定端口</p><p>注意下面的操作仅适配Centos系统</p><p>(1)查看防火墙状态</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --state</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/clip_image010.png" alt="图表  描述已自动生成"></p><p>如果返回的是 “not running”，那么需要先输入开启防火墙的命令；</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start firewalld.service</span><br></pre></td></tr></table></figure><p>(2)开启指定端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-port=9000/tcp --permanent</span><br></pre></td></tr></table></figure><p>显示 success 表示成功</p><p>–zone&#x3D;public 表示作用域为公共的</p><p>–add-port&#x3D;443&#x2F;tcp 添加 tcp 协议的端口端口号为 443</p><p>–permanent 永久生效，如果没有此参数，则只能维持当前 服 务生命周期内，重新启动后失效；</p><p>(3)重启防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart firewalld.service</span><br></pre></td></tr></table></figure><p>系统没有任何提示表示成功！</p><p>(4)重新加载防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>显示 success 表示成功</p><p>这时候就可以访问到服务器的9000端口了</p><p>6、传入nginx文件</p><p>(1)上传本地dist文件</p><p>在自己的本地找到dist文件，打开对应目录的终端，并输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo scp -r dist/ sdsy@10.248.6.72:/home/www</span><br></pre></td></tr></table></figure><p>此时会报下面的错误：</p><p>scp: stat remote: No such file or directory</p><p>scp: failed to upload directory dist&#x2F; to &#x2F;home&#x2F;www</p><p>原因是我们对于&#x2F;home&#x2F;www这个文件夹是没有权限的</p><p>(2)为文件夹赋予权限</p><p>输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 755 /home/www</span><br></pre></td></tr></table></figure><p>(3)重复第一步的命令，完成上传</p><p>7、访问部署的前端项目</p><p>输入<a href="http://10.248.6.72:9000/#/login%E5%8D%B3%E5%8F%AF%E8%AE%BF%E9%97%AE%E9%83%A8%E7%BD%B2%E7%9A%84%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE">http://10.248.6.72:9000/#/login即可访问部署的前端项目</a></p><p>但是注意可能出现404无法调用接口的情况，这时候之前在nginx里面的配置就有用了，在之前的配置中就指定了api的调用地址，这样nginx才能重定向到正确的地址</p><h3 id="Royal-TSX使用"><a href="#Royal-TSX使用" class="headerlink" title="Royal TSX使用"></a>Royal TSX使用</h3><p>链接：<a href="https://www.youtube.com/watch?v=GmgXrc2dP8I">怎样在Mac上SSH和FTP？完美替代XShell是哪个软件客户端？item2吗？Royal TSX! 没有比它更好 (youtube.com)</a></p><p>为什么学这个使用是因为之前传dist文件的时候一直提示没有该文件，后来还是通过增加文件读写权限成功传上文件了</p><h3 id="docker部署"><a href="#docker部署" class="headerlink" title="docker部署"></a>docker部署</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 学习</title>
      <link href="/posts/9bcebb3c.html"/>
      <url>/posts/9bcebb3c.html</url>
      
        <content type="html"><![CDATA[<h1 id="Kotlin-学习"><a href="#Kotlin-学习" class="headerlink" title="Kotlin 学习"></a>Kotlin 学习</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h3><p>变量使用var,常量使用val</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> a: <span class="built_in">Int</span> = <span class="number">1</span>  <span class="comment">// 立即赋值</span></span><br><span class="line">    <span class="keyword">val</span> b = <span class="number">2</span>   <span class="comment">// 自动推断出 `Int` 类型</span></span><br><span class="line">  <span class="keyword">val</span> c: <span class="built_in">Int</span>  <span class="comment">// 如果没有初始值类型不能省略</span></span><br><span class="line">    c = <span class="number">3</span>       <span class="comment">// 明确赋值</span></span><br><span class="line">  println(<span class="string">&quot;a = <span class="variable">$a</span>, b = <span class="variable">$b</span>, c = <span class="variable">$c</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">5</span> <span class="comment">// 自动推断出 `Int` 类型</span></span><br><span class="line">    x += <span class="number">1</span></span><br><span class="line">    println(<span class="string">&quot;x = <span class="variable">$x</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串模版"><a href="#字符串模版" class="headerlink" title="字符串模版"></a>字符串模版</h3><p>字符串模板使用 <code>$&#123;&#125;</code> 语法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">val</span> b = <span class="number">5</span></span><br><span class="line">println(<span class="string">&quot;Sum of <span class="variable">$a</span> and <span class="variable">$b</span> is <span class="subst">$&#123;a + b&#125;</span>&quot;</span>) <span class="comment">// 输出：Sum of 10 and 5 is 15</span></span><br></pre></td></tr></table></figure><h3 id="多行文本字符串"><a href="#多行文本字符串" class="headerlink" title="多行文本字符串"></a>多行文本字符串</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> multiLineString = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This is a multi-line</span></span><br><span class="line"><span class="string">    string in Kotlin.</span></span><br><span class="line"><span class="string">    It preserves line breaks</span></span><br><span class="line"><span class="string">    and indentation.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>.trimIndent() <span class="comment">// String类型的扩展函数，trimIndent 会去除换行</span></span><br><span class="line"></span><br><span class="line">println(multiLineString)</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>原生类型数组</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个大小为5的整数数组</span></span><br><span class="line"><span class="keyword">val</span> intArray: IntArray = IntArray(<span class="number">5</span>)</span><br><span class="line"><span class="comment">// 初始化数组元素</span></span><br><span class="line">intArray[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">intArray[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">intArray[<span class="number">2</span>] = <span class="number">3</span></span><br><span class="line">intArray[<span class="number">3</span>] = <span class="number">4</span></span><br><span class="line">intArray[<span class="number">4</span>] = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用数组字面值创建</span></span><br><span class="line"><span class="keyword">val</span> intArray = intArrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对象数组</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个字符串数组</span></span><br><span class="line"><span class="keyword">val</span> stringArray: Array&lt;String&gt; = arrayOf(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个任意类型的数组</span></span><br><span class="line"><span class="keyword">val</span> mixedArray: Array&lt;Any&gt; = arrayOf(<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>, <span class="number">3.14</span>, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>常见操作</p><ol><li>访问数组元素</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> value = intArray[<span class="number">2</span>] <span class="comment">// 获取下标为2的元素值</span></span><br></pre></td></tr></table></figure><ol start="2"><li>遍历数组</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (element <span class="keyword">in</span> intArray) &#123;</span><br><span class="line">    println(element)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用数组的高阶函数</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用forEach遍历数组</span></span><br><span class="line">intArray.forEach &#123; element -&gt;</span><br><span class="line">    println(element)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用map创建一个新数组</span></span><br><span class="line"><span class="keyword">val</span> squaredArray = intArray.map &#123; it * it &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>数组大小</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> size = intArray.size <span class="comment">// 获取数组大小</span></span><br></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>不可变集合</p><ol><li><p><strong>List<T>：</strong> 有序集合，允许重复元素。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list: List&lt;String&gt; = listOf(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>Set<T>：</strong> 无序集合，不允许重复元素。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> <span class="keyword">set</span>: Set&lt;<span class="built_in">Int</span>&gt; = setOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>Map&lt;K, V&gt;：</strong> 键值对集合。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> map: Map&lt;String, <span class="built_in">Int</span>&gt; = mapOf(<span class="string">&quot;one&quot;</span> to <span class="number">1</span>, <span class="string">&quot;two&quot;</span> to <span class="number">2</span>, <span class="string">&quot;three&quot;</span> to <span class="number">3</span>)</span><br></pre></td></tr></table></figure></li></ol><p>可变集合</p><ol><li><p><strong>MutableList<T>：</strong> 可变的有序集合。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> mutableList: MutableList&lt;String&gt; = mutableListOf(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>)</span><br><span class="line">mutableList.add(<span class="string">&quot;grape&quot;</span>) <span class="comment">// 添加元素</span></span><br></pre></td></tr></table></figure></li><li><p><strong>MutableSet<T>：</strong> 可变的无序集合。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> mutableSet: MutableSet&lt;<span class="built_in">Int</span>&gt; = mutableSetOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">mutableSet.add(<span class="number">6</span>) <span class="comment">// 添加元素</span></span><br></pre></td></tr></table></figure></li><li><p><strong>MutableMap&lt;K, V&gt;：</strong> 可变的键值对集合。</p><p>使用 to 来定义键值对</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> mutableMap: MutableMap&lt;String, <span class="built_in">Int</span>&gt; = mutableMapOf(<span class="string">&quot;one&quot;</span> to <span class="number">1</span>, <span class="string">&quot;two&quot;</span> to <span class="number">2</span>, <span class="string">&quot;three&quot;</span> to <span class="number">3</span>)</span><br><span class="line">mutableMap[<span class="string">&quot;four&quot;</span>] = <span class="number">4</span> <span class="comment">// 添加键值对</span></span><br></pre></td></tr></table></figure></li></ol><p>常见操作</p><p>1、遍历集合</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (element <span class="keyword">in</span> list) &#123;</span><br><span class="line">    println(element)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、使用高阶函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 使用forEach遍历集合</span><br><span class="line">list.forEach &#123; element -&gt;</span><br><span class="line">    println(element)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用map创建一个新集合</span><br><span class="line">val doubledList = list.map &#123; it.length * 2 &#125;3、过滤元素</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> filteredList = list.filter &#123; it.startsWith(<span class="string">&quot;a&quot;</span>) &#125;</span><br></pre></td></tr></table></figure><p>4、转换为其他类型</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> setFromList = list.toSet()</span><br><span class="line"><span class="keyword">val</span> mapFromList = list.associateBy &#123; it.first() &#125;</span><br></pre></td></tr></table></figure><h3 id="空安全"><a href="#空安全" class="headerlink" title="空安全"></a>空安全</h3><ol><li>可空类型（Nullable Types）</li></ol><p>在 Kotlin 中，使用 <code>?</code> 符号来表示一个变量可以为 null。例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> nullableString: String? = <span class="literal">null</span></span><br></pre></td></tr></table></figure><ol start="2"><li>安全调用运算符（Safe Call Operator）</li></ol><p>使用 <code>?.</code> 运算符来调用一个可空类型的方法或属性，如果对象为 null，表达式会返回 null 而不是抛出异常。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> length: <span class="built_in">Int</span>? = nullableString?.length</span><br></pre></td></tr></table></figure><ol start="3"><li>Elvis 运算符</li></ol><p>Elvis 运算符 <code>?:</code> 用于在表达式为 null 时提供一个备用值：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> result: String = nullableString ?: <span class="string">&quot;Default Value&quot;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>非空断言运算符（Non-null Assertion Operator）</li></ol><p><code>!!</code> 运算符用于将一个可空类型强制转换为非空类型，如果对象为 null，则会抛出 <code>NullPointerException</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> length: <span class="built_in">Int</span> = nullableString!!.length</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 非空断言运算符应该谨慎使用，因为它会绕过 Kotlin 的空安全检查。</p><ol start="5"><li>安全转换</li></ol><p>使用 <code>as?</code> 运算符进行安全类型转换，如果转换失败，返回 null。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> intValue: <span class="built_in">Int</span>? = stringValue <span class="keyword">as</span>? <span class="built_in">Int</span></span><br></pre></td></tr></table></figure><ol start="6"><li>lateinit 属性</li></ol><p><code>lateinit</code> 关键字用于标记属性为延迟初始化，允许在之后初始化，但在初始化之前访问该属性会抛出异常。</p><p>不推荐使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> name: String</span><br></pre></td></tr></table></figure><ol start="7"><li>安全的类型检查和自动类型转换</li></ol><p>使用 <code>is</code> 运算符进行安全的类型检查，并自动转换为非空类型：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (nullableString <span class="keyword">is</span> String) &#123;</span><br><span class="line">    <span class="comment">// 在这个块中，nullableString 自动转换为非空类型 String</span></span><br><span class="line">    <span class="keyword">val</span> length: <span class="built_in">Int</span> = nullableString.length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件判断语句"><a href="#条件判断语句" class="headerlink" title="条件判断语句"></a>条件判断语句</h3><p>在 Kotlin 中，条件判断语句主要有 <code>if</code> 表达式和 <code>when</code> 表达式。下面我将介绍这两种条件判断语句的用法：</p><ol><li><code>if</code> 表达式</li></ol><p>基本用法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> number = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    println(<span class="string">&quot;Number is positive&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (number &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    println(<span class="string">&quot;Number is negative&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Number is zero&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作为表达式</p><p><code>if</code> 语句在 Kotlin 中是一个表达式，可以用于赋值：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> result = <span class="keyword">if</span> (number &gt; <span class="number">0</span>) <span class="string">&quot;Positive&quot;</span> <span class="keyword">else</span> <span class="string">&quot;Non-positive&quot;</span></span><br><span class="line">println(result)</span><br></pre></td></tr></table></figure><ol start="2"><li><code>when</code> 表达式</li></ol><p>基本用法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> x = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">when</span> (x) &#123;</span><br><span class="line">    <span class="number">1</span> -&gt; println(<span class="string">&quot;One&quot;</span>)</span><br><span class="line">    <span class="number">2</span> -&gt; println(<span class="string">&quot;Two&quot;</span>)</span><br><span class="line">    <span class="number">3</span>, <span class="number">4</span> -&gt; println(<span class="string">&quot;Three or Four&quot;</span>) <span class="comment">// 匹配多个值</span></span><br><span class="line">    <span class="keyword">in</span> <span class="number">5.</span><span class="number">.10</span> -&gt; println(<span class="string">&quot;Between 5 and 10&quot;</span>) <span class="comment">// 匹配范围</span></span><br><span class="line">    <span class="keyword">else</span> -&gt; println(<span class="string">&quot;Other&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用表达式作为分支条件</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> result = <span class="keyword">when</span> (x) &#123;</span><br><span class="line">    <span class="keyword">in</span> <span class="number">1.</span><span class="number">.5</span> -&gt; <span class="string">&quot;Small&quot;</span></span><br><span class="line">    <span class="keyword">in</span> <span class="number">6.</span><span class="number">.10</span> -&gt; <span class="string">&quot;Medium&quot;</span></span><br><span class="line">    <span class="keyword">else</span> -&gt; <span class="string">&quot;Large&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">println(<span class="string">&quot;Result: <span class="variable">$result</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>使用 is 关键字进行类型检查</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> value: Any = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">when</span> (value) &#123;</span><br><span class="line">    <span class="keyword">is</span> String -&gt; println(<span class="string">&quot;It&#x27;s a string&quot;</span>)</span><br><span class="line">    <span class="keyword">is</span> <span class="built_in">Int</span> -&gt; println(<span class="string">&quot;It&#x27;s an integer&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; println(<span class="string">&quot;Unknown type&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有参数的 when 表达式</p><p>如果 <code>when</code> 表达式没有参数，它的分支条件是布尔表达式：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> isEven = <span class="keyword">when</span> &#123;</span><br><span class="line">    x % <span class="number">2</span> == <span class="number">0</span> -&gt; <span class="literal">true</span></span><br><span class="line">    <span class="keyword">else</span> -&gt; <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">println(<span class="string">&quot;Is <span class="variable">$x</span> even? <span class="variable">$isEven</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="in-和-区间"><a href="#in-和-区间" class="headerlink" title="in 和 区间"></a>in 和 区间</h3><p>区间表示一个连续的数值范围。在 Kotlin 中，区间可以表示为使用 <code>..</code> 运算符的形式。</p><p>半开区间</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> range = <span class="number">1.</span><span class="number">.5</span> <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">3</span> <span class="keyword">in</span> range) &#123;</span><br><span class="line">    println(<span class="string">&quot;3 is in the range&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开区间</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> openRange = <span class="number">1</span> until <span class="number">5</span> <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"><span class="keyword">val</span> openRange = <span class="number">1</span> ..&lt; <span class="number">5</span> <span class="comment">// 这是1.8版本更新后的开区间表示方法，推荐使用这个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">5</span> !<span class="keyword">in</span> openRange) &#123;</span><br><span class="line">    println(<span class="string">&quot;5 is not in the open range&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义步长的区间</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> customRange = <span class="number">10</span> downTo <span class="number">1</span> step <span class="number">2</span> <span class="comment">// [10, 8, 6, 4, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">6</span> <span class="keyword">in</span> customRange) &#123;</span><br><span class="line">    println(<span class="string">&quot;6 is in the custom range&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h3><p>在 Kotlin 中，有两种主要的循环结构：<code>for</code> 循环和 <code>while</code> 循环。此外，还有一种 <code>do-while</code> 循环。以下是这些循环结构的基本用法：</p><ol><li><code>for</code> 循环</li></ol><p>遍历集合或数组</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (number <span class="keyword">in</span> numbers) &#123;</span><br><span class="line">    println(number)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>..</code> 创建数值范围</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.5</span>) &#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>downTo</code> 和 <code>step</code> 创建递减和自定义步长的范围</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">5</span> downTo <span class="number">1</span> step <span class="number">2</span>) &#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>while</code> 循环</li></ol><p>基本用法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (x &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    println(x)</span><br><span class="line">    x++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>do-while</code> 循环</li></ol><p>基本用法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> y = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    println(y)</span><br><span class="line">    y++</span><br><span class="line">&#125; <span class="keyword">while</span> (y &lt; <span class="number">5</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li><code>foreach</code>循环</li><li>控制流语句</li></ol><p>在 Kotlin 中，<code>forEach</code> 是集合类（包括数组）提供的一个扩展函数，用于遍历集合中的元素。这是一种更具 Kotlin 风格的循环语法。以下是 <code>forEach</code> 的用法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 forEach 遍历集合</span></span><br><span class="line">numbers.forEach &#123; number -&gt;</span><br><span class="line">    println(number)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意在 forEach 内部默认 it 为内置的元素</span></span><br><span class="line">numbers.forEach &#123;</span><br><span class="line">    println(it)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，<code>forEach</code> 接受一个 lambda 表达式作为参数，该 lambda 表达式会对集合中的每个元素执行相应的操作。在 lambda 表达式中，<code>number</code> 是集合中的元素。</p><p>对于数组，<code>forEach</code> 同样适用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbersArray = intArrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">numbersArray.forEach &#123; number -&gt;</span><br><span class="line">    println(number)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>forEach</code> 使得集合的遍历更加简洁和易读，是 Kotlin 中推荐的一种方式。需要注意的是，<code>forEach</code> 是只读的，不能用于修改集合中的元素。如果需要修改元素，可以使用 <code>forEachIndexed</code>，该函数提供了元素索引的信息：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> mutableList = mutableListOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">mutableList.forEachIndexed &#123; index, value -&gt;</span><br><span class="line">    mutableList[index] = value * <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">println(mutableList) <span class="comment">// 输出 [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><p>这样，<code>forEach</code> 可以方便地遍历集合中的元素，而 <code>forEachIndexed</code> 则提供了对元素索引的访问。</p><p><code>break</code> 和 <code>continue</code></p><p>在循环中使用 <code>break</code> 可以退出循环，而 <code>continue</code> 可以跳过当前迭代。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span> <span class="comment">// 退出循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span> <span class="comment">// 跳过当前迭代，进入下一次循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>return</code> 标签</p><p>在嵌套循环中，可以使用 <code>return</code> 标签从最外层的函数或 lambda 表达式中返回。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="symbol">outer@</span> <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.5</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">1.</span><span class="number">.5</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * j &gt; <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span><span class="symbol">@outer</span> <span class="comment">// 从 foo 函数返回</span></span><br><span class="line">            &#125;</span><br><span class="line">            println(i * j)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>在 Kotlin 中，函数是一等公民，具有许多强大的特性。以下是 Kotlin 中函数的基本用法：</p><ol><li>函数声明</li></ol><p>Kotlin 中的函数声明包括函数名称、参数列表、返回类型和函数体。下面是一个简单的函数示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>sum</code> 是函数名，<code>(a: Int, b: Int)</code> 是参数列表，<code>Int</code> 是返回类型，<code>a + b</code> 是函数体。</p><ol start="2"><li>函数调用</li></ol><p>调用函数时，可以像下面这样使用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> result = sum(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">println(result) <span class="comment">// 输出 8</span></span><br></pre></td></tr></table></figure><ol start="3"><li>默认参数和命名参数</li></ol><p>Kotlin 允许为函数的参数设置默认值，也支持通过参数名进行调用。例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">greet</span><span class="params">(name: <span class="type">String</span> = <span class="string">&quot;Guest&quot;</span>, greeting: <span class="type">String</span> = <span class="string">&quot;Hello&quot;</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;<span class="variable">$greeting</span>, <span class="variable">$name</span>!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet() <span class="comment">// 输出 &quot;Hello, Guest!&quot;</span></span><br><span class="line">greet(<span class="string">&quot;John&quot;</span>) <span class="comment">// 输出 &quot;Hello, John!&quot;</span></span><br><span class="line">greet(greeting = <span class="string">&quot;Hi&quot;</span>, name = <span class="string">&quot;Alice&quot;</span>) <span class="comment">// 输出 &quot;Hi, Alice!&quot;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>可变数量的参数</li></ol><p>Kotlin 支持通过 <code>vararg</code> 关键字来定义可变数量的参数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printNumbers</span><span class="params">(<span class="keyword">vararg</span> numbers: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (number <span class="keyword">in</span> numbers) &#123;</span><br><span class="line">        println(number)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printNumbers(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>单表达式函数</li></ol><p>对于单表达式的函数，可以简化成如下形式：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">multiply</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> = a * b</span><br></pre></td></tr></table></figure><ol start="6"><li>Lambda 表达式</li></ol><p>Kotlin 支持使用 Lambda 表达式来定义匿名函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> square: (<span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> = &#123; x -&gt; x * x &#125;</span><br><span class="line">println(square(<span class="number">5</span>)) <span class="comment">// 输出 25</span></span><br></pre></td></tr></table></figure><ol start="7"><li>高阶函数</li></ol><p>Kotlin 支持高阶函数，可以将函数作为参数传递给其他函数，或者从函数中返回一个函数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">operateOnNumbers</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>, operation: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> operation(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> result = operateOnNumbers(<span class="number">3</span>, <span class="number">5</span>) &#123; x, y -&gt; x + y &#125;</span><br><span class="line">println(result) <span class="comment">// 输出 8</span></span><br></pre></td></tr></table></figure><ol start="8"><li>尾递归函数</li></ol><p>Kotlin 支持尾递归函数，可以使用 <code>tailrec</code> 修饰符标记递归函数，以便进行优化。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">tailrec</span> <span class="function"><span class="keyword">fun</span> <span class="title">factorial</span><span class="params">(n: <span class="type">Int</span>, result: <span class="type">Int</span> = <span class="number">1</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (n == <span class="number">0</span>) result <span class="keyword">else</span> factorial(n - <span class="number">1</span>, n * result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><p>在 Kotlin 中，类和对象是面向对象编程的基本概念。以下是关于类和对象的基本知识：</p><ol><li>类的声明</li></ol><p>在 Kotlin 中，使用 <code>class</code> 关键字声明类。一个类可以包含属性、方法和初始化块。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="keyword">var</span> name: String = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">speak</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Hello, my name is <span class="variable">$name</span> and I&#x27;m <span class="variable">$age</span> years old.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>对象的创建</li></ol><p>使用 <code>new</code> 关键字创建对象的过程在 Kotlin 中是隐式的，直接使用类名并提供适当的参数即可。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> person = Person()</span><br><span class="line">person.name = <span class="string">&quot;John&quot;</span></span><br><span class="line">person.age = <span class="number">30</span></span><br><span class="line">person.speak()</span><br></pre></td></tr></table></figure><p>或者可以在创建对象时初始化属性：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> person = Person().apply &#123;</span><br><span class="line">    name = <span class="string">&quot;John&quot;</span></span><br><span class="line">    age = <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line">person.speak()</span><br></pre></td></tr></table></figure><ol start="3"><li>构造函数</li></ol><p>Kotlin 的类可以有主构造函数和次构造函数。主构造函数通常在类头部声明，次构造函数使用 <code>constructor</code> 关键字。</p><p>主构造函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次构造函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: String = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(name: String, age: <span class="built_in">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实际上上面的并不是次构造函数，因为上面的 Person 没有括号，实际上没有主构造函数，上面的 constructor 就变成了主构造函数</span></span><br><span class="line"><span class="comment">// 下面的才是次构造函数，注意这个 this，作为次构造函数需要为主构造函数提供需要的值，但是我主函数没有需要的值，所以直接 this()</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>() &#123;</span><br><span class="line">    <span class="keyword">var</span> name: String = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(name: String, age: <span class="built_in">Int</span>):<span class="keyword">this</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问和厲性修饰符"><a href="#访问和厲性修饰符" class="headerlink" title="访问和厲性修饰符"></a>访问和厲性修饰符</h3><p>在 Kotlin 中，访问修饰符和可见性修饰符用于控制代码中各个元素（类、函数、属性等）的可见性和访问权限。以下是 Kotlin 中常见的修饰符：</p><ol><li>可见性修饰符</li></ol><p>在 Kotlin 中，有四种可见性修饰符：</p><ul><li><strong>public：</strong> 默认的修饰符，对所有可见。</li><li><strong>internal：</strong> 模块内可见，一个模块是一组一起编译的 Kotlin 文件。</li><li><strong>protected：</strong> 类内部和子类可见。</li><li><strong>private：</strong> 类内部可见。</li></ul><p>示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="comment">// 默认是 public</span></span><br><span class="line">    <span class="keyword">val</span> publicVar = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// internal 修饰符</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">val</span> internalVar = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// protected 修饰符</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">val</span> protectedVar = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// private 修饰符</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> privateVar = <span class="number">40</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>成员修饰符</li></ol><p>在 Kotlin 中，成员修饰符主要包括 <code>public</code>、<code>internal</code>、<code>protected</code>、<code>private</code> 以及 <code>protected internal</code>。</p><p>示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> publicVar = <span class="number">10</span> <span class="comment">// 默认是 public</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">val</span> internalVar = <span class="number">20</span> <span class="comment">// internal 修饰符</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">val</span> protectedVar = <span class="number">30</span> <span class="comment">// protected 修饰符</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> privateVar = <span class="number">40</span> <span class="comment">// private 修饰符</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">internal</span> <span class="keyword">val</span> protectedInternalVar = <span class="number">50</span> <span class="comment">// protected internal 修饰符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>模块内可见性</li></ol><p>使用 <code>internal</code> 修饰符，一个模块内的所有代码都能访问该属性或函数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ModuleA.kt</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">val</span> moduleVariable = <span class="string">&quot;I&#x27;m internal&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ModuleB.kt</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">accessModuleVariable</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(moduleVariable) <span class="comment">// 在同一模块内可以访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>顶层声明的可见性</li></ol><p>在 Kotlin 中，顶层声明（没有包装在类或函数内的声明）的可见性受限于它所在的包的可见性。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file1.kt</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> topLevelVariable = <span class="string">&quot;I&#x27;m private&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// file2.kt</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">accessTopLevelVariable</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 不能在其他文件中访问 topLevelVariable</span></span><br><span class="line">    <span class="comment">// 会导致编译错误</span></span><br><span class="line">    <span class="comment">// println(topLevelVariable)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>构造函数的可见性</li></ol><p>类的主构造函数的可见性默认是 <code>public</code>，如果你希望构造函数有其他可见性，可以使用相应的修饰符。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> <span class="keyword">private</span> <span class="keyword">constructor</span>(<span class="keyword">private</span> <span class="keyword">val</span> value: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在其他文件中无法直接调用主构造函数</span></span><br><span class="line"><span class="comment">// val example = Example(42)</span></span><br></pre></td></tr></table></figure><p>这些修饰符和规则有助于在 Kotlin 中控制代码的访问和可见性，以确保代码的封装性和安全性。</p><h3 id="类的继承与重写"><a href="#类的继承与重写" class="headerlink" title="类的继承与重写"></a>类的继承与重写</h3><ol><li>类的继承</li></ol><p>在 Kotlin 中，使用 <code>:</code>（冒号）来表示类的继承关系。一个类可以继承另一个类，而被继承的类称为父类（或超类），继承的类称为子类。</p><p>示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="keyword">val</span> name: String) &#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">makeSound</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Animal makes a sound&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(name: String, <span class="keyword">val</span> breed: String) : Animal(name) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">makeSound</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Dog barks&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Dog</code> 类继承了 <code>Animal</code> 类，并且重写了 <code>makeSound</code> 方法。</p><ol start="2"><li><code>open</code> 关键字</li></ol><p>在 Kotlin 中，如果你希望一个类可以被继承，或者一个方法可以被子类重写，需要使用 <code>open</code> 关键字。在上面的例子中，<code>Animal</code> 类和 <code>makeSound</code> 方法都被标记为 <code>open</code>。</p><ol start="3"><li>重写方法</li></ol><p>在子类中，通过 <code>override</code> 关键字来重写父类中的方法。</p><p>注意方法前面也需要加上<code>open</code></p><p>示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">makeSound</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Animal makes a sound&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> : <span class="type">Animal</span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">makeSound</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Dog barks&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">val</span> myDog = Dog()</span><br><span class="line">myDog.makeSound() <span class="comment">// 输出 &quot;Dog barks&quot;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><code>super</code> 关键字</li></ol><p>在子类中，使用 <code>super</code> 关键字可以调用父类的方法或属性。</p><p>示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">makeSound</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Animal makes a sound&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> : <span class="type">Animal</span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">makeSound</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.makeSound() <span class="comment">// 调用父类的方法</span></span><br><span class="line">        println(<span class="string">&quot;Dog barks&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">val</span> myDog = Dog()</span><br><span class="line">myDog.makeSound()</span><br></pre></td></tr></table></figure><h3 id="抽象，嵌套和内部类"><a href="#抽象，嵌套和内部类" class="headerlink" title="抽象，嵌套和内部类"></a>抽象，嵌套和内部类</h3><ol><li>抽象类（Abstract Classes）</li></ol><p>抽象类是不能被实例化的类，它通常用于定义一些通用的行为，但需要在子类中进行具体的实现。在 Kotlin 中，使用 <code>abstract</code> 关键字声明抽象类和抽象方法。</p><p>示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">()</span></span> <span class="comment">// 抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> : <span class="type">Shape</span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Drawing a circle&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">val</span> myCircle = Circle()</span><br><span class="line">myCircle.draw() <span class="comment">// 输出 &quot;Drawing a circle&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>嵌套类（Nested Classes）</li></ol><p>在 Kotlin 中，使用 <code>class</code> 关键字嵌套在另一个类中定义的类称为嵌套类。嵌套类不能访问外部类的实例，它类似于 Java 中的静态嵌套类。</p><p>注意使用的话不需要 Outer() 可以直接通过Outer 获取到他的嵌套类</p><p>示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> outerVar: <span class="built_in">Int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Nested</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">accessOuterVar</span><span class="params">(outer: <span class="type">Outer</span>)</span></span> &#123;</span><br><span class="line">            <span class="comment">// 无法直接访问 outerVar，因为 Nested 类没有引用到 Outer 的实例</span></span><br><span class="line">            <span class="comment">// println(outer.outerVar)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">val</span> nested = Outer.Nested()</span><br></pre></td></tr></table></figure><ol start="3"><li>内部类（Inner Classes）</li></ol><p>内部类是在另一个类内部声明的类，并且可以访问外部类的实例。在 Kotlin 中，使用 <code>inner</code> 关键字声明内部类。</p><p>示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> outerVar: <span class="built_in">Int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">inner</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">accessOuterVar</span><span class="params">()</span></span> &#123;</span><br><span class="line">            println(outerVar)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">val</span> outer = Outer()</span><br><span class="line"><span class="keyword">val</span> <span class="keyword">inner</span> = outer.Inner()</span><br><span class="line"><span class="keyword">inner</span>.accessOuterVar() <span class="comment">// 输出 10</span></span><br></pre></td></tr></table></figure><p>内部类可以访问外部类的成员，包括私有成员。在内部类中，使用 <code>this@Outer</code> 来引用外部类的实例。</p><p>总结</p><ul><li><strong>抽象类：</strong> 用于定义一些通用的行为，需要在子类中进行具体的实现。</li><li><strong>嵌套类：</strong> 在另一个类中定义的类，类似于静态嵌套类，无法访问外部类的实例。</li><li><strong>内部类：</strong> 在另一个类中定义的类，可以访问外部类的实例，使用 <code>inner</code> 关键字声明。</li></ul><p>这些特殊的类形式提供了不同的语法和行为，可以根据具体的需求选择适当的形式。 </p><h3 id="接口与接口实现"><a href="#接口与接口实现" class="headerlink" title="接口与接口实现"></a>接口与接口实现</h3><p>在 Kotlin 中，接口是一种定义抽象方法和属性的方式，而接口的实现则通过类来完成。以下是关于接口和接口实现的基本知识：</p><ol><li>定义接口</li></ol><p>在 Kotlin 中，使用 <code>interface</code> 关键字来定义接口。接口可以包含抽象方法、属性、以及具有默认实现的方法。</p><p>示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> name: String <span class="comment">// 抽象属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">()</span></span> <span class="comment">// 抽象方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">resize</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Resizing <span class="variable">$name</span>&quot;</span>) <span class="comment">// 默认实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>实现接口</li></ol><p>使用 <code>class</code> 关键字来实现一个接口，类可以实现多个接口。</p><p>示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>(<span class="keyword">override</span> <span class="keyword">val</span> name: String) : Shape &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Drawing a circle&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>(<span class="keyword">override</span> <span class="keyword">val</span> name: String) : Shape &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Drawing a rectangle&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>接口中的属性</li></ol><p>接口可以包含抽象属性和具有默认实现的属性。实现类可以选择实现或重写这些属性。</p><p>示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> name: String <span class="comment">// 抽象属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> color: String <span class="comment">// 具有默认实现的属性</span></span><br><span class="line">        <span class="keyword">get</span>() = <span class="string">&quot;Red&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>(<span class="keyword">override</span> <span class="keyword">val</span> name: String) : Shape &#123;</span><br><span class="line">    <span class="comment">// 可以选择实现 color 属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>(<span class="keyword">override</span> <span class="keyword">val</span> name: String, <span class="keyword">override</span> <span class="keyword">val</span> color: String) : Shape &#123;</span><br><span class="line">    <span class="comment">// 可以选择重写 color 属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>接口的继承</li></ol><p>接口可以继承其他接口，使用冒号 <code>:</code> 来表示继承关系。实现类需要实现所有继承的接口中的抽象成员。</p><p>示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Draggable</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">drag</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Resizable</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">resize</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span> : <span class="type">Draggable</span>, <span class="type">Resizable</span> &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">drag</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Dragging button&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">resize</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Resizing button&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据类，伴生类，枚举类"><a href="#数据类，伴生类，枚举类" class="headerlink" title="数据类，伴生类，枚举类"></a>数据类，伴生类，枚举类</h3><p>在 Kotlin 中，数据类（Data Classes）、伴生对象（Companion Objects）和枚举类（Enum Classes）是语言提供的一些特殊类形式，用于简化和增强代码。以下是关于这些类形式的详细说明：</p><ol><li>数据类（Data Classes）</li></ol><p>数据类是一种用于存储数据的特殊类，它自动提供一些通用的方法，如 <code>toString()</code>、<code>equals()</code>、<code>hashCode()</code> 等，以及自动生成 <code>componentN()</code> 函数用于解构。</p><p>示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">val</span> person1 = Person(<span class="string">&quot;John&quot;</span>, <span class="number">30</span>)</span><br><span class="line"><span class="keyword">val</span> person2 = Person(<span class="string">&quot;John&quot;</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">println(person1) <span class="comment">// 输出 &quot;Person(name=John, age=30)&quot;</span></span><br><span class="line">println(person1 == person2) <span class="comment">// 输出 &quot;true&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>伴生对象（Companion Objects）</li></ol><p>在 Kotlin 中，每个类都可以有一个伴生对象，通过 <code>companion object</code> 关键字声明。伴生对象类似于 Java 中的静态成员，但可以访问类的私有成员。</p><p>示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">()</span></span>: MyClass = MyClass()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">val</span> instance = MyClass.create()</span><br></pre></td></tr></table></figure><ol start="3"><li>枚举类（Enum Classes）</li></ol><p>枚举类是一种用于表示一组常量的特殊类。枚举类可以包含属性、方法，每个枚举常量都是对象，这点比 java 要灵活的多。</p><p>示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title class_">Color</span>(<span class="keyword">val</span> rgb: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    RED(<span class="number">0xFF0000</span>),</span><br><span class="line">    GREEN(<span class="number">0x00FF00</span>),</span><br><span class="line">    BLUE(<span class="number">0x0000FF</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">printColor</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;RGB: <span class="variable">$rgb</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">val</span> color = Color.RED</span><br><span class="line">println(color) <span class="comment">// 输出 &quot;RED&quot;</span></span><br><span class="line">color.printColor() <span class="comment">// 输出 &quot;RGB: 16711680&quot;</span></span><br></pre></td></tr></table></figure><p>枚举类的每个常量都是该枚举类的实例，可以拥有自己的属性和方法。</p><p>总结</p><ul><li><strong>数据类（Data Classes）：</strong> 用于存储数据，自动生成通用方法。</li><li><strong>伴生对象（Companion Objects）：</strong> 为类提供静态成员，可以访问类的私有成员。</li><li><strong>枚举类（Enum Classes）：</strong> 用于表示一组常量，每个常量是该枚举类的实例，可以包含属性和方法。</li></ul><p>这些特殊的类形式使得在 Kotlin 中编写清晰、简洁和易读的代码变得更加容易。</p><h3 id="单例和对象表达式"><a href="#单例和对象表达式" class="headerlink" title="单例和对象表达式"></a>单例和对象表达式</h3><p>在 Kotlin 中，单例对象和对象表达式都是用于创建单一实例的方式，但它们有不同的使用场景和特性。</p><ol><li>单例对象</li></ol><p>在 Kotlin 中，通过使用 <code>object</code> 关键字，可以创建一个单例对象。这个对象在程序运行期间只有一个实例，它在第一次被访问时被创建。</p><p>正是因为只有一个实例，所以实际上单例对象里的属性就达成了全局变量的效果，这一点使得单例对象将会被经常用到</p><p>示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> MySingleton &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">doSomething</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Doing something in MySingleton&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">MySingleton.doSomething()</span><br></pre></td></tr></table></figure><ol start="2"><li>对象表达式</li></ol><p>对象表达式用于创建一个匿名对象，通常在需要一个对象实例而不需要显式声明一个新类的情况下使用。对象表达式可以实现一个接口或继承一个类。</p><p>示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">doSomething</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">createObject</span><span class="params">()</span></span>: MyInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">object</span> : MyInterface &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doSomething</span><span class="params">()</span></span> &#123;</span><br><span class="line">            println(<span class="string">&quot;Doing something in anonymous object&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">val</span> myObject = createObject()</span><br><span class="line">myObject.doSomething()</span><br></pre></td></tr></table></figure><p>在上述示例中，<code>createObject</code> 函数返回一个实现了 <code>MyInterface</code> 接口的匿名对象。</p><p>总结</p><ul><li><strong>单例对象：</strong> 使用 <code>object</code> 关键字，用于创建一个全局唯一的实例，通常用于共享的资源或全局操作。</li><li><strong>对象表达式：</strong> 用于创建一个匿名对象，通常在需要一个对象实例而不需要显式声明新类的情况下使用。</li></ul><p>这些概念提供了在 Kotlin 中创建单一实例的不同方式，使得代码更加灵活和可读。</p><h3 id="密封类和密封接口"><a href="#密封类和密封接口" class="headerlink" title="密封类和密封接口"></a>密封类和密封接口</h3><p>在 Kotlin 中，密封类（Sealed Classes）和密封接口（Sealed Interfaces）是用于表示受限制的继承结构的概念，它们限制了继承结构的层次，通常用于在编写代码时提供更强大的静态分析。</p><ol><li>密封类（Sealed Classes）</li></ol><p>密封类是一种特殊的类，用于表示有限的继承结构，即这些类的子类是有限的，所有子类都需要在同一个文件中声明。密封类用 <code>sealed</code> 关键字声明。</p><p>示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Success</span>(<span class="keyword">val</span> <span class="keyword">data</span>: String) : Result()</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Error</span>(<span class="keyword">val</span> message: String) : Result()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">processResult</span><span class="params">(result: <span class="type">Result</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">when</span> (result) &#123;</span><br><span class="line">        <span class="keyword">is</span> Result.Success -&gt; println(<span class="string">&quot;Success: <span class="subst">$&#123;result.data&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">is</span> Result.Error -&gt; println(<span class="string">&quot;Error: <span class="subst">$&#123;result.message&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">val</span> successResult: Result = Result.Success(<span class="string">&quot;Data&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> errorResult: Result = Result.Error(<span class="string">&quot;Error Message&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理实例</span></span><br><span class="line">processResult(successResult)</span><br><span class="line">processResult(errorResult)</span><br></pre></td></tr></table></figure><p>在上述示例中，<code>Result</code> 是密封类，它有两个子类 <code>Success</code> 和 <code>Error</code>。由于密封类的所有子类都在同一个文件中，因此 <code>when</code> 表达式中的分支是完备的，不需要添加 <code>else</code> 分支。</p><ol start="2"><li>密封接口（Sealed Interfaces）</li></ol><p>密封接口是一种类似的概念，它也限制了接口的实现类的层次结构。密封接口使用 <code>sealed</code> 关键字声明。</p><p>示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">interface</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Success</span>(<span class="keyword">val</span> <span class="keyword">data</span>: String) : Result</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Error</span>(<span class="keyword">val</span> message: String) : Result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">processResult</span><span class="params">(result: <span class="type">Result</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">when</span> (result) &#123;</span><br><span class="line">        <span class="keyword">is</span> Result.Success -&gt; println(<span class="string">&quot;Success: <span class="subst">$&#123;result.data&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">is</span> Result.Error -&gt; println(<span class="string">&quot;Error: <span class="subst">$&#123;result.message&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">val</span> successResult: Result = Result.Success(<span class="string">&quot;Data&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> errorResult: Result = Result.Error(<span class="string">&quot;Error Message&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理实例</span></span><br><span class="line">processResult(successResult)</span><br><span class="line">processResult(errorResult)</span><br></pre></td></tr></table></figure><p>密封接口的使用方式类似于密封类，但密封接口通常用于接口层次结构的限制。</p><p>总结</p><ul><li><strong>密封类：</strong> 使用 <code>sealed</code> 关键字声明，用于表示有限的继承结构，所有子类需要在同一个文件中声明。</li><li><strong>密封接口：</strong> 使用 <code>sealed</code> 关键字声明，用于表示有限的接口实现结构，所有实现类需要在同一个文件中声明。</li></ul><p>这些概念在编写代码时可以提供更强大的模型，确保在使用继承结构时更加安全和可靠。</p><h3 id="扩展函数"><a href="#扩展函数" class="headerlink" title="扩展函数"></a>扩展函数</h3><p>在 Kotlin 中，扩展函数是一种强大的功能，允许你在不修改类的源代码的情况下，向类添加新的函数。扩展函数通过 <code>receiverType.functionName</code> 的形式定义。</p><p>最关键的在于这样就可以去封装一些比较基础的类下面的方法，这点是 java 做不到的</p><p>以下是一些关于扩展函数的基本知识：</p><ol><li>定义扩展函数</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 String 类上定义扩展函数</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">addExclamation</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;<span class="variable">$this</span>!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 MutableList 类上定义扩展函数</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> MutableList<span class="type">&lt;T&gt;</span>.<span class="title">swap</span><span class="params">(index1: <span class="type">Int</span>, index2: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> tmp = <span class="keyword">this</span>[index1]</span><br><span class="line">    <span class="keyword">this</span>[index1] = <span class="keyword">this</span>[index2]</span><br><span class="line">    <span class="keyword">this</span>[index2] = tmp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述示例中，<code>addExclamation</code> 是对 <code>String</code> 类的扩展函数，而 <code>swap</code> 是对 <code>MutableList&lt;T&gt;</code> 类的扩展函数。</p><ol start="2"><li>使用扩展函数</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> greeting = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="keyword">val</span> modifiedGreeting = greeting.addExclamation()</span><br><span class="line">println(modifiedGreeting)  <span class="comment">// 输出 &quot;Hello!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> numbers = mutableListOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">numbers.swap(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">println(numbers)  <span class="comment">// 输出 [3, 2, 1, 4]</span></span><br></pre></td></tr></table></figure><ol start="3"><li>可空接收者类型</li></ol><p>扩展函数可以被声明为可空接收者类型，这样它就可以在 <code>null</code> 对象上调用，而不会引发空指针异常。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> String?.<span class="title">printLength</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">        println(<span class="string">&quot;String is null&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Length of the string is <span class="subst">$&#123;this.length&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> nullableString: String? = <span class="literal">null</span></span><br><span class="line">nullableString.printLength()  <span class="comment">// 输出 &quot;String is null&quot;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>扩展函数的作用域</li></ol><ul><li><strong>在文件顶层声明：</strong> 扩展函数可以在任何地方声明，不必在类内部。</li><li><strong>在某个类内声明：</strong> 如果在类内部声明扩展函数，那么这个函数只在该类的作用域内可用。</li><li><strong>在伴生对象中声明：</strong> 如果在类的伴生对象内声明扩展函数，它将在整个类的作用域内可用。</li></ul><ol start="5"><li>扩展函数不会真正修改类</li></ol><p>尽管扩展函数被调用时看起来像是在类内部定义的方法，但它们实际上并没有修改类的源代码。它们是静态解析的，因此不会引入运行时的性能开销。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义扩展函数</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> MyClass.<span class="title">printMessage</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Hello from extension function!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用扩展函数</span></span><br><span class="line"><span class="keyword">val</span> myInstance = MyClass()</span><br><span class="line">myInstance.printMessage()  <span class="comment">// 输出 &quot;Hello from extension function!&quot;</span></span><br></pre></td></tr></table></figure><p>这些是关于 Kotlin 中扩展函数的基本知识。扩展函数是一种强大的工具，使得在不修改类的情况下，为现有类添加新功能变得更加方便。</p><h2 id="对比-java"><a href="#对比-java" class="headerlink" title="对比 java"></a>对比 java</h2><p>1、.equal 不需要了，kotlin 可以直接使用 &#x3D;&#x3D; 号实现一样的功能</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>竞赛 AR 展厅的项目经验</title>
      <link href="/posts/3542d252.html"/>
      <url>/posts/3542d252.html</url>
      
        <content type="html"><![CDATA[<h1 id="竞赛-AR-展厅的项目经验"><a href="#竞赛-AR-展厅的项目经验" class="headerlink" title="竞赛 AR 展厅的项目经验"></a>竞赛 AR 展厅的项目经验</h1><h2 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分"></a>后端部分</h2><p>后端部分主要是学习如何优化代码，由 CRUD 搬砖转到有一定后端架构能力，还有对 Java 8 一些特性的学习</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="接口使用Body方式传递"><a href="#接口使用Body方式传递" class="headerlink" title="接口使用Body方式传递"></a>接口使用Body方式传递</h4><p>需要在代码前加@RequstBody，而且不能是String这样的类型</p><p>正确写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/addFavorites&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">addModelFavorites</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, String&gt; requestMap)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> requestMap.get(<span class="string">&quot;userId&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">favoritesId</span> <span class="operator">=</span> requestMap.get(<span class="string">&quot;favoritesId&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">type</span> <span class="operator">=</span> Integer.parseInt(requestMap.get(<span class="string">&quot;type&quot;</span>));</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;根据id收藏模型&quot;</span>);</span><br><span class="line">    <span class="type">UserFavorites</span> <span class="variable">userFavorites</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserFavorites</span>();</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userIdLong</span> <span class="operator">=</span> Long.valueOf(userId);</span><br><span class="line">  <span class="type">Long</span> <span class="variable">favoritesIdLong</span> <span class="operator">=</span> Long.valueOf(favoritesId);</span><br><span class="line">  </span><br><span class="line">    userFavorites.setUserId(userIdLong);</span><br><span class="line">    userFavorites.setFavoritesId(favoritesIdLong);</span><br><span class="line">    userFavorites.setType(type);</span><br><span class="line"></span><br><span class="line">    userFavoritesService.save(userFavorites);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">Model</span> <span class="variable">model</span> <span class="operator">=</span> modelService.getById(favoritesIdLong);</span><br><span class="line">        model.setFavoriteCount(model.getFavoriteCount() + <span class="number">1</span>);</span><br><span class="line">        modelService.updateById(model);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="type">Company</span> <span class="variable">company</span> <span class="operator">=</span> companyService.getById(favoritesIdLong);</span><br><span class="line">        company.setFavoriteCount(company.getFavoriteCount() + <span class="number">1</span>);</span><br><span class="line">        companyService.updateById(company);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 这里是展厅增加收藏数的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;收藏模型成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误写法，不能用json传递，只能用<a href="http://localhost:81/model/list?categoryId=1712732535265550338&amp;status=1%E7%9A%84%E6%96%B9%E5%BC%8F%E4%BC%A0%E9%80%92">http://localhost:81/model/list?categoryId=1712732535265550338&amp;status=1的方式传递</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/addFavorites&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">addModelFavorites</span><span class="params">(String userId, String favoritesId, <span class="type">int</span> type)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;根据id收藏模型&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userIdLong</span> <span class="operator">=</span> Long.valueOf(userId);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">favoritesIdLong</span> <span class="operator">=</span> Long.valueOf(favoritesId);</span><br><span class="line"></span><br><span class="line">    <span class="type">UserFavorites</span> <span class="variable">userFavorites</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserFavorites</span>();</span><br><span class="line">    userFavorites.setUserId(userIdLong);</span><br><span class="line">    userFavorites.setFavoritesId(favoritesIdLong);</span><br><span class="line">    userFavorites.setType(type);</span><br><span class="line"></span><br><span class="line">    userFavoritesService.save(userFavorites);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">Model</span> <span class="variable">model</span> <span class="operator">=</span> modelService.getById(favoritesIdLong);</span><br><span class="line">        model.setFavoriteCount(model.getFavoriteCount() + <span class="number">1</span>);</span><br><span class="line">        modelService.updateById(model);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="type">Company</span> <span class="variable">company</span> <span class="operator">=</span> companyService.getById(favoritesIdLong);</span><br><span class="line">        company.setFavoriteCount(company.getFavoriteCount() + <span class="number">1</span>);</span><br><span class="line">        companyService.updateById(company);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 这里是展厅增加收藏数的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;收藏模型成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="queryWrapper-in"><a href="#queryWrapper-in" class="headerlink" title="queryWrapper.in();"></a>queryWrapper.in();</h4><p>使用queryWrapper.in就可以直接根据限定条件为company的id中符合ids数组中的内容，这样就不需要再根据for循环去重复存入list</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper.in(Company::getId, ids);</span><br></pre></td></tr></table></figure><h4 id="saveBatch"><a href="#saveBatch" class="headerlink" title="saveBatch"></a>saveBatch</h4><p>mybatis-plus封装的一个可以批量保存的方法，参数为List类型</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC (控制反转)"></a>IOC (控制反转)</h4><p>Inversion of Control</p><p>SpringBoot 通过 @Component 注解实现 IOC</p><h4 id="DI-依赖注入"><a href="#DI-依赖注入" class="headerlink" title="DI (依赖注入)"></a>DI (依赖注入)</h4><p>Dependency Injection</p><h4 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h4><p>1、Java反射机制的核心是在程序运行时动态加载类并获取类的详细信息，从而操作类或对象的属性和方法。本质是JVM得到class对象之后，<strong>再通过class对象进行反编译，从而获取对象的各种信息。</strong><br>2、Java属于先编译再运行的语言，程序中对象的类型在编译期就确定下来了，而当程序在运行时可能需要动态加载某些类，这些类因为之前用不到，所以没有被加载到JVM。通过反射，可以在运行时动态地创建对象并调用其属性，<strong>不需要提前在编译期知道运行的对象是谁。</strong></p><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><h4 id="领域驱动设计-DDD"><a href="#领域驱动设计-DDD" class="headerlink" title="领域驱动设计(DDD)"></a>领域驱动设计(DDD)</h4><h4 id="代码设计模式"><a href="#代码设计模式" class="headerlink" title="代码设计模式"></a>代码设计模式</h4><h5 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h5><h5 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h5><p>通过套娃的方式，将需要改变的类套在外层，这样在需求更改时只需要该相应的类</p><h5 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h5><h5 id="状态模型"><a href="#状态模型" class="headerlink" title="状态模型"></a>状态模型</h5><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><h4 id="java上传图片到服务器并通过服务器地址访问"><a href="#java上传图片到服务器并通过服务器地址访问" class="headerlink" title="java上传图片到服务器并通过服务器地址访问"></a>java上传图片到服务器并通过服务器地址访问</h4><p>关于文件的二进制转化，HuTool 提供了相关的功能来简化这一常见任务：</p><p>路径拼接：</p><ul><li>传统Java方式可能需要手动拼接路径字符串，而HuTool的<code>FileUtil.file</code>方法可以更方便地构建文件对象，自动处理路径的拼接，避免手动拼接路径字符串的繁琐操作。</li></ul><p>IO操作：</p><ul><li>传统Java方式中，可能需要手动处理文件的输入流和输出流，并进行逐字节或逐块的复制。而使用HuTool的<code>IoUtil.copy</code>方法，可以更简单地实现文件的拷贝操作，提高了代码的简洁性。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/downloadGLB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadGLB</span><span class="params">(String name, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 基础路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">basePath</span> <span class="operator">=</span> <span class="string">&quot;C:\\model\\AndroidEntry\\&quot;</span> + name + <span class="string">&quot;\\&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Hutool提供的文件工具类</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> FileUtil.file(basePath, name + <span class="string">&quot;.glb&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置响应头，使用原始文件名，不进行编码</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span> + name + <span class="string">&quot;.glb&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 传统Java方式</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">             <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream()) &#123;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4096</span>];</span><br><span class="line">            <span class="type">int</span> bytesRead;</span><br><span class="line">            <span class="keyword">while</span> ((bytesRead = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                outputStream.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Hutool提供的IO工具类进行文件拷贝</span></span><br><span class="line">        IoUtil.copy(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file), response.getOutputStream());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在方法中添加日志输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Downloading file: &quot;</span> + file.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">&quot;File size: &quot;</span> + file.length());</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="密码加盐"><a href="#密码加盐" class="headerlink" title="密码加盐"></a>密码加盐</h4><ol><li><p><strong>取用户输入的密码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> user.getPassword();</span><br></pre></td></tr></table></figure></li><li><p><strong>查询数据库中对应用户名的用户信息：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper.eq(User::getUsername, user.getUsername());</span><br><span class="line"><span class="type">User</span> <span class="variable">emp</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br></pre></td></tr></table></figure></li><li><p><strong>获取数据库中存储的盐值：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> emp.getSalt();</span><br></pre></td></tr></table></figure></li><li><p><strong>设置盐值到加密工具类中：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PasswordWithSaltUtils.setSalt(salt);</span><br></pre></td></tr></table></figure></li><li><p><strong>对用户输入的密码进行盐值加密：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">hashPassword</span> <span class="operator">=</span> PasswordWithSaltUtils.hashPassword(password);</span><br></pre></td></tr></table></figure></li><li><p><strong>比较数据库中存储的加密密码和用户输入的加密密码是否一致，如果不一致则返回密码错误信息：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!emp.getPassword().equals(hashPassword)) &#123;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>密码加盐封装的代码 PasswordWithSaltUtils 如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PasswordWithSaltUtils</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    将随机生成的盐设置为密码加密的属性，便于获取</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String salt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对于salt的set方法，当新增员工的时候，salt为null,使用36位随机生成</span></span><br><span class="line"><span class="comment">     * 当我们需要登录的时候</span></span><br><span class="line"><span class="comment">     * 通过从数据库中查询到该用户在注册时生成的盐来进行计算，得出当前该用户在登录时候输入密码的hashPassword</span></span><br><span class="line"><span class="comment">     * 将当前登录时候计算出的hashPassword和用户在注册时候存放在数据库中的hashPassword比对</span></span><br><span class="line"><span class="comment">     * 如果一样则登录，否则失败</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> salt</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setSalt</span><span class="params">(String salt)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (salt == <span class="literal">null</span>)&#123;</span><br><span class="line">            PasswordWithSaltUtils.salt = UUID.randomUUID().toString();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            PasswordWithSaltUtils.salt = salt;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">hashPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">mDigest</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;SHA-512&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] result = mDigest.digest((password + salt).getBytes());</span><br><span class="line">            <span class="keyword">return</span> bytesToHex(result);  <span class="comment">// 将字节数组转换为十六进制字符串</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将原始的字节数组转换为十六进制后返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">bytesToHex</span><span class="params">(<span class="type">byte</span>[] hash)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">hexString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">2</span> * hash.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; hash.length; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> Integer.toHexString(<span class="number">0xff</span> &amp; hash[i]);</span><br><span class="line">            <span class="keyword">if</span>(hex.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                hexString.append(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            hexString.append(hex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hexString.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Long&gt; ids = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(); <span class="comment">// 使用Set来存储唯一的id</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面是常规的for循环</span></span><br><span class="line"><span class="keyword">for</span> (ExhibitionCompany exhibitionCompanyItem : exhibitionCompanyList) &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> exhibitionCompanyItem.getCompanyId();</span><br><span class="line">    ids.add(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面是foreach方式优化了代码</span></span><br><span class="line">exhibitionCompanyList.forEach((exhibitionCompany) -&gt; &#123;</span><br><span class="line">    ids.add(exhibitionCompany.getId());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="stream流"><a href="#stream流" class="headerlink" title="stream流"></a>stream流</h4><p>可以更方便的对集合或者数组进行链状流式的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用传统的for循环方式</span></span><br><span class="line">List&lt;Long&gt; companyIds = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (CompanyModel companyModel1 : companyModelList) &#123;</span><br><span class="line">    companyIds.add(companyModel1.getCompanyId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Stream和Lambda表达式方式</span></span><br><span class="line">List&lt;Long&gt; companyIds = companyModelList.stream()</span><br><span class="line">        .map(CompanyModel::getCompanyId)</span><br><span class="line">        .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>flatMap</p><p>flatMap()可以把一个对象转换为多个对象放到流中</p><p>例如下面的listByCompanyId返回的就是list</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;CompanyModel&gt; companyModelList =companyIds.stream()       </span><br><span class="line">  .flatMap(idItem-&gt;companyModelService.listByCompanyId(String.valueOf(idItem)).stream())</span><br><span class="line">  .toList();</span><br></pre></td></tr></table></figure><h4 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h4><p>使用Optional类可以避免手动的null检查，使代码更加简洁</p><p>Optional.orElseGet()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 if-else 版本的null检查</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line"><span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line"><span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">    modelDto.setCategoryName(categoryName);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    modelDto.setCategoryName(<span class="string">&quot;暂无分类&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line"><span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> Optional.ofNullable(categoryService.getById(categoryId))</span><br><span class="line">        .map(Category::getName)</span><br><span class="line">        .orElse(<span class="string">&quot;暂无分类&quot;</span>);</span><br><span class="line"><span class="comment">// 使用 Optional 版本的null检查</span></span><br><span class="line">modelDto.setCategoryName(categoryName);</span><br></pre></td></tr></table></figure><p>Optional.orElseThrow()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 if-else 版本的null检查,并返回</span></span><br><span class="line"><span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;    </span><br><span class="line">  categoryName = category.getName();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">  <span class="keyword">return</span> R.error(<span class="string">&quot;不存在该公司分类&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Optional 版本的null检查,并返回，这里使用的是自己封装的optional类的内容</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getNameError</span><span class="params">(String name,String msg)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> Optional.ofNullable(name)        </span><br><span class="line">    .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">CustomException</span>(msg));</span><br><span class="line">&#125;</span><br><span class="line">String categoryName=optionalUtils.getNameError(category.getName(),<span class="string">&quot;不存在该公司分类&quot;</span>);</span><br></pre></td></tr></table></figure><p>养成使用Optional的习惯可以写出更加优雅的代码来避免空指针异常。</p><pre><code>Optional.ofNullable() 将对象封装为Optional对象。无论传入的参数是否为null都不会出现问题。（建议使用 ）Optional.of() 传入的参数必须不能为null。（不建议使用）Optional.empty() 返回一个空的Optional对象。Optional.ifPresent() 该方法会判断其内部封装的数据是否为空,不为空的时候才能执行具体的消费代码。Optional.isPresent()  该方法会判断其内部封装的数据是否为空,为空返回false,不为空返回true.Optional.filter()  在方法中进行逻辑判断,如果满足会返回Optional对象；不满足则返回null.Optional.map() 将对象中的值转为Optional&lt;List&lt;T&gt;&gt;对象.</code></pre><p>如果想要安全的获取Optional对象中的值，不推荐使用get()方法。推荐使用以下几种方法。</p><pre><code>Optional.orElseGet() 如果Optional中的值为null,可以自定义返回一个对象。Optional.orElseThrow()  如果Optional中的值为null,可以手动抛出异常。</code></pre><p>有个会混淆的点在于orElseGet与orElse的区别，先说结论orElseGet会用的更多，因为orElse无论Optional的值是否为null都会进行，会导致内存的多余使用</p><p>链接查看：<a href="https://blog.csdn.net/daobuxinzi/article/details/117376218">java中orElse()和orElseGet()的区别_java orelseget-CSDN博客</a></p><h4 id="不返回实体类的某个属性"><a href="#不返回实体类的某个属性" class="headerlink" title="不返回实体类的某个属性"></a>不返回实体类的某个属性</h4><p>使用@JsonProperty(access &#x3D; JsonProperty.Access.WRITE_ONLY)来实现只写不返回</p><p>原文连接：<a href="https://blog.csdn.net/monody666/article/details/134393760">java实体类，注解设置某些属性不返回前端-CSDN博客</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优化数组存入"><a href="#优化数组存入" class="headerlink" title="优化数组存入"></a>优化数组存入</h4><p>直接在实例化时存入数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">List&lt;CompanyModel&gt; companyModelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">QueryWrapper&lt;CompanyModel&gt; modelQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">modelQueryWrapper.in(<span class="string">&quot;company_id&quot;</span>, ids);</span><br><span class="line">modelQueryWrapper.eq(<span class="string">&quot;category_name&quot;</span>, categoryName);</span><br><span class="line"></span><br><span class="line">List&lt;CompanyModel&gt; companyModelList1 = companyModelService.list(modelQueryWrapper);</span><br><span class="line"><span class="keyword">if</span> (companyModelList1.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;该分类下不存在模型&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*for (CompanyModel model : companyModelList1) &#123;</span></span><br><span class="line"><span class="comment">    companyModelList.add(model);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line">List&lt;CompanyModel&gt; companyModelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(companyModelList1);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Objects-requireNonNullElse"><a href="#Objects-requireNonNullElse" class="headerlink" title="Objects.requireNonNullElse"></a>Objects.requireNonNullElse</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*else if (admId != null) &#123;</span></span><br><span class="line"><span class="comment">     // 如果是&quot;manager&quot;角色，只显示创建者ID与Session中ID匹配的模型</span></span><br><span class="line"><span class="comment">     queryWrapper.eq(Model::getCreateUserId, admId);</span></span><br><span class="line"><span class="comment">&#125; else &#123;</span></span><br><span class="line"><span class="comment">     // 如果没有&quot;manager&quot;或 &quot;employee&quot;角色信息，不显示模型</span></span><br><span class="line"><span class="comment">     queryWrapper.eq(Model::getCreateUserId, &quot;0&quot;); // 这是一个永远不成立的条件，确保不显示模型</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">queryWrapper.eq(Model::getCreateUserId, Objects.requireNonNullElse(admId, <span class="string">&quot;0&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h4><p>使用箭头的方法更简单易懂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (chosenDate) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;today&quot;</span> -&gt; &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;last7days&quot;</span>-&gt;&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CustomException 是一个自定义的运行时异常类，继承了标准的 RuntimeException。它旨在通过包含一个 ErrorCodeEnum 来更结构化地封装和处理异常，以表示与异常相关的错误代码。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="comment">// 表示与异常相关联的错误代码</span></span><br><span class="line">    <span class="keyword">private</span> ErrorCodeEnum errorCode;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * CustomException 的构造函数，接受一个 ErrorCodeEnum 参数，并使用 ErrorCodeEnum 中相应的错误消息初始化异常。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errorCode 表示特定错误条件的 ErrorCodeEnum。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomException</span><span class="params">(ErrorCodeEnum errorCode)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用超类构造函数，使用 ErrorCodeEnum 中的错误消息</span></span><br><span class="line">        <span class="built_in">super</span>(errorCode.getMessage());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用提供的 ErrorCodeEnum 初始化 errorCode 字段</span></span><br><span class="line">        <span class="built_in">this</span>.errorCode = errorCode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于检索与异常相关联的 ErrorCodeEnum 的 getter 方法。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 表示特定错误条件的 ErrorCodeEnum。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ErrorCodeEnum <span class="title function_">getErrorCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errorCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="统一异常处理类"><a href="#统一异常处理类" class="headerlink" title="统一异常处理类"></a>统一异常处理类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice(annotations = &#123; RestController.class, Controller.class &#125;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行异常处理方法，这里的异常是就是 SQLIntegrityConstraintViolationException 异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理 SQLIntegrityConstraintViolationException 异常的逻辑</span></span><br><span class="line">        log.error(ex.getMessage());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ex.getMessage().contains(<span class="string">&quot;Duplicate entry&quot;</span>)) &#123;</span><br><span class="line">            String[] split = ex.getMessage().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> split[<span class="number">2</span>] + <span class="string">&quot;已存在&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> R.error(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行异常处理方法,这里的异常是就是自己建立的统一异常处理，简单版</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(CustomException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(CustomException ex)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理 CustomException 异常的逻辑</span></span><br><span class="line">        log.error(ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> R.error(ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 进行异常处理方法,这里的异常是就是自己建立的统一异常处理，通过枚举错误类设置code以及msg版</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(CustomException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(CustomException ex)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理 CustomException 异常的逻辑</span></span><br><span class="line">        <span class="comment">// 创建新的 R 对象并设置新的 code 值</span></span><br><span class="line">        log.error(ex.getMessage());</span><br><span class="line">        R&lt;String&gt; response = R.error(ex.getMessage());</span><br><span class="line"></span><br><span class="line">        <span class="type">ErrorCodeEnum</span> <span class="variable">errorCode</span> <span class="operator">=</span> ex.getErrorCode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 假设 ErrorCodeEnum 的 code 是整数类型</span></span><br><span class="line">        response.setCode(errorCode.getCode());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="抛出异常的方法"><a href="#抛出异常的方法" class="headerlink" title="抛出异常的方法"></a>抛出异常的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getError</span><span class="params">(T value, ErrorCodeEnum errorCodeEnum)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(value)</span><br><span class="line">            .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">CustomException</span>(errorCodeEnum));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="枚举异常错误类"><a href="#枚举异常错误类" class="headerlink" title="枚举异常错误类"></a>枚举异常错误类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ErrorCodeEnum</span> &#123;</span><br><span class="line">    EXHIBITION_NULL(<span class="number">0</span>,<span class="string">&quot;不存在该展厅&quot;</span>),</span><br><span class="line">    CATEGORY_NULL(<span class="number">0</span>,<span class="string">&quot;不存在该分类&quot;</span>),</span><br><span class="line">    bannerModel_Null(<span class="number">0</span>,<span class="string">&quot;该展厅不存在推荐模型&quot;</span>),</span><br><span class="line">    COMPANY_ALREADY_ASSOCIATED(<span class="number">0</span>,<span class="string">&quot;已经关联公司，不能删除&quot;</span>),</span><br><span class="line">    MODEL_ALREADY_ASSOCIATED(<span class="number">0</span>,<span class="string">&quot;已经关联模型，不能删除&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中文描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="规范的日志打印"><a href="#规范的日志打印" class="headerlink" title="规范的日志打印"></a>规范的日志打印</h4><p>参考文章：<a href="https://blog.csdn.net/Mango_Bin/article/details/120482159">Java：如果优雅地打印出完美日志-CSDN博客</a></p><p>方法的进入参数以及方法结束时返回值</p><p>这部分我使用 AOP 进行封装了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;@annotation(Loggable)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logBefore</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> signature.toShortString();</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line"></span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">methodSignature</span> <span class="operator">=</span> (MethodSignature) signature;</span><br><span class="line">        String[] parameterNames = methodSignature.getParameterNames();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; paramMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            paramMap.put(parameterNames[i], args[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;进入 &#123;&#125; 方法，传入值: &#123;&#125;&quot;</span>, methodName, paramMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(pointcut = &quot;@annotation(Loggable)&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logAfterReturning</span><span class="params">(JoinPoint joinPoint, Object result)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;结束 &#123;&#125; 方法，返回值: &#123;&#125;&quot;</span>, joinPoint.getSignature().toShortString(), result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if-else分支</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.info(<span class="string">&quot;进入 companyId 为 null 的分支&quot;</span>);</span><br></pre></td></tr></table></figure><p>关键部分（可能引发错误的部分）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.info(<span class="string">&quot;通过 exhibitionCompanyList 获取的 companyIds：&#123;&#125;&quot;</span>,companyIds);</span><br></pre></td></tr></table></figure><h4 id="mybatisPlus属性自动填充"><a href="#mybatisPlus属性自动填充" class="headerlink" title="mybatisPlus属性自动填充"></a>mybatisPlus属性自动填充</h4><p>使用MetaObjectHandler来实现</p><p>下面是AR项目所写的代码</p><p>自建的 MyMetaObjectHandler 类并继承 mp MetaObjectHandler 接口重写相关方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="comment">//插入时自动填充</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充【insert】。。。&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>,<span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>,<span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新时自动填充</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充【update】。。。&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>,LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>,<span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时实体类也需要进行相关的注解配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span><span class="comment">//插入时填充字段</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><span class="comment">//插入和更新时填充字段</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;</span><br></pre></td></tr></table></figure><h4 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h4><p>AOP：面向切面编程，对面向对象编程的一种补充，一般处理非业务代码，比如打印日志</p><p>比如说每一个对象都需要开头结尾打印日志，那么可以把每个对象切一刀，再把切面抽象为对象，就可以实现封装每次开头结尾打印日志的效果</p><p>首先是自定义一个接口，这样就可以自由控制在哪个方法进行日志打印</p><p>自定义接口：Loggable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Loggable &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义一个切面类，在切面类里写好需要封装的日志</p><p>切面类：LoggingAspect</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;@annotation(Loggable)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logBefore</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> signature.toShortString();</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line"></span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">methodSignature</span> <span class="operator">=</span> (MethodSignature) signature;</span><br><span class="line">        String[] parameterNames = methodSignature.getParameterNames();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; paramMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            paramMap.put(parameterNames[i], args[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;进入 &#123;&#125; 方法，参数: &#123;&#125;&quot;</span>, methodName, paramMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(pointcut = &quot;@annotation(Loggable)&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logAfterReturning</span><span class="params">(JoinPoint joinPoint, Object result)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;结束 &#123;&#125; 方法，返回值: &#123;&#125;&quot;</span>, joinPoint.getSignature().toShortString(), result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是使用方法</p><p>在需要打印日志的方法上面加上注解@Loggable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/getAll&quot;)</span></span><br><span class="line"><span class="meta">@Loggable</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;ExhibitionCompany&gt;&gt; <span class="title function_">listAllCompany</span><span class="params">(String exhibitionId)</span> &#123;</span><br><span class="line">  List&lt;ExhibitionCompany&gt; list = exhibitionCompanyService.listByExhibitionId(exhibitionId);</span><br><span class="line">  <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h4><p>参考文章：<a href="https://blog.csdn.net/afreon/article/details/128825831">这8种java异步实现方式，性能炸裂！_Java精选的博客-CSDN博客</a></p><h4 id="消息队列-MQ"><a href="#消息队列-MQ" class="headerlink" title="消息队列(MQ)"></a>消息队列(MQ)</h4><p>参考文章：<a href="https://blog.csdn.net/weixin_40623736/article/details/108566965">java常用的消息队列 看完这篇你就懂了_java给外部推送消息队列都需要做什么-CSDN博客</a></p><p>主流框架有RabbitMQ、RocketMQ、ActiveMQ、Kafka、ZeroMQ、Pulsar</p><p>目前使用阿里开发的 RocketMQ 较多</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="框架学习"><a href="#框架学习" class="headerlink" title="框架学习"></a>框架学习</h3><h4 id="HuTool框架"><a href="#HuTool框架" class="headerlink" title="HuTool框架"></a>HuTool框架</h4><h4 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h4><p>和mybatis-plus实在太像了，唯一不同的是dao（数据访问对象 data access object）在JPA中叫做<code>repository</code>，而mybaits的dao叫<code>mapper</code>，以及没有IService直接为service提供了基础的增删改查，需要自己写对应的接口，并借助repository来实现</p><p>基础链接：<a href="https://blog.csdn.net/qq_42495847/article/details/107991361">最详细的Spring-data-jpa入门（一）_springdatajpa-CSDN博客</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JpaUserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">JpaUserService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JpaUserRepository jpaUserRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> JpaUser <span class="title function_">insertUser</span><span class="params">(JpaUser user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jpaUserRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        jpaUserRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> JpaUser <span class="title function_">updateUser</span><span class="params">(JpaUser user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jpaUserRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;JpaUser&gt; <span class="title function_">findAllUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jpaUserRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> JpaUser <span class="title function_">findUserById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jpaUserRepository.findById(id).orElse(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sa-Token"><a href="#Sa-Token" class="headerlink" title="Sa-Token"></a>Sa-Token</h4><h5 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h5><p>Maven 方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.dev33<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sa-token-spring-boot3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.36.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-设置配置文件"><a href="#2-设置配置文件" class="headerlink" title="2. 设置配置文件"></a>2. 设置配置文件</h5><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#Sa-Token 配置</span></span><br><span class="line"><span class="attr">sa-token:</span></span><br><span class="line">  <span class="comment"># token 名称（同时也是 cookie 名称）</span></span><br><span class="line">  <span class="attr">token-name:</span> <span class="string">satoken</span></span><br><span class="line">  <span class="comment"># token 有效期（单位：秒） 默认30天，-1 代表永久有效</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">2592000</span></span><br><span class="line">  <span class="comment"># token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结</span></span><br><span class="line">  <span class="attr">active-timeout:</span> <span class="number">-1</span></span><br><span class="line">  <span class="comment"># 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）</span></span><br><span class="line">  <span class="comment"># 这里不允许同一账号多地同时登录</span></span><br><span class="line">  <span class="attr">is-concurrent:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）</span></span><br><span class="line">  <span class="comment"># 这里使用每次新建一个token</span></span><br><span class="line">  <span class="attr">is-share:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）</span></span><br><span class="line">  <span class="attr">token-style:</span> <span class="string">uuid</span></span><br><span class="line">  <span class="comment"># 是否输出操作日志</span></span><br><span class="line">  <span class="attr">is-log:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h5 id="3-登录认证以及获取-token"><a href="#3-登录认证以及获取-token" class="headerlink" title="3. 登录认证以及获取 token"></a>3. 登录认证以及获取 token</h5><p>登录时使用：login</p><p>获取 token 使用：getTokenValueByLoginId</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;User&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 sa-token 的登录方法</span></span><br><span class="line">    StpUtil.login(emp.getId()); <span class="comment">// 使用sa-token 中的登录方法，id值直接使用emp的id;</span></span><br><span class="line">    emp.setToken(StpUtil.getTokenValueByLoginId(emp.getId())); <span class="comment">// 将每次登录产生的token返回</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-获取-userId"><a href="#4-获取-userId" class="headerlink" title="4. 获取 userId"></a>4. 获取 userId</h5><p>获取 userid 使用 getLoginIdByToken</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/favoritesModels&quot;)</span></span><br><span class="line"><span class="meta">@Loggable</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;ModelDto&gt;&gt; <span class="title function_">favoritesModels</span><span class="params">(String token)</span> &#123;</span><br><span class="line">    <span class="comment">// 根据每次登录产生的token来获取当前登录用户收藏的模型</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userIdLong</span> <span class="operator">=</span> Long.valueOf((String) optionalUtils.getError(StpUtil.getLoginIdByToken(token), ErrorCodeEnum.INVALID_TOKEN));</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;开始获取收藏的模型...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 sa-token 获取当前登录用户的ID</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userIdLong</span> <span class="operator">=</span> Long.valueOf((String)StpUtil.getLoginIdByToken(token);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回包含模型信息的成功响应</span></span><br><span class="line">    <span class="keyword">return</span> R.success(modelDtoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="Bug复盘"><a href="#Bug复盘" class="headerlink" title="Bug复盘"></a>Bug复盘</h3><h4 id="循环依赖"><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h4><p>好像这块是八股文的部分，但是实际开发还是遇到这个问题了，所以还是记录一下</p><p>循环依赖其实就是循环引用，也就是两个或则两个以上的bean互相持有对方，最终形成闭环。比如A依赖于B，B依赖于C，C又依赖于A。</p><p>解决方法：</p><p>加上Lazy注解，会延时引用bean，虽然这个解决方法，但是感觉好像有点头疼砍头，后续出问题了，再整理一下依赖关系吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="keyword">private</span> CompanyService companyService;</span><br></pre></td></tr></table></figure><h2 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h2><h3 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h3><h4 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h4><h5 id="符号-x3D-x3D-判断有误的问题"><a href="#符号-x3D-x3D-判断有误的问题" class="headerlink" title="符号 &#x3D;&#x3D; 判断有误的问题"></a>符号 &#x3D;&#x3D; 判断有误的问题</h5><p>可以使用 &#x3D; &#x3D; &#x3D; 来实现，同样java中可以.isEmpty、&#x3D;&#x3D; “”、&#x3D;&#x3D; null都试试</p><h5 id="axios封装API"><a href="#axios封装API" class="headerlink" title="axios封装API"></a>axios封装API</h5><p>1、下载 axios 插件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install axios</span><br></pre></td></tr></table></figure><p>2、main.js 引入依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./plugins/element-ui/index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  store,</span><br><span class="line">  router,</span><br><span class="line">  axios,</span><br><span class="line">  <span class="title class_">ElementUI</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、封装请求方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;../router/index&#x27;</span>; <span class="comment">// 导入你的路由实例</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;api&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000000</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// request拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置请求的Content-Type</span></span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否需要设置 token</span></span><br><span class="line">    <span class="comment">// const isToken = (config.headers || &#123;&#125;).isToken === false</span></span><br><span class="line">    <span class="comment">// if (getToken() &amp;&amp; !isToken) &#123;</span></span><br><span class="line">    <span class="comment">//   config.headers[&#x27;Authorization&#x27;] = &#x27;Bearer &#x27; + getToken(); // 根据实际情况修改</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// get请求映射params参数</span></span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">method</span> === <span class="string">&#x27;get&#x27;</span> &amp;&amp; config.<span class="property">params</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> url = config.<span class="property">url</span> + <span class="string">&#x27;?&#x27;</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> propName <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(config.<span class="property">params</span>)) &#123;</span><br><span class="line">        <span class="keyword">const</span> value = config.<span class="property">params</span>[propName];</span><br><span class="line">        <span class="keyword">var</span> part = <span class="built_in">encodeURIComponent</span>(propName) + <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (value !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> value !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(value)) &#123;</span><br><span class="line">              <span class="keyword">let</span> params = propName + <span class="string">&#x27;[&#x27;</span> + key + <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">              <span class="keyword">var</span> subPart = <span class="built_in">encodeURIComponent</span>(params) + <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">              url += subPart + <span class="built_in">encodeURIComponent</span>(value[key]) + <span class="string">&#x27;&amp;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            url += part + <span class="built_in">encodeURIComponent</span>(value) + <span class="string">&#x27;&amp;&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      url = url.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">      config.<span class="property">params</span> = &#123;&#125;;</span><br><span class="line">      config.<span class="property">url</span> = url;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---响应拦截器---&#x27;</span>, response);</span><br><span class="line">    <span class="comment">// 检查响应是否包含数据以及 code 字段</span></span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">data</span> &amp;&amp; response.<span class="property">data</span>.<span class="property">code</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> code = response.<span class="property">data</span>.<span class="property">code</span>;</span><br><span class="line">      <span class="keyword">const</span> msg = response.<span class="property">data</span>.<span class="property">msg</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (code === <span class="number">0</span> &amp;&amp; msg === <span class="string">&#x27;You have to login&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 返回登录页面</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---/backend/page/login/login.html---&#x27;</span>, code);</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;userInfo&#x27;</span>);</span><br><span class="line">        <span class="comment">// 使用传递的路由实例进行页面跳转</span></span><br><span class="line">        router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span> &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 处理未包含 code 字段的响应</span></span><br><span class="line">      <span class="comment">// 这里可以添加适当的处理逻辑</span></span><br><span class="line">      <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span> + error);</span><br><span class="line">    <span class="keyword">let</span> &#123; message &#125; = error;</span><br><span class="line">    <span class="keyword">if</span> (message === <span class="string">&#x27;Network Error&#x27;</span>) &#123;</span><br><span class="line">      message = <span class="string">&#x27;后端接口连接异常&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.<span class="title function_">includes</span>(<span class="string">&#x27;timeout&#x27;</span>)) &#123;</span><br><span class="line">      message = <span class="string">&#x27;系统接口请求超时&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.<span class="title function_">includes</span>(<span class="string">&#x27;Request failed with status code&#x27;</span>)) &#123;</span><br><span class="line">      message = <span class="string">&#x27;系统接口&#x27;</span> + message.<span class="title function_">substr</span>(message.<span class="property">length</span> - <span class="number">3</span>) + <span class="string">&#x27;异常&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">ElementUI</span>.<span class="title class_">Message</span>(&#123;</span><br><span class="line">      <span class="attr">message</span>: message,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">      <span class="attr">duration</span>: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure><p>4、封装 api</p><p>注意传递参数有所不同，GET请求通常使用查询字符串（params）传递参数，而POST、PUT请求通常使用请求体（data）传递参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $axios <span class="keyword">from</span> <span class="string">&#x27;../utils/request&#x27;</span>;</span><br><span class="line"><span class="comment">// 查询列表数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getCompanyPage</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/company/page&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    params</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">deleteCompany</span> = (<span class="params">ids</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/company&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123; ids &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改数据接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">editCompany</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/company&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; ...params &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增数据接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">addCompany</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/company&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; ...params &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询详情接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">queryCompanyById</span> = (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/company/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查模型列表的接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">queryCompanyList</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/company/listCompanies&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    params</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量起售禁售</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">companyStatusByStatus</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/company/status/<span class="subst">$&#123;params.status&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123; <span class="attr">ids</span>: params.<span class="property">ids</span> &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、使用方法</p><p>需要 import 导入</p><p>然后注意参数的传入有不同方法</p><p>比如直接建一个对象 params 然后传入getCompanyPage(params) 或者直接在deleteCompany(id)</p><p>还有注意具体的使用</p><p>比如 getCompanyPage 就直接接收就行 const res &#x3D; await getCompanyPage(params);</p><p>而 deleteCompany会加入 then 以及箭头函数来进行后续操作</p><p>deleteCompany(type &#x3D;&#x3D;&#x3D; ‘批量’ ? this.checkList.join(‘,’) : id)</p><p>​.then(res &#x3D;&gt; {</p><p>})</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dashboard-container&quot; id=&quot;company-app&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">      &lt;!-- ... 省略部分布局代码 ... --&gt;</span><br><span class="line">      &lt;el-table :data=&quot;tableData&quot; stripe class=&quot;tableBox&quot; @selection-change=&quot;handleSelectionChange&quot;&gt;</span><br><span class="line">        &lt;el-table-column type=&quot;selection&quot; width=&quot;25&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">        &lt;el-table-column prop=&quot;name&quot; label=&quot;公司名称&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">        &lt;!-- ... 省略部分列配置 ... --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-table-column label=&quot;操作&quot; width=&quot;160&quot; align=&quot;center&quot;</span><br><span class="line">          v-if=&quot;userInfo.position == &#x27;manager&#x27; || userInfo.position == &#x27;admin&#x27;&quot;&gt;</span><br><span class="line">          &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">            &lt;el-button type=&quot;text&quot; size=&quot;small&quot; class=&quot;blueBug&quot; @click=&quot;addSetMeal(scope.row.id)&quot;&gt;</span><br><span class="line">              修改</span><br><span class="line">            &lt;/el-button&gt;</span><br><span class="line">            &lt;el-button type=&quot;text&quot; size=&quot;small&quot; class=&quot;blueBug&quot; @click=&quot;statusHandle(scope.row)&quot;&gt;</span><br><span class="line">              &#123;&#123; scope.row.status == &#x27;0&#x27; ? &#x27;展示&#x27; : &#x27;隐藏&#x27; &#125;&#125;</span><br><span class="line">            &lt;/el-button&gt;</span><br><span class="line">            &lt;el-button type=&quot;text&quot; size=&quot;small&quot; class=&quot;delBut non&quot; @click=&quot;deleteHandle(&#x27;单删&#x27;, scope.row.id)&quot;&gt;</span><br><span class="line">              删除</span><br><span class="line">            &lt;/el-button&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/el-table-column&gt;</span><br><span class="line">      &lt;/el-table&gt;</span><br><span class="line">      &lt;el-pagination class=&quot;pageList&quot; :page-sizes=&quot;[10, 20, 30, 40]&quot; :page-size=&quot;pageSize&quot;</span><br><span class="line">        layout=&quot;total, sizes, prev, pager, next, jumper&quot; :total=&quot;counts&quot; @size-change=&quot;handleSizeChange&quot;</span><br><span class="line">        :current-page.sync=&quot;page&quot; @current-change=&quot;handleCurrentChange&quot;&gt;&lt;/el-pagination&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; getCompanyPage, deleteCompany &#125; from &#x27;../../api/company.js&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  // ... 其他部分保持不变 ...</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    async init() &#123;</span><br><span class="line">      const params = &#123;</span><br><span class="line">        page: this.page,</span><br><span class="line">        pageSize: this.pageSize,</span><br><span class="line">        name: this.input ? this.input : undefined,</span><br><span class="line">      &#125;;</span><br><span class="line">      try &#123;</span><br><span class="line">        const res = await getCompanyPage(params);</span><br><span class="line">        if (String(res.code) === &#x27;1&#x27;) &#123;</span><br><span class="line">          if (res.data != null) &#123;</span><br><span class="line">            this.tableData = res.data.records || [];</span><br><span class="line"></span><br><span class="line">            // 遍历tableData中的每个记录</span><br><span class="line">            this.tableData.forEach(record =&gt; &#123;</span><br><span class="line">              if (record.description === &quot;&quot;) &#123;</span><br><span class="line">                record.description = &quot;暂无简介&quot;;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            this.tableData.forEach(record =&gt; &#123;</span><br><span class="line">              console.log(&quot;Description: &quot; + record.description);</span><br><span class="line">            &#125;);</span><br><span class="line">            if (this.tableData.length &gt; 0) &#123;</span><br><span class="line">              this.ifNull = false</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            this.counts = res.data.total;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125; catch (err) &#123;</span><br><span class="line">        this.$message.error(&#x27;请求出错了：&#x27; + err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 删除</span><br><span class="line">    deleteHandle(type, id) &#123;</span><br><span class="line">      if (type === &#x27;批量&#x27; &amp;&amp; id === null) &#123;</span><br><span class="line">        if (this.checkList.length === 0) &#123;</span><br><span class="line">          return this.$message.error(&#x27;请选择删除对象&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      this.$confirm(&#x27;确定删除该公司, 是否继续?&#x27;, &#x27;确定删除&#x27;, &#123;</span><br><span class="line">        &#x27;confirmButtonText&#x27;: &#x27;确定&#x27;,</span><br><span class="line">        &#x27;cancelButtonText&#x27;: &#x27;取消&#x27;,</span><br><span class="line">      &#125;).then(() =&gt; &#123;</span><br><span class="line">        deleteCompany(type === &#x27;批量&#x27; ? this.checkList.join(&#x27;,&#x27;) : id)</span><br><span class="line">          .then(res =&gt; &#123;</span><br><span class="line">            if (res.code === 1) &#123;</span><br><span class="line">              this.$message.success(&#x27;删除成功！&#x27;);</span><br><span class="line">              this.handleQuery();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              this.$message.error(res.data.msg || &#x27;公司仍在展示状态&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(err =&gt; &#123;</span><br><span class="line">            this.$message.error(&#x27;请求出错了：&#x27; + err);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;).catch(() =&gt; &#123;</span><br><span class="line">        // 用户点击取消按钮的处理逻辑</span><br><span class="line">        // 可以不做任何处理，或者在这里添加一些取消操作的逻辑</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // ... 其他方法保持不变 ...</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="js字符串处理"><a href="#js字符串处理" class="headerlink" title="js字符串处理"></a>js字符串处理</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fileName=file.<span class="property">name</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">modelPath</span> = fileName.<span class="title function_">substring</span>(<span class="number">0</span>, fileName.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>));</span><br></pre></td></tr></table></figure><h5 id="js判断数组为空"><a href="#js判断数组为空" class="headerlink" title="js判断数组为空"></a>js判断数组为空</h5><p>不能使用 &#x3D;&#x3D; [] 或者 &#x3D;&#x3D; “” 或者 &#x3D;&#x3D; null 以及三个等号也不行，需要使用 .length&#x3D;&#x3D;0</p><h5 id="js数组处理常用方法"><a href="#js数组处理常用方法" class="headerlink" title="js数组处理常用方法"></a>js数组处理常用方法</h5><h6 id="push（）-末尾添加数据"><a href="#push（）-末尾添加数据" class="headerlink" title="push（） 末尾添加数据"></a>push（） 末尾添加数据</h6><p><strong>作用:</strong> 就是往数组末尾添加数据</p><p><strong>返回值:</strong> 就是这个数组的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line">res = arr.<span class="title function_">push</span>(<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[10,20,30,40,20]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//5</span></span><br></pre></td></tr></table></figure><h6 id="splice（）-截取数组"><a href="#splice（）-截取数组" class="headerlink" title="splice（）  截取数组"></a>splice（）  截取数组</h6><p>它仅能够截取数组中指定区段的元素，并返回这个子数组。</p><p>如果仅指定一个参数，则表示从该参数值指定的下标位置开始，截取到数组的尾部所有元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parts = routerPath.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>); </span><br><span class="line"><span class="comment">// 获取第二个斜杠后面的内容       </span></span><br><span class="line"><span class="keyword">var</span> result = parts.<span class="property">length</span> &gt;= <span class="number">3</span> ? parts[<span class="number">2</span>] : <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span> + result);</span><br></pre></td></tr></table></figure><h6 id="join（）-数组转字符串"><a href="#join（）-数组转字符串" class="headerlink" title="join（） 数组转字符串"></a>join（） 数组转字符串</h6><p><strong>作用:</strong> 就是把一个数组转成字符串</p><p><strong>返回值:</strong> 就是转好的一个字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line">res = arr.<span class="title function_">join</span>(<span class="string">&quot;+&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);  <span class="comment">// 10+20+30+40+50+60</span></span><br></pre></td></tr></table></figure><h6 id="map-映射数组"><a href="#map-映射数组" class="headerlink" title="map  映射数组"></a>map  映射数组</h6><p>map() 方法返回一个新数组，这个新数组：由原数组中的每个元素调用一个指定方法后的返回值组成的新数组。</p><p>map() 不会对空数组进行检测。</p><p>map() 不会改变原始数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子数值项求平方</span></span><br><span class="line"><span class="keyword">let</span> data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> newData = data.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item * item;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newData);</span><br><span class="line"><span class="comment">//箭头函数的写法</span></span><br><span class="line"><span class="keyword">let</span> newData2 = data.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item *item);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newData2);</span><br></pre></td></tr></table></figure><h6 id="filter-过滤数组"><a href="#filter-过滤数组" class="headerlink" title="filter  过滤数组"></a>filter  过滤数组</h6><p>filter用于对数组进行<strong>过滤</strong>。<br>它创建一个新数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> res = nums.<span class="title function_">filter</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> num &gt; <span class="number">5</span>;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);  <span class="comment">// [6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><h6 id="find（）用来获取数组中满足条件的第一个数据"><a href="#find（）用来获取数组中满足条件的第一个数据" class="headerlink" title="find（）用来获取数组中满足条件的第一个数据"></a>find（）用来获取数组中满足条件的第一个数据</h6><p>获取数组中满足条件的第一个数据，最后会返回一个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> menu = <span class="variable language_">this</span>.<span class="property">menuList</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> === routerPath);</span><br></pre></td></tr></table></figure><h5 id="ES6核心语法"><a href="#ES6核心语法" class="headerlink" title="ES6核心语法"></a>ES6核心语法</h5><p>1、变量与常量</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="attr">count</span>: <span class="built_in">number</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">count</span>: <span class="built_in">number</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//常量注意全部大写的格式</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">BASE_URL</span>: <span class="built_in">string</span>=<span class="string">&quot;http:...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//let 与 var 的区别就在于 var 是函数作用域，let 是块作用域。例子如下,log 会报错为不存在变量count，而 var 在下面的情况下就不会报错</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">count</span>: <span class="built_in">number</span>=<span class="number">0</span></span><br><span class="line">    count++</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count)</span><br></pre></td></tr></table></figure><p>2、模版字符串</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">str1</span>: <span class="built_in">string</span> =<span class="string">&#x27;abc&#x27;</span>+<span class="string">&#x27;efg&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">str2</span>: <span class="built_in">string</span> = <span class="string">`efg<span class="subst">$&#123;str1&#125;</span></span></span><br><span class="line"><span class="string">    这也是字符串的内容</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="comment">// 反斜杠里就可以使用$&#123;&#125;的方式来存入字符串变量，并且兼容换行</span></span><br></pre></td></tr></table></figure><p>3、解构赋值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">arr</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> a=arr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">const</span> b=arr[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">const</span> c=arr[<span class="number">2</span>]</span><br><span class="line"><span class="comment">//上面的方式获取较为麻烦，可以用下面的方式获取值，需要注意的是解构赋值在 ts 中不支持为变量附上类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [a, b, c]: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//同时可以为为对象来实现相应的效果</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: &#123; <span class="attr">username</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span>, <span class="attr">gender</span>: <span class="built_in">string</span> &#125; = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;TEC&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; username, age, gender &#125;: &#123; <span class="attr">username</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span>, <span class="attr">gender</span>: <span class="built_in">string</span> &#125; = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;TEC&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>4、数组和对象的扩展</p><p>4.1、扩展运算符</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用...数组名的方式可以直接将数组扩展到另一个数组上</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr3 = [...arr1, ...arr2, <span class="number">10</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同时对象也可以这么使用</span></span><br><span class="line"><span class="keyword">const</span> obj1=&#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2=&#123;</span><br><span class="line">    <span class="attr">b</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj3=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;TEC&#x27;</span>,</span><br><span class="line">    ...obj1,</span><br><span class="line">    ...obj2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.2、数组方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以使用Array.from来将伪数组转化为真数组，来使用数组的相关功能，但是ts里直接使用推荐使用剩余参数（rest parameters）代替 arguments 对象。arguments 是一个类数组对象，而剩余参数更灵活并且是真正的数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.3、对象方法 </p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.assign为浅拷贝，浅拷贝的意义在于去改变 objB 的值时，不会影响到 objA ，而无论是直接数组赋值还是深拷贝都会产生影响</span></span><br><span class="line"><span class="keyword">const</span> objA=&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;TEC&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> objB=<span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;,objA)</span><br></pre></td></tr></table></figure><p>5、 Class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以像 java 一样使用类的概念</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line"></span><br><span class="line">    constructor(name: string, age: number) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    introduce() &#123;</span><br><span class="line">        console.log(`My name is $&#123;<span class="built_in">this</span>.name&#125; and I am $&#123;<span class="built_in">this</span>.age&#125; years old.`);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>(<span class="string">&quot;吴悠&quot;</span>, <span class="number">18</span>);</span><br><span class="line">a1.introduce();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以像 java 一样继承父类，调用 super()</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    additionalProperty: string;</span><br><span class="line"></span><br><span class="line">    constructor(name: string, age: number, additionalProperty: string) &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        <span class="built_in">this</span>.additionalProperty = additionalProperty;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    introduceWithAdditional() &#123;</span><br><span class="line">        console.log(`My name is $&#123;<span class="built_in">this</span>.name&#125;, I am $&#123;<span class="built_in">this</span>.age&#125; years old, and my additional property is $&#123;<span class="built_in">this</span>.additionalProperty&#125;.`);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">25</span>, <span class="string">&quot;Some additional info&quot;</span>);</span><br><span class="line">b1.introduceWithAdditional();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>6、箭头函数     </p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getSum1</span> = (<span class="params">n</span>) =&gt; n + <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getSum2</span> = (<span class="params">n1, n2</span>) =&gt; n1 + n2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getSum3</span> = (<span class="params">n1, n2, ...other</span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(n1, n2, other);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getResult</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> sum += item);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getResult</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]));  <span class="comment">// Output: 15</span></span><br></pre></td></tr></table></figure><h4 id="布局基础"><a href="#布局基础" class="headerlink" title="布局基础"></a>布局基础</h4><h5 id="前端添加图标的方法"><a href="#前端添加图标的方法" class="headerlink" title="前端添加图标的方法"></a>前端添加图标的方法</h5><p>在阿里巴巴图标库中找到图标加入购物车，选完后最好加入一个项目中，因为购物车可能被清，然后点击下载，将下载下来的文件全部存到项目静态资源目录如assets，使用方法则是直接用class命名的方式，具体图标的，命名可在iconfont.json中查看，注意”css_prefix_text”: “icon-“,有这个就需要class前面加上icon-</p><h5 id="在两个元素之间拉开一定的距离，并且两个元素加上距离依旧占到height的100"><a href="#在两个元素之间拉开一定的距离，并且两个元素加上距离依旧占到height的100" class="headerlink" title="在两个元素之间拉开一定的距离，并且两个元素加上距离依旧占到height的100%"></a>在两个元素之间拉开一定的距离，并且两个元素加上距离依旧占到height的100%</h5><p>使用flex布局中的gap可以达到这样的效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;listView&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;line3&quot;&gt;</span><br><span class="line">          &lt;!--下面的代码是实现效果的核心代码--&gt;</span><br><span class="line">            &lt;div class=&quot;l3Data2&quot; style=&quot;display: flex; gap: 10px;flex-direction: column;&quot;&gt;</span><br><span class="line">                &lt;!-- 模型喜爱数据 --&gt;</span><br><span class="line">                &lt;el-card style=&quot;height: 50%&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;card-header&quot; slot=&quot;header&quot;&gt;模型喜爱数据&lt;/p&gt;</span><br><span class="line">                    &lt;div id=&quot;modelPieChart&quot; style=&quot;height: 100%;&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/el-card&gt;</span><br><span class="line">                &lt;!-- 类型喜爱数据 --&gt;</span><br><span class="line">                &lt;el-card style=&quot;height: 50%&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;card-header&quot; slot=&quot;header&quot;&gt;类型喜爱数据&lt;/p&gt;</span><br><span class="line">                    &lt;div id=&quot;categoryPieChart&quot; style=&quot;height: 100%;&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/el-card&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="大屏适配"><a href="#大屏适配" class="headerlink" title="大屏适配"></a>大屏适配</h5><p>想要实现的效果为在任意屏幕下都能占满屏幕，使用 min-height: 100vh;来解决这个问题，这样无论数据是否超出限制，至少能够占满屏幕</p><p>接下来在数据超出时因为同一父元素下两个子元素同时使用使用了height：100%，导致可能出现两个滚动条，这也提醒了我height百分比的形式不是万能的，在内部会超出限制时会导致布局出错，百分比的形式还是应该出现在缩放时比较合理，常规不需要进行限制，只需要min-height: 100vh;然后元素会自己进行高度拉伸</p><h4 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h4><h5 id="router防止页面回退"><a href="#router防止页面回退" class="headerlink" title="router防止页面回退"></a>router防止页面回退</h5><p>直接使用replace代替push可以使得页面的回退消失</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this.$router.push(&#123; name: &#x27;index&#x27; &#125;);</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;index&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure><h5 id="路由监听防止用户回退页面出错"><a href="#路由监听防止用户回退页面出错" class="headerlink" title="路由监听防止用户回退页面出错"></a>路由监听防止用户回退页面出错</h5><p>通过watch的方式监听$route并进行相依的操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;$route&#x27;</span>(to, <span class="keyword">from</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">handleRouteChange</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="-2"><a href="#-2" class="headerlink" title=""></a></h4><h3 id="框架学习-1"><a href="#框架学习-1" class="headerlink" title="框架学习"></a>框架学习</h3><h4 id="Echarts"><a href="#Echarts" class="headerlink" title="Echarts"></a>Echarts</h4><h5 id="echarts折线图"><a href="#echarts折线图" class="headerlink" title="echarts折线图"></a>echarts折线图</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">renderLineChart</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 渲染观看数量趋势折线图</span></span><br><span class="line">    <span class="keyword">const</span> lineChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;lineChart&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加折线图配置和数据</span></span><br><span class="line">    <span class="keyword">const</span> option = &#123;</span><br><span class="line">        <span class="comment">// 配置选项</span></span><br><span class="line">        <span class="attr">xAxis</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: [<span class="string">&#x27;Day 1&#x27;</span>, <span class="string">&#x27;Day 2&#x27;</span>, <span class="string">&#x27;Day 3&#x27;</span>, <span class="string">&#x27;Day 4&#x27;</span>, <span class="string">&#x27;Day 5&#x27;</span>], <span class="comment">// 示例数据</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">yAxis</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">legend</span>: &#123;</span><br><span class="line">            <span class="attr">data</span>: [<span class="string">&#x27;模型观看人数&#x27;</span>], <span class="comment">// 添加图例名称</span></span><br><span class="line">            <span class="attr">orient</span>: <span class="string">&#x27;horizontal&#x27;</span>,</span><br><span class="line">            <span class="attr">x</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="string">&#x27;top&#x27;</span>,</span><br><span class="line">            <span class="attr">itemGap</span>: <span class="number">40</span>, <span class="comment">// 控制每一项的间距，也就是图例之间的距离</span></span><br><span class="line">            <span class="attr">itemHeight</span>: <span class="number">10</span>, <span class="comment">// 控制图例图形的高度</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">series</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;模型观看人数&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: [<span class="number">100</span>, <span class="number">200</span>, <span class="number">150</span>, <span class="number">300</span>, <span class="number">250</span>], <span class="comment">// 示例数据</span></span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">                <span class="attr">color</span>: [<span class="string">&#x27;#5DB1FF&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加窗口大小改变监听事件，当窗口大小改变时，图表会重新绘制，自适应窗口大小</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        lineChart.<span class="title function_">resize</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    lineChart.<span class="title function_">setOption</span>(option);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="echarts饼图"><a href="#echarts饼图" class="headerlink" title="echarts饼图"></a>echarts饼图</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">renderModelPieChart</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 渲染模型喜爱数据饼图</span></span><br><span class="line">    <span class="keyword">const</span> modelPieChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modelPieChart&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加饼图配置和数据</span></span><br><span class="line">    <span class="keyword">const</span> option = &#123;</span><br><span class="line">        <span class="comment">// 配置选项</span></span><br><span class="line">        <span class="attr">legend</span>: &#123;</span><br><span class="line">            <span class="attr">data</span>: [<span class="string">&#x27;Model A&#x27;</span>, <span class="string">&#x27;Model B&#x27;</span>], <span class="comment">// 添加图例名称</span></span><br><span class="line">            <span class="attr">orient</span>: <span class="string">&#x27;horizontal&#x27;</span>,</span><br><span class="line">            <span class="attr">x</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="string">&#x27;top&#x27;</span>,</span><br><span class="line">            <span class="attr">itemGap</span>: <span class="number">40</span>, <span class="comment">// 控制每一项的间距，也就是图例之间的距离</span></span><br><span class="line">            <span class="attr">itemHeight</span>: <span class="number">10</span>, <span class="comment">// 控制图例图形的高度</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">series</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;模型收藏人数&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;pie&#x27;</span>,</span><br><span class="line">                <span class="attr">radius</span>: <span class="string">&#x27;55%&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: [</span><br><span class="line">                    &#123; <span class="attr">name</span>: <span class="string">&#x27;Model A&#x27;</span>, <span class="attr">value</span>: <span class="number">30</span>, <span class="attr">itemStyle</span>: &#123; <span class="attr">color</span>: <span class="string">&#x27;#FAC858&#x27;</span> &#125; &#125;, <span class="comment">// 示例数据</span></span><br><span class="line">                    &#123; <span class="attr">name</span>: <span class="string">&#x27;Model B&#x27;</span>, <span class="attr">value</span>: <span class="number">20</span>, <span class="attr">itemStyle</span>: &#123; <span class="attr">color</span>: <span class="string">&#x27;#91CC75&#x27;</span> &#125; &#125;, <span class="comment">// 示例数据</span></span><br><span class="line">                    <span class="comment">// 添加更多模型数据</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加窗口大小改变监听事件，当窗口大小改变时，图表会重新绘制，自适应窗口大小</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        modelPieChart.<span class="title function_">resize</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    modelPieChart.<span class="title function_">setOption</span>(option);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h5 id="echarts图例"><a href="#echarts图例" class="headerlink" title="echarts图例"></a>echarts图例</h5><p>具体参考<a href="https://blog.csdn.net/chen__cheng/article/details/118388833">Echarts legend属性使用-CSDN博客</a></p><p>在option中加入legend即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">renderLineChart</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 渲染观看数量趋势折线图</span></span><br><span class="line">    <span class="keyword">const</span> lineChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;lineChart&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加折线图配置和数据</span></span><br><span class="line">    <span class="keyword">const</span> option = &#123;</span><br><span class="line">        <span class="attr">legend</span>: &#123;</span><br><span class="line">            <span class="attr">data</span>: [<span class="string">&#x27;模型观看人数&#x27;</span>], <span class="comment">// 添加图例名称</span></span><br><span class="line">            <span class="attr">orient</span>: <span class="string">&#x27;horizontal&#x27;</span>,</span><br><span class="line">            <span class="attr">x</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="string">&#x27;top&#x27;</span>,</span><br><span class="line">            <span class="attr">itemGap</span>: <span class="number">40</span>, <span class="comment">// 控制每一项的间距，也就是图例之间的距离</span></span><br><span class="line">            <span class="attr">itemHeight</span>: <span class="number">10</span>, <span class="comment">// 控制图例图形的高度</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    lineChart.<span class="title function_">setOption</span>(option);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h5 id="echarts改变图标颜色"><a href="#echarts改变图标颜色" class="headerlink" title="echarts改变图标颜色"></a>echarts改变图标颜色</h5><p>折线图的折线换颜色,直接color底下加相应颜色即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">renderLineChart</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 渲染观看数量趋势折线图</span></span><br><span class="line">    <span class="keyword">const</span> lineChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;lineChart&#x27;</span>));</span><br><span class="line">    <span class="comment">// 添加折线图配置和数据</span></span><br><span class="line">    <span class="keyword">const</span> option = &#123;</span><br><span class="line">        <span class="attr">series</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;模型观看人数&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: [<span class="number">100</span>, <span class="number">200</span>, <span class="number">150</span>, <span class="number">300</span>, <span class="number">250</span>], <span class="comment">// 示例数据</span></span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">                <span class="attr">color</span>: [<span class="string">&#x27;#5DB1FF&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;;</span><br><span class="line">    lineChart.<span class="title function_">setOption</span>(option);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>饼图换颜色需要在外层嵌套itemStyle</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">renderModelPieChart</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 渲染模型喜爱数据饼图</span></span><br><span class="line">    <span class="keyword">const</span> modelPieChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modelPieChart&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加饼图配置和数据</span></span><br><span class="line">    <span class="keyword">const</span> option = &#123;</span><br><span class="line">        <span class="attr">series</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;模型收藏人数&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;pie&#x27;</span>,</span><br><span class="line">                <span class="attr">radius</span>: <span class="string">&#x27;55%&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: [</span><br><span class="line">                    &#123; <span class="attr">name</span>: <span class="string">&#x27;Model A&#x27;</span>, <span class="attr">value</span>: <span class="number">30</span>, <span class="attr">itemStyle</span>: &#123; <span class="attr">color</span>: <span class="string">&#x27;#FAC858&#x27;</span> &#125; &#125;, <span class="comment">// 示例数据</span></span><br><span class="line">                    &#123; <span class="attr">name</span>: <span class="string">&#x27;Model B&#x27;</span>, <span class="attr">value</span>: <span class="number">20</span>, <span class="attr">itemStyle</span>: &#123; <span class="attr">color</span>: <span class="string">&#x27;#91CC75&#x27;</span> &#125; &#125;, <span class="comment">// 示例数据</span></span><br><span class="line">                    <span class="comment">// 添加更多模型数据</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    modelPieChart.<span class="title function_">setOption</span>(option);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="echarts美观折线图"><a href="#echarts美观折线图" class="headerlink" title="echarts美观折线图"></a>echarts美观折线图</h5><h5 id="圆润折线图以及折线面积效果还有增大转折点尺寸以及取消边界间隙"><a href="#圆润折线图以及折线面积效果还有增大转折点尺寸以及取消边界间隙" class="headerlink" title="圆润折线图以及折线面积效果还有增大转折点尺寸以及取消边界间隙"></a>圆润折线图以及折线面积效果还有增大转折点尺寸以及取消边界间隙</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">  <span class="attr">xAxis</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">    <span class="attr">boundaryGap</span>: <span class="literal">false</span>, <span class="comment">// 取消边界间隙</span></span><br><span class="line">    <span class="attr">data</span>: [<span class="string">&#x27;Mon&#x27;</span>, <span class="string">&#x27;Tue&#x27;</span>, <span class="string">&#x27;Wed&#x27;</span>, <span class="string">&#x27;Thu&#x27;</span>, <span class="string">&#x27;Fri&#x27;</span>, <span class="string">&#x27;Sat&#x27;</span>, <span class="string">&#x27;Sun&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">yAxis</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">series</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">data</span>: [<span class="number">820</span>, <span class="number">932</span>, <span class="number">901</span>, <span class="number">934</span>, <span class="number">1290</span>, <span class="number">1330</span>, <span class="number">1320</span>],</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">      <span class="attr">smooth</span>: <span class="literal">true</span>, <span class="comment">// 圆润折线图</span></span><br><span class="line">      <span class="attr">symbolSize</span>: <span class="number">7</span>, <span class="comment">// 增大转折点尺寸</span></span><br><span class="line">      <span class="attr">areaStyle</span>: &#123;&#125;  <span class="comment">// 折线面积效果</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="-3"><a href="#-3" class="headerlink" title=""></a></h4><h5 id="echarts不同尺寸下的优化"><a href="#echarts不同尺寸下的优化" class="headerlink" title="echarts不同尺寸下的优化"></a>echarts不同尺寸下的优化</h5><h6 id="图表不跟随页面改变而缩放"><a href="#图表不跟随页面改变而缩放" class="headerlink" title="图表不跟随页面改变而缩放"></a>图表不跟随页面改变而缩放</h6><p>这是因为echarts的相关图标需要resize一下才会改变大小</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">renderLineChart</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 渲染观看数量趋势折线图</span></span><br><span class="line">    <span class="keyword">const</span> lineChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;lineChart&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加窗口大小改变监听事件，当窗口大小改变时，图表会重新绘制，自适应窗口大小</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        lineChart.<span class="title function_">resize</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="comment">//注意resize需要在setOption之前进行否则不生效</span></span><br><span class="line">    lineChart.<span class="title function_">setOption</span>(option);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h6 id="图表不跟随横向flex的大小进行缩放"><a href="#图表不跟随横向flex的大小进行缩放" class="headerlink" title="图表不跟随横向flex的大小进行缩放"></a>图表不跟随横向flex的大小进行缩放</h6><p>这点问题是比如说我设置flex一个为2一个为1，最后两个元素缩放却缩放成了1:2，我本来以为是echarts配置问题，但是在查找后（原文链接：<a href="https://blog.csdn.net/weixin_39808181/article/details/117998689">echarts不会随着flex布局自适应伸缩_flex不跟随内容自动伸展_zc自由飞~的博客-CSDN博客</a>）我发现需要加上最小宽度，并且最小宽度还要和flex布局的大小一致</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.l3Data1</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">60%</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.l3Data2</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">30%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="图表不跟随竖直向flex的大小进行缩放"><a href="#图表不跟随竖直向flex的大小进行缩放" class="headerlink" title="图表不跟随竖直向flex的大小进行缩放"></a>图表不跟随竖直向flex的大小进行缩放</h6><p>这个问题比较曲折，首先是竖直方向进行缩放，发现图标直接随着缩放大小而消失到屏幕外，后来发现原因来自于最外层添加了overflow-y: hidden;在修改为overflow-y: auto;后，出现了两个y轴点拖动条，然后发现页面里有多余的iframe并占据了4x4的大小导致最外层又多了一个拖动条，解决方法在于直接在iframe的id的css中加上display:none，但是这样图表在缩放后会变到不能看的程度，这时候需要加上min-height,这个还是挺基础的,关键在于这里并不能使用常规的百分比方式，因为会导致另外的元素与其高度不统一，下面会放上竖直方向如何进行flex缩放</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.listView</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line1</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line2</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">10</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">250px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line3</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">20</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">460px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Element-UI"><a href="#Element-UI" class="headerlink" title="Element-UI"></a>Element-UI</h4><h5 id="修改el-card的样式"><a href="#修改el-card的样式" class="headerlink" title="修改el-card的样式"></a>修改el-card的样式</h5><p>注意要加上::v-deep才能修改到样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">el</span>-card ::v-deep .<span class="property">el</span>-card__header &#123;</span><br><span class="line">    <span class="attr">height</span>: <span class="number">10</span>%;</span><br><span class="line">    padding-<span class="attr">left</span>: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="property">el</span>-card ::v-deep .<span class="property">el</span>-card__body &#123;</span><br><span class="line">    <span class="attr">display</span>: grid;</span><br><span class="line">    align-<span class="attr">items</span>: center;</span><br><span class="line">    <span class="attr">height</span>: <span class="number">90</span>%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="element-ui-联排按钮效果"><a href="#element-ui-联排按钮效果" class="headerlink" title="element-ui 联排按钮效果"></a>element-ui 联排按钮效果</h5><p>使用el-button-group可以去除el-button自带的右侧margin,代码的代码还实现了默认当日按钮被点击，点击其他按钮也会进行相应的点击变化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;listView&quot;&gt;</span><br><span class="line">        &lt;!-- 时间筛选功能 --&gt;</span><br><span class="line">        &lt;div class=&quot;line1&quot;&gt;</span><br><span class="line">            &lt;el-button-group&gt;</span><br><span class="line">                &lt;el-button :type=&quot;selectedButton === &#x27;today&#x27; ? &#x27;primary&#x27; : &#x27;&#x27;&quot; @click=&quot;selectDate(&#x27;today&#x27;)&quot;&gt;当日&lt;/el-button&gt;</span><br><span class="line">                &lt;el-button :type=&quot;selectedButton === &#x27;last7days&#x27; ? &#x27;primary&#x27; : &#x27;&#x27;&quot;</span><br><span class="line">                    @click=&quot;selectDate(&#x27;last7days&#x27;)&quot;&gt;最近7天&lt;/el-button&gt;</span><br><span class="line">                &lt;el-button :type=&quot;selectedButton === &#x27;last30days&#x27; ? &#x27;primary&#x27; : &#x27;&#x27;&quot;</span><br><span class="line">                    @click=&quot;selectDate(&#x27;last30days&#x27;)&quot;&gt;最近30天&lt;/el-button&gt;</span><br><span class="line">                &lt;el-button :type=&quot;selectedButton === &#x27;last60days&#x27; ? &#x27;primary&#x27; : &#x27;&#x27;&quot;</span><br><span class="line">                    @click=&quot;selectDate(&#x27;last60days&#x27;)&quot;&gt;最近60天&lt;/el-button&gt;</span><br><span class="line">                &lt;el-button :type=&quot;selectedButton === &#x27;last90days&#x27; ? &#x27;primary&#x27; : &#x27;&#x27;&quot;</span><br><span class="line">                    @click=&quot;selectDate(&#x27;last90days&#x27;)&quot;&gt;最近90天&lt;/el-button&gt;</span><br><span class="line">                &lt;el-button :type=&quot;selectedButton === &#x27;lastyear&#x27; ? &#x27;primary&#x27; : &#x27;&#x27;&quot;</span><br><span class="line">                    @click=&quot;selectDate(&#x27;lastyear&#x27;)&quot;&gt;最近一年&lt;/el-button&gt;</span><br><span class="line">            &lt;/el-button-group&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            selectedButton: &#x27;today&#x27;, // 默认选中当日按钮</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="el-checkbox-group的值为对象时的复选框回显问题"><a href="#el-checkbox-group的值为对象时的复选框回显问题" class="headerlink" title="el-checkbox-group的值为对象时的复选框回显问题"></a>el-checkbox-group的值为对象时的复选框回显问题</h5><p>el-checkbox-group 值不可以为对象，所以新建了一个数组checkedListIds只存入id，然后label里存入item.id</p><h5 id="Element-ui-进度条的使用"><a href="#Element-ui-进度条的使用" class="headerlink" title="Element-ui 进度条的使用"></a>Element-ui 进度条的使用</h5><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/621765478">axios进度条功能onDownloadProgress函数total参数为undefined问题 - 知乎 (zhihu.com)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-progress :percentage=&quot;this.downloadProgress&quot; type=&quot;circle&quot; :width=&quot;400&quot; color=&quot;#ffc200&quot;</span><br><span class="line">             v-if=&quot;this.downloadProgress &gt; 0 &amp;&amp; this.downloadProgress &lt; 100&quot;&gt;&lt;/el-progress&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      downloadProgress: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    vue3dLoader</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"></span><br><span class="line">    Preview(androidModelPath) &#123;</span><br><span class="line">      // ... (other code) ...</span><br><span class="line">      // 初始化进度为0</span><br><span class="line">      this.downloadProgress = 0;</span><br><span class="line">      this.glbFileUrl = &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">      // 发起文件下载请求</span><br><span class="line">      downloadGLBPreview(&#123; name: androidModelPath &#125;, (progressEvent) =&gt; &#123;</span><br><span class="line">        // 计算下载进度</span><br><span class="line">        console.log(&#x27;Download Progress:&#x27;, progressEvent.loaded, &#x27;/&#x27;, progressEvent.total);</span><br><span class="line">        this.downloadProgress = Math.round(progressEvent.loaded / progressEvent.total * 100);</span><br><span class="line">      &#125;).then((url) =&gt; &#123;</span><br><span class="line">        // 下载完成后，设置文件URL并显示对话框</span><br><span class="line">        this.glbFileUrl = url;</span><br><span class="line">      &#125;);</span><br><span class="line">      this.dialogVisible = true;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>封装 api 部分</p><p>注意点在于我本来是通过localhost:8080进行转发到<a href="http://42.192.90.134:81的，但是这样做的话，返回头的ContentLength就会丢失，而关键的统计文件总大小的">http://42.192.90.134:81的，但是这样做的话，返回头的ContentLength就会丢失，而关键的统计文件总大小的</a> progressEvent.total 就来自于返回头中的 ContentLength ，所以必须直接使用<a href="http://42.192.90.134:81/common/downloadGLBPreview%E7%9A%84%E6%96%B9%E5%BC%8F">http://42.192.90.134:81/common/downloadGLBPreview的方式</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $axios <span class="keyword">from</span> <span class="string">&#x27;../utils/request&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">downloadGLBPreview</span> = (<span class="params">params, onDownloadProgress</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`http://42.192.90.134:81/common/downloadGLBPreview`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    params,</span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span>, <span class="comment">// Set responseType to &#x27;blob&#x27;</span></span><br><span class="line">    onDownloadProgress, <span class="comment">// Pass the onDownloadProgress callback</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle the blob response</span></span><br><span class="line">    <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([response.<span class="property">data</span>], &#123; <span class="attr">type</span>: <span class="string">&#x27;model/gltf-binary&#x27;</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> url;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="效果实现"><a href="#效果实现" class="headerlink" title="效果实现"></a>效果实现</h3><h4 id="loading动画加载"><a href="#loading动画加载" class="headerlink" title="loading动画加载"></a>loading动画加载</h4><p>使用v-loading来控制某个页面动画的加载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;listView&quot; v-loading=&quot;loading&quot;&gt;</span><br></pre></td></tr></table></figure><p>在js部分中使用this.loading控制动画是否出现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            loading: true,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">        async init(chosenDate) &#123;</span><br><span class="line">            const params = &#123;</span><br><span class="line">                chosenDate: chosenDate,</span><br><span class="line">            &#125;;</span><br><span class="line">            try &#123;</span><br><span class="line">                this.loading = true</span><br><span class="line">                const res = await getAnalytics(params);</span><br><span class="line">                if (String(res.code) === &#x27;1&#x27;) &#123;</span><br><span class="line">                    this.closeLoading()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (err) &#123;</span><br><span class="line">                this.$message.error(&#x27;请求出错了：&#x27; + err);</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    closeLoading() &#123;</span><br><span class="line">            this.timer = null;</span><br><span class="line">            this.timer = setTimeout(() =&gt; &#123;</span><br><span class="line">                this.loading = false;</span><br><span class="line">            &#125;, 600);</span><br><span class="line">        &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="3D-模型预览"><a href="#3D-模型预览" class="headerlink" title="3D 模型预览"></a>3D 模型预览</h4><h5 id="Vue-3D-Loader"><a href="#Vue-3D-Loader" class="headerlink" title="Vue-3D-Loader"></a>Vue-3D-Loader</h5><p>框架地址：<a href="https://king2088.github.io/vue-3d-loader-docs/zh/guide/getting-started.html#%E5%85%A8%E5%B1%80%E5%BC%95%E5%85%A5">快速上手 | Vue 3d loader (king2088.github.io)</a></p><p>1、安装插件</p><p>注意 vue-3d-model 的最新版本不适配 vue2 ，要使用的话就需要指定版本</p><p><em>vue3请安装<strong>2.0.0</strong>及以上版本，vue2请安装<strong>1.x.x</strong>版本</em></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install vue-<span class="number">3d</span>-loader</span><br></pre></td></tr></table></figure><p>2、使用方法</p><p>先 import 引入 ，然后使用插件所提供的组件vue3dLoader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;vue3dLoader v-<span class="keyword">else</span> :width=<span class="string">&quot;700&quot;</span> :height=<span class="string">&quot;800&quot;</span> :fileType=<span class="string">&quot;&#x27;gltf&#x27;&quot;</span> :cameraPosition=<span class="string">&quot;&#123; x: 0, y: 0, z: 0.35 &#125;&quot;</span></span><br><span class="line">                :filePath=<span class="string">&quot;this.glbFileUrl&quot;</span> :backgroundColor=<span class="string">&quot;0x000000&quot;</span>&gt;&lt;/vue3dLoader&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; getModelPage, deleteModel, modelStatusByStatus, addBannerModel, removeBannerModel, downloadGLBPreview &#125; from <span class="string">&#x27;../../api/model&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; vue3dLoader &#125; from <span class="string">&quot;vue-3d-loader&quot;</span>;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            glbFileUrl: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        Preview(androidModelPath) &#123;</span><br><span class="line">            console.log(<span class="string">&quot;androidModelPath:&quot;</span> + androidModelPath)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 初始化进度为0</span></span><br><span class="line">            <span class="built_in">this</span>.downloadProgress = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">this</span>.glbFileUrl = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发起文件下载请求</span></span><br><span class="line">            downloadGLBPreview(&#123; name: androidModelPath &#125;, (progressEvent) =&gt; &#123;</span><br><span class="line">                <span class="comment">// 计算下载进度</span></span><br><span class="line">                console.log(<span class="string">&#x27;Download Progress:&#x27;</span>, progressEvent.loaded, <span class="string">&#x27;/&#x27;</span>, progressEvent.total);</span><br><span class="line">                <span class="built_in">this</span>.downloadProgress = Math.round(progressEvent.loaded / progressEvent.total * <span class="number">100</span>);</span><br><span class="line">            &#125;).then((url) =&gt; &#123;</span><br><span class="line">                <span class="comment">// 下载完成后，设置文件URL并显示对话框</span></span><br><span class="line">                <span class="built_in">this</span>.glbFileUrl = url;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">this</span>.dialogVisible = <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="其他部分"><a href="#其他部分" class="headerlink" title="其他部分"></a>其他部分</h2><h3 id="服务器访问图片"><a href="#服务器访问图片" class="headerlink" title="服务器访问图片"></a>服务器访问图片</h3><p>原文如下<a href="https://blog.csdn.net/happy_lights/article/details/105921022">如何访问存在服务器的图片或者视屏等静态资源_如何访问服务器上的静态视频-CSDN博客</a></p><p>方法有很多，比如springboot静态资源配置来访问或者nginx反向代理，这里我选择使用启动tomcat端口来进行访问</p><p>首先启动一个tomcat服务器，宝塔管理系统有一个插件java项目管理器，可以轻松的配置tomcat的配置文件（下面的配置文件为了简约我删了很多）新加Context标签然后docBase中输入服务器放图片的位置，path中则是访问的地址，最后网址为42.192.90.134:8082&#x2F;images&#x2F;014896a7-bb90-40e9-a988-64703ed80e12.jpg</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8805&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span> <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span> <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--关键在于下面的这句--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span> =<span class="string">&quot;C:\img&quot;</span> <span class="attr">path</span> =<span class="string">&quot;/images&quot;</span> <span class="attr">debug</span> =<span class="string">&quot;0&quot;</span> <span class="attr">reloadable</span> =<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解决服务器图片跨域问题"><a href="#解决服务器图片跨域问题" class="headerlink" title="解决服务器图片跨域问题"></a>解决服务器图片跨域问题</h3><p>因为我访问图片的方法是在服务器端开了一个tomcat端口8082，实现方法如下：<br>主要是新增了docBase绑定服务器地址</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span> <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span> <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span> <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--下面是增加的代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">&quot;C:\img&quot;</span> <span class="attr">path</span>=<span class="string">&quot;/images&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在访问C:\img\iphone-14-pro这类的文件时，因为基础地址不等于docBase，所以存在跨域问题，但是tomcat的跨域不可能用@CrossOrigin去实现跨域，需要配置文件，设置跨域请求头，具体配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CorsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.catalina.filters.CorsFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.allowed.origins<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.allowed.methods<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>GET,POST,HEAD,OPTIONS,PUT<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.allowed.headers<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Content-Type,X-Requested-With,accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.exposed.headers<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Access-Control-Allow-Origin,Access-Control-Allow-Credentials<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.preflight.maxage<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CorsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原文如下：<a href="https://zhuanlan.zhihu.com/p/546829621">Tomcat设置跨域 - 知乎 (zhihu.com)</a></p><h3 id="MySQL索引"><a href="#MySQL索引" class="headerlink" title="MySQL索引"></a>MySQL索引</h3><p>![截屏2023-11-13 18.42.01](&#x2F;Users&#x2F;tec&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-11-13 18.42.01.png)</p><h3 id="IDEA快捷键"><a href="#IDEA快捷键" class="headerlink" title="IDEA快捷键"></a>IDEA快捷键</h3><p>在方法后直接加上.var 可以自动创建相应的返回值的对象</p><p>.notnull 生成相应的 if 语句判断为非空（虽然现在基本都使用自己封装的 OptionalUtils 了）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android</title>
      <link href="/posts/5d018fb1.html"/>
      <url>/posts/5d018fb1.html</url>
      
        <content type="html"><![CDATA[<h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><p>目前安卓开发有两种语言可以选择，java或者Kotlin，Kotlin比起Java来说更加简洁，且优化了不少写法<br>安卓开发的框架呢有Jetpack Compose，使用声明式开发，基本语法方面与SwiftUI大相径庭，但是只适用于Kotlin语言<br>使用xml去布局activity（页面），使用java去编写逻辑（相当于javascript）<br>要编写逻辑时，需要用id（XXXX xxxx&#x3D;findViewById（R.id.xxxx））去找到该控件，实例化之后再去进行后续操作</p><h2 id="简单控件"><a href="#简单控件" class="headerlink" title="简单控件"></a>简单控件</h2><h3 id="text"><a href="#text" class="headerlink" title="text"></a>text</h3><p>单位有px，dp（常用），sp（字体专用，会根据系统文字大小进行调整，一般情况下与dp大小一致）<br>一般是在@String里面（values包下面）去写文字，这样方便一次修改，以及后续调整语言</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_margin</span>=<span class="string">&quot;@dimen/dimen_20&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在Design中表示可从左侧控件展示处拖拽至布局文件上，创建简单一个TextView。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/textView&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;TextView&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--修改颜色、大小--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置颜色 @color/color_ff0000位置：app/values/colors--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置大小 @dimen/text_size_18位置：app/values/dimens--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置内容 @string/str_setting_color_size位置：app/values/strings--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;@string/str_setting_color_size&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;@dimen/dimen_10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/color_ff0000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/text_size_20&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加图片和使用阴影--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加图片:drawableTop、drawableBottom、drawableLeft（drawableStart）、drawableRight（drawableEnd）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用阴影:shadowColor（阴影颜色）、shadowDx(tv_2位置为基准，数字越大越往右)、</span></span><br><span class="line"><span class="comment">    shadowDy(tv_2位置为基准，数字越大越往下)、shadowRadius（数字越大越模糊）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--图片 @mipmap/ic_launcher 位置：app/mipmap/任意一个目录能找到即可--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawableLeft</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;@dimen/dimen_10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowColor</span>=<span class="string">&quot;@color/color_FF773D&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowDx</span>=<span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowDy</span>=<span class="string">&quot;-20&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowRadius</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;右侧添加图片和使用阴影&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/color_188FFF&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/text_size_20&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--对电话和邮件增加链接--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--autoLink对文本内容自动添加E-mail地址、电话号码添加超级链接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:autoLink</span>=<span class="string">&quot;email|phone&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;@dimen/dimen_10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;可点击跳转邮件:SCC5201314@qq.com\n可点击跳转电话:0215201314&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/color_188FFF&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/text_size_14&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--内容过多--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--maxLength最多显示几行，单行也可用android:singleline=&quot;true&quot;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--ellipsize，内容显示不下时，显示...（位置最前、中间、最后都可以），这里要加行数限制才行--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--lineSpacingMultiplier，行距--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:ellipsize</span>=<span class="string">&quot;end&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:lineSpacingMultiplier</span>=<span class="string">&quot;1.2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;@dimen/dimen_10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:maxLength</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;TxtView继承了View，它还是Button、EditText两个UI组件类的父类。它的作用是在用户界面上显示文本素。从功能上来看TextView就是个文本编辑器，只不过Android关闭的它的可编辑功能。如果需要一个可编辑的文本框，就要使用到它的子类Editext了，Editext允许用户编辑文本框中的内容。TextView和Editext它俩最大的区别就在于TextView不允许用户编辑文本内容，Editext允许用户编辑文本内容。</span></span></span><br><span class="line"><span class="string"><span class="tag">下面咱写几个实例来详细了解一下TextView的。&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/color_188FFF&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/text_size_14&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--background设置背景色--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--padding内边距（边到可用范围的距离）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@color/color_ff0000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;@dimen/dimen_10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;背景色红色的文本&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/white&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--带边框的文本--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--layout_margin外边距（TextView到其他控件的距离）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;@dimen/dimen_10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/bg_tv_frame_red&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;带着红色边框的文本&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--带边框的文本背景色渐变--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--代码可实现文本的渐变--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;@dimen/dimen_10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/bg_tv_frame_gradient&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/white&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;带着边框和背景色渐变的文本&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="LinearLayout"><a href="#LinearLayout" class="headerlink" title="LinearLayout"></a>LinearLayout</h3><p>线性布局</p><p>使用orientation属性控制排列方式，默认水平排列<br>水平：orientation：horizontal</p><p>垂直：orientation：vertical<br>使用layout_weight属性控制权重，相当于各自拥有多大比例</p><p>Layout_width为0dp时,layout_weight表示水平方向的宽度比例</p><p>Layout_height为0dp时,layout_weight表示垂直方向的宽度比例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;400dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;300dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@color/teal_200&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="RelativeLayout"><a href="#RelativeLayout" class="headerlink" title="RelativeLayout"></a>RelativeLayout</h3><p>相对布局，感觉比较像css里的绝对定位</p><p>布局方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//左上</span><br><span class="line">android:layout_alignParentTop=&quot;true&quot;</span><br><span class="line">android:layout_alignParentLeft=&quot;true&quot;</span><br><span class="line"></span><br><span class="line">//右上</span><br><span class="line">android:layout_alignParentTop=&quot;true&quot;</span><br><span class="line">android:layout_alignParentRight=&quot;true&quot;//不设置基于右侧，会自动设置为基于左侧</span><br><span class="line"></span><br><span class="line">//左下</span><br><span class="line">android:layout_alignParentBottom=&quot;true&quot;  //不设置基于底部，会自动设置为基于顶部</span><br><span class="line">android:layout_alignParentLeft=&quot;true&quot;   </span><br><span class="line"></span><br><span class="line">//右下</span><br><span class="line">android:layout_alignParentBottom=&quot;true&quot;  //不设置基于底部，会自动设置为基于顶部</span><br><span class="line">android:layout_alignParentRight=&quot;true&quot;  //不设置基于右侧，会自动设置为基于左侧</span><br><span class="line"></span><br><span class="line">android:layout_above=&quot;@id/button3&quot;    //居中控件顶部</span><br><span class="line">android:layout_below=&quot;@id/button3&quot;    //居中控件底部</span><br><span class="line">android:layout_toLeftOf=&quot;@id/button3&quot;  //居中控件左侧</span><br><span class="line">android:layout_toRightOf=&quot;@id/button3&quot;  //居中控件右侧</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="GridLayout"><a href="#GridLayout" class="headerlink" title="GridLayout"></a>GridLayout</h3><h4 id="设置几行几列"><a href="#设置几行几列" class="headerlink" title="设置几行几列"></a>设置几行几列</h4><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>android:rowCount</td><td>设置网格布局有几行</td></tr><tr><td>android:columnCount</td><td>设置网格布局有几列</td></tr></tbody></table><h4 id="设置组件所在的行或列"><a href="#设置组件所在的行或列" class="headerlink" title="设置组件所在的行或列"></a>设置组件所在的行或列</h4><blockquote><p><strong>注意：</strong> 行列从 0 开始计算，比如第一行是 0 ，第二行是 1</p></blockquote><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>android:layout_row</td><td>设置组件位于第几行</td></tr><tr><td>android:layout_column</td><td>设置组件位于第几列</td></tr></tbody></table><h4 id="设置组件跨几行几列"><a href="#设置组件跨几行几列" class="headerlink" title="设置组件跨几行几列"></a>设置组件跨几行几列</h4><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>android:layout_rowSpan</td><td>设置组件跨几行</td></tr><tr><td>android:layout_columnSpan</td><td>设置组件跨几列</td></tr></tbody></table><h3 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h3><p><strong>ScrollView</strong> 是一个竖直滚动条，水平方向上的滚动条为 <strong>HorizontalScrollView</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;8dp&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ScrollView</span></span></span><br><span class="line"><span class="tag">       &lt;!<span class="attr">--注意ScrollView为竖直滚动</span>，<span class="attr">所以layout_width必须match_parent</span></span></span><br><span class="line"><span class="tag">  &lt;!<span class="attr">--同理HorizontalScrollView为水平滚动</span>，<span class="attr">所以layout_height必须match_parent--</span>&gt;</span></span><br><span class="line">        android:id=&quot;@+id/scrollview&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot; </span><br><span class="line">        android:layout_height=&quot;500dp&quot;&gt;</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@string/chuliuxiang&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><p>事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取控件id</span></span><br><span class="line">        Button btn1=findViewById(R.id.btn1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 监听点击事件</span></span><br><span class="line">        btn1.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// 在这里写要执行的操作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 长按事件</span></span><br><span class="line">        btn1.setOnLongClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnLongClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onLongClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// 在这里写要执行的操作</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 触摸事件</span></span><br><span class="line">        btn1.setOnTouchListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnTouchListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouch</span><span class="params">(View v, MotionEvent event)</span> &#123;</span><br><span class="line">                <span class="comment">// 在这里写要执行的操作</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ImageView"><a href="#ImageView" class="headerlink" title="ImageView"></a>ImageView</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--src设置前景，而background设置背景，scaleType为缩放形式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:id</span>=<span class="string">&quot;@+id/iv&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_width</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_height</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_centerHorizontal</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:scaleType</span>=<span class="string">&quot;fitCenter&quot;</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">android:src</span>=<span class="string">&quot;@drawable/developer&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:background</span>=<span class="string">&quot;@drawable/developer&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><p>相当于引入组件，优化了代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">&quot;@layout/activity_drawer_menu&quot;</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/drawerMenu1&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DrawerLayout"><a href="#DrawerLayout" class="headerlink" title="DrawerLayout"></a>DrawerLayout</h3><p>安卓自带的抽屉式菜单</p><p>使用方法为分为两部分，一个是正文部分（必须放在最上面），一个是菜单部分，其中如果是左侧拉出的菜单就必须要加上android:layout_gravity&#x3D;”start”，同理右侧拉出则改为end，注意下面的代码我进行了封装，而使用后发现只有NavigationView才能加上layout_gravity这个属性</p><h4 id="xml部分的使用"><a href="#xml部分的使用" class="headerlink" title="xml部分的使用"></a>xml部分的使用</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.drawerlayout.widget.DrawerLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/drawerLayout&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;15dp&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--正文部分--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--左侧菜单部分--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.navigation.NavigationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;210dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/drawerMenu&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">layout</span>=<span class="string">&quot;@layout/activity_drawer_menu&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">com.google.android.material.navigation.NavigationView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="java部分的使用"><a href="#java部分的使用" class="headerlink" title="java部分的使用"></a>java部分的使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取activity_nav.xml中的根布局</span></span><br><span class="line">        <span class="type">View</span> <span class="variable">Nav</span> <span class="operator">=</span> findViewById(R.id.Nav);</span><br><span class="line"></span><br><span class="line">        <span class="type">ImageView</span> <span class="variable">navMenuImageView</span> <span class="operator">=</span> Nav.findViewById(R.id.navMenu);</span><br><span class="line">        navMenuImageView.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// 在这里处理点击事件，打开抽屉</span></span><br><span class="line">                Log.v(<span class="string">&quot;drawerMenu&quot;</span>,<span class="string">&quot;点击成功&quot;</span>);</span><br><span class="line">                <span class="type">DrawerLayout</span> <span class="variable">drawerLayout</span> <span class="operator">=</span> findViewById(R.id.drawerLayout);</span><br><span class="line">                drawerLayout.openDrawer(GravityCompat.START); <span class="comment">// 打开左侧抽屉</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NavigationView"><a href="#NavigationView" class="headerlink" title="NavigationView"></a>NavigationView</h3><p>这个视图相当于一个封装好的菜单，在menu属性部分存入主体菜单的布局，在headerLayout属性部分存入头部菜单的布局（比如头像姓名）</p><h3 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h3><p>这个控件是用来展示大量数据，它比ListView的优势在于能够回收利用数据（名字的由来）同时可以选择单列展示，双列展示，瀑布流展示</p><h4 id="xml部分："><a href="#xml部分：" class="headerlink" title="xml部分："></a>xml部分：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/recyclerView&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="java部分："><a href="#java部分：" class="headerlink" title="java部分："></a>java部分：</h4><h5 id="TagActivity部分："><a href="#TagActivity部分：" class="headerlink" title="TagActivity部分："></a>TagActivity部分：</h5><p>主要在于新增tagAdapter，以及数据tagList的获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里省略网络请求方法performNetworkRequest()部分，在此方法中主要用于获取tagList的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TagActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RecyclerView recyclerView;</span><br><span class="line">    <span class="keyword">private</span> TagAdapter tagAdapter;</span><br><span class="line">     <span class="keyword">private</span> List&lt;TagItem&gt; tagList;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_tag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化数据列表</span></span><br><span class="line">        tagList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 初始化 tagList</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化适配器并将其与RecyclerView关联</span></span><br><span class="line">        tagAdapter = <span class="keyword">new</span> <span class="title class_">TagAdapter</span>(tagList);</span><br><span class="line">        recyclerView.setAdapter(tagAdapter);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动异步任务来执行网络请求</span></span><br><span class="line">        performNetworkRequest();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行网络请求的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="TagItem部分："><a href="#TagItem部分：" class="headerlink" title="TagItem部分："></a>TagItem部分：</h5><p>该部分就是提前把需要展示的数据封装为类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TagItem</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String tagName;</span><br><span class="line">    <span class="keyword">private</span> String tagDescription;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isDetailsVisible; <span class="comment">// 新增的字段</span></span><br><span class="line">    <span class="comment">// 构造函数和其他方法...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isDetailsVisible</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isDetailsVisible;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDetailsVisible</span><span class="params">(<span class="type">boolean</span> visible)</span> &#123;</span><br><span class="line">        isDetailsVisible = visible;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TagItem</span><span class="params">(String tagName, String tagDescription)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tagName = tagName;</span><br><span class="line">        <span class="built_in">this</span>.tagDescription = tagDescription;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTagName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tagName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTagDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tagDescription;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="TagAdapter部分："><a href="#TagAdapter部分：" class="headerlink" title="TagAdapter部分："></a>TagAdapter部分：</h5><p>该部分的重写方法是内部封装好去重写的方法</p><p>首先最开始是去定义在TagAdapter中的全局变量</p><p>然后onCreateViewHolder()方法去新增view（注意要另外建立好）</p><p>接着是onBindViewHolder是绑定数据（也就是set各种属性）注意这里设定属性有可能会只设置到最后一个元素，原因一般有两种：1、没加notifyDataSetChanged()通知适配器数据已更改   2、试图在方法里去改变属性，因为方法最后只会绑定到最后一个view，应该在外围进行更改</p><p>还有getItemCount来确定一共生成多少view</p><p>数据来源则是ViewHolder，这里去find各种需要的元素id，然后在onBindViewHolder进行相应操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TagAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;TagAdapter.ViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;TagItem&gt; tagItemList;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">visibilityState1</span> <span class="operator">=</span> View.VISIBLE;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">visibilityState2</span> <span class="operator">=</span> View.GONE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TagAdapter</span><span class="params">(List&lt;TagItem&gt; tagItemList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tagItemList = tagItemList;</span><br><span class="line">        <span class="comment">// 初始化可见性状态</span></span><br><span class="line">        <span class="built_in">this</span>.visibilityState1 = View.VISIBLE;</span><br><span class="line">        <span class="built_in">this</span>.visibilityState2 = View.GONE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(parent.getContext()).inflate(R.layout.item_tag, parent, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ViewHolder</span>(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewHolder holder, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="type">TagItem</span> <span class="variable">tagItem</span> <span class="operator">=</span> tagItemList.get(position);</span><br><span class="line">        System.out.println(tagItem.getTagName());</span><br><span class="line">        holder.tagNameTextView.setText(tagItem.getTagName());</span><br><span class="line">        holder.tagDescriptionTextView.setText(tagItem.getTagDescription());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        holder.navDelete.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// 切换可见性状态</span></span><br><span class="line">                visibilityState1 = (visibilityState1 == View.GONE) ? View.VISIBLE : View.GONE;</span><br><span class="line">                visibilityState2 = (visibilityState2 == View.GONE) ? View.VISIBLE : View.GONE;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 通知适配器数据已更改，以便刷新所有itemView</span></span><br><span class="line">                notifyDataSetChanged();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置detailEdit的可见性状态</span></span><br><span class="line">        holder.detailEdit.setVisibility(visibilityState1);</span><br><span class="line">        <span class="comment">// 设置detailDelete的可见性状态</span></span><br><span class="line">        holder.detailDelete.setVisibility(visibilityState2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加渐变动画效果</span></span><br><span class="line">        <span class="keyword">if</span> (visibilityState1 == View.VISIBLE) &#123;</span><br><span class="line">            animateView(holder.detailEdit, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            animateView(holder.detailEdit, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (visibilityState2 == View.VISIBLE) &#123;</span><br><span class="line">            animateView(holder.detailDelete, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            animateView(holder.detailDelete, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 辅助方法来执行渐变动画</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">animateView</span><span class="params">(View view, <span class="type">boolean</span> show)</span> &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">startAlpha</span> <span class="operator">=</span> show ? <span class="number">0f</span> : <span class="number">1f</span>;</span><br><span class="line">        <span class="type">float</span> <span class="variable">endAlpha</span> <span class="operator">=</span> show ? <span class="number">1f</span> : <span class="number">0f</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectAnimator</span> <span class="variable">alphaAnimator</span> <span class="operator">=</span> ObjectAnimator.ofFloat(view, <span class="string">&quot;alpha&quot;</span>, startAlpha, endAlpha);</span><br><span class="line">        alphaAnimator.setDuration(<span class="number">300</span>); <span class="comment">// 设置动画持续时间</span></span><br><span class="line"></span><br><span class="line">        alphaAnimator.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tagItemList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder &#123;</span><br><span class="line">        TextView tagNameTextView;</span><br><span class="line">        TextView tagDescriptionTextView;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取activity_nav.xml中的根布局</span></span><br><span class="line">        View Nav;</span><br><span class="line">        ImageView navDelete;</span><br><span class="line"></span><br><span class="line">        CardView detailEdit;</span><br><span class="line">        CardView detailDelete;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ViewHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(itemView);</span><br><span class="line">            tagNameTextView = itemView.findViewById(R.id.tagName);</span><br><span class="line">            tagDescriptionTextView = itemView.findViewById(R.id.tagDescription);</span><br><span class="line"></span><br><span class="line">            Nav= ((Activity)itemView.getContext()).findViewById(R.id.Nav);</span><br><span class="line">            navDelete = Nav.findViewById(R.id.navDelete);</span><br><span class="line">            detailEdit = itemView.findViewById(R.id.detailEdit);</span><br><span class="line">            detailDelete = itemView.findViewById(R.id.detailDelete);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ConstraintLayout"><a href="#ConstraintLayout" class="headerlink" title="ConstraintLayout"></a>ConstraintLayout</h3><p>相当于融合了LinearLayout和RelativeLayout</p><p>下表列出了可用约束的属性列表</p><table><thead><tr><th>属性</th></tr></thead><tbody><tr><td>layout_constraintLeft_toLeftOf</td></tr><tr><td>layout_constraintLeft_toRightOf</td></tr><tr><td>layout_constraintRight_toLeftOf</td></tr><tr><td>layout_constraintRight_toRightOf</td></tr><tr><td>layout_constraintTop_toTopOf</td></tr><tr><td>layout_constraintTop_toBottomOf</td></tr><tr><td>layout_constraintBottom_toTopOf</td></tr><tr><td>layout_constraintBottom_toBottomOf</td></tr><tr><td>layout_constraintBaseline_toBaselineOf</td></tr><tr><td>layout_constraintStart_toEndOf</td></tr><tr><td>layout_constraintStart_toStartOf</td></tr><tr><td>layout_constraintEnd_toStartOf</td></tr><tr><td>layout_constraintEnd_toEndOf</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.drawerlayout.widget.DrawerLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.TagActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/drawerLayout&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;15dp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/Nav&quot;</span> <span class="attr">layout</span>=<span class="string">&quot;@layout/activity_nav&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/recyclerView&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@id/Nav&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">androidx.cardview.widget.CardView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/cardView&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;70dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;70dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:cardCornerRadius</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:cardElevation</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;+&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textStyle</span>=<span class="string">&quot;bold&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/white&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">&quot;@color/zi&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">androidx.cardview.widget.CardView</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.navigation.NavigationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/drawerMenu&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;210dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span></span></span><br><span class="line"><span class="tag">            <span class="attr">layout</span>=<span class="string">&quot;@layout/activity_drawer_menu&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">com.google.android.material.navigation.NavigationView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="EditView"><a href="#EditView" class="headerlink" title="EditView"></a>EditView</h3><p>用于文字的输入</p><p>hint用于提示文字，maxLength为最长允许输入长度，</p><p>background&#x3D;”@null”很关键，可以去除掉hint的下划线</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:hint</span>=<span class="string">&quot;请输入名称&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:maxLength</span>=<span class="string">&quot;6&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textStyle</span>=<span class="string">&quot;bold&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">&quot;@color/balck&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:hitColor</span>=<span class="string">&quot;@color/hui&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">&quot;15sp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@null&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在java中获取文字</p><p>注意赋值给String类型的变量是要toString()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userEmail=userEmailEditText.getText().toString();</span><br></pre></td></tr></table></figure><h2 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h2><h3 id="视图宽高"><a href="#视图宽高" class="headerlink" title="视图宽高"></a>视图宽高</h3><p>match_parent:与父级视图保持一致</p><p>wrap_content:表示与内容自适应</p><p>以dp为单位的具体尺寸</p><h3 id="间距"><a href="#间距" class="headerlink" title="间距"></a>间距</h3><p>外边距：layout_margin</p><p>内边距：padding</p><h3 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h3><p>指定当前视图相对于上级视图的对齐方式：layout_gravity</p><p>指定下级视图相对于当前视图的对齐方式：gravity</p><p>固定左上角：left|top</p><h3 id="排列方式"><a href="#排列方式" class="headerlink" title="排列方式"></a>排列方式</h3><p>使用orientation属性控制排列方式，默认水平排列<br>水平：orientation：horizontal</p><p>垂直：orientation：vertical</p><h3 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h3><p>使用layout_weight属性控制权重，相当于各自拥有多大比例</p><p>Layout_width为0dp时,layout_weight表示水平方向的宽度比例</p><p>Layout_height为0dp时,layout_weight表示垂直方向的宽度比例</p><h3 id="对可见性的处理"><a href="#对可见性的处理" class="headerlink" title="对可见性的处理"></a>对可见性的处理</h3><p>使用Visibility来到达使用同一个xml达成不同布局的效果，能够优化代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取activity_drawer_menu.xml中的根布局</span></span><br><span class="line">        <span class="type">View</span> <span class="variable">drawerMenu1</span> <span class="operator">=</span> findViewById(R.id.drawerMenu1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取drawerMenuPoint和drawerMenuAvatar控件</span></span><br><span class="line">        <span class="type">CardView</span> <span class="variable">drawerMenuPoint</span> <span class="operator">=</span> drawerMenu1.findViewById(R.id.drawerMenuPoint);</span><br><span class="line">        <span class="type">CardView</span> <span class="variable">drawerMenuAvatar</span> <span class="operator">=</span> drawerMenu1.findViewById(R.id.drawerMenuAvatar);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置它们的visibility为GONE</span></span><br><span class="line">        drawerMenuPoint.setVisibility(View.GONE);</span><br><span class="line">        drawerMenuAvatar.setVisibility(View.GONE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>在Logcat里查看调试信息</p><p>Log.v 的调试颜色为黑色的，任何消息都会输出，这里的v代表verbose啰嗦的意思，平时使用就是Log.v(“”,””);<br>Log.d的输出颜色是蓝色的，仅输出debug调试的意思，但他会输出上层的信息，过滤起来可以通过DDMS的Logcat标签来选择.<br>Log.i的输出为绿色，一般提示性的消息information，它不会输出Log.v和Log.d的信息，但会显示i、w和e的信息<br>Log.w的意思为橙色，可以看作为warning警告，一般需要我们注意优化Android代码，同时选择它后还会输出Log.e的信息。<br>Log.e为红色，可以想到error错误，这里仅显示红色的错误信息，这些错误就需要我们认真的分析，查看栈的信息了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Log.v(<span class="string">&quot;你好&quot;</span>,<span class="string">&quot;点击成功&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="实践效果"><a href="#实践效果" class="headerlink" title="实践效果"></a>实践效果</h2><h3 id="导航跳转页面"><a href="#导航跳转页面" class="headerlink" title="导航跳转页面"></a>导航跳转页面</h3><p>下面封装了代码，关键代码在自定义方法startActivity中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DrawerMenuHelper.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DrawerMenuHelper</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AppCompatActivity activity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DrawerMenuHelper</span><span class="params">(AppCompatActivity activity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.activity = activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setupDrawerMenu</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">      <span class="comment">//先找到按钮</span></span><br><span class="line">        LinearLayout drawerMenuTo1=navigationView.findViewById(drawerMenuToBIds[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        drawerMenuTo1.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                startActivity(MainActivity.class);</span><br><span class="line">                Log.v(<span class="string">&quot;drawerMenu&quot;</span>,<span class="string">&quot;点击抽屉的第一个按钮&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//关键代码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startActivity</span><span class="params">(Class&lt;?&gt; cls)</span> &#123;</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(activity, cls);</span><br><span class="line">        activity.startActivity(intent);</span><br><span class="line">        activity.finish(); <span class="comment">// 关闭当前活动</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//MainActivity.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="type">DrawerMenuHelper</span> <span class="variable">drawerMenuHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DrawerMenuHelper</span>(<span class="built_in">this</span>);</span><br><span class="line">        drawerMenuHelper.setupDrawerMenu(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h3><p>使用okhttp3框架</p><p>首先要在build.gradle进行引入implementation(“com.squareup.okhttp3:okhttp:4.9.1”)</p><p>其次是在AndroidManifest.xml加入权限</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>然后编写请求的逻辑这里要注意数据的格式、请求的方法、返回数据的格式（具体去查看swiftui笔记里的网络请求部分）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">performNetworkRequest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 创建 OkHttpClient 实例</span></span><br><span class="line">    <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 请求URL</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://tengenchang.top/tag/get&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 请求数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">requestData</span> <span class="operator">=</span> <span class="string">&quot;3489044730@qq.com&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置请求体</span></span><br><span class="line">    <span class="type">MediaType</span> <span class="variable">JSON</span> <span class="operator">=</span> MediaType.parse(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">    <span class="type">RequestBody</span> <span class="variable">requestBody</span> <span class="operator">=</span> RequestBody.create(JSON, requestData);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建 POST 请求</span></span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">            .url(url)</span><br><span class="line">            .post(requestBody)</span><br><span class="line">            .build();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 下面使用 &#x27;request&#x27; 对象来执行网络请求，我会在下方再补充代码</span></span><br><span class="line">    <span class="comment">// 例如，使用 &#x27;client&#x27; 执行请求：client.newCall(request).enqueue(callback);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来首先要把网络请求放在子线程里，本来是使用写一个类继承AsyncTask，然后在主线程中使用execute()方法来调用子线程，但是execute()方法，以及在主线程更新ui的onPostExecute()方法已经在API30中被弃用（卡了我一整节习概QAQ）解决方法就是使用okhttp3的onResponse()方法内的runOnUiThread()方法去在更新ui</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">performNetworkRequest</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 上面为配置 &#x27;request&#x27; 对象的各种细节来执行网络请求，我已经在笔记上方给出代码</span></span><br><span class="line">    <span class="comment">// 使用OkHttp3执行异步网络请求</span></span><br><span class="line">    client.newCall(request).enqueue(<span class="keyword">new</span> <span class="title class_">Callback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">                <span class="comment">// 获取响应数据</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">responseBody</span> <span class="operator">=</span> response.body().string();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 解析JSON响应</span></span><br><span class="line">                    <span class="type">JSONObject</span> <span class="variable">jsonResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(responseBody);</span><br><span class="line">                    <span class="type">JSONArray</span> <span class="variable">data</span> <span class="operator">=</span> jsonResponse.getJSONArray(<span class="string">&quot;data&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 清空已有数据</span></span><br><span class="line">                    tagList.clear();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 遍历JSON数据并添加到tagList中</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.length(); i++) &#123;</span><br><span class="line">                        <span class="type">JSONObject</span> <span class="variable">item</span> <span class="operator">=</span> data.getJSONObject(i);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">tagName</span> <span class="operator">=</span> item.getString(<span class="string">&quot;tagName&quot;</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">tagDescribe</span> <span class="operator">=</span> item.getString(<span class="string">&quot;tagDescribe&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 创建TagItem对象并添加到tagList中</span></span><br><span class="line">                        tagList.add(<span class="keyword">new</span> <span class="title class_">TagItem</span>(tagName, tagDescribe));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 更新 UI，确保在主线程中执行</span></span><br><span class="line">                    runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                            <span class="comment">// 通知适配器数据已更新</span></span><br><span class="line">                            tagAdapter.notifyDataSetChanged();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 请求失败，输出错误信息</span></span><br><span class="line">                Log.e(<span class="string">&quot;TagActivity&quot;</span>, <span class="string">&quot;请求失败，状态码: &quot;</span> + response.code());</span><br><span class="line">                Log.e(<span class="string">&quot;TagActivity&quot;</span>, response.body().string());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Call call, IOException e)</span> &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RelativeLayout内的适配器只能修改单一View的问题"><a href="#RelativeLayout内的适配器只能修改单一View的问题" class="headerlink" title="RelativeLayout内的适配器只能修改单一View的问题"></a>RelativeLayout内的适配器只能修改单一View的问题</h3><p>原因一般有两种：1、没加notifyDataSetChanged()通知适配器数据已更改   2、试图在方法里去改变属性，因为方法最后只会绑定到最后一个view，应该在外围进行更改(具体源代码可以去看简单空间部分的RelativeLayout介绍，这个问题也卡了挺久QAQ)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TagAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;TagAdapter.ViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;TagItem&gt; tagItemList;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">visibilityState1</span> <span class="operator">=</span> View.VISIBLE;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">visibilityState2</span> <span class="operator">=</span> View.GONE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TagAdapter</span><span class="params">(List&lt;TagItem&gt; tagItemList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tagItemList = tagItemList;</span><br><span class="line">        <span class="comment">// 初始化可见性状态</span></span><br><span class="line">        <span class="built_in">this</span>.visibilityState1 = View.VISIBLE;</span><br><span class="line">        <span class="built_in">this</span>.visibilityState2 = View.GONE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(parent.getContext()).inflate(R.layout.item_tag, parent, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ViewHolder</span>(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewHolder holder, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="type">TagItem</span> <span class="variable">tagItem</span> <span class="operator">=</span> tagItemList.get(position);</span><br><span class="line">        System.out.println(tagItem.getTagName());</span><br><span class="line">        holder.tagNameTextView.setText(tagItem.getTagName());</span><br><span class="line">        holder.tagDescriptionTextView.setText(tagItem.getTagDescription());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        holder.navDelete.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// 切换可见性状态</span></span><br><span class="line">                visibilityState1 = (visibilityState1 == View.GONE) ? View.VISIBLE : View.GONE;</span><br><span class="line">                visibilityState2 = (visibilityState2 == View.GONE) ? View.VISIBLE : View.GONE;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 通知适配器数据已更改，以便刷新所有itemView</span></span><br><span class="line">                notifyDataSetChanged();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置detailEdit的可见性状态</span></span><br><span class="line">        holder.detailEdit.setVisibility(visibilityState1);</span><br><span class="line">        <span class="comment">// 设置detailDelete的可见性状态</span></span><br><span class="line">        holder.detailDelete.setVisibility(visibilityState2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加渐变动画效果</span></span><br><span class="line">        <span class="keyword">if</span> (visibilityState1 == View.VISIBLE) &#123;</span><br><span class="line">            animateView(holder.detailEdit, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            animateView(holder.detailEdit, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (visibilityState2 == View.VISIBLE) &#123;</span><br><span class="line">            animateView(holder.detailDelete, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            animateView(holder.detailDelete, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 辅助方法来执行渐变动画</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">animateView</span><span class="params">(View view, <span class="type">boolean</span> show)</span> &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">startAlpha</span> <span class="operator">=</span> show ? <span class="number">0f</span> : <span class="number">1f</span>;</span><br><span class="line">        <span class="type">float</span> <span class="variable">endAlpha</span> <span class="operator">=</span> show ? <span class="number">1f</span> : <span class="number">0f</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectAnimator</span> <span class="variable">alphaAnimator</span> <span class="operator">=</span> ObjectAnimator.ofFloat(view, <span class="string">&quot;alpha&quot;</span>, startAlpha, endAlpha);</span><br><span class="line">        alphaAnimator.setDuration(<span class="number">300</span>); <span class="comment">// 设置动画持续时间</span></span><br><span class="line"></span><br><span class="line">        alphaAnimator.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tagItemList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder &#123;</span><br><span class="line">        TextView tagNameTextView;</span><br><span class="line">        TextView tagDescriptionTextView;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取activity_nav.xml中的根布局</span></span><br><span class="line">        View Nav;</span><br><span class="line">        ImageView navDelete;</span><br><span class="line"></span><br><span class="line">        CardView detailEdit;</span><br><span class="line">        CardView detailDelete;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ViewHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(itemView);</span><br><span class="line">            tagNameTextView = itemView.findViewById(R.id.tagName);</span><br><span class="line">            tagDescriptionTextView = itemView.findViewById(R.id.tagDescription);</span><br><span class="line"></span><br><span class="line">            Nav= ((Activity)itemView.getContext()).findViewById(R.id.Nav);</span><br><span class="line">            navDelete = Nav.findViewById(R.id.navDelete);</span><br><span class="line">            detailEdit = itemView.findViewById(R.id.detailEdit);</span><br><span class="line">            detailDelete = itemView.findViewById(R.id.detailDelete);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除指定页面"><a href="#删除指定页面" class="headerlink" title="删除指定页面"></a>删除指定页面</h3><p>最大的问题在于如何删除，以及如何通知主线程去更改ui，以及使用getcontext来找到父activity</p><p>注意一下getcontext的用法</p><p>View类中提供的方法，在继承了View的类中才可以调用。</p><p>返回的是当前View运行在哪个Activity Contex中，获取当前context的实例。</p><p>如果使用场景是Activity则相当于 this</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">deleteTarget</span><span class="params">(TargetItem targetItem, <span class="type">int</span> position, Context context)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建 OkHttpClient 实例</span></span><br><span class="line">    <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 请求URL</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://tengenchang.top/target/delete&quot;</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;targetId:&quot;</span> + targetItem.getTargetId());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建 JSON 对象</span></span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">requestData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        requestData.put(<span class="string">&quot;userEmail&quot;</span>, <span class="string">&quot;3489044730@qq.com&quot;</span>);</span><br><span class="line">        requestData.put(<span class="string">&quot;targetName&quot;</span>, targetItem.getTargetName());</span><br><span class="line">        requestData.put(<span class="string">&quot;ifPoints&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        requestData.put(<span class="string">&quot;targetId&quot;</span>, Long.valueOf(targetItem.getTargetId()));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置请求体</span></span><br><span class="line">    <span class="type">MediaType</span> <span class="variable">JSON</span> <span class="operator">=</span> MediaType.parse(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">    <span class="type">RequestBody</span> <span class="variable">requestBody</span> <span class="operator">=</span> RequestBody.create(JSON, requestData.toString());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建 POST 请求</span></span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">            .url(url)</span><br><span class="line">            .post(requestBody)</span><br><span class="line">            .build();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用 OkHttp3 执行异步网络请求</span></span><br><span class="line">    client.newCall(request).enqueue(<span class="keyword">new</span> <span class="title class_">Callback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">                <span class="comment">// 从数据源中删除项</span></span><br><span class="line">                targetItemList.remove(position);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 通知适配器删除了特定位置的项</span></span><br><span class="line">                ((Activity) context).runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                        notifyItemRemoved(position);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 通知适配器更新从删除位置到列表末尾的所有项</span></span><br><span class="line">                ((Activity) context).runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                        notifyItemRangeChanged(position, targetItemList.size());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 请求失败，输出错误信息</span></span><br><span class="line">                Log.e(<span class="string">&quot;TargetActivity&quot;</span>, <span class="string">&quot;请求失败，状态码: &quot;</span> + response.code());</span><br><span class="line">                Log.e(<span class="string">&quot;TargetActivity&quot;</span>, response.body().string());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Call call, IOException e)</span> &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="edit和delete转化"><a href="#edit和delete转化" class="headerlink" title="edit和delete转化"></a>edit和delete转化</h3><h5 id="第一种情况"><a href="#第一种情况" class="headerlink" title="第一种情况"></a>第一种情况</h5><p>页面里只有一个RelativeLayout，无论在adapter里实现点击事件还是在activity中实现点击事件都可以，详细内容可见<strong>RelativeLayout内的适配器只能修改单一View的问题</strong></p><h5 id="第二种情况（又卡住QAQ）"><a href="#第二种情况（又卡住QAQ）" class="headerlink" title="第二种情况（又卡住QAQ）"></a>第二种情况（又卡住QAQ）</h5><p>页面中有两个RelativeLayout,那就不能在adapter中实现事件，因为最后只会实现最后一个点击事件，这时就需要在activity中实现</p><h6 id="TargetActivity："><a href="#TargetActivity：" class="headerlink" title="TargetActivity："></a>TargetActivity：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TargetActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RecyclerView targetWithTimeRecyclerView;</span><br><span class="line">    <span class="keyword">private</span> RecyclerView targetNoTimeRecyclerView;</span><br><span class="line">    <span class="keyword">private</span> TargetWithTimeAdapter targetWithTimeAdapter;</span><br><span class="line">    <span class="keyword">private</span> TargetNoTimeAdapter targetNoTimeAdapter;</span><br><span class="line">    <span class="keyword">private</span> List&lt;TargetItem&gt; targetWithTimeList;</span><br><span class="line">    <span class="keyword">private</span> List&lt;TargetItem&gt; targetNoTimeList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">targetVisibilityState1</span> <span class="operator">=</span> View.VISIBLE;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">targetVisibilityState2</span> <span class="operator">=</span> View.GONE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> View Nav;</span><br><span class="line">    ImageView navDelete;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_target);</span><br><span class="line">        </span><br><span class="line">        Nav = findViewById(R.id.Nav);</span><br><span class="line">        navDelete = Nav.findViewById(R.id.navDelete);</span><br><span class="line"></span><br><span class="line">        navDelete.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// 切换可见性状态</span></span><br><span class="line">                targetVisibilityState1 = (targetVisibilityState1 == View.GONE) ? View.VISIBLE : View.GONE;</span><br><span class="line">                targetVisibilityState2 = (targetVisibilityState2 == View.GONE) ? View.VISIBLE : View.GONE;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 更新两个适配器的可见性状态</span></span><br><span class="line">                targetNoTimeAdapter.updateVisibility(targetVisibilityState1, targetVisibilityState2);</span><br><span class="line">                targetWithTimeAdapter.updateVisibility(targetVisibilityState1, targetVisibilityState2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 初始化RecyclerView</span></span><br><span class="line">        targetWithTimeRecyclerView = findViewById(R.id.targetWithTimeRecyclerView);</span><br><span class="line">        targetNoTimeRecyclerView = findViewById(R.id.targetNoTimeRecyclerView);</span><br><span class="line">        targetWithTimeRecyclerView.setLayoutManager(<span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(<span class="built_in">this</span>));</span><br><span class="line">        targetNoTimeRecyclerView.setLayoutManager(<span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(<span class="built_in">this</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化数据列表</span></span><br><span class="line">        targetWithTimeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 初始化 targetWithTimeList</span></span><br><span class="line">        targetNoTimeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 初始化 targetNoTimeList</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化适配器并将其与RecyclerView关联</span></span><br><span class="line">        targetWithTimeAdapter = <span class="keyword">new</span> <span class="title class_">TargetWithTimeAdapter</span>(targetWithTimeList,targetVisibilityState1, targetVisibilityState2);</span><br><span class="line">        targetNoTimeAdapter = <span class="keyword">new</span> <span class="title class_">TargetNoTimeAdapter</span>(targetNoTimeList,targetVisibilityState1, targetVisibilityState2);</span><br><span class="line"></span><br><span class="line">        targetWithTimeRecyclerView.setAdapter(targetWithTimeAdapter);</span><br><span class="line">        targetNoTimeRecyclerView.setAdapter(targetNoTimeAdapter);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="targetNoTimeAdapter"><a href="#targetNoTimeAdapter" class="headerlink" title="targetNoTimeAdapter"></a>targetNoTimeAdapter</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TargetNoTimeAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;TargetNoTimeAdapter.ViewHolder&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;TargetItem&gt; targetItemList;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">targetNoTimeVisibilityState1</span> <span class="operator">=</span> View.VISIBLE;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> targetNoTimeVisibilityState2= View.GONE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TargetNoTimeAdapter</span><span class="params">(List&lt;TargetItem&gt; targetItemList, <span class="type">int</span> visibilityState1, <span class="type">int</span> visibilityState2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.targetItemList = targetItemList;</span><br><span class="line">        <span class="comment">// 初始化可见性状态</span></span><br><span class="line">        <span class="built_in">this</span>.targetNoTimeVisibilityState1 = visibilityState1;</span><br><span class="line">        <span class="built_in">this</span>.targetNoTimeVisibilityState2 = visibilityState2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> TargetNoTimeAdapter.ViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(parent.getContext()).inflate(R.layout.item_target_notime, parent, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TargetNoTimeAdapter</span>.ViewHolder(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> TargetNoTimeAdapter.ViewHolder holder, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="type">TargetItem</span> <span class="variable">targetItem</span> <span class="operator">=</span> targetItemList.get(position);</span><br><span class="line">        System.out.println(targetItem.getTargetName());</span><br><span class="line">        holder.targetNameTextView.setText(targetItem.getTargetName());</span><br><span class="line">        holder.targetDescriptionTextView.setText(targetItem.getTargetDescribe());</span><br><span class="line">        holder.targetNoTimePointTextView.setText(<span class="string">&quot;X&quot;</span>+targetItem.getTargetPoint());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置detailEdit的可见性状态</span></span><br><span class="line">        holder.targetNoTimePointCardView.setVisibility(targetNoTimeVisibilityState1);</span><br><span class="line">        holder.targetNoTimeDayDifference.setVisibility(targetNoTimeVisibilityState1);</span><br><span class="line">        <span class="comment">// 设置detailDelete的可见性状态</span></span><br><span class="line">        holder.targetNoTimeDelete.setVisibility(targetNoTimeVisibilityState2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateVisibility</span><span class="params">(<span class="type">int</span> visibilityState1, <span class="type">int</span> visibilityState2)</span> &#123;</span><br><span class="line">        targetNoTimeVisibilityState1 = visibilityState1;</span><br><span class="line">        targetNoTimeVisibilityState2 = visibilityState2;</span><br><span class="line">        notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> targetItemList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder &#123;</span><br><span class="line">        TextView targetNameTextView;</span><br><span class="line">        TextView targetDescriptionTextView;</span><br><span class="line">        TextView targetNoTimePointTextView;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取activity_nav.xml中的根布局</span></span><br><span class="line">        View Nav;</span><br><span class="line">        ImageView navDelete;</span><br><span class="line"></span><br><span class="line">        CardView targetNoTimePointCardView;</span><br><span class="line">        CardView targetNoTimeDelete;</span><br><span class="line">        TextView targetNoTimeDayDifference;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ViewHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(itemView);</span><br><span class="line">            targetNameTextView = itemView.findViewById(R.id.targetNoTimeName);</span><br><span class="line">            targetDescriptionTextView = itemView.findViewById(R.id.targetNoTimeDescribe);</span><br><span class="line">            targetNoTimePointTextView = itemView.findViewById(R.id.targetNoTimePoint);</span><br><span class="line"></span><br><span class="line">            Nav = ((Activity) itemView.getContext()).findViewById(R.id.Nav);</span><br><span class="line">            navDelete = Nav.findViewById(R.id.navDelete);</span><br><span class="line">            targetNoTimePointCardView = itemView.findViewById(R.id.targetNoTimePointCardView);</span><br><span class="line">            targetNoTimeDelete = itemView.findViewById(R.id.targetNoTimeDelete);</span><br><span class="line">            targetNoTimeDayDifference = itemView.findViewById(R.id.targetNoTimeDayDifference);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="日期创建"><a href="#日期创建" class="headerlink" title="日期创建"></a>日期创建</h3><p>这块涉及的比较多，有时间再仔细看一下</p><p>知识点不只是日期的相应处理，还有使用java去构建布局，这一点我都使用的都比较简单，但是下面的代码是比较复杂布局构建，但是其实复杂布局就是去记住更多的布局对象的相应属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> View <span class="title function_">createDateItemView</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> index, <span class="keyword">final</span> List&lt;TargetItem&gt; targetWithTimeList)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取当前日期</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">currentDate</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">    <span class="comment">// 将日期向前或向后移动 index 天</span></span><br><span class="line">    calendar.add(Calendar.DAY_OF_MONTH, index);</span><br><span class="line">    <span class="comment">// 获取新的日期</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">    <span class="comment">// 恢复 calendar 到当前日期</span></span><br><span class="line">    calendar.setTime(currentDate);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建日期的格式化工具，用于显示星期几和日期天数</span></span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">dayOfWeekFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;E&quot;</span>);</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">dayOfMonthFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建日期项的布局参数，设置边距</span></span><br><span class="line">    LinearLayout.<span class="type">LayoutParams</span> <span class="variable">layoutParams</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinearLayout</span>.LayoutParams(</span><br><span class="line">            LinearLayout.LayoutParams.WRAP_CONTENT,</span><br><span class="line">            LinearLayout.LayoutParams.WRAP_CONTENT</span><br><span class="line">    );</span><br><span class="line">    layoutParams.setMargins(<span class="number">18</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建日期项的外层布局</span></span><br><span class="line">    <span class="type">RelativeLayout</span> <span class="variable">dateItemLayout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RelativeLayout</span>(<span class="built_in">this</span>);</span><br><span class="line">    dateItemLayout.setLayoutParams(layoutParams);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建显示星期几的文本视图</span></span><br><span class="line">    <span class="type">TextView</span> <span class="variable">dayOfWeekTextView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextView</span>(<span class="built_in">this</span>);</span><br><span class="line">    dayOfWeekTextView.setText(dayOfWeekFormat.format(date));</span><br><span class="line">    dayOfWeekTextView.setId(View.generateViewId());</span><br><span class="line">    dayOfWeekTextView.setTextColor(Color.GRAY);</span><br><span class="line">    dayOfWeekTextView.setTextSize(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置星期几文本视图的布局参数，水平居中显示</span></span><br><span class="line">    RelativeLayout.<span class="type">LayoutParams</span> <span class="variable">dayOfWeekParams</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RelativeLayout</span>.LayoutParams(</span><br><span class="line">            RelativeLayout.LayoutParams.WRAP_CONTENT,</span><br><span class="line">            RelativeLayout.LayoutParams.WRAP_CONTENT</span><br><span class="line">    );</span><br><span class="line">    dayOfWeekParams.addRule(RelativeLayout.CENTER_HORIZONTAL);</span><br><span class="line">    dayOfWeekTextView.setLayoutParams(dayOfWeekParams);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建显示日期天数的文本视图</span></span><br><span class="line">    <span class="type">TextView</span> <span class="variable">dayOfMonthTextView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextView</span>(<span class="built_in">this</span>);</span><br><span class="line">    dayOfMonthTextView.setText(dayOfMonthFormat.format(date));</span><br><span class="line">    dayOfMonthTextView.setWidth(getResources().getDimensionPixelSize(R.dimen.date_item_width));</span><br><span class="line">    dayOfMonthTextView.setHeight(getResources().getDimensionPixelSize(R.dimen.date_item_height));</span><br><span class="line">    dayOfMonthTextView.setGravity(Gravity.CENTER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查是否为当前日期，设置初始状态</span></span><br><span class="line">    <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">        dayOfMonthTextView.setTextColor(Color.parseColor(<span class="string">&quot;#CFC8FF&quot;</span>));</span><br><span class="line">        dayOfMonthTextView.setBackgroundResource(R.drawable.selected_date_background);</span><br><span class="line">        lastSelectedDayTextView = dayOfMonthTextView;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dayOfMonthTextView.setTextColor(Color.parseColor(<span class="string">&quot;#CFC8FF&quot;</span>));</span><br><span class="line">        dayOfMonthTextView.setBackgroundResource(R.drawable.unselected_date_background);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置日期天数文本视图的布局参数，水平居中显示，位于星期几文本视图下方</span></span><br><span class="line">    RelativeLayout.<span class="type">LayoutParams</span> <span class="variable">dayOfMonthParams</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RelativeLayout</span>.LayoutParams(</span><br><span class="line">            RelativeLayout.LayoutParams.WRAP_CONTENT,</span><br><span class="line">            RelativeLayout.LayoutParams.WRAP_CONTENT</span><br><span class="line">    );</span><br><span class="line">    dayOfMonthParams.addRule(RelativeLayout.CENTER_HORIZONTAL);</span><br><span class="line">    dayOfMonthParams.addRule(RelativeLayout.BELOW, dayOfWeekTextView.getId());</span><br><span class="line">    dayOfMonthTextView.setLayoutParams(dayOfMonthParams);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 允许日期天数文本视图响应点击事件</span></span><br><span class="line">    dayOfMonthTextView.setClickable(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置日期天数文本视图的点击事件监听器</span></span><br><span class="line">    <span class="comment">// 在日期项点击事件的回调中添加以下代码</span></span><br><span class="line">    dayOfMonthTextView.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lastSelectedDayTextView != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 取消上一个选中日期的背景和文本颜色</span></span><br><span class="line">                lastSelectedDayTextView.setBackgroundResource(R.drawable.unselected_date_background);</span><br><span class="line">                lastSelectedDayTextView.setTextColor(Color.parseColor(<span class="string">&quot;#CFC8FF&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置当前选中日期的背景和文本颜色</span></span><br><span class="line">            dayOfMonthTextView.setBackgroundResource(R.drawable.selected_date_background);</span><br><span class="line">            dayOfMonthTextView.setTextColor(Color.parseColor(<span class="string">&quot;#CFC8FF&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新 lastSelectedDayTextView 为当前选中的日期</span></span><br><span class="line">            lastSelectedDayTextView = dayOfMonthTextView;</span><br><span class="line">            System.out.println(<span class="string">&quot;lastSelectedDayTextView:&quot;</span> + lastSelectedDayTextView);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取选中日期的字符串形式，例如 &quot;2023-07-19&quot;</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">selectedDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>).format(date);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历目标列表</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; targetWithTimeList.size(); i++) &#123;</span><br><span class="line">                <span class="type">TargetItem</span> <span class="variable">targetItem</span> <span class="operator">=</span> targetWithTimeList.get(i);</span><br><span class="line">                <span class="type">String</span> <span class="variable">deadline</span> <span class="operator">=</span> targetItem.getDeadline(); <span class="comment">// 获取deadline，例如 &quot;2023-07-19T19:14:00&quot;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 解析deadline中的日期部分和时间部分</span></span><br><span class="line">                String[] deadlineParts = deadline.split(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">deadlineDate</span> <span class="operator">=</span> deadlineParts[<span class="number">0</span>]; <span class="comment">// 日期部分，例如 &quot;2023-07-19&quot;</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">deadlineTime</span> <span class="operator">=</span> deadlineParts[<span class="number">1</span>].substring(<span class="number">0</span>, <span class="number">5</span>); <span class="comment">// 时间部分，例如 &quot;19:14&quot;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 计算日期差</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">dayDifference</span> <span class="operator">=</span> calculateDayDifference(selectedDate, deadlineDate);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 根据日期差的规则设置不同的值</span></span><br><span class="line">                <span class="keyword">if</span> (dayDifference &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 相差日期大于0，获得相差的天数</span></span><br><span class="line">                    targetItem.setDayDifference(dayDifference + <span class="string">&quot;天&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dayDifference == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 相差日期等于0，获得deadline的小时以及分钟</span></span><br><span class="line">                    targetItem.setDayDifference(deadlineTime);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 相差日期小于0，获得deadline的月份和日子</span></span><br><span class="line">                    targetItem.setDayDifference(deadlineDate.substring(<span class="number">5</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;deadlineTime:&quot;</span> + targetItem.getDayDifference());</span><br><span class="line">                <span class="comment">// 通知适配器数据已更改</span></span><br><span class="line">                targetWithTimeAdapter.notifyDataSetChanged();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将星期几和日期天数文本视图添加到日期项的布局中</span></span><br><span class="line">    dateItemLayout.addView(dayOfWeekTextView);</span><br><span class="line">    dateItemLayout.addView(dayOfMonthTextView);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回日期项的布局</span></span><br><span class="line">    <span class="keyword">return</span> dateItemLayout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RecyclerView适配器根据条件转成不同的页面"><a href="#RecyclerView适配器根据条件转成不同的页面" class="headerlink" title="RecyclerView适配器根据条件转成不同的页面"></a>RecyclerView适配器根据条件转成不同的页面</h3><p>这里的实现效果，我之前一直是采用多个RecyclerView来达成条件转成的效果，然后可以直接根据一定的条件进行不同的页面，不过下面的例子只实现了list为空时的转化</p><p>Adapter部分</p><p>注意getItemViewType判断list的size</p><p>onCreateViewHolder的if语句来转化不同页面</p><p>onBindViewHolder的if语句进行不同处理</p><p>getItemCount也是去判断list的size</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TagAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;TagAdapter.ViewHolder&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TagAdapter</span><span class="params">(List&lt;TagItem&gt; tagItemList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tagItemList = tagItemList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemViewType</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tagItemList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 返回1表示空页面</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 返回0表示正常数据项</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (viewType == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(parent.getContext()).inflate(R.layout.item_tag, parent, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TagAdapter</span>.ViewHolder(view);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(parent.getContext()).inflate(R.layout.item_tag_null, parent, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TagAdapter</span>.ViewHolder(view);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewHolder holder, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tagItemList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 当数据为空时，可以设置空页面的提示信息或样式</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 可以设置其他空页面的样式或操作</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tagItemList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 返回1项以显示空页面</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> tagItemList.size();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ViewHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(itemView);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="轮播图实现"><a href="#轮播图实现" class="headerlink" title="轮播图实现"></a>轮播图实现</h3><p>使用ViewPager2来实现轮播图，ViewPager2实际上也是RecyclerView</p><p>使用handler.postDelayed(runnable, 1800);开始轮播任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginNavActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TextView userAgreement;</span><br><span class="line">    <span class="keyword">private</span> TextView privacyPolicy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ViewPager2 viewPager;</span><br><span class="line">    <span class="keyword">private</span> List&lt;CarouselItem&gt; carouselItems = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">currentItem</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 当前轮播图项的索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Handler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler</span>();</span><br><span class="line">    <span class="keyword">private</span> Runnable runnable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LinearLayout loginNavLoginLinearLayout;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_login_nav);</span><br><span class="line"></span><br><span class="line">        userAgreement=findViewById(R.id.userAgreement);</span><br><span class="line">        privacyPolicy=findViewById(R.id.privacyPolicy);</span><br><span class="line"></span><br><span class="line">        userAgreement.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                startActivity(UserAgreementActivity.class);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        privacyPolicy.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                startActivity(PrivacyPolicyActivity.class);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        viewPager = findViewById(R.id.viewPager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加轮播图项数据</span></span><br><span class="line">        carouselItems.add(<span class="keyword">new</span> <span class="title class_">CarouselItem</span>(R.drawable.loginnavlogo1, <span class="string">&quot;兑换\n商店积分&quot;</span>));</span><br><span class="line">        carouselItems.add(<span class="keyword">new</span> <span class="title class_">CarouselItem</span>(R.drawable.loginnavlogo2, <span class="string">&quot;发现\n自我进步&quot;</span>));</span><br><span class="line">        carouselItems.add(<span class="keyword">new</span> <span class="title class_">CarouselItem</span>(R.drawable.loginnavlogo3, <span class="string">&quot;建立\n计时标签&quot;</span>));</span><br><span class="line">        carouselItems.add(<span class="keyword">new</span> <span class="title class_">CarouselItem</span>(R.drawable.loginnavlogo4, <span class="string">&quot;建立\n你的目标&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建适配器并设置到ViewPager2</span></span><br><span class="line">        <span class="type">CarouselAdapter</span> <span class="variable">carouselAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CarouselAdapter</span>(carouselItems);</span><br><span class="line">        viewPager.setAdapter(carouselAdapter);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建轮播任务</span></span><br><span class="line">        runnable = <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (currentItem == carouselItems.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                    currentItem = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    currentItem++;</span><br><span class="line">                &#125;</span><br><span class="line">                viewPager.setCurrentItem(currentItem);</span><br><span class="line">                handler.postDelayed(<span class="built_in">this</span>, <span class="number">1800</span>); <span class="comment">// 1.8秒后再次执行</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始轮播任务</span></span><br><span class="line">        handler.postDelayed(runnable, <span class="number">1800</span>);</span><br><span class="line"></span><br><span class="line">        loginNavLoginLinearLayout=findViewById(R.id.loginNavLogin);</span><br><span class="line">        loginNavLoginLinearLayout.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="comment">//监听按钮，如果点击，就跳转</span></span><br><span class="line">                startActivity(HomeActivity.class);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        <span class="comment">// 在Activity销毁时停止轮播任务，防止内存泄漏</span></span><br><span class="line">        handler.removeCallbacks(runnable);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startActivity</span><span class="params">(Class&lt;?&gt; cls)</span> &#123;</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>, cls);</span><br><span class="line">        <span class="built_in">this</span>.startActivity(intent);</span><br><span class="line">        <span class="built_in">this</span>.finish(); <span class="comment">// 关闭当前活动</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跳转时传递信息"><a href="#跳转时传递信息" class="headerlink" title="跳转时传递信息"></a>跳转时传递信息</h3><p>通过putExtra转递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startActivity</span><span class="params">(Class&lt;?&gt; cls)</span> &#123;</span><br><span class="line">    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>, cls);</span><br><span class="line">  <span class="comment">//为跳转放入信息</span></span><br><span class="line">    intent.putExtra(<span class="string">&quot;sourceActivity&quot;</span>, <span class="string">&quot;Tag&quot;</span>);</span><br><span class="line">    startActivity(intent);</span><br><span class="line">    finish(); <span class="comment">// 关闭当前活动</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取传递的标志</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sourceActivity</span> <span class="operator">=</span> getIntent().getStringExtra(<span class="string">&quot;sourceActivity&quot;</span>);</span><br><span class="line"><span class="comment">// 根据不同的标志设置不同的标题</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;Tag&quot;</span>.equals(sourceActivity)) &#123;      </span><br><span class="line">  createNavTitle.setText(<span class="string">&quot;建立标签&quot;</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;Store&quot;</span>.equals(sourceActivity)) &#123;       </span><br><span class="line">  createNavTitle.setText(<span class="string">&quot;建立商品&quot;</span>);   </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;Target&quot;</span>.equals(sourceActivity)) &#123;       </span><br><span class="line">  createNavTitle.setText(<span class="string">&quot;建立目标&quot;</span>);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计时页面实现"><a href="#计时页面实现" class="headerlink" title="计时页面实现"></a>计时页面实现</h3><h3 id="弹窗实现"><a href="#弹窗实现" class="headerlink" title="弹窗实现"></a>弹窗实现</h3><p>先创建AlertDialog对象</p><p>再通过setTitle以及setMessage以及setPositiveButton以及setNegativeButton来设置相应的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">cancelTimer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (countDownTimer != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 创建一个 AlertDialog.Builder 对象</span></span><br><span class="line">        AlertDialog.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">// 设置弹窗标题</span></span><br><span class="line">        builder.setTitle(<span class="string">&quot;确定要放弃吗？&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置弹窗正文</span></span><br><span class="line">        builder.setMessage(<span class="string">&quot;本次计时将不会得到任何分数&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置确定按钮，并指定点击事件</span></span><br><span class="line">        builder.setPositiveButton(<span class="string">&quot;确定&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">                <span class="comment">// 用户点击了确定按钮，执行放弃计时的操作</span></span><br><span class="line">                countDownTimer.cancel();</span><br><span class="line">                timerTextView.setText(timer);</span><br><span class="line">                isTimerRunning = <span class="literal">false</span>;</span><br><span class="line">                timeButtonTextView.setText(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 设置取消按钮，并指定点击事件</span></span><br><span class="line">        builder.setNegativeButton(<span class="string">&quot;取消&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">                <span class="comment">// 用户点击了取消按钮，不执行任何操作，只关闭弹窗</span></span><br><span class="line">                dialog.dismiss();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 创建并显示 AlertDialog</span></span><br><span class="line">        <span class="type">AlertDialog</span> <span class="variable">alertDialog</span> <span class="operator">=</span> builder.create();</span><br><span class="line">        alertDialog.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提示框实现"><a href="#提示框实现" class="headerlink" title="提示框实现"></a>提示框实现</h3><p>注意这里的context可以取消</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Toast.makeText(context.getApplicationContext(), <span class="string">&quot;完成目标&quot;</span>, Toast.LENGTH_SHORT).show();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SwiftUI</title>
      <link href="/posts/882d3c67.html"/>
      <url>/posts/882d3c67.html</url>
      
        <content type="html"><![CDATA[<h1 id="SwiftUI"><a href="#SwiftUI" class="headerlink" title="SwiftUI"></a>SwiftUI</h1><p>宣告式程式设计的前端IOS编程语言</p><h2 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h2><p>ContentView.swift为入口文件</p><p>Assets存放静态资源</p><p>HabeetApp为启动入口</p><p><img src="https://gitee.com/TECNB/pic-demo/raw/master/image-20230807154634820.png" alt="image-20230807154634820"></p><h3 id="ContentView"><a href="#ContentView" class="headerlink" title="ContentView"></a>ContentView</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="string">&quot;globe&quot;</span>)</span><br><span class="line">                .imageScale(.large)</span><br><span class="line">                .foregroundColor(.accentColor)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Hello, world!&quot;</span>)</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//產生 ContentView 和 HomeView 的預覽</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView_Previews</span>: <span class="title class_">PreviewProvider</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ContentView</span>()</span><br><span class="line">        .previewDevice(<span class="type">PreviewDevice</span>(rawValue: <span class="string">&quot;iPhone 12 Pro&quot;</span>)) <span class="comment">//更改预览的设备</span></span><br><span class="line">            .previewDisplayName(<span class="string">&quot;iPhone 12 Pro&quot;</span>)<span class="comment">//更改预览的名字</span></span><br><span class="line">      .previewInterfaceOrientation(.landscapeLeft) <span class="comment">//以橫向模式預覽UI</span></span><br><span class="line">        <span class="type">HomeView</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HabeetApp"><a href="#HabeetApp" class="headerlink" title="HabeetApp"></a>HabeetApp</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HabeetApp</span>: <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">ContentView</span>()</span><br><span class="line">            <span class="type">HomeView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="视图（View）"><a href="#视图（View）" class="headerlink" title="视图（View）"></a>视图（View）</h2><p>@ViewBuilder可以解决优化视图之后无返回值的问题</p><p><img src="https://gitee.com/TECNB/pic-demo/raw/master/image-20230809153455860.png" alt="image-20230809153455860"></p><h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">&quot;Stay Hungry. Stay Foolish.&quot;</span>)</span><br><span class="line">    .fontWeight(.bold)</span><br><span class="line">    .font(.title)<span class="comment">//这是使用系统的预设的字体调整方式</span></span><br><span class="line">.font(.system(size: <span class="number">50</span>))<span class="comment">//这样就可以自己调整大小</span></span><br><span class="line">.minimumScaleFactor(<span class="number">0.7</span>)<span class="comment">//这代表你能接受这个元素最小为多大，系统会自动更改</span></span><br><span class="line">    .lineLimit(<span class="number">1</span>)<span class="comment">//这样就限制字体为一行</span></span><br><span class="line">.foregroundColor(.indigo)<span class="comment">//更改字体颜色为紫色</span></span><br></pre></td></tr></table></figure><h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//role里面是苹果给的预设，比如警告按钮.destructive</span></span><br><span class="line"><span class="type">Button</span>(role: .none, action: &#123;</span><br><span class="line">    <span class="comment">// 欲執行的動作</span></span><br><span class="line">&#125;, label: &#123;</span><br><span class="line">  <span class="comment">// 按鈕外觀描述（可以使用text（））</span></span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.padding(.top,<span class="number">30</span>)  <span class="comment">//文字上方加上一些间距</span></span><br><span class="line">.foregroundColor(.white)</span><br><span class="line">.background(<span class="type">Color</span>.purple)</span><br><span class="line">.cornerRadius(<span class="number">20</span>) <span class="comment">//建立圆角按钮</span></span><br><span class="line">.buttonStyle(.borderedProminent)  <span class="comment">//苹果内置的样式按钮为重点</span></span><br><span class="line">.buttonStyle(.plain)  <span class="comment">//苹果内置的样式按钮为没有任何样式</span></span><br><span class="line"><span class="comment">//简易版本</span></span><br><span class="line"><span class="type">Button</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;label: &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span>(<span class="string">&quot;user1&quot;</span>)<span class="comment">//里面为Assets内的图片的名称</span></span><br><span class="line">    .resizable()<span class="comment">//預設上，iOS 會以原始大小來顯示圖片，要在 SwiftUI 中調整圖片大小，則我們可以加入 resizable 修飾器（iOS 會延伸圖片來填滿可用區域）,此延伸模式並沒有考量圖片本身的長寬比</span></span><br><span class="line">.scaledToFit()<span class="comment">//保持原來圖片的長寬比，則你可以應用 scaledToFit 修飾器</span></span><br></pre></td></tr></table></figure><h3 id="Vertical-Stack-VStack-垂直堆叠视图"><a href="#Vertical-Stack-VStack-垂直堆叠视图" class="headerlink" title="Vertical Stack(VStack 垂直堆叠视图)"></a>Vertical Stack(VStack 垂直堆叠视图)</h3><p>作用为把子视图排列成一个垂直的堆栈（默认不可见，相当于css里的display：block）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VStack</span>(spacing: <span class="number">20</span>) &#123;</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Horizontal-Stack-HStack-水平堆叠视图"><a href="#Horizontal-Stack-HStack-水平堆叠视图" class="headerlink" title="Horizontal Stack(HStack 水平堆叠视图)"></a>Horizontal Stack(HStack 水平堆叠视图)</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HStack</span> &#123;</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">&#125;</span><br><span class="line">.padding(.horizontal, <span class="number">20</span>) <span class="comment">//左右邊緣加入 20 點的間距</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//HStack 視圖實際上提供兩個可選型別的參數，一個是 alignment，另一個則是 spacing</span></span><br><span class="line"><span class="comment">//1、將所有的圖片視圖對齊底部邊緣</span></span><br><span class="line"><span class="comment">//2、在視圖之間加入10 點的間距</span></span><br><span class="line"><span class="type">HStack</span>(alignment: .bottom, spacing: <span class="number">10</span>) &#123;</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ZStack（Z轴堆叠视图）"><a href="#ZStack（Z轴堆叠视图）" class="headerlink" title="ZStack（Z轴堆叠视图）"></a>ZStack（Z轴堆叠视图）</h3><p>越靠近下面的，在z轴上越高</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ZStack</span>&#123;</span><br><span class="line">  <span class="comment">// 目标视图的内容</span></span><br><span class="line">  <span class="type">Text</span>(<span class="string">&quot;最底部&quot;</span>)</span><br><span class="line">  <span class="type">Text</span>(<span class="string">&quot;中间&quot;</span>)</span><br><span class="line">  <span class="type">Text</span>(<span class="string">&quot;最顶部&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Rectangle"><a href="#Rectangle" class="headerlink" title="Rectangle"></a>Rectangle</h3><p><code>Rectangle()</code> 是 SwiftUI 中的一个视图类型，用于创建一个矩形形状的视图</p><p>注意在overlay与Rectangle等视图联系时，在overlay里使用foreach等类似语句，不会报相应的foreach里参数使用错误，而是会报错：Type ‘() -&gt; ()’ cannot conform to ‘ShapeStyle’，会导致我们找错报错的方向（卡了半个多小时，QAQ）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在下述示例中，Rectangle() 创建一个蓝色的矩形视图</span></span><br><span class="line"><span class="type">Rectangle</span>()</span><br><span class="line">    .frame(width: <span class="number">100</span>, height: <span class="number">50</span>)</span><br><span class="line">    .foregroundColor(<span class="type">Color</span>.blue)</span><br></pre></td></tr></table></figure><h3 id="Circle"><a href="#Circle" class="headerlink" title="Circle"></a>Circle</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Circle</span>()</span><br><span class="line">.fill(<span class="type">Color</span>.blue)<span class="comment">// 填充为蓝色</span></span><br><span class="line">.frame(width: <span class="number">100</span>, height: <span class="number">100</span>) <span class="comment">// 设置圆形的尺寸</span></span><br></pre></td></tr></table></figure><h3 id="Spacer"><a href="#Spacer" class="headerlink" title="Spacer"></a>Spacer</h3><p>「留白」（Spacer ）的 SwiftUI 特殊元件，留白視圖是一個沒有內容的視圖，它在堆疊視圖中占用儘可能多的空間。例如：當你將留白視圖放置在垂直佈局中，它會在堆疊允許的範圍內垂直擴展。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Spacer</span>()</span><br><span class="line">.layoutPriority(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="TextField"><a href="#TextField" class="headerlink" title="TextField"></a>TextField</h3><p>输入框</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面通过设置textFieldStyle为PlainTextFieldStyle()使得能够自定义输入框的样式</span></span><br><span class="line"><span class="type">TextField</span>(<span class="string">&quot;请输入备注&quot;</span>, text: <span class="variable">$textInput</span>)</span><br><span class="line">    .font(<span class="type">Font</span>.system(size: <span class="number">16</span>, weight: .bold)) <span class="comment">// 设置字体样式</span></span><br><span class="line">    .padding(<span class="type">EdgeInsets</span>(top: <span class="number">15</span>, leading: <span class="number">15</span>, bottom: <span class="number">15</span>, trailing: <span class="number">15</span>)) <span class="comment">// 调整内部空间</span></span><br><span class="line">    .background(<span class="type">Color</span>(<span class="type">UIColor</span>(red: <span class="number">250</span><span class="operator">/</span><span class="number">255</span>, green: <span class="number">250</span><span class="operator">/</span><span class="number">255</span>, blue: <span class="number">255</span><span class="operator">/</span><span class="number">255</span>, alpha: <span class="number">1</span>))) <span class="comment">// 设置背景颜色</span></span><br><span class="line">    .cornerRadius(<span class="number">22.5</span>) <span class="comment">// 圆角边框</span></span><br><span class="line">    .textFieldStyle(<span class="type">PlainTextFieldStyle</span>()) <span class="comment">// 去掉默认的边框样式</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TabView"><a href="#TabView" class="headerlink" title="TabView"></a>TabView</h3><p>轮播图</p><p><strong>注意</strong>这个currentIndex &#x3D; (currentIndex + 1) % items.count里面的 items.count不能为0否则报错（卡了我半小时，主要是swiftui项目崩溃的日志实在是又长又没有重点😡）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面为实现自动播放功能的轮播图，注意在实验后发现大多数参数不能该</span></span><br><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> currentIndex <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> timer <span class="operator">=</span> <span class="type">Timer</span>.publish(every: <span class="number">3</span>, on: .main, in: .common).autoconnect()</span><br><span class="line"><span class="keyword">let</span> items <span class="operator">=</span> [</span><br><span class="line">        (<span class="string">&quot;loginNavLogo1&quot;</span>, <span class="string">&quot;兑换<span class="subst">\n</span>商店积分&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;loginNavLogo2&quot;</span>, <span class="string">&quot;发现<span class="subst">\n</span>自我进步&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;loginNavLogo3&quot;</span>, <span class="string">&quot;建立<span class="subst">\n</span>计时标签&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;loginNavLogo4&quot;</span>, <span class="string">&quot;建立<span class="subst">\n</span>你的目标&quot;</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//selection实际上就是</span></span><br><span class="line"><span class="comment">// 创建一个TabView，通过绑定的方式来追踪选中的索引</span></span><br><span class="line"><span class="type">TabView</span>(selection: <span class="variable">$currentIndex</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用ForEach来遍历items数组的索引</span></span><br><span class="line">  <span class="comment">//items.indices被用作遍历的集合，它返回了一个表示items数组索引的范围。</span></span><br><span class="line">    <span class="type">ForEach</span>(items.indices, id: \.<span class="keyword">self</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="type">Image</span>(items[index].<span class="number">0</span>)</span><br><span class="line">                .resizable()</span><br><span class="line">                .scaledToFit()</span><br><span class="line">                .frame(width: <span class="number">400</span>, height: <span class="number">380</span>)</span><br><span class="line"></span><br><span class="line">            <span class="type">HStack</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(items[index].<span class="number">1</span>)</span><br><span class="line">                    .font(.title)</span><br><span class="line">                    .multilineTextAlignment(.leading)</span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 为每个页面分配一个标签，这里使用索引作为标签</span></span><br><span class="line">        <span class="comment">// 在 ForEach 视图内部，每个循环迭代都会创建一个新的 VStack 视图，并通过 .tag(index) 方法将这个 VStack 视图与当前的索引值 index(currentIndex) 相关联。</span></span><br><span class="line">        .tag(index)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置TabView的样式为页面样式，允许用户水平滑动浏览页面</span></span><br><span class="line">.tabViewStyle(<span class="type">PageTabViewStyle</span>(indexDisplayMode: .automatic))</span><br><span class="line"><span class="comment">// 设置索引视图的样式，始终显示索引</span></span><br><span class="line">.indexViewStyle(<span class="type">PageIndexViewStyle</span>(backgroundDisplayMode: .always))</span><br><span class="line"><span class="comment">// 当接收到计时器(timer)的事件时，执行闭包内的操作</span></span><br><span class="line">.onReceive(timer) &#123;<span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// 在控制台输出一条消息，表示计时器触发</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Timer triggered&quot;</span>)</span><br><span class="line">    <span class="comment">// 更新当前选中的索引，实现页面自动切换效果，取余运算以循环显示页面</span></span><br><span class="line">    currentIndex <span class="operator">=</span> (currentIndex <span class="operator">+</span> <span class="number">1</span>) <span class="operator">%</span> items.count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vertical代表竖直方向，showsIndicators代表是否显示滚动条</span></span><br><span class="line"><span class="type">ScrollView</span>(.vertical, showsIndicators: <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="type">ForEach</span>(tagWithTime.indices, id: \.<span class="keyword">self</span>) &#123; index <span class="keyword">in</span> </span><br><span class="line">        <span class="type">TagItemView</span>(tagTimeIndex:tagTimeIndex)</span><br><span class="line">            .frame(maxWidth: .infinity)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Picker"><a href="#Picker" class="headerlink" title="Picker"></a>Picker</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面为时间Picker</span></span><br><span class="line">.sheet(isPresented: <span class="variable">$showScorePicker</span>) &#123;</span><br><span class="line">    <span class="type">Picker</span>(<span class="string">&quot;分数&quot;</span>, selection: <span class="variable">$selectedScore</span>) &#123;</span><br><span class="line">        <span class="type">ForEach</span>(<span class="number">1</span><span class="operator">...</span><span class="number">8</span>, id: \.<span class="keyword">self</span>) &#123; score <span class="keyword">in</span></span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\(score)</span> Point&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .pickerStyle(<span class="type">WheelPickerStyle</span>())</span><br><span class="line">  <span class="comment">//控制sheet的弹出的高度和允许用户拖拽到的位置</span></span><br><span class="line">    .presentationDetents([.fraction(<span class="number">0.4</span>),.medium,.large])</span><br><span class="line">    .edgesIgnoringSafeArea(.all)</span><br><span class="line">    </span><br><span class="line">    <span class="type">Button</span> &#123;</span><br><span class="line">        showScorePicker.toggle()</span><br><span class="line">    &#125;label: &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;完成&quot;</span>)</span><br><span class="line">            .foregroundColor(<span class="type">Color</span>.white)</span><br><span class="line">    &#125;</span><br><span class="line">        .frame(width: <span class="number">100</span>,height: <span class="number">40</span>)</span><br><span class="line">        .background(<span class="type">Color</span>.indigo)</span><br><span class="line">        .cornerRadius(<span class="number">12</span>)</span><br><span class="line">        .padding(.top,<span class="number">30</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DatePicker"><a href="#DatePicker" class="headerlink" title="DatePicker"></a>DatePicker</h3><p>关键在于.datePickerStyle(GraphicalDatePickerStyle())，通过这个修饰符出来的样式是好看的</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面为时间Picker</span></span><br><span class="line">.sheet(isPresented: <span class="variable">$showDatePicker</span>) &#123;</span><br><span class="line">    <span class="type">VStack</span> &#123;</span><br><span class="line">        <span class="type">DatePicker</span>(</span><br><span class="line">            selection: <span class="variable">$selectedDate</span>,</span><br><span class="line">            in: <span class="type">Date</span>()<span class="operator">...</span></span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;选择时间&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//通过这个修饰符出来的样式是好看的</span></span><br><span class="line">        .datePickerStyle(<span class="type">GraphicalDatePickerStyle</span>())</span><br><span class="line">        .labelsHidden()</span><br><span class="line">        .presentationDetents([.fraction(<span class="number">0.6</span>),.large])</span><br><span class="line">            .edgesIgnoringSafeArea(.all)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="type">Button</span> &#123;</span><br><span class="line">            showDatePicker.toggle()</span><br><span class="line">        &#125;label: &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;完成&quot;</span>)</span><br><span class="line">                .foregroundColor(<span class="type">Color</span>.white)</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(width: <span class="number">100</span>,height: <span class="number">40</span>)</span><br><span class="line">        .background(<span class="type">Color</span>.indigo)</span><br><span class="line">        .cornerRadius(<span class="number">12</span>)</span><br><span class="line">        .padding(.top,<span class="number">30</span>)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    .padding()</span><br><span class="line">    .background(<span class="type">Color</span>.white)</span><br><span class="line">    .cornerRadius(<span class="number">15</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="视图修饰符（View-Modifier）"><a href="#视图修饰符（View-Modifier）" class="headerlink" title="视图修饰符（View Modifier）"></a>视图修饰符（View Modifier）</h2><p>本质上就是一个苹果为我们提供好的实例里的方法</p><p>注意每次使用视图修饰符时，SwiftUI都会在后台创建一个新的原始视图的修饰版本，所以视图修饰符的前后位置也很关键，视图修饰符不同的位置会改变其样式,同时在使用视图修饰符后返回的值也都有所不同（肯返回some View或者text），而部分视图修饰符又要求了它接受的值，所以顺序不同可能会造成类型的bug</p><h3 id="background"><a href="#background" class="headerlink" title="background"></a>background</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.background &#123;</span><br><span class="line">    <span class="type">Image</span>(<span class="string">&quot;background&quot;</span>)</span><br><span class="line">        .resizable()</span><br><span class="line">        .ignoresSafeArea()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//渐变色</span></span><br><span class="line">.background(</span><br><span class="line"><span class="type">LinearGradient</span>(</span><br><span class="line">        gradient: <span class="type">Gradient</span>(</span><br><span class="line">            colors: [</span><br><span class="line">                <span class="type">Color</span>(red: <span class="number">142</span><span class="operator">/</span><span class="number">255</span>, green: <span class="number">150</span><span class="operator">/</span><span class="number">255</span>, blue: <span class="number">255</span><span class="operator">/</span><span class="number">255</span>),</span><br><span class="line">                <span class="type">Color</span>(red: <span class="number">108</span><span class="operator">/</span><span class="number">255</span>, green: <span class="number">93</span><span class="operator">/</span><span class="number">255</span>, blue: <span class="number">211</span><span class="operator">/</span><span class="number">255</span>)</span><br><span class="line">            ]</span><br><span class="line">        ),</span><br><span class="line">      <span class="comment">//从右往左渐变</span></span><br><span class="line">        startPoint: .trailing,</span><br><span class="line">        endPoint: .leading</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h3><p>padding设置在frame前面可以达到不改变设定宽高，只是内部改变padding</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.padding(.horizontal, <span class="number">20</span>) <span class="comment">//左右加入 20 点的间距</span></span><br><span class="line">.padding(.top,<span class="number">30</span>)  <span class="comment">//在上方加上 30 点的间距</span></span><br></pre></td></tr></table></figure><h3 id="frame"><a href="#frame" class="headerlink" title="frame"></a>frame</h3><p>frame只是把一个视图限制在一定的宽度和高度之中，并不会改变视图本身的大小，但是可以利用子视图来撑大父视图，使其大小改变</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.frame(width: <span class="number">200</span>) <span class="comment">//用於將寬度限制為「200 點」</span></span><br><span class="line">.frame(maxWidth: .infinity)<span class="comment">//设定最大宽度为无限</span></span><br><span class="line">.frame(width: <span class="number">100</span>,alignment: .leading)<span class="comment">//并制定对齐方式</span></span><br></pre></td></tr></table></figure><h3 id="boder"><a href="#boder" class="headerlink" title="boder"></a>boder</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.border(<span class="type">Color</span>.red,width: <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="opacity"><a href="#opacity" class="headerlink" title="opacity"></a>opacity</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.opacity(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><h3 id="multilineTextAlignment"><a href="#multilineTextAlignment" class="headerlink" title="multilineTextAlignment"></a>multilineTextAlignment</h3><p>文字对齐方式（主要返回的some View）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.multilineTextAlignment(.leading)<span class="comment">//左对齐</span></span><br><span class="line">.multilineTextAlignment(.center)<span class="comment">//居中对齐</span></span><br><span class="line">.multilineTextAlignment(.trailing)<span class="comment">//右对齐</span></span><br></pre></td></tr></table></figure><h3 id="lineSpacing"><a href="#lineSpacing" class="headerlink" title="lineSpacing"></a>lineSpacing</h3><p>行间距，增加文字行与行之间点距离</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.lineSpacing(<span class="number">4.0</span>)</span><br></pre></td></tr></table></figure><h3 id="front"><a href="#front" class="headerlink" title="front"></a>front</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.font(.title)</span><br><span class="line">.font(.title2)</span><br><span class="line">.font(.title3)</span><br><span class="line">.font(.footnote)</span><br></pre></td></tr></table></figure><p>不同字体在默认状态下的大小（单位为px）</p><img src="https://gitee.com/TECNB/pic-demo/raw/master/image-20230807212415287.png" alt="image-20230807212415287" style="zoom:50%;" /><h3 id="kerning"><a href="#kerning" class="headerlink" title="kerning"></a>kerning</h3><p>文本里文字之间的间距</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.kerning(<span class="number">2.0</span>)  <span class="comment">//设置文字之间的间距为2px</span></span><br><span class="line">.kerning(<span class="operator">-</span><span class="number">1.0</span>)  <span class="comment">//设置文字之间的间距为-1px，字体排布更加紧凑</span></span><br></pre></td></tr></table></figure><h3 id="fontWeight"><a href="#fontWeight" class="headerlink" title="fontWeight"></a>fontWeight</h3><p>文字字重</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.fontWeight(.black)  <span class="comment">//比bold（默认）更大些</span></span><br><span class="line">.fontWeight(.bold)</span><br></pre></td></tr></table></figure><h3 id="alert"><a href="#alert" class="headerlink" title="alert"></a>alert</h3><p>按钮下的方法</p><p>注意这个$alertIsVisible如果在foreeach里的视图组件使用的话，不要把它作为binding参数传进来，否则alertIsVisible为true后会同时唤出多个alert，导致alert里的参数传递会出错,应该把alertIsVisible作为视图组件的private变量，确保在foreach循环里，每个视图组件的变量alertIsVisible都私有（卡了我一晚上，本来是玩博德之门3的啊啊啊啊啊啊啊啊QAQ）<br>还有要注意的是，如果想在一个视图里使用多个alert，靠增加.alert的数量是没用的，应该通过返回多个Alert达到增加alert数量的结果</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//primaryButton和secondaryButton好像在IOS15已经取消了</span></span><br><span class="line">.alert(isPresented: <span class="variable">$isShowingAlert</span>) &#123;</span><br><span class="line">    <span class="type">Alert</span>(</span><br><span class="line">        title: <span class="type">Text</span>(<span class="string">&quot;确定要删除吗？&quot;</span>), <span class="comment">// 弹窗标题</span></span><br><span class="line">        message: <span class="type">Text</span>(<span class="string">&quot;删除后将会从您的标签移除数据&quot;</span>), <span class="comment">// 弹窗消息</span></span><br><span class="line">        primaryButton: .default(<span class="type">Text</span>(<span class="string">&quot;确定&quot;</span>), action: &#123;</span><br><span class="line">            <span class="comment">// 在确定按钮点击时执行的操作</span></span><br><span class="line">            deleteTag(tagName: tagName,tagTimeIndex:tagTimeIndex)</span><br><span class="line">                </span><br><span class="line">        &#125;),</span><br><span class="line">        secondaryButton: .cancel(<span class="type">Text</span>(<span class="string">&quot;取消&quot;</span>)) <span class="comment">// 弹窗的取消按钮</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现多个alert</span></span><br><span class="line">.alert(isPresented: <span class="variable">$time</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> timeStop &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Alert</span>(</span><br><span class="line">            title: <span class="type">Text</span>(<span class="string">&quot;确定要放弃吗？&quot;</span>), <span class="comment">// 弹窗标题</span></span><br><span class="line">            message: <span class="type">Text</span>(<span class="string">&quot;本次计时将不会得到任何分数&quot;</span>), <span class="comment">// 弹窗消息</span></span><br><span class="line">            primaryButton: .default(<span class="type">Text</span>(<span class="string">&quot;确定&quot;</span>), action: &#123;</span><br><span class="line">                <span class="comment">// 在确定按钮点击时执行的操作</span></span><br><span class="line">                resetCountdown()</span><br><span class="line">              <span class="comment">//记得回收alert</span></span><br><span class="line">                time <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">            &#125;),</span><br><span class="line">            secondaryButton: .cancel(<span class="type">Text</span>(<span class="string">&quot;取消&quot;</span>)) <span class="comment">// 弹窗的取消按钮</span></span><br><span class="line">        )</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Alert</span>(</span><br><span class="line">            title: <span class="type">Text</span>(<span class="string">&quot;计时结束&quot;</span>), <span class="comment">// 弹窗标题</span></span><br><span class="line">            message: <span class="type">Text</span>(<span class="string">&quot;本次计时获得<span class="subst">\(tagWithTime[selectedTagIndex].tagPoint<span class="operator">!</span>)</span>Points&quot;</span>), <span class="comment">// 弹窗消息</span></span><br><span class="line">            primaryButton: .default(<span class="type">Text</span>(<span class="string">&quot;确定&quot;</span>), action: &#123;</span><br><span class="line">                <span class="comment">// 在确定按钮点击时执行的操作</span></span><br><span class="line">                resetCountdown()</span><br><span class="line">              <span class="comment">//记得回收alert</span></span><br><span class="line">                time <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">            &#125;),</span><br><span class="line">            secondaryButton: .cancel(<span class="type">Text</span>(<span class="string">&quot;取消&quot;</span>)) <span class="comment">// 弹窗的取消按钮</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h3><p>如果在大的动画里有部分动画不满意，可以直接在那个部分里再加一份动画，或者动画为none，也可以加上不同的id来是SwiftUI意识到这是不同的View，还有在View里加上.transition可以控制不同的动画效果,也可以用.withAnimation精确控制动画出现的时机</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动画的类型//根据@state的值变化后自动产生动画</span></span><br><span class="line">.animation(.easeInOut, value: ifShowTargetMenu)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/TECNB/pic-demo/raw/master/image-20230808212241299.png" alt="image-20230808212241299"></p><h3 id="controlSize"><a href="#controlSize" class="headerlink" title="controlSize"></a>controlSize</h3><p>任何视图都可以使用，但是只有苹果给的预设</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.controlSize(.large)</span><br></pre></td></tr></table></figure><h3 id="layoutPriority"><a href="#layoutPriority" class="headerlink" title="layoutPriority"></a>layoutPriority</h3><p>排版的优先顺序，默认都为0</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.layoutPriority(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.transition(.move(edge: .top ).combined(with: .opacity))<span class="comment">//从上面开始出现，并结合透明度的变化（也是动画？）</span></span><br></pre></td></tr></table></figure><h3 id="cornerRadius"><a href="#cornerRadius" class="headerlink" title="cornerRadius"></a>cornerRadius</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.cornerRadius(<span class="number">22.5</span>)<span class="comment">//此时设置为圆角</span></span><br></pre></td></tr></table></figure><h3 id="toggle"><a href="#toggle" class="headerlink" title="toggle"></a>toggle</h3><p>翻转Bool变量的值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifShowMenu.toggle()</span><br></pre></td></tr></table></figure><h3 id="ignoresSafeArea"><a href="#ignoresSafeArea" class="headerlink" title="ignoresSafeArea"></a>ignoresSafeArea</h3><p>在进行背景颜色修改时，手机底部和顶部无法正确上色，可以使用这个Modifier</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ignoresSafeArea()</span><br></pre></td></tr></table></figure><h3 id="onTapGesture"><a href="#onTapGesture" class="headerlink" title="onTapGesture"></a>onTapGesture</h3><p>在视图的顶端点击后的动作</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.onTapGesture &#123;</span><br><span class="line">ifShowMenu.toggle()<span class="comment">//这里是把ifShowMenu这个变量翻转</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="colorMultiply"><a href="#colorMultiply" class="headerlink" title="colorMultiply"></a>colorMultiply</h3><p>将整个图片的颜色变暗为黑色</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span>(<span class="string">&quot;targetBefore&quot;</span>)</span><br><span class="line">    .colorMultiply(.black)</span><br></pre></td></tr></table></figure><h3 id="shadow"><a href="#shadow" class="headerlink" title="shadow"></a>shadow</h3><p>增加阴影效果</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.shadow(color: <span class="type">Color</span>.black.opacity(<span class="number">0.2</span>), radius: <span class="number">10</span>, x: <span class="number">0</span>, y: <span class="number">5</span>) <span class="comment">// 添加阴影效果,阴影的颜色是黑色，透明度为 0.2，半径为 10，水平偏移量为 0，垂直偏移量为 5</span></span><br></pre></td></tr></table></figure><h3 id="overlay"><a href="#overlay" class="headerlink" title="overlay"></a>overlay</h3><p>alignment：可以控制8个角的放置的位置，下面的示例固定在右下角</p><p>注意在overlay与Rectangle等视图联系时，在overlay里使用foreach等类似语句，不会报相应的foreach里参数使用错误，而是会报错：Type ‘() -&gt; ()’ cannot conform to ‘ShapeStyle’，会导致我们找错报错的方向（卡了半个多小时，QAQ）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VStack</span>&#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;被重叠的主视图&quot;</span>)              </span><br><span class="line">&#125;.overlay(alignment:.bottomTrailing) &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;覆盖的内容&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="onAppear"><a href="#onAppear" class="headerlink" title="onAppear"></a>onAppear</h3><p>注意子组件里的onAppear在父组件是无效的，里面的内容不会执行</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.onAppear &#123;</span><br><span class="line">  <span class="comment">// 页面加载时，调用闭包并传递初始日期       </span></span><br><span class="line">  <span class="keyword">self</span>.onDateSelected<span class="operator">?</span>(<span class="keyword">self</span>.selectedDate)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sheet"><a href="#sheet" class="headerlink" title="sheet"></a>sheet</h3><p>通过presentationDetents控制大小（注意presentationDetents要放在sheet里面才有效，以及该修饰符IOS16才适配）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面为时间Picker</span></span><br><span class="line">.sheet(isPresented: <span class="variable">$showScorePicker</span>) &#123;</span><br><span class="line">    <span class="type">Picker</span>(<span class="string">&quot;分数&quot;</span>, selection: <span class="variable">$selectedScore</span>) &#123;</span><br><span class="line">        <span class="type">ForEach</span>(<span class="number">1</span><span class="operator">...</span><span class="number">8</span>, id: \.<span class="keyword">self</span>) &#123; score <span class="keyword">in</span></span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\(score)</span> Point&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .pickerStyle(<span class="type">WheelPickerStyle</span>())</span><br><span class="line">  <span class="comment">//控制sheet的弹出的高度和允许用户拖拽到的位置</span></span><br><span class="line">    .presentationDetents([.fraction(<span class="number">0.4</span>),.medium,.large])</span><br><span class="line">    .edgesIgnoringSafeArea(.all)</span><br><span class="line">    </span><br><span class="line">    <span class="type">Button</span> &#123;</span><br><span class="line">        showScorePicker.toggle()</span><br><span class="line">    &#125;label: &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;完成&quot;</span>)</span><br><span class="line">            .foregroundColor(<span class="type">Color</span>.white)</span><br><span class="line">    &#125;</span><br><span class="line">        .frame(width: <span class="number">100</span>,height: <span class="number">40</span>)</span><br><span class="line">        .background(<span class="type">Color</span>.indigo)</span><br><span class="line">        .cornerRadius(<span class="number">12</span>)</span><br><span class="line">        .padding(.top,<span class="number">30</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="毛玻璃效果"><a href="#毛玻璃效果" class="headerlink" title="毛玻璃效果"></a>毛玻璃效果</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 毛玻璃效果</span></span><br><span class="line"><span class="keyword">if</span> ifShowMenu &#123;</span><br><span class="line">  <span class="comment">//extraLight: 轻微的模糊效果，适合提供一些轻微的模糊和亮度。</span></span><br><span class="line"><span class="comment">//light: 适度的模糊效果，较亮。</span></span><br><span class="line"><span class="comment">//dark: 适度的模糊效果，较暗。</span></span><br><span class="line"><span class="comment">//regular: 默认的模糊效果，适中的模糊程度。</span></span><br><span class="line">    <span class="type">VisualEffectView</span>(effect: <span class="type">UIBlurEffect</span>(style: .light))</span><br><span class="line">        .ignoresSafeArea()</span><br><span class="line">           </span><br><span class="line">    <span class="type">Color</span>.white.opacity(<span class="number">0.3</span>) <span class="comment">// 透明的白色背景，可以增量毛玻璃的效果</span></span><br><span class="line">        .ignoresSafeArea()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面的代码好像是和UIkit进行转化，是必须的</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">VisualEffectView</span>: <span class="title class_">UIViewRepresentable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> effect: <span class="type">UIVisualEffect</span>?</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">makeUIView</span>(<span class="params">context</span>: <span class="type">UIViewRepresentableContext</span>&lt;<span class="keyword">Self</span>&gt;) -&gt; <span class="type">UIVisualEffectView</span> &#123;</span><br><span class="line">        <span class="type">UIVisualEffectView</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateUIView</span>(<span class="keyword">_</span> <span class="params">uiView</span>: <span class="type">UIVisualEffectView</span>, <span class="params">context</span>: <span class="type">UIViewRepresentableContext</span>&lt;<span class="keyword">Self</span>&gt;) &#123;</span><br><span class="line">        uiView.effect <span class="operator">=</span> effect</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="视图宽度固定为设备的一半，并置于左侧"><a href="#视图宽度固定为设备的一半，并置于左侧" class="headerlink" title="视图宽度固定为设备的一半，并置于左侧"></a>视图宽度固定为设备的一半，并置于左侧</h3><p>难点在于直接使用frame固定尺寸的话，是达不到置于左侧的效果的</p><p>同时下面的例子还使得图片固定在左上角</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽屉式导航菜单</span></span><br><span class="line"><span class="keyword">if</span> ifShowMenu &#123;</span><br><span class="line">    <span class="type">DrawerMenu</span>(isDrawerOpen: <span class="variable">$ifShowMenu</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DrawerMenu</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> isDrawerOpen: <span class="type">Bool</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">      <span class="comment">//GeometryReader也是一个视图</span></span><br><span class="line">        <span class="type">GeometryReader</span> &#123; geometry <span class="keyword">in</span></span><br><span class="line">            <span class="type">VStack</span>(alignment: .leading) &#123;</span><br><span class="line">                <span class="type">Image</span>(<span class="string">&quot;Avatar&quot;</span>)</span><br><span class="line">                    .resizable()</span><br><span class="line">                    .scaledToFit()</span><br><span class="line">                    .frame(width: <span class="number">40</span>, height: <span class="number">40</span>)</span><br><span class="line">                    .alignmentGuide(<span class="type">HorizontalAlignment</span>.leading) &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                        geometry.size.width <span class="operator">/</span> <span class="number">2</span> <span class="comment">// Align to the left half of the screen</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    .padding(.leading,<span class="number">30</span>).padding(.bottom,<span class="number">10</span>)</span><br><span class="line">              <span class="type">Spacer</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            .frame(width: geometry.size.width <span class="operator">/</span> <span class="number">2</span>, height: geometry.size.height<span class="operator">+</span><span class="number">40</span>) <span class="comment">// Set VStack height to screen height</span></span><br><span class="line">            .background(<span class="type">Color</span>.white)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="两种导航方式"><a href="#两种导航方式" class="headerlink" title="两种导航方式"></a>两种导航方式</h3><h4 id="NavigationStack"><a href="#NavigationStack" class="headerlink" title="NavigationStack"></a>NavigationStack</h4><p>这种方法会在左上角留下back的返回字样</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按钮驱动版</span></span><br><span class="line"><span class="type">NavigationStack</span>&#123;</span><br><span class="line">  <span class="type">ZStack</span>&#123;</span><br><span class="line">      <span class="type">Button</span>&#123;</span><br><span class="line">          ifShowTarget<span class="operator">=</span><span class="literal">true</span></span><br><span class="line">      &#125;label: &#123;</span><br><span class="line">          <span class="comment">//目标</span></span><br><span class="line">          <span class="type">HStack</span>&#123;</span><br><span class="line">              <span class="type">Image</span>(<span class="string">&quot;targetBefore&quot;</span>)</span><br><span class="line">                  .resizable()</span><br><span class="line">                  .scaledToFit()</span><br><span class="line">                  .frame(width: <span class="number">30</span>, height: <span class="number">30</span>)</span><br><span class="line">                  .padding(.leading,<span class="number">5</span>)</span><br><span class="line">              <span class="type">Text</span>(<span class="string">&quot;目标&quot;</span>)</span><br><span class="line">                  .frame(width: <span class="number">120</span>,alignment: .leading)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">//NavigationLink</span></span><br><span class="line">    <span class="type">NavigationLink</span>(<span class="string">&quot;&quot;</span>, destination: <span class="type">TargetView</span>(), isActive: <span class="variable">$ifShowTarget</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接点击跳转版</span></span><br><span class="line"><span class="type">NavigationStack</span>&#123;</span><br><span class="line">  <span class="type">ZStack</span>&#123;</span><br><span class="line">    <span class="comment">//NavigationLink</span></span><br><span class="line">    <span class="type">NavigationLink</span>(destination: <span class="type">TargetView</span>())&#123;</span><br><span class="line"><span class="type">Text</span>(<span class="string">&quot;点击跳转&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fullScreenCover"><a href="#fullScreenCover" class="headerlink" title="fullScreenCover"></a>fullScreenCover</h4><p>这种方法是在当前页面直接开一个新的视图，比较符合常规的导航</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span>&#123;</span><br><span class="line">    ifShowTarget<span class="operator">=</span><span class="literal">true</span></span><br><span class="line">&#125;label: &#123;</span><br><span class="line">    <span class="comment">//目标</span></span><br><span class="line">    <span class="type">HStack</span>&#123;</span><br><span class="line">        <span class="type">Image</span>(<span class="string">&quot;targetBefore&quot;</span>)</span><br><span class="line">            .resizable()</span><br><span class="line">            .scaledToFit()</span><br><span class="line">            .frame(width: <span class="number">30</span>, height: <span class="number">30</span>)</span><br><span class="line">            .padding(.leading,<span class="number">5</span>)</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;目标&quot;</span>)</span><br><span class="line">            .frame(width: <span class="number">120</span>,alignment: .leading)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ifShowTarget&#123;</span><br><span class="line">    <span class="type">NullView</span>()</span><br><span class="line">        .fullScreenCover(isPresented: <span class="variable">$ifShowTarget</span>, content: &#123;</span><br><span class="line">            <span class="comment">// 在此处放置其他您希望在全屏覆盖视图上显示的内容</span></span><br><span class="line">            <span class="type">TargetView</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="API网络请求"><a href="#API网络请求" class="headerlink" title="API网络请求"></a>API网络请求</h3><h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><p>第一步是建立好结构体接收传回来的参数，可以通过postman获取到传回来的JSON数据，根据数据进行书写</p><p>第二步建立urlRequest，并给出链接的设定，包括请求方式（httpMethod），请求头（header），请求参数（httpBody），其中请求参数这里需要转化为Data类型的数据，如果是直接传入String则使用userEmail.data(using: .utf8)转化，如果是json数据则进行转化：</p><p>1、let requestData &#x3D; [“userEmail”: userEmail]</p><p>2、let jsonData &#x3D; try JSONSerialization.data(withJSONObject: requestData)</p><p>第三步是创建 URLSession 数据任务，传回来的数据也要通过解码：</p><p>JSONDecoder().decode(ResponseData.self, from: data)<br>最后还有处理各种出错情况</p><p><img src="https://gitee.com/TECNB/pic-demo/raw/master/image-20230814212122622.png" alt="image-20230814212122622"></p><p>注意下面的例子只是将类型粗糙的分类，具体怎么请求最主要要是要看后端的api的需求</p><h4 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h4><p>在大体上该例子常用于获取数组类型的数据</p><h5 id="JSON格式"><a href="#JSON格式" class="headerlink" title="JSON格式"></a>JSON格式</h5><p>该格式里的data里最外围是[ ]</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;00000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;一切 ok&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;userEmail&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;targetName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;测试1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;targetDescribe&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hhh&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;targetColor&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;targetPoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;deadline&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;deadlineString&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ifPoints&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ifTargetNull&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ifTargetUpdate&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;targetId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1692785063700615169&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;userEmail&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;targetName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;测试2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;targetDescribe&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hhh&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;targetColor&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;targetPoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;deadline&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;deadlineString&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ifPoints&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ifTargetNull&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ifTargetUpdate&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;targetId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1692785123469447170&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ok&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p>在细节上该例子讲参数写死，并返回值，且传给后端的数据为text( let jsonData &#x3D; userEmail.data(using: .utf8) )</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TagDataManager.swift</span></span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应数据结构体，用于解码服务器响应的 JSON 数据</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ResponseData</span>: <span class="title class_">Decodable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data: [<span class="type">TagWithTime</span>]  <span class="comment">// 包含标签数组的数据字段</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标签结构体，用于解码标签数据</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TagWithTime</span>: <span class="title class_">Decodable</span>, <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> id: <span class="type">String</span>  <span class="comment">// 标签的唯一标识符，服务器返回的是字符串类型</span></span><br><span class="line">    <span class="keyword">let</span> tagName: <span class="type">String</span>  <span class="comment">// 标签名称</span></span><br><span class="line">    <span class="keyword">let</span> tagDescribe: <span class="type">String</span>  <span class="comment">// 标签描述</span></span><br><span class="line">    <span class="keyword">let</span> tagHour: <span class="type">String</span>  <span class="comment">// 标签时间的小时部分（字符串类型）</span></span><br><span class="line">    <span class="keyword">let</span> tagMinute: <span class="type">String</span>  <span class="comment">// 标签时间的分钟部分（字符串类型）</span></span><br><span class="line">    <span class="keyword">let</span> tagPoint: <span class="type">String</span>  <span class="comment">// 标签的积分值（字符串类型）</span></span><br><span class="line">    <span class="comment">// 其他字段省略，如果需要可以添加</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标签数据管理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TagDataManager</span> &#123;</span><br><span class="line">    <span class="comment">// 获取标签数据的方法</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">fetchTagData</span>(<span class="params">completion</span>: <span class="keyword">@escaping</span> ([<span class="type">TagWithTime</span>]<span class="operator">?</span>, <span class="type">Error</span>?) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="comment">// 定义请求的 URL</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://tengenchang.top/tag/get&quot;</span>) <span class="keyword">else</span> &#123;</span><br><span class="line">            completion(<span class="literal">nil</span>, <span class="literal">nil</span>)  <span class="comment">// 处理 URL 创建错误情况</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 准备请求参数</span></span><br><span class="line">        <span class="keyword">let</span> userEmail <span class="operator">=</span> <span class="string">&quot;3489044730@qq.com&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">// 将请求参数转换为 JSON 数据</span></span><br><span class="line">            <span class="keyword">let</span> jsonData <span class="operator">=</span> userEmail.data(using: .utf8)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 创建一个 URL 请求</span></span><br><span class="line">            <span class="keyword">var</span> request <span class="operator">=</span> <span class="type">URLRequest</span>(url: url)</span><br><span class="line">            request.httpMethod <span class="operator">=</span> <span class="string">&quot;POST&quot;</span>  <span class="comment">// 设置请求方法为 POST</span></span><br><span class="line">            request.setValue(<span class="string">&quot;application/json&quot;</span>, forHTTPHeaderField: <span class="string">&quot;Content-Type&quot;</span>)</span><br><span class="line">            request.httpBody <span class="operator">=</span> jsonData  <span class="comment">// 设置请求体为 JSON 数据</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 创建 URLSession 数据任务</span></span><br><span class="line">            <span class="type">URLSession</span>.shared.dataTask(with: request) &#123; data, response, error <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> data <span class="operator">=</span> data &#123;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="comment">// 解码服务器响应的 JSON 数据</span></span><br><span class="line">                        <span class="keyword">let</span> decodedResponse <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode(<span class="type">ResponseData</span>.<span class="keyword">self</span>, from: data)</span><br><span class="line">                        completion(decodedResponse.data, <span class="literal">nil</span>)  <span class="comment">// 将解码后的标签数据传递给回调闭包</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;JSON decoding error: <span class="subst">\(error)</span>&quot;</span>)</span><br><span class="line">                        completion(<span class="literal">nil</span>, error)  <span class="comment">// 处理解码错误情况</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> error <span class="operator">=</span> error &#123;</span><br><span class="line">                    completion(<span class="literal">nil</span>, error)  <span class="comment">// 处理网络请求错误情况</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;.resume()  <span class="comment">// 启动数据任务</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            completion(<span class="literal">nil</span>, error)  <span class="comment">// 处理其他错误情况</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//TagView.swift</span></span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TagView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> ifShowMenu:<span class="type">Bool</span><span class="operator">=</span><span class="literal">false</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> ifShowTarget:<span class="type">Bool</span><span class="operator">=</span><span class="literal">false</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> showWhichView:<span class="type">Int</span><span class="operator">=</span><span class="number">2</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> ifDelete:<span class="type">Bool</span><span class="operator">=</span><span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> tagWithTime: [<span class="type">TagWithTime</span>] <span class="operator">=</span> []</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> ifshowTagDetailBNull <span class="operator">=</span> <span class="literal">false</span> <span class="comment">//判断标签里是否有数据没有数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> tagDataManager <span class="operator">=</span> <span class="type">TagDataManager</span>()</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ZStack</span>&#123;</span><br><span class="line">            <span class="comment">// 目标视图的内容</span></span><br><span class="line">            <span class="type">VStack</span>&#123;</span><br><span class="line">                <span class="comment">//第一行的Nav</span></span><br><span class="line">                <span class="type">NavView</span>(ifShowMenu: <span class="variable">$ifShowMenu</span>,showWhichView:<span class="variable">$showWhichView</span>,ifDelete:<span class="variable">$ifDelete</span>)</span><br><span class="line">              <span class="comment">//获取的标签数据的展示处</span></span><br><span class="line">                <span class="type">ForEach</span>(tagWithTime, id: \.id) &#123; tag <span class="keyword">in</span></span><br><span class="line">  <span class="type">TagItemView</span>(ifDelete:<span class="variable">$ifDelete</span>,isShowingAlert:<span class="variable">$isShowingAlert</span>,tagName:tag.tagName,tagDescribe:tag.tagDescribe)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">//在页面出现时就调用获取标签数据的方法fetchTagData()</span></span><br><span class="line">        &#125;.onAppear &#123;</span><br><span class="line">             fetchTagData()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">fetchTagData</span>() &#123;</span><br><span class="line">            tagDataManager.fetchTagData &#123; fetchedData, error <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> fetchedData <span class="operator">=</span> fetchedData &#123;</span><br><span class="line">                    ifshowTagDetailBNull <span class="operator">=</span> fetchedData.isEmpty</span><br><span class="line">                    tagWithTime <span class="operator">=</span> fetchedData</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Error fetching data: <span class="subst">\(error<span class="operator">?</span>.localizedDescription <span class="operator">??</span> <span class="string">&quot;Unknown error&quot;</span>)</span>&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h4><p>在大体上该例子常用于删除数据</p><h5 id="JSON格式-1"><a href="#JSON格式-1" class="headerlink" title="JSON格式"></a>JSON格式</h5><p>该格式就是后端返回的值全是null</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="string">&quot;00000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;message&quot;</span>: <span class="string">&quot;一切 ok&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;userId&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;picUrl&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;tagName&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;tagDescribe&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;tagColor&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;tagPoint&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;tagHour&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;tagMinute&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;creatTime&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;userEmail&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;ifRepeat&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;ifTagNull&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;ifTagUpdate&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;tagId&quot;</span>: null</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;ok&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><p>在细节上该例子不返回任何参数，这里data明明由{ }包裹，但是却使用[TagWithTime]类型解密，还没有报错的原因在于，该方法的并不需要访问里面的数据，completion也不返回[TagWithTime]，，所以可以这么使用，不能使用[TagWithTime]类型解密的例子为例子4</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TagDataManager.swift</span></span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TagResponseData</span>: <span class="title class_">Decodable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data: [<span class="type">TagWithTime</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TagWithTime</span>: <span class="title class_">Decodable</span>, <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> id: <span class="type">String</span>?  <span class="comment">// 注意这里的 id 是 String 类型，因为服务器返回的数据是 String</span></span><br><span class="line">    <span class="keyword">let</span> tagName: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">let</span> tagDescribe: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">let</span> tagHour: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">let</span> tagMinute: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">let</span> tagPoint: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">let</span> ifTagNull:<span class="type">String</span>?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TagDataManager</span> &#123;</span><br><span class="line">    <span class="comment">// 删除标签的方法</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">deleteTag</span>(<span class="params">tagName</span>: <span class="type">String</span>, <span class="params">completion</span>: <span class="keyword">@escaping</span> (<span class="type">Error</span>?) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="comment">// 定义请求的 URL</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://tengenchang.top/tag/delete&quot;</span>) <span class="keyword">else</span> &#123;</span><br><span class="line">            completion(<span class="literal">nil</span>) <span class="comment">// 处理错误情况</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 准备请求参数</span></span><br><span class="line">        <span class="keyword">let</span> tagName <span class="operator">=</span> tagName</span><br><span class="line">        <span class="comment">// 将请求参数转换为 JSON 数据</span></span><br><span class="line">        <span class="keyword">let</span> jsonData <span class="operator">=</span> tagName.data(using: .utf8)</span><br><span class="line">        <span class="comment">// 创建一个 URL 请求</span></span><br><span class="line">        <span class="keyword">var</span> request <span class="operator">=</span> <span class="type">URLRequest</span>(url: url)</span><br><span class="line">    </span><br><span class="line">        request.httpMethod <span class="operator">=</span> <span class="string">&quot;POST&quot;</span> <span class="comment">// 设置请求方法为 POST</span></span><br><span class="line">        request.setValue(<span class="string">&quot;application/json&quot;</span>, forHTTPHeaderField: <span class="string">&quot;Content-Type&quot;</span>)</span><br><span class="line">        request.httpBody <span class="operator">=</span> jsonData <span class="comment">// 设置请求体为 JSON 数据</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建 URLSession 数据任务</span></span><br><span class="line">        <span class="type">URLSession</span>.shared.dataTask(with: request) &#123; <span class="keyword">_</span>, <span class="keyword">_</span>, error <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> error <span class="operator">=</span> error &#123;</span><br><span class="line">                completion(error)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                completion(<span class="literal">nil</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.resume() <span class="comment">// 启动数据任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//TagItemView.swift</span></span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TagItemView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> tagDataManager <span class="operator">=</span> <span class="type">TagDataManager</span>()</span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> tagWithTime:[<span class="type">TagWithTime</span>]</span><br><span class="line">    <span class="keyword">let</span> tagTimeIndex:<span class="type">Int</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ifDelete&#123;</span><br><span class="line">                <span class="type">Button</span>&#123;</span><br><span class="line">                    isShowingAlert <span class="operator">=</span> <span class="literal">true</span> <span class="comment">// 点击按钮时设置弹窗显示状态为 true</span></span><br><span class="line">                &#125;label: &#123;</span><br><span class="line">                    <span class="type">Image</span>(<span class="string">&quot;x&quot;</span>)</span><br><span class="line">                        .resizable()</span><br><span class="line">                        .scaledToFit()</span><br><span class="line">                        .frame(width: <span class="number">12</span>,height: <span class="number">12</span>)</span><br><span class="line">                &#125;.alert(isPresented: <span class="variable">$isShowingAlert</span>) &#123;</span><br><span class="line">                    <span class="type">Alert</span>(</span><br><span class="line">                        title: <span class="type">Text</span>(<span class="string">&quot;确定要删除吗？&quot;</span>), <span class="comment">// 弹窗标题</span></span><br><span class="line">                        message: <span class="type">Text</span>(<span class="string">&quot;删除后将会从您的标签移除数据&quot;</span>), <span class="comment">// 弹窗消息</span></span><br><span class="line">                        primaryButton: .default(<span class="type">Text</span>(<span class="string">&quot;确定&quot;</span>), action: &#123;</span><br><span class="line">                            <span class="comment">// 在确定按钮点击时执行的操作</span></span><br><span class="line">                            deleteTag(tagName: tagName,tagTimeIndex:tagTimeIndex)</span><br><span class="line">                        &#125;),</span><br><span class="line">                        secondaryButton: .cancel(<span class="type">Text</span>(<span class="string">&quot;取消&quot;</span>)) <span class="comment">// 弹窗的取消按钮</span></span><br><span class="line">                    )</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">deleteTag</span>(<span class="params">tagName</span>:<span class="type">String</span>,<span class="params">tagTimeIndex</span>:<span class="type">Int</span>)&#123;</span><br><span class="line">        tagDataManager.deleteTag(tagName: tagName) &#123; error <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> error <span class="operator">==</span> <span class="literal">nil</span> &#123;</span><br><span class="line">                deleteSuccess<span class="operator">=</span><span class="literal">true</span></span><br><span class="line">                tagNum<span class="operator">-=</span><span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> tagNum<span class="operator">==</span><span class="number">0</span>&#123;</span><br><span class="line">                    ifshowTagDetailBNull<span class="operator">=</span><span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">                tagWithTime.remove(at: tagTimeIndex)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;删除标签成功&quot;</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;删除标签失败&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例子3"><a href="#例子3" class="headerlink" title="例子3"></a>例子3</h4><p>在大体上该例子用于检验用户是否注册，利用completion返回Int，方便用户直接跳转到登录界面或者注册界面</p><h5 id="JSON格式-2"><a href="#JSON格式-2" class="headerlink" title="JSON格式"></a>JSON格式</h5><p>该格式就是后端的代码就是return null</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户注册过</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;00000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;一切 ok&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;userName&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;picData&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;picUrl&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;userEmail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3489044730@qq.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;userPassword&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;userCode&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;completeTarget&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;point&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ifUpdate&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;openId&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ok&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用户没有注册过</span></span><br><span class="line"><span class="comment">//直接没有任何返回值</span></span><br></pre></td></tr></table></figure><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><p>在细节上该例子传入的参数是动态的，返回简单参数如(Int)，利用completion返回起来简单，且使用时直接调用方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UserDataManager.swift</span></span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UserResponseData</span>: <span class="title class_">Decodable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> code: <span class="type">String</span>?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserDataManager</span>&#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">checkEmail</span>(<span class="params">email</span>: <span class="type">String</span>, <span class="params">completion</span>: <span class="keyword">@escaping</span> (<span class="type">Int</span>) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://tengenchang.top/user/home&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            completion(<span class="number">12</span>) <span class="comment">// URL错误的情况下的备用值</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 准备请求参数</span></span><br><span class="line">        <span class="keyword">let</span> userEmail <span class="operator">=</span> email</span><br><span class="line">        <span class="comment">// 将请求参数转换为 JSON 数据</span></span><br><span class="line">        <span class="keyword">let</span> jsonData <span class="operator">=</span>  userEmail.data(using: .utf8)</span><br><span class="line">        <span class="comment">// 创建一个 URL 请求</span></span><br><span class="line">        <span class="keyword">var</span> request <span class="operator">=</span> <span class="type">URLRequest</span>(url: url)</span><br><span class="line">            </span><br><span class="line">        request.httpMethod <span class="operator">=</span> <span class="string">&quot;POST&quot;</span> <span class="comment">// 设置请求方法为 POST</span></span><br><span class="line">        request.setValue(<span class="string">&quot;application/json&quot;</span>, forHTTPHeaderField: <span class="string">&quot;Content-Type&quot;</span>)</span><br><span class="line">        request.httpBody <span class="operator">=</span> jsonData <span class="comment">// 设置请求体为 JSON 数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 假设您使用URLSession进行API请求</span></span><br><span class="line">        <span class="type">URLSession</span>.shared.dataTask(with: request) &#123; data, response, error <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> data <span class="operator">=</span> data &#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> decodedData <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode(<span class="type">UserResponseData</span>.<span class="keyword">self</span>, from: data)</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> code <span class="operator">=</span> decodedData.code &#123;</span><br><span class="line">                        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                            <span class="keyword">if</span> code <span class="operator">==</span> <span class="string">&quot;nil&quot;</span> &#123;</span><br><span class="line">                                completion(<span class="number">12</span>)</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                completion(<span class="number">11</span>)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">                    <span class="built_in">print</span>(error)</span><br><span class="line">                    completion(<span class="number">12</span>) <span class="comment">// 错误情况</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.resume()</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//HomeView.swift</span></span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HomeView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@EnvironmentObject</span> <span class="keyword">private</span> <span class="keyword">var</span> userData: <span class="type">UserData</span></span><br><span class="line">  <span class="keyword">let</span> userDataManager <span class="operator">=</span> <span class="type">UserDataManager</span>() <span class="comment">// 实例化UserDataManager</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(alignment: .leading,spacing: <span class="number">20</span>)&#123;</span><br><span class="line">            <span class="type">Button</span>&#123;</span><br><span class="line">              <span class="comment">//isValidQQEmailFormat为检验QQ邮箱的合法性</span></span><br><span class="line">                <span class="keyword">let</span> isValidQQEmail <span class="operator">=</span> isValidQQEmailFormat(email: userData.userEmail)</span><br><span class="line">                <span class="keyword">if</span> isValidQQEmail&#123;</span><br><span class="line">                  <span class="comment">//这里使用了API请求的checkEmail方法</span></span><br><span class="line">                  <span class="comment">//并直接返回了retrurnShowWhichView的值，方便用户直接跳转到登录界面或者注册界面</span></span><br><span class="line">                    userDataManager.checkEmail(email: userData.userEmail) &#123; retrurnShowWhichView <span class="keyword">in</span></span><br><span class="line">                        showWhichView <span class="operator">=</span> retrurnShowWhichView</span><br><span class="line">                        timerTriggered <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    ifshowTextAlert<span class="operator">=</span><span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;label: &#123;</span><br><span class="line">                <span class="type">HStack</span>()&#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;继续&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.padding(<span class="number">15</span>)</span><br><span class="line">            .overlay &#123;</span><br><span class="line">                <span class="keyword">if</span> ifshowTextAlert&#123;</span><br><span class="line">                    <span class="type">TextAlertView</span>(textContant:<span class="variable">$textContant</span>,ifshowTextAlert:<span class="variable">$ifshowTextAlert</span>)</span><br><span class="line">                        </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例子4"><a href="#例子4" class="headerlink" title="例子4"></a>例子4</h4><p>大体上该例子作用于获取该用户的账户信息，一般不是数组</p><h5 id="JSON格式-3"><a href="#JSON格式-3" class="headerlink" title="JSON格式"></a>JSON格式</h5><p>注意json返回的数据不是数组，且要获取里面的数据时时，不要为结构体或者类加上[]</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="string">&quot;00000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;message&quot;</span>: <span class="string">&quot;一切 ok&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;userId&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;point&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;pointType&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;pointName&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;pointDescribe&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;pointDate&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;userEmail&quot;</span>: <span class="string">&quot;3489044730@qq.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userTimeP&quot;</span>: <span class="string">&quot;过去一天&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pointAll&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;progress&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pointInsistence&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pointAverage&quot;</span>: <span class="string">&quot;0.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;completeTarget&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;completeTargetRate&quot;</span>: <span class="string">&quot;0.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ifProgress&quot;</span>: null</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;ok&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><p>在细节上该例子解析出来的数据放在类里面，而不是数组，注意拆包和初始化时候的使用可选项</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//StoreDataManager.swift</span></span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PointRecordResponseData</span>: <span class="title class_">Decodable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data: <span class="type">PointRecordData</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里用结构体也可以</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PointRecordData</span>:<span class="title class_">Decodable</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> userTimeP, pointAll, progress: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> pointInsistence, pointAverage, completeTarget, completeTargetRate: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserDataManager</span>&#123;</span><br><span class="line">    <span class="comment">// 获取用户目标完成情况的方法</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">fetchPointRecordData</span>(<span class="params">userTimeP</span>:<span class="type">String</span>,<span class="params">completion</span>: <span class="keyword">@escaping</span> (<span class="type">PointRecordData</span>?, <span class="type">Error</span>?) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="comment">// 定义请求的 URL</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://tengenchang.top/pointRecord/get&quot;</span>) <span class="keyword">else</span> &#123;</span><br><span class="line">            completion(<span class="literal">nil</span>, <span class="literal">nil</span>) <span class="comment">// 处理错误情况</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 准备请求参数</span></span><br><span class="line">        <span class="keyword">let</span> userEmail <span class="operator">=</span> <span class="string">&quot;3489044730@qq.com&quot;</span></span><br><span class="line">        <span class="keyword">let</span> userTimeP<span class="operator">=</span>userTimeP</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//转化为JSON格式</span></span><br><span class="line">        <span class="keyword">let</span> parameters: [<span class="type">String</span>: <span class="keyword">Any</span>] <span class="operator">=</span> [<span class="string">&quot;userEmail&quot;</span>: userEmail, <span class="string">&quot;userTimeP&quot;</span>: userTimeP]</span><br><span class="line">        <span class="comment">// 将请求参数转换为 JSON 数据</span></span><br><span class="line">        <span class="keyword">let</span> jsonData <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">JSONSerialization</span>.data(withJSONObject: parameters)</span><br><span class="line">        <span class="comment">// 创建一个 URL 请求</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">var</span> request <span class="operator">=</span> <span class="type">URLRequest</span>(url: url)</span><br><span class="line">            </span><br><span class="line">        request.httpMethod <span class="operator">=</span> <span class="string">&quot;POST&quot;</span> <span class="comment">// 设置请求方法为 POST</span></span><br><span class="line">        request.setValue(<span class="string">&quot;application/json&quot;</span>, forHTTPHeaderField: <span class="string">&quot;Content-Type&quot;</span>)</span><br><span class="line">        request.httpBody <span class="operator">=</span> jsonData <span class="comment">// 设置请求体为 JSON 数据</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment">// 创建 URLSession 数据任务</span></span><br><span class="line">        <span class="type">URLSession</span>.shared.dataTask(with: request) &#123; data, response, error <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> data <span class="operator">=</span> data &#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="comment">// 解码服务器响应的数据</span></span><br><span class="line">                    <span class="keyword">let</span> decodedResponse <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode(<span class="type">PointRecordResponseData</span>.<span class="keyword">self</span>, from: data)</span><br><span class="line">                        completion(decodedResponse.data, <span class="literal">nil</span>)</span><br><span class="line">                &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;JSON decoding error: <span class="subst">\(error)</span>&quot;</span>)</span><br><span class="line">                    completion(<span class="literal">nil</span>, error)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> error <span class="operator">=</span> error &#123;</span><br><span class="line">                completion(<span class="literal">nil</span>, error)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.resume() <span class="comment">// 启动数据任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//UserView.swift</span></span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UserView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> userDataManager <span class="operator">=</span> <span class="type">UserDataManager</span>() <span class="comment">// 实例化UserDataManager</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> userTimeP:<span class="type">String</span><span class="operator">=</span><span class="string">&quot;过去一周&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> pointRecordData:<span class="type">PointRecordData</span>?</span><br><span class="line">    <span class="keyword">let</span> pointAll:<span class="type">String</span><span class="operator">=</span><span class="string">&quot;10&quot;</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ZStack</span>&#123;</span><br><span class="line">            <span class="comment">// 目标视图的内容</span></span><br><span class="line">            <span class="type">VStack</span>&#123;</span><br><span class="line">                <span class="type">ZStack</span>&#123;</span><br><span class="line">                    <span class="type">VStack</span>(alignment: .leading)&#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;获取分数&quot;</span>)</span><br><span class="line">                        <span class="type">HStack</span>&#123;</span><br><span class="line">                            <span class="type">Text</span>((pointRecordData<span class="operator">?</span>.pointAll) <span class="operator">??</span> <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;努力的<span class="subst">\(String(userTimeP.suffix(<span class="number">2</span>)))</span>！&quot;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">ZStack</span>&#123;</span><br><span class="line">                    <span class="type">VStack</span>(alignment: .leading)&#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;进步&quot;</span>)</span><br><span class="line">                        <span class="type">HStack</span>&#123;</span><br><span class="line">                            <span class="type">Text</span>((pointRecordData<span class="operator">?</span>.progress) <span class="operator">??</span> <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="type">HStack</span>&#123;</span><br><span class="line">                    <span class="type">VStack</span>&#123;</span><br><span class="line">                        <span class="type">VStack</span>(alignment: .leading)&#123;</span><br><span class="line">                            <span class="type">HStack</span>&#123;</span><br><span class="line">                                <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\((pointRecordData<span class="operator">?</span>.pointInsistence) <span class="operator">??</span> <span class="string">&quot;0&quot;</span>)</span><span class="subst">\n</span>连续得分&quot;</span>)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="type">VStack</span>(alignment: .leading)&#123;</span><br><span class="line">                            <span class="type">HStack</span>&#123;</span><br><span class="line">                                <span class="type">VStack</span>&#123;</span><br><span class="line">                                    <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\((pointRecordData<span class="operator">?</span>.completeTargetRate) <span class="operator">??</span> <span class="string">&quot;0.0&quot;</span>)</span>%&quot;</span>)</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">VStack</span>&#123;</span><br><span class="line">                        <span class="type">VStack</span>(alignment: .leading)&#123;</span><br><span class="line">                            <span class="type">HStack</span>&#123;</span><br><span class="line">                                <span class="type">VStack</span>&#123;</span><br><span class="line">                                    <span class="type">Text</span>((pointRecordData<span class="operator">?</span>.pointAverage) <span class="operator">??</span> <span class="string">&quot;0.0&quot;</span>)</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        <span class="type">VStack</span>(alignment: .leading)&#123;</span><br><span class="line">                            <span class="type">HStack</span>&#123;</span><br><span class="line">                                <span class="type">VStack</span>&#123;</span><br><span class="line">                                    <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\((pointRecordData<span class="operator">?</span>.completeTarget) <span class="operator">??</span> <span class="string">&quot;0&quot;</span>)</span>个目标&quot;</span>)</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>  ifShowUserMenu&#123;</span><br><span class="line">                <span class="comment">//下面是targetMenu,使用fetchPointRecordData()方法</span></span><br><span class="line">                <span class="keyword">if</span> userTimeP<span class="operator">==</span><span class="string">&quot;过去一周&quot;</span>&#123;</span><br><span class="line">                    <span class="type">VStack</span>&#123;</span><br><span class="line">                        <span class="type">Button</span>&#123;</span><br><span class="line">                            userTimeP<span class="operator">=</span><span class="string">&quot;过去一天&quot;</span></span><br><span class="line">                            fetchPointRecordData()</span><br><span class="line">                        &#125;label: &#123;</span><br><span class="line">                            <span class="type">Text</span>(<span class="string">&quot;过去一天&quot;</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="type">Button</span>&#123;</span><br><span class="line">                            userTimeP<span class="operator">=</span><span class="string">&quot;过去一月&quot;</span></span><br><span class="line">                            fetchPointRecordData()</span><br><span class="line">                        &#125;label: &#123;</span><br><span class="line">                            <span class="type">Text</span>(<span class="string">&quot;过去一月&quot;</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">fetchPointRecordData</span>() &#123;</span><br><span class="line">        userDataManager.fetchPointRecordData(userTimeP: userTimeP) &#123; fetchedData, error <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> fetchedData <span class="operator">=</span> fetchedData &#123;</span><br><span class="line">                pointRecordData<span class="operator">=</span>fetchedData</span><br><span class="line">                <span class="built_in">print</span>((pointRecordData<span class="operator">?</span>.pointAll)<span class="operator">!</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Error fetching data: <span class="subst">\(error<span class="operator">?</span>.localizedDescription <span class="operator">??</span> <span class="string">&quot;Unknown error&quot;</span>)</span>&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自定义文字弹窗提示"><a href="#自定义文字弹窗提示" class="headerlink" title="自定义文字弹窗提示"></a>自定义文字弹窗提示</h3><p>因为swiftui中只有alert，且这个视图在官方的规定下是必定要有按钮的，所以为了满足项目的需求，我进行了自定义的文字弹窗提示，该弹窗还会在几秒后自动消失</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要使用时只需要overlay在最外部的视图就行</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TextAlertView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="comment">//这里控制了视图的计时消失</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> isTextVisible <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> textContant:<span class="type">String</span></span><br><span class="line">    <span class="comment">//这里的变量ifshowTextAlert使得该视图能在需要时多次出现</span></span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> ifshowTextAlert:<span class="type">Bool</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> isTextVisible &#123;</span><br><span class="line">                <span class="type">Text</span>(textContant)</span><br><span class="line">                    .foregroundColor(<span class="type">Color</span>.white)</span><br><span class="line">                    .padding([.top,.bottom],<span class="number">10</span>)</span><br><span class="line">                    .padding([.leading,.trailing],<span class="number">15</span>)</span><br><span class="line">                    .background(<span class="type">Color</span>.secondary)</span><br><span class="line">                    .cornerRadius(<span class="number">10</span>)</span><br><span class="line">                    .onAppear &#123;</span><br><span class="line">                        <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class="operator">+</span> <span class="number">0.6</span>) &#123;</span><br><span class="line">                            withAnimation &#123;</span><br><span class="line">                                isTextVisible <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            ifshowTextAlert<span class="operator">=</span><span class="literal">false</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="foreach两种方式获得index"><a href="#foreach两种方式获得index" class="headerlink" title="foreach两种方式获得index"></a>foreach两种方式获得index</h3><p>1、利用Array包装数组获取到index,该方法获取元素使用类似target.targetName的方式</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ForEach</span>(<span class="type">Array</span>(targetNoTime.enumerated()), id: \.element.id) &#123; (index, target) <span class="keyword">in</span></span><br><span class="line">    <span class="type">TargetItemView</span>(targetName: target.targetName<span class="operator">!</span>,</span><br><span class="line">                   targetDescribe: target.targetDescribe<span class="operator">!</span>,</span><br><span class="line">                   targetId: target.targetId<span class="operator">!</span>,</span><br><span class="line">                   targetPoint:target.targetPoint<span class="operator">!</span> ,</span><br><span class="line">                   targetStatus: target.status<span class="operator">!</span>,</span><br><span class="line">                   targetTimeIndex:index</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、使用数组方法中的.indices，获取到index，该方法获取元素使用类似tagWithTime[index].tagName的方式</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ForEach</span>(tagWithTime.indices, id: \.<span class="keyword">self</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">    <span class="type">TagItemView</span>(tagName: tagWithTime[index].tagName<span class="operator">!</span>,</span><br><span class="line">                tagDescribe:tagWithTime[index].tagDescribe<span class="operator">!</span>,</span><br><span class="line">                tagWithTime:<span class="variable">$tagWithTime</span>,</span><br><span class="line">                tagTimeIndex:index)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义横向日期显示</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TargetNav1View</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> calendar <span class="operator">=</span> <span class="type">Calendar</span>.current</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> dateFormatter: <span class="type">DateFormatter</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> formatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">        formatter.dateFormat <span class="operator">=</span> <span class="string">&quot;E&quot;</span> <span class="comment">// 日期格式化器，用于获取星期几的缩写</span></span><br><span class="line">        <span class="keyword">return</span> formatter</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> selectedDayIndex <span class="operator">=</span> <span class="number">0</span> <span class="comment">// 当前选中的VStack索引</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ScrollView</span>(.horizontal, showsIndicators: <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="type">HStack</span>(spacing: <span class="number">18</span>) &#123;</span><br><span class="line">                <span class="type">ForEach</span>(<span class="number">0</span><span class="operator">..&lt;</span><span class="number">30</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">                    <span class="type">VStack</span> &#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="keyword">self</span>.dayName(for: index))</span><br><span class="line">                            .foregroundColor(<span class="keyword">self</span>.selectedDayIndex <span class="operator">==</span> index <span class="operator">?</span> .black : .secondary)</span><br><span class="line">                            .font(.system(size: <span class="number">12</span>)) <span class="comment">// 设置星期几文本的字体大小</span></span><br><span class="line">                        <span class="type">Text</span>(<span class="keyword">self</span>.dayNumber(for: index))</span><br><span class="line">                            .frame(width: <span class="number">36</span>, height: <span class="number">36</span>)</span><br><span class="line">                            .foregroundColor(<span class="type">Color</span>(rgba: (<span class="number">207</span>, <span class="number">200</span>, <span class="number">255</span>, <span class="number">1</span>)))</span><br><span class="line">                            .background(</span><br><span class="line">                                <span class="type">LinearGradient</span>(</span><br><span class="line">                                    gradient: <span class="type">Gradient</span>(</span><br><span class="line">                                        colors: <span class="keyword">self</span>.gradientColors(for: index)</span><br><span class="line">                                    ),</span><br><span class="line">                                    startPoint: .top,</span><br><span class="line">                                    endPoint: .bottom</span><br><span class="line">                                )</span><br><span class="line">                            )</span><br><span class="line">                            .cornerRadius(<span class="number">22.5</span>)</span><br><span class="line">                            .onTapGesture &#123; <span class="comment">// 添加点击手势</span></span><br><span class="line">                                <span class="keyword">self</span>.selectedDayIndex <span class="operator">=</span> index <span class="comment">// 更新选中的索引</span></span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    .cornerRadius(<span class="number">22.5</span>) <span class="comment">// 设置VStack的圆角</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .padding(.top, <span class="number">20</span>) <span class="comment">// 设置顶部内边距</span></span><br><span class="line">        &#125;.padding([.leading,.trailing],<span class="number">20</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">dayName</span>(<span class="params">for</span> <span class="params">index</span>: <span class="type">Int</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> currentDate <span class="operator">=</span> calendar.date(byAdding: .day, value: index, to: <span class="type">Date</span>()) <span class="operator">??</span> <span class="type">Date</span>()</span><br><span class="line">        <span class="keyword">return</span> dateFormatter.string(from: currentDate) <span class="comment">// 获取星期几的缩写文本</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">dayNumber</span>(<span class="params">for</span> <span class="params">index</span>: <span class="type">Int</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> currentDate <span class="operator">=</span> calendar.date(byAdding: .day, value: index, to: <span class="type">Date</span>()) <span class="operator">??</span> <span class="type">Date</span>()</span><br><span class="line">        <span class="keyword">let</span> day <span class="operator">=</span> calendar.component(.day, from: currentDate) <span class="comment">// 获取日期的天数部分</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;<span class="subst">\(day)</span>&quot;</span> <span class="comment">// 将天数转换为字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">gradientColors</span>(<span class="params">for</span> <span class="params">index</span>: <span class="type">Int</span>) -&gt; [<span class="type">Color</span>] &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.selectedDayIndex <span class="operator">==</span> index &#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="type">Color</span>(red: <span class="number">142</span><span class="operator">/</span><span class="number">255</span>, green: <span class="number">150</span><span class="operator">/</span><span class="number">255</span>, blue: <span class="number">255</span><span class="operator">/</span><span class="number">255</span>),</span><br><span class="line">                <span class="type">Color</span>(red: <span class="number">108</span><span class="operator">/</span><span class="number">255</span>, green: <span class="number">93</span><span class="operator">/</span><span class="number">255</span>, blue: <span class="number">211</span><span class="operator">/</span><span class="number">255</span>)</span><br><span class="line">            ] <span class="comment">// 如果选中，返回选中时的渐变色</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="type">Color</span>.clear,</span><br><span class="line">                <span class="type">Color</span>.clear</span><br><span class="line">            ] <span class="comment">// 如果未选中，返回透明颜色</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自定义日期比较器"><a href="#自定义日期比较器" class="headerlink" title="自定义日期比较器"></a>自定义日期比较器</h3><p>难点有两个，第一点是仅关注日期部分，忽略时间的影响，解决方法是把传进来的时间设置为0小时、0分钟、0秒，来忽略小时和分钟对日期差的干扰，并且用calendar.dateComponents(_:from:to:)来计算目标日期和选定日期的月份和日子的差异，第二点在于进入目标页面时间差的初值问题，解决方法是在获取数据时，直接调用求时间差的方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TargetNav1View.swift</span></span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TargetNav1View</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> selectedDate: <span class="type">Date</span><span class="operator">=</span><span class="type">Date</span>() <span class="comment">// 接收初始日期的参数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> calendar <span class="operator">=</span> <span class="type">Calendar</span>.current</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> dateFormatter: <span class="type">DateFormatter</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> formatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">        formatter.dateFormat <span class="operator">=</span> <span class="string">&quot;E&quot;</span> <span class="comment">// 日期格式化器，用于获取星期几的缩写</span></span><br><span class="line">        <span class="keyword">return</span> formatter</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> selectedDayIndex <span class="operator">=</span> <span class="number">0</span> <span class="comment">// 当前选中的VStack索引</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> onDateSelected: ((<span class="type">Date</span>) -&gt; <span class="type">Void</span>)<span class="operator">?</span> <span class="comment">// 用于接收选中日期的闭包</span></span><br><span class="line">    <span class="comment">// 初始化时执行计算逻辑</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ScrollView</span>(.horizontal, showsIndicators: <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="type">HStack</span>(spacing: <span class="number">18</span>) &#123;</span><br><span class="line">                <span class="type">ForEach</span>(<span class="number">0</span><span class="operator">..&lt;</span><span class="number">30</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">                    <span class="type">VStack</span> &#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="keyword">self</span>.dayName(for: index))</span><br><span class="line">                            .foregroundColor(</span><br><span class="line">                                <span class="keyword">self</span>.selectedDayIndex <span class="operator">==</span> index <span class="operator">?</span> .black : .secondary</span><br><span class="line">                            )</span><br><span class="line">                            .font(.system(size: <span class="number">12</span>)) <span class="comment">// 设置星期几文本的字体大小</span></span><br><span class="line">                        <span class="type">Text</span>(<span class="keyword">self</span>.dayNumber(for: index))</span><br><span class="line">                            .frame(width: <span class="number">36</span>, height: <span class="number">36</span>)</span><br><span class="line">                            .foregroundColor(<span class="type">Color</span>(rgba: (<span class="number">207</span>, <span class="number">200</span>, <span class="number">255</span>, <span class="number">1</span>)))</span><br><span class="line">                            .background(</span><br><span class="line">                                <span class="type">LinearGradient</span>(</span><br><span class="line">                                    gradient: <span class="type">Gradient</span>(</span><br><span class="line">                                        colors: <span class="keyword">self</span>.gradientColors(for: index)</span><br><span class="line">                                    ),</span><br><span class="line">                                    startPoint: .top,</span><br><span class="line">                                    endPoint: .bottom</span><br><span class="line">                                )</span><br><span class="line">                            )</span><br><span class="line">                            .cornerRadius(<span class="number">22.5</span>)</span><br><span class="line">                        </span><br><span class="line">                            <span class="comment">// 添加点击手势</span></span><br><span class="line">                            .onTapGesture &#123;</span><br><span class="line">                                <span class="keyword">self</span>.selectedDayIndex <span class="operator">=</span> index <span class="comment">// 更新选中的索引</span></span><br><span class="line">                                <span class="keyword">if</span> <span class="keyword">let</span> selectedDate <span class="operator">=</span> <span class="keyword">self</span>.calendar.date(byAdding: .day, value: index, to: <span class="type">Date</span>()) &#123;</span><br><span class="line">                                    <span class="keyword">self</span>.onDateSelected<span class="operator">?</span>(selectedDate) <span class="comment">// 调用闭包，并传递选中的日期</span></span><br><span class="line">                                &#125;</span><br><span class="line">                                </span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    .cornerRadius(<span class="number">22.5</span>) <span class="comment">// 设置VStack的圆角</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .padding(.top, <span class="number">20</span>) <span class="comment">// 设置顶部内边距</span></span><br><span class="line">        &#125;.padding([.leading,.trailing],<span class="number">20</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">dayName</span>(<span class="params">for</span> <span class="params">index</span>: <span class="type">Int</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> currentDate <span class="operator">=</span> calendar.date(byAdding: .day, value: index, to: <span class="type">Date</span>()) <span class="operator">??</span> <span class="type">Date</span>()</span><br><span class="line">        <span class="keyword">return</span> dateFormatter.string(from: currentDate) <span class="comment">// 获取星期几的缩写文本</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">dayNumber</span>(<span class="params">for</span> <span class="params">index</span>: <span class="type">Int</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> currentDate <span class="operator">=</span> calendar.date(byAdding: .day, value: index, to: <span class="type">Date</span>()) <span class="operator">??</span> <span class="type">Date</span>()</span><br><span class="line">        <span class="keyword">let</span> day <span class="operator">=</span> calendar.component(.day, from: currentDate) <span class="comment">// 获取日期的天数部分</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;<span class="subst">\(day)</span>&quot;</span> <span class="comment">// 将天数转换为字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">gradientColors</span>(<span class="params">for</span> <span class="params">index</span>: <span class="type">Int</span>) -&gt; [<span class="type">Color</span>] &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.selectedDayIndex <span class="operator">==</span> index &#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="type">Color</span>(red: <span class="number">142</span><span class="operator">/</span><span class="number">255</span>, green: <span class="number">150</span><span class="operator">/</span><span class="number">255</span>, blue: <span class="number">255</span><span class="operator">/</span><span class="number">255</span>),</span><br><span class="line">                <span class="type">Color</span>(red: <span class="number">108</span><span class="operator">/</span><span class="number">255</span>, green: <span class="number">93</span><span class="operator">/</span><span class="number">255</span>, blue: <span class="number">211</span><span class="operator">/</span><span class="number">255</span>)</span><br><span class="line">            ] <span class="comment">// 如果选中，返回选中时的渐变色</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="type">Color</span>.clear,</span><br><span class="line">                <span class="type">Color</span>.clear</span><br><span class="line">            ] <span class="comment">// 如果未选中，返回透明颜色</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//TargetView.swift</span></span><br><span class="line"><span class="comment">//这里只是部分代码，在网页一开始初始化的代码没有不一样，所以只给个关键部分</span></span><br><span class="line"><span class="type">TargetNav1View</span>(onDateSelected: &#123; selectedDate <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>targetWithTime.count &#123;</span><br><span class="line">        targetDateInfo.append(<span class="type">TargetDateInfo</span>(dayDifference: <span class="number">0</span>, timeString: <span class="string">&quot;&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> calendar <span class="operator">=</span> <span class="type">Calendar</span>.current</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="keyword">self</span>.targetWithTime.count &#123;</span><br><span class="line">        <span class="built_in">print</span>(index)</span><br><span class="line">        <span class="keyword">let</span> dateFormatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">        <span class="comment">// 给出将String类型转化为Date类型的格式</span></span><br><span class="line">        dateFormatter.dateFormat <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将deadline字符串转换为日期对象</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> deadlineDate <span class="operator">=</span> dateFormatter.date(from: <span class="keyword">self</span>.targetWithTime[index].deadline<span class="operator">!</span>),</span><br><span class="line">            <span class="keyword">let</span> startDate <span class="operator">=</span> calendar.date(bySettingHour: <span class="number">0</span>, minute: <span class="number">0</span>, second: <span class="number">0</span>, of: selectedDate) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;startDate:&quot;</span>,startDate)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 获取目标日期的月份和日子</span></span><br><span class="line">            <span class="keyword">let</span> deadlineComponents <span class="operator">=</span> calendar.dateComponents([.month, .day], from: deadlineDate)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 获取选定日期的月份和日子</span></span><br><span class="line">            <span class="keyword">let</span> selectedComponents <span class="operator">=</span> calendar.dateComponents([.month, .day], from: startDate)</span><br><span class="line">              </span><br><span class="line">            <span class="comment">// 用calendar.dateComponents(_:from:to:)来计算目标日期和选定日期的月份和日子的差异。这样，您就可以得到只有月份和日子的差异，而不考虑时间部分的影响。</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> dayDifference <span class="operator">=</span> calendar.dateComponents([.day], from: selectedComponents, to: deadlineComponents).day &#123;</span><br><span class="line">                <span class="keyword">self</span>.dayDifference <span class="operator">=</span> dayDifference</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;index:&quot;</span>,index)</span><br><span class="line">                targetDateInfo[index].dayDifference <span class="operator">=</span> dayDifference</span><br><span class="line">                targetDateInfo[index].timeString <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> dayDifference <span class="operator">&lt;</span> <span class="number">0</span> &#123;</span><br><span class="line">                    <span class="comment">// 相差小于0天，显示截止时间的月份和日子</span></span><br><span class="line">                    <span class="keyword">let</span> monthDayFormatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">                    monthDayFormatter.dateFormat <span class="operator">=</span> <span class="string">&quot;MM.dd&quot;</span></span><br><span class="line">                    <span class="keyword">let</span> monthDayString <span class="operator">=</span> monthDayFormatter.string(from: deadlineDate)</span><br><span class="line">                    <span class="keyword">self</span>.monthDayString <span class="operator">=</span> monthDayString</span><br><span class="line">                    targetDateInfo[index].timeString <span class="operator">=</span> monthDayString</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Month and Day: <span class="subst">\(monthDayString)</span>&quot;</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> dayDifference <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">                    <span class="comment">// 相差等于0天，显示截止时间的时间部分</span></span><br><span class="line">                    <span class="keyword">let</span> timeFormatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">                    timeFormatter.dateFormat <span class="operator">=</span> <span class="string">&quot;HH:mm&quot;</span></span><br><span class="line">                    <span class="keyword">let</span> timeString <span class="operator">=</span> timeFormatter.string(from: deadlineDate)</span><br><span class="line">                    <span class="keyword">self</span>.timeString <span class="operator">=</span> timeString</span><br><span class="line">                    targetDateInfo[index].timeString <span class="operator">=</span> timeString</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Time: <span class="subst">\(timeString)</span>&quot;</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> dayDifference <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Day difference: <span class="subst">\(dayDifference)</span>&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三种Picker"><a href="#三种Picker" class="headerlink" title="三种Picker"></a>三种Picker</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一列Picker</span></span><br><span class="line">.sheet(isPresented: <span class="variable">$showScorePicker</span>) &#123;</span><br><span class="line">    <span class="type">Picker</span>(<span class="string">&quot;分数&quot;</span>, selection: <span class="variable">$selectedScore</span>) &#123;</span><br><span class="line">        <span class="type">ForEach</span>(<span class="number">1</span><span class="operator">...</span><span class="number">8</span>, id: \.<span class="keyword">self</span>) &#123; score <span class="keyword">in</span></span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\(score)</span> Point&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .pickerStyle(<span class="type">WheelPickerStyle</span>())</span><br><span class="line">  <span class="comment">//控制sheet的弹出的高度和允许用户拖拽到的位置</span></span><br><span class="line">    .presentationDetents([.fraction(<span class="number">0.4</span>),.medium,.large])</span><br><span class="line">    .edgesIgnoringSafeArea(.all)</span><br><span class="line">    </span><br><span class="line">    <span class="type">Button</span> &#123;</span><br><span class="line">        showScorePicker.toggle()</span><br><span class="line">    &#125;label: &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;完成&quot;</span>)</span><br><span class="line">            .foregroundColor(<span class="type">Color</span>.white)</span><br><span class="line">    &#125;</span><br><span class="line">        .frame(width: <span class="number">100</span>,height: <span class="number">40</span>)</span><br><span class="line">        .background(<span class="type">Color</span>.indigo)</span><br><span class="line">        .cornerRadius(<span class="number">12</span>)</span><br><span class="line">        .padding(.top,<span class="number">30</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两列Picker</span></span><br><span class="line">.sheet(isPresented: <span class="variable">$showDatePicker</span>) &#123;</span><br><span class="line">    <span class="type">VStack</span> &#123;</span><br><span class="line">        <span class="type">DatePicker</span>(</span><br><span class="line">            selection: <span class="variable">$selectedDate</span>,</span><br><span class="line">            in: <span class="type">Date</span>()<span class="operator">...</span></span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;选择时间&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .datePickerStyle(<span class="type">GraphicalDatePickerStyle</span>())</span><br><span class="line">        .labelsHidden()</span><br><span class="line">        .presentationDetents([.fraction(<span class="number">0.6</span>), .large])</span><br><span class="line">        .edgesIgnoringSafeArea(.all)</span><br><span class="line">        </span><br><span class="line">        <span class="type">Button</span> &#123;</span><br><span class="line">            showDatePicker.toggle()</span><br><span class="line">            deadlineString <span class="operator">=</span> dateFormatter.string(from: selectedDate)</span><br><span class="line">        &#125; label: &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;完成&quot;</span>)</span><br><span class="line">                .foregroundColor(<span class="type">Color</span>.white)</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(width: <span class="number">100</span>, height: <span class="number">40</span>)</span><br><span class="line">        .background(<span class="type">Color</span>.indigo)</span><br><span class="line">        .cornerRadius(<span class="number">12</span>)</span><br><span class="line">        .padding(.top, <span class="number">30</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    .padding()</span><br><span class="line">    .background(<span class="type">Color</span>.white)</span><br><span class="line">    .cornerRadius(<span class="number">15</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DatePicker</span></span><br><span class="line">.sheet(isPresented: <span class="variable">$showDatePicker</span>) &#123;</span><br><span class="line">    <span class="type">VStack</span> &#123;</span><br><span class="line">        <span class="type">DatePicker</span>(</span><br><span class="line">            selection: <span class="variable">$selectedDate</span>,</span><br><span class="line">            in: <span class="type">Date</span>()<span class="operator">...</span></span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;选择时间&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//通过这个修饰符出来的样式是好看的</span></span><br><span class="line">        .datePickerStyle(<span class="type">GraphicalDatePickerStyle</span>())</span><br><span class="line">        .labelsHidden()</span><br><span class="line">        .presentationDetents([.fraction(<span class="number">0.6</span>),.large])</span><br><span class="line">            .edgesIgnoringSafeArea(.all)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="type">Button</span> &#123;</span><br><span class="line">            showDatePicker.toggle()</span><br><span class="line">        &#125;label: &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;完成&quot;</span>)</span><br><span class="line">                .foregroundColor(<span class="type">Color</span>.white)</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(width: <span class="number">100</span>,height: <span class="number">40</span>)</span><br><span class="line">        .background(<span class="type">Color</span>.indigo)</span><br><span class="line">        .cornerRadius(<span class="number">12</span>)</span><br><span class="line">        .padding(.top,<span class="number">30</span>)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    .padding()</span><br><span class="line">    .background(<span class="type">Color</span>.white)</span><br><span class="line">    .cornerRadius(<span class="number">15</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="崩溃总结"><a href="#崩溃总结" class="headerlink" title="崩溃总结"></a>崩溃总结</h3><p>因为swiftui的崩溃日志实在是难以读懂，所以根据经验总结了一下崩溃的原因</p><p>首先是数组越界问题，比如说常见的remove之后，还在用index去访问数组的元素，就会导致数组越界，所以看来还是避免使用index下标去访问数组元素，还要注意获取数据和使用数据的先后</p><p>其次是拆包问题，常见于处理后端数据的时候，后端传进来的数据可能为空，但是我们并没有使用可选型去接收这个参数，就会导致崩溃 的产生</p><h3 id="点击更换样式"><a href="#点击更换样式" class="headerlink" title="点击更换样式"></a>点击更换样式</h3><p>利用onTapGesture通过点击更换index，再使用三元运算符判断更改样式</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TargetNav1View</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> selectedDate: <span class="type">Date</span><span class="operator">=</span><span class="type">Date</span>() <span class="comment">// 接收初始日期的参数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> calendar <span class="operator">=</span> <span class="type">Calendar</span>.current</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> dateFormatter: <span class="type">DateFormatter</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> formatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">        formatter.dateFormat <span class="operator">=</span> <span class="string">&quot;E&quot;</span> <span class="comment">// 日期格式化器，用于获取星期几的缩写</span></span><br><span class="line">        <span class="keyword">return</span> formatter</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> selectedDayIndex <span class="operator">=</span> <span class="number">0</span> <span class="comment">// 当前选中的VStack索引</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> onDateSelected: ((<span class="type">Date</span>) -&gt; <span class="type">Void</span>)<span class="operator">?</span> <span class="comment">// 用于接收选中日期的闭包</span></span><br><span class="line">    <span class="comment">// 初始化时执行计算逻辑</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ScrollView</span>(.horizontal, showsIndicators: <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="type">HStack</span>(spacing: <span class="number">18</span>) &#123;</span><br><span class="line">                <span class="type">ForEach</span>(<span class="number">0</span><span class="operator">..&lt;</span><span class="number">30</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">                    <span class="type">VStack</span> &#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="keyword">self</span>.dayName(for: index))</span><br><span class="line">                            .foregroundColor(</span><br><span class="line">                                <span class="keyword">self</span>.selectedDayIndex <span class="operator">==</span> index <span class="operator">?</span> .black : .secondary</span><br><span class="line">                            )</span><br><span class="line">                            .font(.system(size: <span class="number">12</span>)) <span class="comment">// 设置星期几文本的字体大小</span></span><br><span class="line">                        <span class="type">Text</span>(<span class="keyword">self</span>.dayNumber(for: index))</span><br><span class="line">                            .frame(width: <span class="number">36</span>, height: <span class="number">36</span>)</span><br><span class="line">                            .foregroundColor(<span class="type">Color</span>(rgba: (<span class="number">207</span>, <span class="number">200</span>, <span class="number">255</span>, <span class="number">1</span>)))</span><br><span class="line">                            .background(</span><br><span class="line">                                <span class="type">LinearGradient</span>(</span><br><span class="line">                                    gradient: <span class="type">Gradient</span>(</span><br><span class="line">                                        colors: <span class="keyword">self</span>.gradientColors(for: index)</span><br><span class="line">                                    ),</span><br><span class="line">                                    startPoint: .top,</span><br><span class="line">                                    endPoint: .bottom</span><br><span class="line">                                )</span><br><span class="line">                            )</span><br><span class="line">                            .cornerRadius(<span class="number">22.5</span>)</span><br><span class="line">                        </span><br><span class="line">                            <span class="comment">// 添加点击手势</span></span><br><span class="line">                            .onTapGesture &#123;</span><br><span class="line">                                <span class="keyword">self</span>.selectedDayIndex <span class="operator">=</span> index <span class="comment">// 更新选中的索引</span></span><br><span class="line">                                <span class="keyword">if</span> <span class="keyword">let</span> selectedDate <span class="operator">=</span> <span class="keyword">self</span>.calendar.date(byAdding: .day, value: index, to: <span class="type">Date</span>()) &#123;</span><br><span class="line">                                    <span class="keyword">self</span>.onDateSelected<span class="operator">?</span>(selectedDate) <span class="comment">// 调用闭包，并传递选中的日期</span></span><br><span class="line">                                &#125;</span><br><span class="line">                                </span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    .cornerRadius(<span class="number">22.5</span>) <span class="comment">// 设置VStack的圆角</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .padding(.top, <span class="number">20</span>) <span class="comment">// 设置顶部内边距</span></span><br><span class="line">        &#125;.padding([.leading,.trailing],<span class="number">20</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">dayName</span>(<span class="params">for</span> <span class="params">index</span>: <span class="type">Int</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> currentDate <span class="operator">=</span> calendar.date(byAdding: .day, value: index, to: <span class="type">Date</span>()) <span class="operator">??</span> <span class="type">Date</span>()</span><br><span class="line">        <span class="keyword">return</span> dateFormatter.string(from: currentDate) <span class="comment">// 获取星期几的缩写文本</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">dayNumber</span>(<span class="params">for</span> <span class="params">index</span>: <span class="type">Int</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> currentDate <span class="operator">=</span> calendar.date(byAdding: .day, value: index, to: <span class="type">Date</span>()) <span class="operator">??</span> <span class="type">Date</span>()</span><br><span class="line">        <span class="keyword">let</span> day <span class="operator">=</span> calendar.component(.day, from: currentDate) <span class="comment">// 获取日期的天数部分</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;<span class="subst">\(day)</span>&quot;</span> <span class="comment">// 将天数转换为字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">gradientColors</span>(<span class="params">for</span> <span class="params">index</span>: <span class="type">Int</span>) -&gt; [<span class="type">Color</span>] &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.selectedDayIndex <span class="operator">==</span> index &#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="type">Color</span>(red: <span class="number">142</span><span class="operator">/</span><span class="number">255</span>, green: <span class="number">150</span><span class="operator">/</span><span class="number">255</span>, blue: <span class="number">255</span><span class="operator">/</span><span class="number">255</span>),</span><br><span class="line">                <span class="type">Color</span>(red: <span class="number">108</span><span class="operator">/</span><span class="number">255</span>, green: <span class="number">93</span><span class="operator">/</span><span class="number">255</span>, blue: <span class="number">211</span><span class="operator">/</span><span class="number">255</span>)</span><br><span class="line">            ] <span class="comment">// 如果选中，返回选中时的渐变色</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="type">Color</span>.clear,</span><br><span class="line">                <span class="type">Color</span>.clear</span><br><span class="line">            ] <span class="comment">// 如果未选中，返回透明颜色</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取到数据后再显示页面"><a href="#获取到数据后再显示页面" class="headerlink" title="获取到数据后再显示页面"></a>获取到数据后再显示页面</h3><p>这个例子运用的场景，在页面一加载就需要显示的数据，那么这个时候异步执行的网络请求方法，还没有获取到数据，这时候视图上获取数据就会获取不到，或者直接数据越界（因为我们一般数据设置为空数组[ ]），</p><p>有三种方法解决，第一种比如说为数据赋初值，这样项目就不会崩溃了，但是就像前面说的这时候还没有获取到数据，那么页面就会一闪而过一个奇怪的数据，</p><p>所以使用第二种方法，在异步执行的网络请求方法完成后，在方法里赋值isDataLoaded代表数据加载完成，并把isDataLoaded作为if的条件，为true再显示页面，虽然其实页面会显示的慢一点，但是这点时间用户看不出来，是比较好的选择，</p><p>还有第三种方法，比如说之前我在微信小程序里，通过在该页面的前一个页面，提前获取到数据，然后再传递给该页面，就可以到达一样的效果，唯一比较麻烦的是一般这样出现在登录界面，就需要进行多种数据的获取，会导致一定的卡顿</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> isDataLoaded&#123;</span><br><span class="line">  <span class="comment">//数据加载完成后显示页面</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">fetchTagData</span>() &#123;</span><br><span class="line">    tagDataManager.fetchTagData &#123; fetchedData, error <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> fetchedData <span class="operator">=</span> fetchedData &#123;</span><br><span class="line">            tagWithTime <span class="operator">=</span> fetchedData</span><br><span class="line">            tagNum<span class="operator">=</span>tagWithTime.count</span><br><span class="line">            <span class="keyword">if</span> tagWithTime[<span class="number">0</span>].ifTagNull<span class="operator">==</span><span class="string">&quot;1&quot;</span>&#123;</span><br><span class="line">                ifshowTagDetailBNull<span class="operator">=</span><span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">print</span>(tagWithTime)</span><br><span class="line">            isDataLoaded <span class="operator">=</span> <span class="literal">true</span>  <span class="comment">// 数据加载完成</span></span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error fetching data: <span class="subst">\(error<span class="operator">?</span>.localizedDescription <span class="operator">??</span> <span class="string">&quot;Unknown error&quot;</span>)</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义倒计时器"><a href="#自定义倒计时器" class="headerlink" title="自定义倒计时器"></a>自定义倒计时器</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">startCountdown</span>() &#123;</span><br><span class="line">    <span class="comment">// 计算初始的剩余时间（秒数）</span></span><br><span class="line">    <span class="keyword">let</span> hoursInSeconds <span class="operator">=</span> (<span class="type">Int</span>(tagWithTime[selectedTagIndex].tagHour<span class="operator">!</span>) <span class="operator">??</span> <span class="number">1</span>) <span class="operator">*</span> <span class="number">3600</span></span><br><span class="line">    <span class="keyword">let</span> minutesInSeconds <span class="operator">=</span> (<span class="type">Int</span>(tagWithTime[selectedTagIndex].tagMinute<span class="operator">!</span>) <span class="operator">??</span> <span class="number">30</span>) <span class="operator">*</span> <span class="number">60</span></span><br><span class="line">    remainingTimeInSeconds <span class="operator">=</span> <span class="type">TimeInterval</span>(hoursInSeconds <span class="operator">+</span> minutesInSeconds)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建定时器</span></span><br><span class="line">    countdownTimer <span class="operator">=</span> <span class="type">Timer</span>.scheduledTimer(withTimeInterval: <span class="number">1</span>, repeats: <span class="literal">true</span>) &#123; timer <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> remainingTimeInSeconds <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            remainingTimeInSeconds <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timer.invalidate() <span class="comment">// 倒计时结束，停止定时器</span></span><br><span class="line">            <span class="comment">// 进行倒计时结束后的操作，例如显示提示信息</span></span><br><span class="line">            time<span class="operator">=</span><span class="literal">true</span></span><br><span class="line">            timeStop<span class="operator">=</span><span class="literal">false</span></span><br><span class="line">            finishTag(tagName: tagWithTime[selectedTagIndex].tagName<span class="operator">!</span>)</span><br><span class="line">            userData.point<span class="operator">+=</span><span class="type">Int</span>(tagWithTime[selectedTagIndex].tagPoint<span class="operator">!</span>)<span class="operator">!</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="swiftui基础"><a href="#swiftui基础" class="headerlink" title="swiftui基础"></a>swiftui基础</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>可以通过[结构体]的方式，来定义数组</p><p>注意在通过targetDateInfo[index].dayDifference去添加数组的时候，需要先初始化好targetDateInfo，不然index会使targetDateInfo越界，之前在Vue里面经常直接使用push的方法，所以忘记了这点</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TargetDateInfo</span> &#123;</span><br><span class="line">     <span class="keyword">var</span> dayDifference: <span class="type">Int</span></span><br><span class="line">     <span class="keyword">var</span> timeString: <span class="type">String</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> targetDateInfo:[<span class="type">TargetDateInfo</span>]<span class="operator">=</span>[]</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数组</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>targetWithTime.count &#123;</span><br><span class="line">    targetDateInfo.append(<span class="type">TargetDateInfo</span>(dayDifference: <span class="number">0</span>, timeString: <span class="string">&quot;&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="keyword">self</span>.targetWithTime.count &#123;</span><br><span class="line">                    </span><br><span class="line">    <span class="keyword">let</span> dateFormatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">    <span class="comment">//给出将String类型转化为Date类型的格式</span></span><br><span class="line">    dateFormatter.dateFormat <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将deadline字符串转换为日期对象</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> deadlineDate <span class="operator">=</span> dateFormatter.date(from: <span class="keyword">self</span>.targetWithTime[index].deadline<span class="operator">!</span>),</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 将选中日期的时间部分设置为0小时、0分钟、0秒</span></span><br><span class="line">       <span class="comment">// 这样就可以忽略小时和分钟对日期差的干扰</span></span><br><span class="line">        <span class="keyword">let</span> startDate <span class="operator">=</span> <span class="type">Calendar</span>.current.date(bySettingHour: <span class="number">0</span>, minute: <span class="number">0</span>, second: <span class="number">0</span>, of: selectedDate) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;startDate:&quot;</span>,startDate)</span><br><span class="line">        <span class="keyword">let</span> calendar <span class="operator">=</span> <span class="type">Calendar</span>.current</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算日期差异，仅关注日期部分</span></span><br><span class="line">        <span class="comment">// 这里获取到的是包含天数的完整天数相差信息(components)</span></span><br><span class="line">        <span class="keyword">let</span> components <span class="operator">=</span> calendar.dateComponents([.day], from: startDate, to: deadlineDate)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 这里获取到的才是天数差(components.day)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> dayDifference <span class="operator">=</span> components.day &#123;</span><br><span class="line">            <span class="keyword">self</span>.dayDifference<span class="operator">=</span>dayDifference</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;index:&quot;</span>,index)</span><br><span class="line">            targetDateInfo[index].dayDifference<span class="operator">=</span>dayDifference</span><br><span class="line">            targetDateInfo[index].timeString<span class="operator">=</span><span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">if</span> dayDifference <span class="operator">&lt;=</span> <span class="number">0</span> &#123;</span><br><span class="line">                <span class="comment">// 相差小于0天，显示截止时间的时间部分</span></span><br><span class="line">                <span class="keyword">let</span> timeFormatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">                timeFormatter.dateFormat <span class="operator">=</span> <span class="string">&quot;HH:mm&quot;</span></span><br><span class="line">                <span class="keyword">let</span> timeString <span class="operator">=</span> timeFormatter.string(from: deadlineDate)</span><br><span class="line">                <span class="keyword">self</span>.timeString<span class="operator">=</span>timeString</span><br><span class="line">                targetDateInfo[index].timeString<span class="operator">=</span>timeString</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Time: <span class="subst">\(timeString)</span>&quot;</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Day difference: <span class="subst">\(dayDifference)</span>&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="状态（-State、-StateObject）"><a href="#状态（-State、-StateObject）" class="headerlink" title="状态（@State、@StateObject）"></a>状态（@State、@StateObject）</h3><p>@StateObject在跟踪类&#x2F;结构体内的属性变化时使用</p><p>SwiftUI的状态能够使body在状态改变时重新渲染（相当于Vue里）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> alertIsVisible:<span class="type">Bool</span><span class="operator">=</span><span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(action: &#123;</span><br><span class="line">                <span class="keyword">self</span>.alertIsVisible<span class="operator">=</span><span class="literal">true</span></span><br><span class="line">            &#125;) &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;点我&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">//注意这个$alertIsVisible前面的$意味着binding(双向绑定)</span></span><br><span class="line">           .alert(isPresented: <span class="variable">$alertIsVisible</span> , content: &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">&quot;你好&quot;</span>),message: </span><br><span class="line">                             <span class="type">Text</span>(<span class="string">&quot;这是弹窗&quot;</span>),dismissButton: .</span><br><span class="line">                             <span class="keyword">default</span>(<span class="type">Text</span>(<span class="string">&quot;好好好 &quot;</span>)))</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绑定（-Binding）"><a href="#绑定（-Binding）" class="headerlink" title="绑定（@Binding）"></a>绑定（@Binding）</h3><p>其实就是绑定传入的值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DrawerMenu</span>(isDrawerOpen: <span class="variable">$ifShowMenu</span>, ifShowTarget: <span class="variable">$ifShowTarget</span>)</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DrawerMenu</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> isDrawerOpen: <span class="type">Bool</span></span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> ifShowTarget:<span class="type">Bool</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">      <span class="comment">//DrawerMenu视图里的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全局变量（-EnvironmentObject）"><a href="#全局变量（-EnvironmentObject）" class="headerlink" title="全局变量（@EnvironmentObject）"></a>全局变量（@EnvironmentObject）</h3><p>定义一个实现ObservableObject协议的类，需要跟踪的数值使用@Published 修饰</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  UserDataManager.swift</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserData</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> userEmail: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过.envrionmentObject(对象)将一个对象放置到环境中</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  HabeetApp.swift</span></span><br><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HabeetApp</span>: <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="meta">@StateObject</span> <span class="keyword">private</span> <span class="keyword">var</span> userData <span class="operator">=</span> <span class="type">UserData</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">ContentView</span>()</span><br><span class="line">                .environmentObject(userData)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在view中使用这个对象,@EnvironmentObject修饰对象</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  HomeView.swift</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HomeView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">  <span class="meta">@EnvironmentObject</span> <span class="keyword">private</span> <span class="keyword">var</span> userData: <span class="type">UserData</span></span><br><span class="line">  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">TextField</span>(<span class="string">&quot;请输入邮箱&quot;</span>, text: <span class="variable">$userData</span>.userEmail)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，如果预览没有.envrionmentObject()设置环境中的对象，程序就会崩溃，包括导航到需要用的视图</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView_Previews</span>: <span class="title class_">PreviewProvider</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ContentView</span>().environmentObject(<span class="type">UserData</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HomeView_Previews</span>: <span class="title class_">PreviewProvider</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HomeView</span>().environmentObject(<span class="type">UserData</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="单元测试（Unit-Text）"><a href="#单元测试（Unit-Text）" class="headerlink" title="单元测试（Unit Text）"></a>单元测试（Unit Text）</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> XCTest</span><br><span class="line"><span class="keyword">@testable</span> <span class="keyword">import</span> Habeet</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">HabeetTests</span>: <span class="title class_">XCTestCase</span> &#123;</span><br><span class="line">    <span class="comment">//在一开始启动时，game可能为空，但是setup里game肯定是有值的，所以定义为可选类型（！）</span></span><br><span class="line">    <span class="keyword">var</span> game:<span class="type">Game</span>!</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">setUpWithError</span>() <span class="keyword">throws</span> &#123;</span><br><span class="line">        game<span class="operator">=</span><span class="type">Game</span>()</span><br><span class="line">        <span class="comment">// Put setup code here. This method is called before the invocation of each test method in the class.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">tearDownWithError</span>() <span class="keyword">throws</span> &#123;</span><br><span class="line">        game<span class="operator">=</span><span class="literal">nil</span></span><br><span class="line">        <span class="comment">// Put teardown code here. This method is called after the invocation of each test method in the class.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">testExample</span>() <span class="keyword">throws</span> &#123;</span><br><span class="line">      <span class="comment">//断言测试（Assert）</span></span><br><span class="line">        <span class="type">XCTAssertEqual</span>(game.points(sliderValue: <span class="number">50</span>), <span class="number">999</span>)</span><br><span class="line">        <span class="comment">// This is an example of a functional test case.</span></span><br><span class="line">        <span class="comment">// Use XCTAssert and related functions to verify your tests produce the correct results.</span></span><br><span class="line">        <span class="comment">// Any test you write for XCTest can be annotated as throws and async.</span></span><br><span class="line">        <span class="comment">// Mark your test throws to produce an unexpected failure when your test encounters an uncaught error.</span></span><br><span class="line">        <span class="comment">// Mark your test async to allow awaiting for asynchronous code to complete. Check the results with assertions afterwards.</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//性能实例一般用不到</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">testPerformanceExample</span>() <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="comment">// This is an example of a performance test case.</span></span><br><span class="line">        <span class="keyword">self</span>.measure &#123;</span><br><span class="line">            <span class="comment">// Put the code you want to measure the time of here.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ProjectRoot</span><br><span class="line">├── Views</span><br><span class="line">│   ├── ContentView.swift</span><br><span class="line">│   ├── MainContent.swift</span><br><span class="line">│   ├── DrawerMenu.swift</span><br><span class="line">│   ├── TargetView.swift</span><br><span class="line">│   └── ...other <span class="keyword">view</span> files</span><br><span class="line">├── Extensions</span><br><span class="line">│   ├── Color<span class="operator">+</span>Extensions.swift</span><br><span class="line">│   ├── <span class="keyword">View</span><span class="operator">+</span>Extensions.swift</span><br><span class="line">├──   └── ...other extension files</span><br><span class="line">├── Helpers</span><br><span class="line">│   ├── Constants.swift</span><br><span class="line">│   └── ...other helper files</span><br><span class="line">└── Models</span><br><span class="line">    ├── Target.swift</span><br><span class="line">    └── ...other model files</span><br></pre></td></tr></table></figure><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>建立新的 Swift 文件：command+N</p><p>将视图包含进 VStack、HStack、ZStack：选中视图+command（Embed in xxx）</p><p>要將存放代码的 VStack、HStack、ZStack 提取出来（新的stuck）：选中视图+command  (Extract Subview)</p><p>插入不同视图：command+Shift+L（选中后可以用鼠标拖拽到不同位置，同时不同位置也可以达成自动创建Stack的效果）</p><p>移动代码到 上一行&#x2F;下一行：option+command+[ &#x2F; ]</p><p>实机调试：command+R</p><p>刷新预览：option+command+P</p><p>查看视图内属性的详情：option+点击</p><p>只构建项目不调试：command+B</p><p>进行单元测试：command+U</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Habeet项目过程学习</title>
      <link href="/posts/a1c54708.html"/>
      <url>/posts/a1c54708.html</url>
      
        <content type="html"><![CDATA[<h1 id="Habeet项目过程学习"><a href="#Habeet项目过程学习" class="headerlink" title="Habeet项目过程学习"></a>Habeet项目过程学习</h1><h2 id="Habeet"><a href="#Habeet" class="headerlink" title="Habeet"></a>Habeet</h2><h3 id="微信一键登陆"><a href="#微信一键登陆" class="headerlink" title="微信一键登陆"></a>微信一键登陆</h3><p>设计的知识点有微信api的使用方法</p><p>难点在于我一开始以往常见过的小程序为例子，希望同时获取到用户的姓名和头像以及手机号，结果在大量搜索后，才发现微信官方收回了获取信息的接口以及获取手机号需要企业认证的小程序，浪费了不少时间</p><p>1.前端设置按钮，并使用uni.login获取到code，然后将这个code传到后端来获取用户唯一标识openid</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class=&quot;NavIcon&quot;&gt;</span><br><span class="line">&lt;view class=&quot;NavIcon1&quot; @click=&quot;QQLogin&quot;&gt;</span><br><span class="line">&lt;image src=&quot;@\static\NavIcon1.png&quot; style=&quot;width: 40rpx;height: 40rpx;&quot;&lt;/image&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;view class=&quot;NavIcon2&quot; @click=&quot;WxLogin&quot;&gt;</span><br><span class="line">&lt;image src=&quot;@\static\NavIcon2.png&quot; style=&quot;width: 52.8rpx;height: 55.74rpx;&quot;&gt;&lt;/image&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const WxLogin = () =&gt; &#123;</span><br><span class="line">uni.login(&#123;</span><br><span class="line">provider: &#x27;weixin&#x27;, //使用微信登录</span><br><span class="line">success: (loginRes) =&gt; &#123;</span><br><span class="line">user.data.code = loginRes.code</span><br><span class="line">uni.request(&#123;</span><br><span class="line">url: url + &#x27;/user/wxLogin&#x27;,</span><br><span class="line">method: &quot;POST&quot;,</span><br><span class="line">data: user.data.code,</span><br><span class="line">success: (res) =&gt; &#123;</span><br><span class="line">user.data.userEmail = res.data.data.openId</span><br><span class="line">console.log(res.data.data.openId)</span><br><span class="line">uni.request(&#123;</span><br><span class="line">url: url + &#x27;/user/home&#x27;,</span><br><span class="line">method: &quot;POST&quot;,</span><br><span class="line">data: user.data.userEmail,</span><br><span class="line">success: (res) =&gt; &#123;</span><br><span class="line">if (res.data.code != null) &#123;</span><br><span class="line">uni.redirectTo(&#123;</span><br><span class="line">url: &#x27;../../pages/Login/Login&#x27;</span><br><span class="line">&#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">uni.redirectTo(&#123;</span><br><span class="line">url: &#x27;../../pages/Wx/Wx&#x27;</span><br><span class="line">&#125;);</span><br><span class="line">user.data.ifUpdate = 0</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">//弹出来的提示信息</span><br><span class="line">uni.showToast(&#123;</span><br><span class="line">icon: &quot;none&quot;,</span><br><span class="line">title: &#x27;微信登陆中...&#x27;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2.后端接收到code，并给出appId和secret到微信提供的接口返，得到penid</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> RestResp&lt;UserRespDto&gt; <span class="title function_">wxLogin</span><span class="params">(String code)</span> &#123;</span><br><span class="line">    String authUrl=<span class="string">&quot;https://api.weixin.qq.com/sns/jscode2session?grant_type=authorization_code&quot;</span>;</span><br><span class="line">    String appId=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    String secret=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    authUrl=authUrl+<span class="string">&quot;&amp;appid=&quot;</span>+appId+<span class="string">&quot;&amp;secret=&quot;</span>+secret+<span class="string">&quot;&amp;js_code=&quot;</span>+code;</span><br><span class="line"></span><br><span class="line">    String result= HttpUtil.get(authUrl);</span><br><span class="line">    JSONObject jsonObject= JSONUtil.parseObj(result);</span><br><span class="line"></span><br><span class="line">    String openId=jsonObject.getStr(<span class="string">&quot;openid&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> RestResp.ok(UserRespDto.builder()</span><br><span class="line">            .openId(openId)</span><br><span class="line">            .build());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用户上传图片并回显"><a href="#用户上传图片并回显" class="headerlink" title="用户上传图片并回显"></a>用户上传图片并回显</h3><p>涉及的知识点有java后端文件上传服务器的操作，以及将文件存储为二进制流进入数据库，而后在前端再通过转化来回显文件</p><p>难点在于一开始我的思路是将文件上传到服务器之后，直接通过链接来访问，但是因为我是前后端分离的项目，而且需要使用合法域名，这点无法实现</p><p>1.用户选择图片需要一个选择框，这里使用了微信小程序自带的按钮（open-type&#x3D;”chooseAvatar” 可以获取用户的微信头像，@chooseavatar则是选中后触发的方法），并嵌套一个图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class=&quot;SignI&quot;&gt;</span><br><span class="line">&lt;text&gt;头像&lt;/text&gt;</span><br><span class="line">&lt;button class=&quot;avatar-wrapper&quot; open-type=&quot;chooseAvatar&quot; @chooseavatar=&quot;onChooseAvatar&quot;&gt;</span><br><span class="line">&lt;image :src=&quot;state.avatarUrl&quot; style=&quot;width: 100rpx;height: 100rpx;&quot; /&gt;</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>2.用户选择好图片后触发chooseavatar，然后在uploadFile()方法里上传微信返回的临时链接，其中uni.uploadFile将链接转化为文件传给后端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const onChooseAvatar = (e) =&gt; &#123;</span><br><span class="line">state.avatarUrl = e.detail.avatarUrl;</span><br><span class="line">uploadFile()</span><br><span class="line">&#125;</span><br><span class="line">const uploadFile = () =&gt; &#123;</span><br><span class="line">uni.uploadFile(&#123;</span><br><span class="line">url: url + &#x27;/user/uploadFile&#x27;, //后台接口</span><br><span class="line">filePath: state.avatarUrl, // 上传图片 url</span><br><span class="line">name: &#x27;file&#x27;,</span><br><span class="line">// formData: this.formData,</span><br><span class="line">header: &#123;</span><br><span class="line">&#x27;content-type&#x27;: &#x27;multipart/form-data&#x27;</span><br><span class="line">&#125;, // header 值</span><br><span class="line">success: (res) =&gt; &#123;</span><br><span class="line">const responseData = JSON.parse(res.data); // 解析JSON字符串为对象</span><br><span class="line">user.data.picData = responseData.data.picData</span><br><span class="line">state.avatarUrl = `data:image/jpeg;base64,$&#123;user.data.picData&#125;`//转化为链接</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>3.后端实现层使用MultipartFile[]类接收前端传来的文件，转换为二进制数据流并存入数据库，然后把文件存入服务器指定的位置上（突然发现其实可以不用存入服务器）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> RestResp&lt;UserRespDto&gt; <span class="title function_">uploadFile</span><span class="params">(MultipartFile[] files)</span> &#123;</span><br><span class="line">    String filePath=<span class="literal">null</span>;</span><br><span class="line">    String fileName;</span><br><span class="line">    String filePathAll=<span class="literal">null</span>;</span><br><span class="line">    <span class="type">byte</span>[] imageData=<span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 遍历上传的多个文件</span></span><br><span class="line">    <span class="keyword">for</span> (MultipartFile file : files) &#123;</span><br><span class="line">        <span class="comment">// 生成文件名：userEmail.jpg</span></span><br><span class="line">        fileName = userEmailAll+ <span class="string">&quot;.&quot;</span> + <span class="string">&quot;jpeg&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成文件保存路径</span></span><br><span class="line">        filePath = serverRootPath + fileName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将图片转换为二进制数据流（注意这个语句要先于transferTo，否则获取不到文件）</span></span><br><span class="line">            imageData = file.getBytes();</span><br><span class="line">            <span class="comment">// 将文件保存到服务器指定目录</span></span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将二进制数据流存入数据库</span></span><br><span class="line">            QueryWrapper&lt;User&gt;queryWrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">            queryWrapper.eq(<span class="string">&quot;user_email&quot;</span>,userEmailAll);</span><br><span class="line"></span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setPicData(imageData);</span><br><span class="line">            userDao.update(user,queryWrapper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 处理文件上传失败的情况</span></span><br><span class="line">            System.out.println(<span class="string">&quot;文件上传失败&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理文件上传成功的情况</span></span><br><span class="line">    <span class="keyword">return</span> RestResp.ok(UserRespDto.builder().picData(imageData).build());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.前端收到picData的数据开始回显图片(success的后半部分)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const onChooseAvatar = (e) =&gt; &#123;</span><br><span class="line">state.avatarUrl = e.detail.avatarUrl;</span><br><span class="line">uploadFile()</span><br><span class="line">&#125;</span><br><span class="line">const uploadFile = () =&gt; &#123;</span><br><span class="line">uni.uploadFile(&#123;</span><br><span class="line">url: url + &#x27;/user/uploadFile&#x27;, //后台接口</span><br><span class="line">filePath: state.avatarUrl, // 上传图片 url</span><br><span class="line">name: &#x27;file&#x27;,</span><br><span class="line">// formData: this.formData,</span><br><span class="line">header: &#123;</span><br><span class="line">&#x27;content-type&#x27;: &#x27;multipart/form-data&#x27;</span><br><span class="line">&#125;, // header 值</span><br><span class="line">success: (res) =&gt; &#123;</span><br><span class="line">const responseData = JSON.parse(res.data); // 解析JSON字符串为对象</span><br><span class="line">user.data.picData = responseData.data.picData</span><br><span class="line">state.avatarUrl = `data:image/jpeg;base64,$&#123;user.data.picData&#125;`//转化为链接</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Html-题目</title>
      <link href="/posts/34f09ce7.html"/>
      <url>/posts/34f09ce7.html</url>
      
        <content type="html"><![CDATA[<h1 id="Html-题目"><a href="#Html-题目" class="headerlink" title="Html-题目"></a>Html-题目</h1><h2 id="学校"><a href="#学校" class="headerlink" title="学校"></a>学校</h2><h3 id="第一章（html和css基础）"><a href="#第一章（html和css基础）" class="headerlink" title="第一章（html和css基础）"></a>第一章（html和css基础）</h3><p>(单选题)W3C（英文World Wide Web Consortium的缩写），中文译为“万维网联盟”是（  ）。</p><ul><li>A. 国际最著名的标准化组织</li><li>B. 欧洲计算机制造商协会</li><li>C. 中国计算机行业协会</li><li>D. 中国计算机学会</li></ul><p><em>我的答案:</em> A:国际最著名的标准化组织;<em>正确答案:</em> A:国际最著名的标准化组织;</p><p>(单选题)CSS的全称及中文译名分别是（ ）。</p><ul><li>A. Cading Style Sheet和层次样式表</li><li>B. Cascading Style Sheet和层次样式表</li><li>C. Cascading Style Sheet和层叠样式表</li><li>D. Cading Style Sheet和层叠样式表</li></ul><p><em>我的答案:</em> C:Cascading Style Sheet和层叠样式表;<em>正确答案:</em> C:Cascading Style Sheet和层叠样式表;</p><p>(单选题)我们一般所用的工作区布局方式是（ ）。</p><ul><li>A. 经典</li><li>B. 设计器</li><li>C. 流体布局</li><li>D. 编码器</li></ul><p><em>我的答案:</em> C:流体布局;<em>正确答案:</em> C:流体布局;</p><p>(单选题)次浏览器预览网页的快捷键是（ ）。 </p><ul><li>A. F12</li><li>B. Ctrl+F12</li><li>C. F10 </li><li>D. F11</li></ul><p> (多选题)Web标准并不是某一个标准，而是一系列标准的集合，主要包括（ ）。</p><ul><li>A. 结构标准</li><li>B. 表现标准</li><li>C. 行为标准</li><li>D. 制作标准</li></ul><p><em>我的答案:</em> ABC:结构标准; 表现标准; 行为标准;<em>正确答案:</em> ABC</p><p> (多选题)HTML响应式 Web 设计（Responsive Web Design）是一种网络页面设计布局的方法,其作用是（）。</p><ul><li>A. 能够以可变尺寸传递网页</li><li>B. 对于平板是必需的</li><li>C. 对于移动设备是必需的</li><li>D. 对于PC端是必需的</li></ul><p><em>我的答案:</em> ABC:能够以可变尺寸传递网页; 对于平板是必需的; 对于移动设备是必需的;<em>正确答案:</em> ABC:能够以可变尺寸传递网页; 对于平板是必需的; 对于移动设备是必需的;</p><h3 id="第二章（html基础）"><a href="#第二章（html基础）" class="headerlink" title="第二章（html基础）"></a>第二章（html基础）</h3><p> (单选题)以下方式哪个实现将水平线粗细设置为2，宽度设置为500px?</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A. <span class="tag">&lt;<span class="name">hr</span>  <span class="attr">font-size</span>=<span class="string">&quot;2&quot;</span>    <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> /&gt;</span></span><br><span class="line">B. <span class="tag">&lt;<span class="name">hr</span>  <span class="attr">size</span>=<span class="string">&quot;2&quot;</span>    <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> /&gt;</span></span><br><span class="line">C. <span class="tag">&lt;<span class="name">hr</span>  <span class="attr">font-size</span>=<span class="string">&quot;2&quot;</span>    <span class="attr">width</span>=<span class="string">&quot;500%&quot;</span> /&gt;</span></span><br><span class="line">D.<span class="tag">&lt;<span class="name">hr</span>  <span class="attr">size</span>=<span class="string">&quot;2&quot;</span>    <span class="attr">width</span>=<span class="string">&quot;500%&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><em>我的答案:</em> B</p><p>(单选题)如果想要使段落文本加粗倾斜，可以采用以下哪种方式？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- A. <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>一段文本<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">- B. <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>一段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">- C. <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>一段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">- D. <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>一段文本<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>我的答案:</em> D</p><p> (单选题)将某段文本应用font标记设置为微软雅黑，16px，是设置font标记中哪两个属性？（）</p><ul><li>A. face   font-size</li><li>B. font-family   font-size</li><li>C. font-family   size</li><li>D. face   size</li></ul><p><em>正确答案:</em> D</p><p> (单选题)HTML标记分为双标记和单标记，下面哪个选项中所有标记都属于单标记？（）</p><ul><li>A. 标题标记、图像标记、段落标记</li><li>B. 段落标记、图像标记、换行标记</li><li>C. 标题标记、换行标记、段落标记</li><li>D. 图像标记、换行标记、水平线标记</li></ul><p><em>我的答案:</em> D:图像标记、换行标记、水平线标记;</p><h3 id="单选题-以下哪个不是-img-x2F-标记的属性？"><a href="#单选题-以下哪个不是-img-x2F-标记的属性？" class="headerlink" title="(单选题)以下哪个不是 img&#x2F; 标记的属性？"></a>(单选题)以下哪个不是 img&#x2F; 标记的属性？</h3><ul><li>A. width</li><li>B. size</li><li>C. align</li><li>D. border</li></ul><p><em>我的答案:</em> B:size;</p><p>(单选题)(  )不属于元信息标记  meta&#x2F; 的属性。</p><ul><li>A. content</li><li>B. http-equiv</li><li>C. name</li><li>D. url</li></ul><p><em>我的答案:</em> D</p><p> (单选题)以下方式哪个能实现将<strong>段落</strong>设置为居中对齐？（）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- A. &lt; p align=&quot;left&quot;&gt;网页设计学院<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">- B. <span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>网页设计学院<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">- C.  <span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>网页设计学院<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">- D. <span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span>网页设计学院<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>我的答案:</em> C;</p><h3 id="单选题-下列哪些不属于图像标记-img-的属性？（）"><a href="#单选题-下列哪些不属于图像标记-img-的属性？（）" class="headerlink" title="(单选题)下列哪些不属于图像标记 img 的属性？（）"></a>(单选题)下列哪些不属于图像标记 img 的属性？（）</h3><ul><li>A. vspace</li><li>B. hspace</li><li>C. color</li><li>D. border</li></ul><p><em>我的答案:</em> C:color;</p><p>(单选题)文本”挥泪大甩卖，原价 260 ，现价 50 ！“中，“ 260 ”和“ 50“的效果可以用以下哪种方式实现？</p><ul><li>A. <del>260</del> <em>50</em></li><li>B. <del>260</del> <strong>50</strong></li><li>C. <ins>260</ins> <del>50</del> </li><li>D. <del>260</del> <ins>50</ins></li></ul><p><em>我的答案:</em> D;</p><p>(多选题)以下哪个标记能实现文本加下划线效果？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A. <span class="tag">&lt;<span class="name">s</span>&gt;</span><span class="tag">&lt;/<span class="name">s</span>&gt;</span> </span><br><span class="line">B. <span class="tag">&lt;<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line">C. <span class="tag">&lt;<span class="name">ins</span>&gt;</span>&lt;/ins &gt;</span><br><span class="line">D.<span class="tag">&lt;<span class="name">del</span>&gt;</span><span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>我的答案:</em> BC;</p><h3 id="文本格式化标记"><a href="#文本格式化标记" class="headerlink" title="文本格式化标记"></a>文本格式化标记</h3><table><thead><tr><th>语义</th><th>标签</th></tr></thead><tbody><tr><td>加粗</td><td>&lt; strong &gt;&lt; &#x2F;strong &gt;或者&lt; b&gt;&lt; &#x2F;b &gt;</td></tr><tr><td>倾斜</td><td>&lt; em &gt;&lt; &#x2F;em &gt;或者&lt; i &gt;&lt; &#x2F;i &gt;</td></tr><tr><td>删除线</td><td>&lt; del &gt;&lt; &#x2F;del &gt;或者&lt; s &gt;&lt; &#x2F;s &gt;</td></tr><tr><td>下划线</td><td>&lt; ins &gt;&lt; &#x2F;ins &gt;或者&lt; u &gt;&lt; &#x2F;u &gt;</td></tr></tbody></table><p>(多选题)以下哪些属于 meta&#x2F; 标记可以定义的页面参数？</p><ul><li>A. 内容的描述</li><li>B. 网页的刷新时间</li><li>C. 网页的关键字</li><li>D. 作者的姓名</li></ul><p><em>我的答案:</em> ACD:内容的描述; 网页的关键字; 作者的姓名;</p><h3 id="多选题-下面哪些是font标记的常用属性？"><a href="#多选题-下面哪些是font标记的常用属性？" class="headerlink" title="(多选题)下面哪些是font标记的常用属性？"></a>(多选题)下面哪些是font标记的常用属性？</h3><ul><li>A. color</li><li>B. size</li><li>C. align</li><li>D. face</li></ul><p><em>我的答案:</em> ABD:color; size; face;</p><h3 id="多选题-img-x2F-标记中align的属性值有以下哪几个？"><a href="#多选题-img-x2F-标记中align的属性值有以下哪几个？" class="headerlink" title="(多选题) img&#x2F; 标记中align的属性值有以下哪几个？"></a>(多选题) img&#x2F; 标记中align的属性值有以下哪几个？</h3><ul><li>A. top</li><li>B. bottom</li><li>C. middle</li><li>D. center</li><li>E. left</li><li>F. right</li></ul><p><em>我的答案:</em> ABCEF:top; bottom; middle; left; right;</p><h3 id="判断题-font-标记中可以再包含一个-font-标记，这个说法对吗？"><a href="#判断题-font-标记中可以再包含一个-font-标记，这个说法对吗？" class="headerlink" title="(判断题) font 标记中可以再包含一个 font 标记，这个说法对吗？"></a>(判断题) font 标记中可以再包含一个 font 标记，这个说法对吗？</h3><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 对</p><h3 id="【多选题】color属性用于定义文本的颜色，其正确取值有以下哪些方式-（）"><a href="#【多选题】color属性用于定义文本的颜色，其正确取值有以下哪些方式-（）" class="headerlink" title="【多选题】color属性用于定义文本的颜色，其正确取值有以下哪些方式?（）"></a>【多选题】color属性用于定义文本的颜色，其正确取值有以下哪些方式?（）</h3><ul><li><p>A、</p><p>red</p></li><li><p>B、</p><p>#FF0000</p></li><li><p>C、</p><p>rgb(255,0,0) </p></li><li><p>D、</p><p>rgb(100%,0%,0%)</p></li></ul><p>我的答案：ACD？ABC？</p><h2 id="第三章（css基础）"><a href="#第三章（css基础）" class="headerlink" title="第三章（css基础）"></a>第三章（css基础）</h2><p>【单选题】标签指定式选择器又称交集选择器，由两个选择器构成，其中第一个为标记选择器，第二个为class选择器或id选择器，以下合法的标签指定式选择器有（）？</p><ul><li><p>A、</p><p>h1.special </p></li><li><p>B、</p><p>p #one</p></li><li><p>C、</p><p> h1 #one </p></li><li><p>D、</p><p>p .special</p></li></ul><p>我的答案：A</p><h3 id="【单选题】下面（-）属性代表边框是单实线？"><a href="#【单选题】下面（-）属性代表边框是单实线？" class="headerlink" title="【单选题】下面（ ）属性代表边框是单实线？"></a>【单选题】下面（ ）属性代表边框是单实线？</h3><ul><li><p>A、</p><p>solid（单实线）</p></li><li><p>B、</p><p>dashed（虚线）</p></li><li><p>C、</p><p>dotted（点线）</p></li><li><p>D、</p><p>double（双实线）</p></li></ul><p>正确答案： A :solid;我的答案：A</p><h2 id="第四章（css盒模型）"><a href="#第四章（css盒模型）" class="headerlink" title="第四章（css盒模型）"></a>第四章（css盒模型）</h2><h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><p>【单选题】假设p标记盒子的width为210px，height为90px，边框宽度为8像素，设置盒子的内边距padding为15像素，外边距margin为20像素，则盒子的宽度是（）？</p><ul><li><p>A、</p><p>240px</p></li><li><p>B、</p><p>256px</p></li><li><p>C、</p><p>210px</p></li><li><p>D、</p><p>226px</p></li></ul><p>我的答案：B（实际上算出来应该是296px-40px&#x3D;256px,不用加margin）</p><p>【单选题】假设p标记盒子的width为210px，height为90px，边框宽度为8像素，设置盒子的内边距padding为15像素，外边距margin为20像素，则盒子在网页中所占的高度是（）？</p><ul><li><p>A、</p><p>106px</p></li><li><p>B、</p><p>146px</p></li><li><p>C、</p><p>176px</p></li><li><p>D、</p><p>90px</p></li></ul><p>我的答案：C</p><p>【单选题】假设p标记盒子的width为210px，height为90px，边框宽度为8像素，设置盒子的内边距padding为15像素，外边距margin为20像素，则盒子的高度是（）？</p><ul><li><p>A、</p><p>136px </p></li><li><p>B、</p><p>106px</p></li><li><p>C、</p><p>90px</p></li><li><p>D、</p><p>120px</p></li></ul><p>我的答案：A（不用加margin了）</p><p>【单选题】在普通文档流中（没有对元素应用浮动和定位），第一个盒子的下边距为20px，第二个盒子的上外边距为40px，则这两个盒子垂直间距是（  ）。</p><ul><li><p>A、</p><p>60px</p></li><li><p>B、</p><p>20px</p></li><li><p>C、</p><p>40px</p></li><li><p>D、</p><p>其他</p></li></ul><p>我的答案：A?</p><p>【单选题】当两个嵌套关系的块元素，设父元素无边框，上外边距为20px，子元素的上外边距为40px，在默认的情况下，父元素的上外边距为（  ）。</p><ul><li><p>A、</p><p>20px</p></li><li><p>B、</p><p>40px</p></li><li><p>C、</p><p>60px</p></li><li><p>D、</p><p>其他</p></li></ul><p>我的答案：A?</p><p>【单选题】当两个嵌套关系的块元素，设父元素无边框，上外边距为20px，子元素的上外边距为40px，当给父元素加上代码overflow:hidden;后，父元素的上外边距为（  ）。</p><ul><li><p>A、</p><p>20px</p></li><li><p>B、</p><p>40px</p></li><li><p>C、</p><p>60px</p></li><li><p>D、</p><p>其他</p></li></ul><p>我的答案：A</p><p>【多选题】如果希望嵌套块元素垂直外边距不合并，可以通过以下（  ）方法来解决这个问题。</p><ul><li><p>A、</p><p>给父盒子加边框（border）</p></li><li><p>B、</p><p>给父盒子样式加上overflow:hidden代码</p></li><li><p>C、</p><p>无法解决</p></li><li><p>D、</p><p>其他</p></li></ul><p>我的答案：AB</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>【单选题】下面哪一项不是网页中常用的列表（   ）？</p><ul><li><p>A、</p><p>无序列表</p></li><li><p>B、</p><p>有序列表</p></li><li><p>C、</p><p>排序列表</p></li><li><p>D、</p><p>定义列表</p></li></ul><p>我的答案：C</p><h4 id="【单选题】在CSS中，下面哪一项不属于list-style-position属性（-）"><a href="#【单选题】在CSS中，下面哪一项不属于list-style-position属性（-）" class="headerlink" title="【单选题】在CSS中，下面哪一项不属于list-style-position属性（   ）"></a>【单选题】在CSS中，下面哪一项不属于list-style-position属性（   ）</h4><ul><li><p>A、</p><p>用于控制列表项目符号的图像</p></li><li><p>B、</p><p>其取值有inside和outside两种</p></li><li><p>C、</p><p>inside：列表项目符号位于列表文本以内</p></li><li><p>D、</p><p>outside：列表项目符号位于列表文本以外</p></li></ul><p>我的答案：A</p><h4 id="【单选题】下面关于list-style哪一项描述是错误的（-）"><a href="#【单选题】下面关于list-style哪一项描述是错误的（-）" class="headerlink" title="【单选题】下面关于list-style哪一项描述是错误的（   ）"></a>【单选题】下面关于list-style哪一项描述是错误的（   ）</h4><ul><li><p>A、</p><p>list-style是用于综合设置列表样式</p></li><li><p>B、</p><p>其语法格式：list-style:列表项目符号 列表项目符号的位置 列表项目图像</p></li><li><p>C、</p><p>各个样式之间以冒号隔开</p></li><li><p>D、</p><p>不需要的样式可以省略</p></li></ul><p>我的答案：C</p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>【单选题】设置text-decoration属性的删除线的值为（    ）</p><ul><li><p>A、</p><p>underline</p></li><li><p>B、</p><p>overline</p></li><li><p>C、</p><p>line-through</p></li><li><p>D、</p><p>blink</p></li></ul><p>我的答案：C</p><p>【单选题】下列选项中，用于清除超链接默认的下划线的是（    ）</p><ul><li><p>A、</p><p>text-decoration:none </p></li><li><p>B、</p><p>text-decoration: underline </p></li><li><p>C、</p><p>text-decoration:overline </p></li><li><p>D、</p><p> text-decoration:line-through</p></li></ul><p>我的答案：A</p><h3 id="【单选题】下列选项中，属于“target”属性值的是（-）"><a href="#【单选题】下列选项中，属于“target”属性值的是（-）" class="headerlink" title="【单选题】下列选项中，属于“target”属性值的是（    ）"></a>【单选题】下列选项中，属于“target”属性值的是（    ）</h3><ul><li><p>A、</p><p>_double </p></li><li><p>B、</p><p>_self</p></li><li><p>C、</p><p>_new </p></li><li><p>D、</p><p> _black</p></li></ul><p>我的答案：B</p><p>target&#x3D;”view_window”：用于多个链接去同一个新页面中打开；打开一个新页面，所有使用这个属性值的链接在新页面中替换方式显示；<br>target&#x3D;”_blank”：用于每个链接在不同新空白页面中打开，互不影响；<br>target&#x3D;”_self”：用于在当前页（或iframe）展示；<br>target&#x3D;”_parent”：用于在上一级iframe中展示，没有就是当前页面；<br>target&#x3D;”_top”：用于在最外层iframe中展示没有就是当前页面；</p><p>【单选题】有关伪类的说法不正确的是(    )</p><ul><li><p>A、</p><p>并不是真正意义上的类，它的名称是由系统定义的</p></li><li><p>B、</p><p>通常由标记名、类名或id名加“：”构成</p></li><li><p>C、</p><p>在CSS中，通过链接伪类可以实现不同的链接状态</p></li><li><p>D、</p><p>伪类就是以#定义的超链接</p></li></ul><p>我的答案：D</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>【单选题】以下标记中，用于定义一个单元格的是（   ）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- A、 <span class="tag">&lt;<span class="name">caption</span>&gt;</span>…<span class="tag">&lt;/<span class="name">caption</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">- B、<span class="tag">&lt;<span class="name">tr</span>&gt;</span>…<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">- C、<span class="tag">&lt;<span class="name">table</span>&gt;</span>…<span class="tag">&lt;/<span class="name">table</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">- D、<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我的答案：D</p><h4 id="【单选题】使用-table-标记的属性美化表格时，可以通过-控制单元格内容与边框之间的距离"><a href="#【单选题】使用-table-标记的属性美化表格时，可以通过-控制单元格内容与边框之间的距离" class="headerlink" title="【单选题】使用  table 标记的属性美化表格时，可以通过(    )控制单元格内容与边框之间的距离"></a>【单选题】使用  table 标记的属性美化表格时，可以通过(    )控制单元格内容与边框之间的距离</h4><ul><li><p>A、</p><p>cellpadding </p></li><li><p>B、</p><p>cellspacing</p></li><li><p>C、</p><p>padding </p></li><li><p>D、</p><p>margin</p></li></ul><p>我的答案：A</p><h4 id="【单选题】行标记-tr-不具有的属性是（-）"><a href="#【单选题】行标记-tr-不具有的属性是（-）" class="headerlink" title="【单选题】行标记 tr 不具有的属性是（   ）"></a>【单选题】行标记 tr 不具有的属性是（   ）</h4><ul><li><p>A、</p><p>align </p></li><li><p>B、</p><p>bgcolor </p></li><li><p>C、</p><p>background </p></li><li><p>D、</p><p>padding</p></li></ul><p>我的答案：D</p><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><h4 id="【单选题】下列哪项不属于一个完整的表单所包含的信息是（-）"><a href="#【单选题】下列哪项不属于一个完整的表单所包含的信息是（-）" class="headerlink" title="【单选题】下列哪项不属于一个完整的表单所包含的信息是（    ）"></a>【单选题】下列哪项不属于一个完整的表单所包含的信息是（    ）</h4><ul><li><p>A、</p><p>表单控件 </p></li><li><p>B、</p><p>提示信息</p></li><li><p>C、</p><p>表格</p></li><li><p>D、</p><p>表单域</p></li></ul><p>我的答案：C</p><h4 id="【单选题】form与-x2F-form之间的表单控件是由用户自定义的。下列选项中，不属于表单标记form的常用属性的是（-）"><a href="#【单选题】form与-x2F-form之间的表单控件是由用户自定义的。下列选项中，不属于表单标记form的常用属性的是（-）" class="headerlink" title="【单选题】form与&#x2F;form之间的表单控件是由用户自定义的。下列选项中，不属于表单标记form的常用属性的是（   ）"></a>【单选题】form与&#x2F;form之间的表单控件是由用户自定义的。下列选项中，不属于表单标记form的常用属性的是（   ）</h4><ul><li><p>A、</p><p>action</p></li><li><p>B、</p><p>size</p></li><li><p>C、</p><p>method </p></li><li><p>D、</p><p>name</p></li></ul><p>我的答案：B</p><h4 id="【单选题】下列选项中，属于-textarea-标记的必须属性的是"><a href="#【单选题】下列选项中，属于-textarea-标记的必须属性的是" class="headerlink" title="【单选题】下列选项中，属于 textarea 标记的必须属性的是(  )"></a>【单选题】下列选项中，属于 textarea 标记的必须属性的是(  )</h4><ul><li><p>A、</p><p>size</p></li><li><p>B、</p><p>row</p></li><li><p>C、</p><p>value</p></li><li><p>D、</p><p>cols</p></li></ul><p>我的答案：B</p><h2 id="第五章（css页面布局）"><a href="#第五章（css页面布局）" class="headerlink" title="第五章（css页面布局）"></a>第五章（css页面布局）</h2><h3 id="元素浮动"><a href="#元素浮动" class="headerlink" title="元素浮动"></a>元素浮动</h3><h4 id="【单选题】float属性值不包括（-）。"><a href="#【单选题】float属性值不包括（-）。" class="headerlink" title="【单选题】float属性值不包括（  ）。"></a>【单选题】float属性值不包括（  ）。</h4><ul><li><p>A、</p><p>left</p></li><li><p>B、</p><p>right</p></li><li><p>C、</p><p>none</p></li><li><p>D、</p><p>center</p></li></ul><p>我的答案：D</p><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><h4 id="【单选题】在设置子元素定位时，一般需先设置父元素的定位模式为（-），然后不需要设置其边偏移量。"><a href="#【单选题】在设置子元素定位时，一般需先设置父元素的定位模式为（-），然后不需要设置其边偏移量。" class="headerlink" title="【单选题】在设置子元素定位时，一般需先设置父元素的定位模式为（ ），然后不需要设置其边偏移量。"></a>【单选题】在设置子元素定位时，一般需先设置父元素的定位模式为（ ），然后不需要设置其边偏移量。</h4><ul><li><p>A、</p><p>static</p></li><li><p>B、</p><p>relative</p></li><li><p>C、</p><p>absolute</p></li><li><p>D、</p><p>fixed</p></li></ul><p>我的答案：B</p><h4 id="【多选题】绝对定位是将元素依据最近的已经定位（-）的父元素进行定位，若所有父元素都没有定位，则依据body根元素（即浏览器窗口）进行定位。"><a href="#【多选题】绝对定位是将元素依据最近的已经定位（-）的父元素进行定位，若所有父元素都没有定位，则依据body根元素（即浏览器窗口）进行定位。" class="headerlink" title="【多选题】绝对定位是将元素依据最近的已经定位（  ）的父元素进行定位，若所有父元素都没有定位，则依据body根元素（即浏览器窗口）进行定位。"></a>【多选题】绝对定位是将元素依据最近的已经定位（  ）的父元素进行定位，若所有父元素都没有定位，则依据body根元素（即浏览器窗口）进行定位。</h4><ul><li><p>A、</p><p>绝对定位</p></li><li><p>B、</p><p>固定定位</p></li><li><p>C、</p><p>相对定位</p></li><li><p>D、</p><p>静态定位</p></li></ul><p>我的答案：CD</p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="【单选题】当用定义列表dl标记定义新闻模块时，dt标记用于（-）。"><a href="#【单选题】当用定义列表dl标记定义新闻模块时，dt标记用于（-）。" class="headerlink" title="【单选题】当用定义列表dl标记定义新闻模块时，dt标记用于（   ）。"></a>【单选题】当用定义列表dl标记定义新闻模块时，dt标记用于（   ）。</h4><ul><li><p>A、</p><p>标识词条</p></li><li><p>B、</p><p>标识解释</p></li><li><p>C、</p><p>表示列表元素</p></li><li><p>D、</p><p>表示父级元素</p></li></ul><p>我的答案：A:标识词条;</p><h4 id="【单选题】当用定义列表dd标记定义新闻模块时，dt标记用于（-）。"><a href="#【单选题】当用定义列表dd标记定义新闻模块时，dt标记用于（-）。" class="headerlink" title="【单选题】当用定义列表dd标记定义新闻模块时，dt标记用于（   ）。"></a>【单选题】当用定义列表dd标记定义新闻模块时，dt标记用于（   ）。</h4><ul><li><p>A、</p><p>标识词条</p></li><li><p>B、</p><p>标识解释</p></li><li><p>C、</p><p>表示列表元素</p></li><li><p>D、</p><p>表示父级元素</p></li></ul><p>我的答案：B</p><h4 id="【单选题】从电脑科技网主体（content）的效果图中可以看出，分成（-）部分。"><a href="#【单选题】从电脑科技网主体（content）的效果图中可以看出，分成（-）部分。" class="headerlink" title="【单选题】从电脑科技网主体（content）的效果图中可以看出，分成（  ）部分。"></a>【单选题】从电脑科技网主体（content）的效果图中可以看出，分成（  ）部分。</h4><ul><li><p>A、</p><p>上、下两部分</p></li><li><p>B、</p><p>上、中、下三部分</p></li><li><p>C、</p><p>左、右两部分</p></li><li><p>D、</p><p>左、中、右三部分</p></li></ul><p>我的答案：B</p><h4 id="【单选题】请问电脑科技网采用的是（-）方式进行布局。"><a href="#【单选题】请问电脑科技网采用的是（-）方式进行布局。" class="headerlink" title="【单选题】请问电脑科技网采用的是（  ）方式进行布局。"></a>【单选题】请问电脑科技网采用的是（  ）方式进行布局。</h4><ul><li><p>A、</p><p>单列布局</p></li><li><p>B、</p><p>两列布局</p></li><li><p>C、</p><p>三列布局</p></li><li><p>D、</p><p>通栏布局</p></li></ul><p>我的答案：D</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Uni-app</title>
      <link href="/posts/2e2abc46.html"/>
      <url>/posts/2e2abc46.html</url>
      
        <content type="html"><![CDATA[<h1 id="Uni-app"><a href="#Uni-app" class="headerlink" title="Uni-app"></a>Uni-app</h1><h2 id="uni-request"><a href="#uni-request" class="headerlink" title="uni.request"></a>uni.request</h2><p>使用中经常出现，赋不上初值的问题，需要在刷新时才能获取到数据，解决方法就是在需要该数据的前一个页面就要加上请求语句，获取到所有的数据（clock的bug QAQ）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">uni.<span class="title function_">request</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://localhost:8181/target/delete&#x27;</span>,</span><br><span class="line"><span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">targetName</span>: state.<span class="property">targetWithTime</span>[index].<span class="property">targetName</span>,</span><br><span class="line"><span class="attr">ifPoints</span>: <span class="number">1</span>,</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="comment">//请求成功后的操作，res为返回的数据</span></span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"><span class="comment">// 从targetWithTime数组中移除已删除的目标数据</span></span><br><span class="line">        <span class="comment">//这里的对state.targetWithTime和user.data.point的操作很关键</span></span><br><span class="line">        <span class="comment">//因为数据库操作成功了，但是前端数据并没有发送改变</span></span><br><span class="line">        <span class="comment">//这时候就需要对响应式数据进行相应的改变，来保证页面的改变</span></span><br><span class="line">state.<span class="property">targetWithTime</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">user.<span class="property">data</span>.<span class="property">point</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">targetPoint</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="uni-showToast"><a href="#uni-showToast" class="headerlink" title="uni.showToast"></a>uni.showToast</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//弹出来的提示信息</span></span><br><span class="line">uni.<span class="title function_">showToast</span>(&#123;</span><br><span class="line"><span class="attr">icon</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line"><span class="attr">title</span>: <span class="string">&#x27;密码错误&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="uni-redirectTo"><a href="#uni-redirectTo" class="headerlink" title="uni.redirectTo"></a>uni.redirectTo</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重定向，在函数中使用比较方便</span></span><br><span class="line">uni.<span class="title function_">redirectTo</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;../../pages/index/Time&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="scroll-view"><a href="#scroll-view" class="headerlink" title="scroll-view"></a>scroll-view</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!--enable-flex为允许设置flex布局--&gt;</span><br><span class="line">    &lt;scroll-view class=&quot;tagMenuList&quot; scroll-x=&quot;true&quot; enable-flex=&quot;true&quot;&gt;</span><br><span class="line">        &lt;view :class=&quot;item.className&quot; v-for=&quot;(item, index) in state.tagWithTime&quot; :key=&quot;index&quot; @click=&quot;classChange(index)&quot;&gt;</span><br><span class="line">            &lt;view class=&quot;tagMenuListDP&quot;&gt;</span><br><span class="line">                &lt;text&gt;&#123;&#123; item.tagName &#125;&#125;&lt;/text&gt;</span><br><span class="line">            &lt;/view&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">    &lt;/scroll-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="swiper"><a href="#swiper" class="headerlink" title="swiper"></a>swiper</h2><p>需要搭配swiper-item作为滑动的内容</p><p>注意该组件可能z-index有所设置，如果下面再加内容可能被覆盖</p><p>注意设置@change&#x3D;”changeswiper”和 :current&#x3D;”state.currentswiper”避免报错:[渲染层错误] [Component] <swiper>: current 属性无效，请修改 current 值的报错（不是很理解）</p><p>注意swiper大多数情况下都需要整体都比swiper-item的内容大一些</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!--easing-function为动画效果--&gt;</span><br><span class="line">    &lt;swiper class=&quot;swiper&quot; autoplay=&quot;true&quot; easing-function=&quot;easeInOutCubic&quot; @change=&quot;changeswiper&quot; :current=&quot;state.currentswiper&quot;&gt;</span><br><span class="line">        &lt;swiper-item v-for=&quot;(item, index) in state.storeWithTime&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">            &lt;view class=&quot;StoreDetail&quot;&gt;</span><br><span class="line">                &lt;view class=&quot;StoreDetailI&quot;&gt;</span><br><span class="line">                    &lt;image src=&quot;https://img1.imgtp.com/2023/05/23/d3gU1S46.svg&quot;</span><br><span class="line">                        style=&quot;width: 606rpx;height: 606rpx;position: absolute;&quot; /&gt;</span><br><span class="line">                &lt;/view&gt;</span><br><span class="line">                &lt;view class=&quot;StoreDetailP&quot;&gt;</span><br><span class="line">                    &lt;text&gt;&#123;&#123; item.storeName &#125;&#125;&lt;/text&gt;</span><br><span class="line">                    &lt;text&gt;&#123;&#123; item.storeDescribe &#125;&#125;&lt;/text&gt;</span><br><span class="line">                    &lt;text&gt;&#123;&#123; item.storeHour &#125;&#125;小时&#123;&#123; item.storeMinute &#125;&#125;分钟&lt;/text&gt;</span><br><span class="line">                &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">                &lt;view class=&quot;StoreDetailPrice&quot; @click=&quot;storeWithTimeDelete(index)&quot;&gt;</span><br><span class="line">                    &lt;image src=&quot;@/static/coin.svg&quot; style=&quot;width: 34rpx;height: 34rpx;&quot; /&gt;</span><br><span class="line">                    &lt;text&gt;X&#123;&#123; item.storePoint &#125;&#125;&lt;/text&gt;</span><br><span class="line">                &lt;/view&gt;</span><br><span class="line">            &lt;/view&gt;</span><br><span class="line">        &lt;/swiper-item&gt;</span><br><span class="line">    &lt;/swiper&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">//下面的代码是应对[渲染层错误] [Component] &lt;swiper&gt;: current 属性无效，请修改 current 值的报错（不是很理解）</span><br><span class="line">const currentswiper = () =&gt; &#123;</span><br><span class="line">state.currentswiper = this.detail.currentswiper</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="uni-popup"><a href="#uni-popup" class="headerlink" title="uni-popup"></a>uni-popup</h2><p>需要用ref进行整体响应化，并调用其中的方法来控制关闭和控制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;uni-popup ref=&quot;popup&quot; type=&quot;dialog&quot;&gt;</span><br><span class="line">        &lt;!--mode=&quot;base&quot;为对话框加两个按钮的形式--&gt;</span><br><span class="line">        &lt;!--before-close为是否拦截按钮事件，如为true，则不会关闭对话框，关闭需要手动执行 uni-popup 的 close 方法--&gt;</span><br><span class="line">        &lt;uni-popup-dialog type=&quot;error&quot; mode=&quot;base&quot; title=&quot;确定要放弃吗?&quot; content=&quot;本次计时将不会得到任何分数&quot; :duration=&quot;2000&quot; :before-close=&quot;true&quot;</span><br><span class="line">            @close=&quot;close&quot; @confirm=&quot;confirm&quot;&gt;&lt;/uni-popup-dialog&gt;</span><br><span class="line">    &lt;/uni-popup&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    </span><br><span class="line">let popup = ref(null); //记着赋初值，本质是reactive(&#123;value:null&#125;)</span><br><span class="line"></span><br><span class="line">const timeEnd = () =&gt; &#123;</span><br><span class="line">popup.value.open() //记得.value然后调用函数</span><br><span class="line">&#125;</span><br><span class="line">const confirm = () =&gt; &#123;</span><br><span class="line">popup.value.close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const close = () =&gt; &#123;</span><br><span class="line">popup.value.close()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="uni-uploadFile"><a href="#uni-uploadFile" class="headerlink" title="uni.uploadFile"></a>uni.uploadFile</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">uni.uploadFile(&#123;</span><br><span class="line">url: url + &#x27;/user/uploadFile&#x27;, //后台接口</span><br><span class="line">filePath: state.avatarUrl, // 上传图片 url</span><br><span class="line">name: &#x27;file&#x27;,</span><br><span class="line">// formData: this.formData,</span><br><span class="line">header: &#123;</span><br><span class="line">&#x27;content-type&#x27;: &#x27;multipart/form-data&#x27;</span><br><span class="line">&#125;, // header 值</span><br><span class="line">success: (res) =&gt; &#123;</span><br><span class="line">const responseData = JSON.parse(res.data); // 解析JSON字符串为对象</span><br><span class="line">user.data.picData = responseData.data.picData</span><br><span class="line">state.avatarUrl = `data:image/jpeg;base64,$&#123;user.data.picData&#125;`//转化为链接</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="uni-showLoading"><a href="#uni-showLoading" class="headerlink" title="uni.showLoading"></a>uni.showLoading</h2><p>必须配合uni.hideLoading()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">    const WxLogin = () =&gt; &#123;</span><br><span class="line">        uni.showLoading(&#123;</span><br><span class="line">title: &#x27;微信登录中...&#x27;</span><br><span class="line">&#125;);</span><br><span class="line">        uni.hideLoading();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java-题目</title>
      <link href="/posts/9e172920.html"/>
      <url>/posts/9e172920.html</url>
      
        <content type="html"><![CDATA[<h1 id="java-题目"><a href="#java-题目" class="headerlink" title="java-题目"></a>java-题目</h1><h2 id="课上程序"><a href="#课上程序" class="headerlink" title="课上程序"></a>课上程序</h2><p>1-1000中含有7或者7的倍数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">study</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> mod=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;=<span class="number">1000</span>;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span>i;</span><br><span class="line">            <span class="keyword">while</span>(num!=<span class="number">0</span>)&#123;</span><br><span class="line">                mod = num%<span class="number">10</span>;</span><br><span class="line">                num= num/<span class="number">10</span>;</span><br><span class="line">                <span class="keyword">if</span>(mod==<span class="number">7</span>)&#123;</span><br><span class="line">                    flag=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="number">1</span>||i%<span class="number">7</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断闰年</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">study</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="keyword">if</span>((year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>)||year%<span class="number">400</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(year+<span class="string">&quot;是闰月&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(year+<span class="string">&quot;不是闰月&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从52张卡中抽取4张随机卡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、数组的书写规范</span></span><br><span class="line"><span class="comment">//2、随机数组的方法Math.random()*52)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">study</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//52为开的数组的大小</span></span><br><span class="line">        <span class="type">int</span>[] array1=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">52</span>];</span><br><span class="line">        <span class="type">int</span> j,k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">52</span>;i++)&#123;</span><br><span class="line">            array1[i]=i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] array2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line">        array2[<span class="number">0</span>]=array1[(<span class="type">int</span>)(Math.random()*<span class="number">52</span>)];</span><br><span class="line">        <span class="keyword">while</span> (k&lt;<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="type">int</span> n=array1[(<span class="type">int</span>)(Math.random()*<span class="number">52</span>)];</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(n==array2[j])&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=<span class="number">4</span>)&#123;</span><br><span class="line">                array2[k+<span class="number">1</span>]=n;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> value:array2)&#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>判断回文数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、String输入</span></span><br><span class="line"><span class="comment">//2、比较逐个比较String函数s.charAt(i)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">study</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String str1;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        str1=sc.next();</span><br><span class="line">        <span class="type">boolean</span> flag=isPalindrome(str1);</span><br><span class="line">        System.out.println(flag?<span class="string">&quot;Yes&quot;</span>:<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="type">int</span> count=s.length(),i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;count/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i)!=s.charAt(count-<span class="number">1</span>-i))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==count/<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>判断输入的字母的数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、判断逻辑word&lt;=&#x27;z&#x27;&amp;&amp;word&gt;=&#x27;a&#x27;||word&lt;=&#x27;Z&#x27;&amp;&amp;word&gt;=&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">study</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String str1;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        str1=sc.next();</span><br><span class="line">        <span class="type">int</span> count= countLetters(str1);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">countLetters</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="type">int</span> len=s.length(),i,num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="type">char</span> word=s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(word&lt;=<span class="string">&#x27;z&#x27;</span>&amp;&amp;word&gt;=<span class="string">&#x27;a&#x27;</span>||word&lt;=<span class="string">&#x27;Z&#x27;</span>&amp;&amp;word&gt;=<span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印日历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">study</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      Scanner sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">      System.out.println(<span class="string">&quot;请输入一个年份：（2018）&quot;</span>);</span><br><span class="line">      <span class="type">int</span> year=sc.nextInt();</span><br><span class="line">      LocalDate dates=LocalDate.of(year, Month.JANUARY,<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">while</span>(dates.getYear()==year)&#123;</span><br><span class="line">         String monthName=dates.getMonth().getDisplayName(TextStyle.FULL,Locale.getDefault());</span><br><span class="line">         <span class="type">int</span> daysOfMonth=dates.lengthOfMonth();</span><br><span class="line">         System.out.println(year+<span class="string">&quot;年&quot;</span>+monthName);</span><br><span class="line">         System.out.println( <span class="string">&quot;-------------------------------------&quot;</span>);</span><br><span class="line">         System.out.printf(<span class="string">&quot;%8s%8s%8s%8s%8s%8s%8s%n&quot;</span>,<span class="string">&quot;一&quot;</span>,<span class="string">&quot;二&quot;</span>,<span class="string">&quot;三&quot;</span>,<span class="string">&quot;四&quot;</span>,<span class="string">&quot;五&quot;</span>,<span class="string">&quot;六&quot;</span>,<span class="string">&quot;日&quot;</span>);</span><br><span class="line">         <span class="type">int</span> dayOfWeek=dates.getDayOfWeek().getValue();</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=dayOfWeek;i++)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%4s&quot;</span>,<span class="string">&quot; &quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">1</span>;i&lt;=daysOfMonth;i++)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%9s&quot;</span>,i);</span><br><span class="line">            <span class="keyword">if</span>((dayOfWeek+i-<span class="number">1</span>)%<span class="number">7</span>==<span class="number">0</span>) &#123;</span><br><span class="line">               System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enum类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Traffic</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">TrafficLight</span> &#123;</span><br><span class="line">        RED, GREEN, BLUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行输出结果</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 调用 values()</span></span><br><span class="line">        TrafficLight[] arr = TrafficLight.values();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 迭代枚举</span></span><br><span class="line">        <span class="keyword">for</span> (TrafficLight TR : arr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 查看索引</span></span><br><span class="line">            System.out.println(TR + <span class="string">&quot; at index &quot;</span> + TR.ordinal());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="学校题目"><a href="#学校题目" class="headerlink" title="学校题目"></a>学校题目</h2><h3 id="项目一（Java入门）"><a href="#项目一（Java入门）" class="headerlink" title="项目一（Java入门）"></a>项目一（Java入门）</h3><ol start="6"><li>(单选题)安装好JDK后，在其bin目录下有许多.exe可执行文件，其中java.exe命令的作用是以下哪一种（）</li></ol><ul><li>A. Java编译器</li><li>B. Java启动器</li><li>C. Java解释器</li><li>D. Java文档制作工具</li></ul><p><em>我的答案:</em> B:Java启动器;<em>正确答案:</em> C</p><ol start="8"><li>(填空题)环境变量           用来存储Java的编译和运行工具所在的路径，而         环境变量则用来保存Java虚拟机要运行的“.class”文件路径</li></ol><ul><li><p>我的答案：</p><p>(1) JAVA_HOME </p><p>(2) CLASSPATH </p></li><li><p><em>正确答案：</em></p><p>(1) path</p><p>(2) classpath</p></li></ul><ol start="9"><li><p>(填空题)Java的三大体系分别是（）、（）、（）。</p><p><em>正确答案：</em></p><p>JavaEE;JavaSE;JavaME</p></li><li><p>(判断题)Java语言的源程序不是编译型，而是编译解释型的</p></li></ol><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 对</p><h3 id="项目二（Java语言基础）"><a href="#项目二（Java语言基础）" class="headerlink" title="项目二（Java语言基础）"></a>项目二（Java语言基础）</h3><p>(填空题)Java中的变量可分为两种数据类型，分别是（）、（）。</p><ul><li><p><em>我的答案：**4.3</em>分</p><p>(1) 基本数据类型 </p><p>(2) 引用数据类型 </p></li><li><p><em>正确答案：</em></p><p>(1) 基本数据类型</p><p>(2) 引用数据类型</p></li></ul><p>(填空题)在Java中，byte类型数据占（）个字节，short类型数据占（）个字节，int类型数据占（）个字节，long类型数据占（）个字节</p><ul><li><p><em>我的答案：**4.3</em>分</p><p>(1) 1 </p><p>(2) 2 </p><p>(3) 4 </p><p>(4) 8 </p></li><li><p><em>正确答案：</em></p><p>(1) 1</p><p>(2) 2</p><p>(3) 4</p><p>(4) 8</p></li></ul><p>(填空题)若x&#x3D;2，则表达式（x++）&#x2F;3的值是___。</p><ul><li><p><em>我的答案：**0</em>分</p><p>(1) 1  </p></li><li><p><em>正确答案：</em></p><p>(1) 0</p></li></ul><p>(填空题)Java中的注释可分为三种类型，分别是（）、（）、（）。</p><ul><li><p><em>我的答案：**1.4</em>分</p><p>(1) 单行注释 </p><p>(2) 单行注释 </p><p>(3) 单行注释 </p></li><li><p><em>正确答案：</em></p><p>(1) 单行注释</p><p>(2) 多行注释</p><p>(3) 文档注释</p></li></ul><p>(判断题)定义多个同名方法时，可以依靠返回值区别同名方法</p><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 错</p><p>(判断题)使用break语句可以跳出一个循环</p><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 对<em>正确答案:</em> 错</p><h3 id="项目三（方法）"><a href="#项目三（方法）" class="headerlink" title="项目三（方法）"></a>项目三（方法）</h3><ol><li>(填空题)Java中方法的三种调用方式分别是      、    、     。</li></ol><ul><li><p><em>我的答案：</em></p><p>(1) 普通调用方式</p><p>(2) 对象调用方式（当方法是非静态方法时，需要通过对象实例来调用）</p><p>(3) 类调用方式（当方法是静态方法时，可以直接使用类名调用，不需要创建对象实例）</p></li></ul><h3 id="项目四（数组和字符串）"><a href="#项目四（数组和字符串）" class="headerlink" title="项目四（数组和字符串）"></a>项目四（数组和字符串）</h3><ol start="6"><li>(单选题)Java中的数组存储在( )中。</li></ol><ul><li>A. 栈</li><li>B. 队列</li><li>C. 堆</li><li>D. 链表</li></ul><p><em>我的答案:</em> A;*正确答案:*A</p><ol start="8"><li>(填空题)数组复制时,”&#x3D;”将一个数组的___传递给另一个数组。</li></ol><ul><li><p>*我的答案：</p><p>(1) 元素值 </p></li><li><p><em>正确答案：</em></p><p>(1) 引用</p></li></ul><ol start="9"><li>(填空题)JVM将数组存储在___(堆或栈)中。</li></ol><ul><li><p><em>我的答案：**0</em>分</p><p>(1) 堆 </p></li><li><p><em>正确答案：</em></p><p>(1) 栈</p></li></ul><h3 id="项目五（类与对象）"><a href="#项目五（类与对象）" class="headerlink" title="项目五（类与对象）"></a>项目五（类与对象）</h3><ol start="3"><li>(单选题)在以下什么情况下，构造方法会被调用？( )</li></ol><ul><li>A. 类的定义时</li><li>B. 创建对象时</li><li>C. 调用对象方法时</li><li>D. 适用对象的变量时</li></ul><p><em>我的答案:</em> B:创建对象时;<em>正确答案:</em> B:创建对象时;</p><ol start="13"><li>(判断题)声明构造方法时，不能使用private关键字修饰。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 对</p><ol start="15"><li>(判断题)方法内部类中不能访问外部类的成员变量。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 对</p><h3 id="项目六（继承）"><a href="#项目六（继承）" class="headerlink" title="项目六（继承）"></a>项目六（继承）</h3><ol start="4"><li>(填空题)（）类是所有类的父类,该类中判断两个对象是否相等的方法是（）,取得对象完整信息的方法是（）。（注意大小写）</li></ol><ul><li><p>我的答案：</p><p>(1) Object </p><p>(2) equals </p><p>(3) toString </p></li><li><p><em>正确答案：</em></p><p>(1) Object</p><p>(2) equals( )</p><p>(3) toString( )</p></li></ul><ol start="12"><li>(判断题)构造方法可以有返回值类型的声明。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 错</p><ol start="15"><li>(判断题)一个类不能既是子类又是父类。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 错</p><h3 id="项目七（多态）"><a href="#项目七（多态）" class="headerlink" title="项目七（多态）"></a>项目七（多态）</h3><ol start="7"><li>(填空题)___是指,一个类中可以有多个具有相同名字和类型的方法,但这些方法的参数必须不同。</li></ol><ul><li><p>我的答案：</p><p>(1) 方法重载 </p></li><li><p><em>正确答案：</em></p><p>(1) 方法重载</p></li></ul><ol start="8"><li>(填空题)再Java语言中多态性体现在由方法重载实现静态多态性和___实现的动态多态性。</li></ol><ul><li><p>我的答案：</p><p>(1) 方法重写 </p></li><li><p><em>正确答案：</em></p><p>(1) 方法重写</p></li></ul><p>抽象类</p><h3 id="项目八（集合与泛型）"><a href="#项目八（集合与泛型）" class="headerlink" title="项目八（集合与泛型）"></a>项目八（集合与泛型）</h3><ol start="2"><li>(单选题)使用Iterator时,判断是否存在下一个元素可以使用哪一个方法？( )</li></ol><ul><li>A. next( )</li><li>B. hash( )</li><li>C. hasPrevious( )</li><li>D. hasNext( )</li></ul><p><em>我的答案:</em> D:hasNext( );<em>正确答案:</em> D:hasNext( );</p><ol start="3"><li>(单选题)在程序开发中,经常会使用以下哪个类来存储程序中所需的配置？( )</li></ol><ul><li>A. HashMap</li><li>B. TreeSet</li><li>C. Properties</li><li>D. TreeMap</li></ul><p><em>我的答案:</em> C:Properties;<em>正确答案:</em> C</p><ol start="4"><li>(单选题)要想按照集合中保存的元素没有重复且按照一定的顺序排列,可以使用以下哪个集合？( )</li></ol><ul><li>A. LinkedList</li><li>B. ArrayList</li><li>C. hashSet</li><li>D. TreeSet</li></ul><p><em>我的答案:</em> D:TreeSet;<em>正确答案:</em> D:TreeSet;</p><ol start="5"><li>(填空题)JDK中提供了一系列可以存储任意对象的类,统称为___。</li></ol><ul><li><p>我的答案：</p><p>(1) 集合类 </p></li><li><p><em>正确答案：</em></p><p>(1) 集合;集合类</p></li></ul><ol start="6"><li>(填空题)在创建TreeSet对象时,可以传入自定义的比较器,自定义比较器需要实现___接口。</li></ol><ul><li><p>我的答案：</p><p>(1) Comparator </p></li><li><p><em>正确答案：</em></p><p>(1) Comparator</p></li></ul><ol start="7"><li>(填空题)Collection有两个子接口,分别是List和Set,List集合的特点是有序,可重复,Set集合的特点是___。</li></ol><ul><li><p>我的答案：</p><p>(1) 有序、可重复 无序、不可重复 </p></li><li><p><em>正确答案：</em></p><p>(1) 无序存储;无序不重复;元素无序,不可重复;无序不可重复</p></li></ul><ol start="8"><li>(填空题)使用Iterator遍历集合时,首先需要调用()方法判断是否存在下一个元素,若存在下一个元素,则调用())方法取出该元素。</li></ol><ul><li><p>我的答案：</p><p>(1) hasNext()  </p><p>(2) next()  </p></li><li><p><em>正确答案：</em></p><p>(1) hasNext( )</p><p>(2) next( )</p></li></ul><ol start="9"><li>(填空题)集合按照存储接口的不同可分为单列集合和双列集合,单列集合的根接口是(),双列集合的根接口是()。</li></ol><ul><li><p>我的答案：</p><p>(1) Collection  </p><p>(2) Map </p></li><li><p><em>正确答案：</em></p><p>(1) Collection</p><p>(2) Map</p></li></ul><ol start="12"><li>(判断题)集合中不能存放基本数据类型,而只能存放引用数据类型。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><ol start="14"><li>(判断题)使用Iterator迭代集合元素时,可以调用集合对象的方法增删元素。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 错</p><h3 id="项目十一（多线程）"><a href="#项目十一（多线程）" class="headerlink" title="项目十一（多线程）"></a>项目十一（多线程）</h3><p> (单选题)Thread类位于下列哪个包中？( )</p><ul><li>A. java.io</li><li>B. java.lang</li><li>C. java.util</li><li>D. java.awt</li></ul><p><em>我的答案:</em> B:java.lang;<em>正确答案:</em> B:java.lang;</p><p> (单选题)对于调用sleep()方法后，该线程将进入以下哪种状态?()</p><ul><li>A. 就绪状态</li><li>B. 运行状态</li><li>C. 阻塞状态</li><li>D. 死亡状态</li></ul><p><em>我的答案:</em> C:阻塞状态;<em>正确答案:</em> C:阻塞状态;</p><p>(多选题)关于线程的创建过程，下面四种说法正确的有哪些?()(多选)</p><ul><li>A. 定义Thread类的在子类，重写Thread类的run( )方法，创建该子类的实例对象，调用对象的start( )方法</li><li>B. 定义Thread类的在子类，重写Thread类的run( )方法，创建该子类的实例对象，调用对象的run( )方法</li><li>C. 定义一个实现Runnable接口的类并实现run( )方法，创建该类的实例对象，将其作为参数传递给Thread类的构造方法来创建Thread对象，调用Thread对象的start( )方法。</li><li>D. 定义一个实现Runnable接口的类并实现run( )方法，创建该类对象，然后调用run( )方法。</li></ul><p><em>我的答案:</em> AC;<em>正确答案:</em> AC;</p><p>(多选题)对于通过实现Runnable接口创建线程，下面说法正确的有哪些?()(多选)</p><ul><li>A. 适合多个相同程序代码的线程去处理同一个资源的情况。</li><li>B. 把线程同步程序代码、数据有效地分离，很好的体现了面向对象的设计思想。</li><li>C. 可以避免由于Java的单继承带来的局限性。</li><li>D. 编写简单，可以不通过Thread类直接创建线程。</li></ul><p><em>我的答案:</em> ABCD;<em>正确答案:</em> ABC;</p><p> (多选题)对于线程的生命周期，下面四种说法正确的有哪些?()(多选)</p><ul><li>A. 调用了线程的start( )方法，该线程就进入运行状态。</li><li>B. 线程的run( )方法运行结束或未被catch的InterruptedException等异常终结，那么该线程进入死亡状态。</li><li>C. 线程进入是死亡状态，但是该线程对象仍然是一个Thread对象，在没有被垃圾回收器回收之前仍然可以像引用其他对象一样引用它。</li><li>D. 线程进入死亡状态后，调用它的start( )方法仍然可以重新启动。</li></ul><p><em>我的答案:</em> ABD;<em>正确答案:</em> BC;</p><p>(多选题)下面四个选项中，对线程同步的目的描述正确的有哪些?()(多选)</p><ul><li>A. 锁定资源，是同一时刻只有一个线程去访问它，防止多个线程操作同一个资源引发错误。</li><li>B. 提高线程的执行效率</li><li>C. 让线程独占一个资源</li><li>D. 让多个线程同时使用一个资源</li></ul><p><em>我的答案:</em> ABC;<em>正确答案:</em> AB</p><p>(填空题)一个应用程序中有多个并发执行的线索，每条线索都被称作一个（），它们会交替执行，彼此间可以进行（）。</p><ul><li><p>我的答案：</p><p>(1) 线程 </p><p>(2) 通信 </p></li><li><p><em>正确答案：</em></p><p>(1) 线程</p><p>(2) 通信</p></li></ul><p>(填空题)在实现多线程的程序时有两种方式，一是通过继承（）类，二是通过实现（）接口。</p><ul><li><p><em>我的答案：**5</em>分</p><p>(1) Thread </p><p>(2) Runnable </p></li><li><p><em>正确答案：</em></p><p>(1) Thread</p><p>(2) Runnable</p></li></ul><p> (填空题)在Java语言中，同步方法需要用到关键字（）对于同步方法而言无需指定同步锁，它的同步锁是方法所在的（），也就是（）(关键字)。</p><ul><li><p><em>我的答案：**5</em>分</p><p>(1) synchronized  </p><p>(2) 对象 </p><p>(3) this </p></li><li><p><em>正确答案：</em></p><p>(1) synchronized</p><p>(2) 当前对象;对象</p><p>(3) this</p></li></ul><p> (填空题)在多任务系统中，每个独立执行的程序称之为（）也就是”正在运行的程序”。</p><ul><li><p><em>我的答案：**5</em>分</p><p>(1) 进程 </p></li><li><p><em>正确答案：</em></p><p>(1) 进程</p></li></ul><p>(填空题)线程的整个生命周期分为五个阶段，分别是（），（），（），（）和（）。</p><ul><li><p><em>正确答案：</em></p><p>(1) 新建;新建状态</p><p>(2) 就绪;就绪状态</p><p>(3) 运行;运行状态</p><p>(4) 阻塞;阻塞状态</p><p>(5) 死亡;死亡状态</p></li></ul><p>(填空题)线程的优先级用1~10之间的整数来表示，其中（）代表优先级最高，（）代表优先级最低。</p><ul><li><p><em>我的答案：**5</em>分</p><p>(1) 10 </p><p>(2) 1 </p></li><li><p><em>正确答案：</em></p><p>(1) 10</p><p>(2) 1</p></li></ul><p>(填空题)在Thread类中，提供了一个start( )方法，该方法用于（），当新线程启动后，系统会自动调用一个（）方法。</p><ul><li><p><em>我的答案：**5</em>分</p><p>(1) 启动线程 </p><p>(2) run() </p></li><li><p><em>正确答案：</em></p><p>(1) 启动线程</p><p>(2) run()</p></li></ul><p>(判断题)如果前台线程全部死亡，后台线程也会自动死亡。</p><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 对</p><p>(判断题)同步代码块的锁对象可以是任意类型的对象。</p><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 对</p><p>(判断题)静态方法不能使用synchronized关键字来修饰。</p><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 错</p><p> (判断题)线程结束等待或者阻塞状态后，会进入运行状态。</p><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 错</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/posts/79666db.html"/>
      <url>/posts/79666db.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>设单链表的结点结构为(data,next)，next为指针域，已知指针px指向单链表中data为x的结点，指针py指向data为y的新结点 , 若将结点y插入结点x之后，则需要执行以下语句:</p><p>X  (2)-&gt; Y (1)-&gt;  Z</p><p>1、首先这是一个插入的方法，而第一步就是把将要插入的y结点的下一个结点变为x原来的下一个结点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py-&gt;next = px-&gt;next;</span><br></pre></td></tr></table></figure><p>2、把x结点的下一个结点变为x结点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">px-&gt;next = py;</span><br></pre></td></tr></table></figure><p>对线性表L&#x3D;（a1…an）</p><p>(1)如L为顺序表，请设计算法将L就地逆置。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXSIZE = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">int</span> data[MAXSIZE];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125; SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将顺序表L就地逆置</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(SqList &amp;L)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        temp = L.data[i];</span><br><span class="line">        L.data[i] = L.data[L.length - i - <span class="number">1</span>];</span><br><span class="line">        L.data[L.length - i - <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqList L = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, <span class="number">6</span>&#125;; <span class="comment">// 初始化顺序表L</span></span><br><span class="line">    <span class="built_in">reverse</span>(L); <span class="comment">// 就地逆置L</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        cout &lt;&lt; L.data[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)若L为带头结点的单链表，设计算法将L就地逆置。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line"></span><br><span class="line">    ListNode* next;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverseList</span><span class="params">(ListNode* L)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ListNode* cur = L-&gt;next;</span><br><span class="line"></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ListNode* next = cur-&gt;next;</span><br><span class="line"></span><br><span class="line">    cur-&gt;next = L-&gt;next;</span><br><span class="line"></span><br><span class="line">    L-&gt;next = cur;</span><br><span class="line"></span><br><span class="line">    cur = next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试编写在带头结点的单链表L中删除（一个）最小值结点的（高效）算法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125; LNode, *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建带头结点的单链表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createList</span><span class="params">(LinkList &amp;L, <span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    L = <span class="keyword">new</span> LNode;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        LNode *p = <span class="keyword">new</span> LNode;</span><br><span class="line">        p-&gt;data = a[i];</span><br><span class="line">        p-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除带头结点的单链表L中最小值结点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deleteMin</span><span class="params">(LinkList &amp;L)</span> </span>&#123;</span><br><span class="line">    LNode *pre = L, *p = L-&gt;next, *minpre = pre, *minp = p;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;data &lt; minp-&gt;data) &#123;</span><br><span class="line">            minp = p;</span><br><span class="line">            minpre = pre;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    minpre-&gt;next = minp-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> minp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[] = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    LinkList L;</span><br><span class="line">    <span class="built_in">createList</span>(L, a, <span class="number">5</span>); <span class="comment">// 创建带头结点的单链表L</span></span><br><span class="line">    <span class="built_in">deleteMin</span>(L); <span class="comment">// 删除L中最小值结点</span></span><br><span class="line">    LNode *p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设有一个带头结点的单链表，其结点的数据值均为正整数，编写完成下列功能的算法：</p><p>(1)找出最小值结点，且输出该数值；</p><p>(2)若该数值是奇数，则将其与直接后继结点的数值交换；</p><p>(3)若该数值是偶数，则将其直接后继结点删除。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line"></span><br><span class="line">    ListNode* next;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swapdataue</span><span class="params">(ListNode* a, ListNode* b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> temp = a-&gt;data;</span><br><span class="line"></span><br><span class="line">    a-&gt;data = b-&gt;data;</span><br><span class="line"></span><br><span class="line">    b-&gt;data = temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deleteNextNode</span><span class="params">(ListNode* node)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ListNode* del = node-&gt;next;</span><br><span class="line"></span><br><span class="line">    node-&gt;next = del-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> del;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operateList</span><span class="params">(ListNode* L)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ListNode* pre = L;</span><br><span class="line"></span><br><span class="line">    ListNode* cur = L-&gt;next;</span><br><span class="line"></span><br><span class="line">    ListNode* min_pre = pre;</span><br><span class="line"></span><br><span class="line">    ListNode* min = cur;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cur-&gt;data &lt; min-&gt;data) &#123;</span><br><span class="line"></span><br><span class="line">        min_pre = pre;</span><br><span class="line"></span><br><span class="line">        min = cur;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pre = cur;</span><br><span class="line"></span><br><span class="line">    cur = cur-&gt;next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;最小值为：&quot;</span> &lt;&lt; min-&gt;data &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (min-&gt;data % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; min-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">swapdataue</span>(min, min-&gt;next);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (min-&gt;data % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; min-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">deleteNextNode</span>(min);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设有两个按元素值非递减次序排列的线性表，均以单链表形式存储。请编写算法将这两个单链表归并为一个按元素值非递增次序排列的单链表，并要求利用原来两个单链表的结点存放归并后的单链表。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义链表结点结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并两个单链表并返回合并后的链表头节点</span></span><br><span class="line"><span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">    <span class="function">ListNode <span class="title">dummy</span><span class="params">(<span class="number">0</span>)</span></span>;  <span class="comment">// 哑结点</span></span><br><span class="line">    ListNode* tail = &amp;dummy;  <span class="comment">// 合并后链表的尾结点</span></span><br><span class="line">    <span class="keyword">while</span> (l1 &amp;&amp; l2) &#123;</span><br><span class="line">        <span class="comment">// 选择两个链表中较小的结点接入合并后的链表尾部</span></span><br><span class="line">        <span class="keyword">if</span> (l1-&gt;val &lt;= l2-&gt;val) &#123;</span><br><span class="line">            tail-&gt;next = l1;</span><br><span class="line">            l1 = l1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tail-&gt;next = l2;</span><br><span class="line">            l2 = l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = tail-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将剩余的链表结点接入合并后的链表尾部</span></span><br><span class="line">    <span class="keyword">if</span> (l1) &#123;</span><br><span class="line">        tail-&gt;next = l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        tail-&gt;next = l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 反转合并后的链表，使其变为非递增次序排列</span></span><br><span class="line">    ListNode* prev = <span class="literal">NULL</span>;</span><br><span class="line">    ListNode* curr = dummy.next;</span><br><span class="line">    <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">        ListNode* next = curr-&gt;next;</span><br><span class="line">        curr-&gt;next = prev;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化两个按元素值非递减次序排列的单链表</span></span><br><span class="line">    ListNode* l1 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">    l1-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">3</span>);</span><br><span class="line">    l1-&gt;next-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">5</span>);</span><br><span class="line">    l1-&gt;next-&gt;next-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">7</span>);</span><br><span class="line">    l1-&gt;next-&gt;next-&gt;next-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">9</span>);</span><br><span class="line">    ListNode* l2 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">2</span>);</span><br><span class="line">    l2-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">4</span>);</span><br><span class="line">    l2-&gt;next-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">6</span>);</span><br><span class="line">    l2-&gt;next-&gt;next-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">8</span>);</span><br><span class="line">    l2-&gt;next-&gt;next-&gt;next-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 归并两个单链表并输出合并后的链表元素</span></span><br><span class="line">    ListNode* merged = <span class="built_in">mergeTwoLists</span>(l1, l2);</span><br><span class="line">    <span class="keyword">while</span> (merged) &#123;</span><br><span class="line">        cout &lt;&lt; merged-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        merged = merged-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ListNode(int x) : val(x), next(NULL) &#123;&#125; 是一个 C++ 类的构造函数。它的作用是创建一个新的 ListNode 对象，并初始化 val 和 next 属性。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//具体地，: val(x), next(NULL) 是 C++ 中的成员初始化列表，用于给对象的成员变量进行初始化。在这里，val 成员变量被初始化为参数 x 的值，而 next 成员变量被初始化为 NULL。然后，在函数体内部，由于该构造函数不需要进行额外的操作，所以函数体为空。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//总之，这行代码的作用是创建一个新的 ListNode 对象，并将它的 val 属性设置为 x，next 属性设置为 NULL</span></span><br></pre></td></tr></table></figure><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><p>利用栈和队列，判断键盘上输入的n个数是否构成回文序列。(算法设计题)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在代码中，输入序列中的元素通过stack和queue两个数据结构依次入栈和入队。然后，使用top()和front()方法依次从栈和队列中取出元素，并比较它们的值是否相等，如果有不相等的，则说明输入序列不是回文序列，返回false。如果比较到栈和队列都为空，说明输入序列是回文序列，返回true。最后，在main()函数中调用is_palindrome()函数，根据其返回值输出结果。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span>  <span class="comment">// 包含栈所在的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span>  <span class="comment">// 包含队列所在的头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断输入的n个数是否构成回文序列</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_palindrome</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s;  <span class="comment">// 定义一个整型栈s</span></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;  <span class="comment">// 定义一个整型队列q</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        cin &gt;&gt; num;  <span class="comment">// 输入第i个数</span></span><br><span class="line">        s.<span class="built_in">push</span>(num);  <span class="comment">// 将第i个数入栈</span></span><br><span class="line">        q.<span class="built_in">push</span>(num);  <span class="comment">// 将第i个数入队</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; !q.<span class="built_in">empty</span>()) &#123;  <span class="comment">// 当栈和队列都不为空时</span></span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">top</span>() != q.<span class="built_in">front</span>()) &#123;  <span class="comment">// 如果栈顶元素和队首元素不相等</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 返回false，输入的数不是回文序列</span></span><br><span class="line">        &#125;</span><br><span class="line">        s.<span class="built_in">pop</span>();  <span class="comment">// 将栈顶元素弹出</span></span><br><span class="line">        q.<span class="built_in">pop</span>();  <span class="comment">// 将队首元素弹出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">// 如果比较完毕栈和队列都为空，则输入的数是回文序列，返回true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter the number of elements: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; n;  <span class="comment">// 输入元素个数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">is_palindrome</span>(n)) &#123;  <span class="comment">// 如果输入的数是回文序列</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The sequence is a palindrome.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 如果输入的数不是回文序列</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The sequence is not a palindrome.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// 程序结束，返回0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查表达式中括号是否匹配</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在代码中，输入的表达式字符串通过stack栈结构进行括号匹配检查。当遇到左括号时，将其入栈；当遇到右括号时，从栈中弹出一个元素并比较其是否匹配。如果不匹配，则表达式中的括号不匹配，返回false；如果栈中元素都已匹配完毕，表明表达式中的括号匹配，返回true。最后，在main()函数中调用is_matching()函数，根据其返回值输出结果。</span></span><br><span class="line"></span><br><span class="line">值得注意的是，代码中默认输入的表达式中只包含括号，如果输入的表达式中包含其他字符，则需要做相应的处理。</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断表达式中的括号是否匹配</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_matching</span><span class="params">(string exp)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; s; <span class="comment">// 声明一个栈s</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; exp.<span class="built_in">length</span>(); i++) &#123; <span class="comment">// 循环遍历表达式中的每个字符</span></span><br><span class="line">        <span class="type">char</span> ch = exp[i]; <span class="comment">// 获取当前字符</span></span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span> || ch == <span class="string">&#x27;&#123;&#x27;</span> || ch == <span class="string">&#x27;[&#x27;</span>) &#123; <span class="comment">// 如果当前字符是左括号，则入栈</span></span><br><span class="line">            s.<span class="built_in">push</span>(ch);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;)&#x27;</span> || ch == <span class="string">&#x27;&#125;&#x27;</span> || ch == <span class="string">&#x27;]&#x27;</span>) &#123; <span class="comment">// 如果当前字符是右括号，则弹出栈顶元素进行匹配</span></span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">empty</span>()) &#123; <span class="comment">// 如果栈为空，则说明右括号没有匹配的左括号，表达式中的括号不匹配，返回false</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">char</span> top_ch = s.<span class="built_in">top</span>(); <span class="comment">// 获取栈顶元素</span></span><br><span class="line">            s.<span class="built_in">pop</span>(); <span class="comment">// 弹出栈顶元素</span></span><br><span class="line">            <span class="keyword">if</span> ((ch == <span class="string">&#x27;)&#x27;</span> &amp;&amp; top_ch != <span class="string">&#x27;(&#x27;</span>) || <span class="comment">// 如果当前字符是右括号，但栈顶元素不是对应的左括号，则表达式中的括号不匹配，返回false</span></span><br><span class="line">                (ch == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; top_ch != <span class="string">&#x27;&#123;&#x27;</span>) || </span><br><span class="line">                (ch == <span class="string">&#x27;]&#x27;</span> &amp;&amp; top_ch != <span class="string">&#x27;[&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="built_in">empty</span>(); <span class="comment">// 如果栈中没有剩余元素，则说明表达式中的括号全部匹配，返回true；否则返回false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string exp;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter an expression: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; exp;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">is_matching</span>(exp)) &#123; <span class="comment">// 调用is_matching()函数判断表达式中的括号是否匹配，并输出结果</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The parentheses in the expression are matched.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The parentheses in the expression are not matched.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用栈的基本操作实现将十进制整数N转换为r（2≤r≤16）进制数，并输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将十进制整数N转换为r进制数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">convert</span><span class="params">(<span class="type">int</span> N, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s; <span class="comment">// 声明一个栈s</span></span><br><span class="line">    <span class="keyword">while</span> (N &gt; <span class="number">0</span>) &#123; <span class="comment">// 循环将N转换为r进制数</span></span><br><span class="line">        <span class="type">int</span> remainder = N % r; <span class="comment">// 计算N除以r的余数</span></span><br><span class="line">        s.<span class="built_in">push</span>(remainder); <span class="comment">// 将余数入栈</span></span><br><span class="line">        N /= r; <span class="comment">// 将N除以r的商作为新的N</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将栈中的元素依次弹出并输出，即为r进制表示的N</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The converted number is: &quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> digit = s.<span class="built_in">top</span>(); <span class="comment">// 获取栈顶元素</span></span><br><span class="line">        s.<span class="built_in">pop</span>(); <span class="comment">// 弹出栈顶元素</span></span><br><span class="line">        <span class="keyword">if</span> (digit &lt; <span class="number">10</span>) &#123; <span class="comment">// 如果是0-9的数字，则直接输出</span></span><br><span class="line">            cout &lt;&lt; digit;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则输出对应的字母</span></span><br><span class="line">            cout &lt;&lt; <span class="built_in">char</span>(digit - <span class="number">10</span> + <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> N, r;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter a decimal integer N: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter a base r (2 &lt;= r &lt;= 16): &quot;</span>;</span><br><span class="line">    cin &gt;&gt; r;</span><br><span class="line">    <span class="built_in">convert</span>(N, r); <span class="comment">// 调用convert()函数进行转换并输出结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="学习通"><a href="#学习通" class="headerlink" title="学习通"></a>学习通</h2><h3 id="第一章-基础概念"><a href="#第一章-基础概念" class="headerlink" title="第一章(基础概念)"></a>第一章(基础概念)<img src="https://gitee.com/TECNB/pic-demo/raw/master/image-20230612193237000.png" alt="image-20230612193237000"></h3><ol><li>(单选题) 以下关于数据的<strong>存储结构</strong>的叙述中哪一条是正确的（  ）。</li></ol><ul><li>A. 数据的存储结构是逻辑结构在<strong>计算机存储器中的实现</strong></li><li>B. 数据的存储结构对数据运算的具体实现没有影响</li><li>C. 数据的存储结构是数据间关系的抽象描述</li><li>D. 数据的存储结构分为线性结构和非线性结构</li></ul><p>（数据的<strong>逻辑结构</strong>分为线性结构和非线性结构两大类，线性结构包括数组、链表、 栈、队列等; 非线性结构包括树、图等）</p><p><em>我的答案:</em> A:数据的存储结构是逻辑结构在计算机存储器中的实现;<em>正确答案:</em> A:数据的存储结构是逻辑结构在计算机存储器中的实现;</p><p>B. 数据的存储结构对数据运算的具体实现没有影响：这个选项是错误的。数据的存储结构会对数据的运算和操作产生影响。不同的存储结构会影响数据的访问效率、插入和删除操作的复杂度等。</p><p>C. 数据的存储结构是数据间关系的抽象描述：这个选项是不准确的。数据的存储结构描述的是数据在计算机存储器中的组织方式，它并不仅仅是对数据间关系的抽象描述，还包括数据的物理存储方式和访问方式等。</p><p>D. 数据的存储结构分为线性结构和非线性结构：这个选项是不准确的。数据的存储结构可以更细分为线性结构、树形结构、图形结构等多种类型，而非线性结构只是其中的一种。</p><ol start="6"><li>(单选题) 下面说法<strong>错误</strong>的是（  ）</li></ol><ul><li>A. 在相同的规模n下，复杂度O(n)的算法在时间上总是优于复杂度O(2n)的算法 </li><li>B. 同一个算法，实现语言的级别越高，执行效率就越低</li><li>C. 算法原地工作的含义是指不需要任何额外的辅助空间</li><li>D. 所谓时间复杂度是指最坏情况下估算算法执行时间的一个上界</li></ul><p><em>我的答案:</em> B:同一个算法，实现语言的级别越高，执行效率就越低;<em>正确答案:</em> C:算法原地工作的含义是指不需要任何额外的辅助空间;（和AI有歧义）</p><ol start="10"><li>(填空题) 数据的（）在计算机中的表示（映像）称为存储结构，需要考虑数据元素的表示和数据元素间关系的表示。数据的存储结构分为（）、（）、索引和散列存储结构。</li></ol><ul><li><p>我的答案：</p><p>(1) 存储结构 </p><p>(2) 顺序存储结构 </p><p>(3) 链式存储结构 </p></li><li><p><em>正确答案：</em></p><p>(1) 逻辑结构</p><p>(2) 顺序</p><p>(3) 链式</p></li></ul><p>数据的逻辑结构是指    。</p><ul><li><p>我的答案：</p><p>(1) 逻辑结构在计算机存储器中的实现 </p></li><li><p><em>正确答案：</em></p><p>(1) 数据的组织形式，即数据元素之间逻辑关系的总体</p></li></ul><p>（数据的逻辑结构分为线性结构和非线性结构两大类，线性结构包括数组、链表、 栈、队列等; 非线性结构包括树、图等）</p><h4 id="填空题-一个算法具有5个特性：-，有零个或多个输入、有一个或多个输出。"><a href="#填空题-一个算法具有5个特性：-，有零个或多个输入、有一个或多个输出。" class="headerlink" title="(填空题) 一个算法具有5个特性：     ,      ,      ，有零个或多个输入、有一个或多个输出。"></a>(填空题) 一个算法具有5个特性：     ,      ,      ，有零个或多个输入、有一个或多个输出。</h4><ul><li><p>我的答案：</p><p>(1) <strong>有穷性</strong> </p><p>(2) <strong>确定性</strong> </p><p>(3) <strong>可行性</strong> </p></li><li><p><em>正确答案：</em></p><p>(1) 有穷性</p><p>(2) 确定性</p><p>(3) 可行性</p></li></ul><p>下面程序段中带下划线的语句的执行次数的数量级是       。i&#x3D;1；while( i&lt;n) i&#x3D;i*2; </p><ul><li><p><em>我的答案：**0</em>分</p><p>(1) O（log₂n） </p></li><li><p><em>正确答案：</em></p><p>(1) O(log2n)</p></li></ul><p>(填空题) 下面程序段中x++的语句的执行次数的数量级是       。i&#x3D;1；while( i&lt;n) {for (j&#x3D;1;j&lt;&#x3D;n;j++) x++i&#x3D;i*2;} </p><ul><li><p>我的答案：</p><p>(1) O（nlog₂n） </p></li><li><p><em>正确答案：</em></p><p>(1) O(nlog2n)</p></li></ul><h4 id="判断题-算法可以用不同的语言描述，如果用C-语言或C-语言等高级语言来描述，则算法实际上就是程序了。"><a href="#判断题-算法可以用不同的语言描述，如果用C-语言或C-语言等高级语言来描述，则算法实际上就是程序了。" class="headerlink" title="(判断题) 算法可以用不同的语言描述，如果用C 语言或C++语言等高级语言来描述，则算法实际上就是程序了。"></a>(判断题) 算法可以用不同的语言描述，如果用C 语言或C++语言等高级语言来描述，则算法实际上就是程序了。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> <strong>对</strong></p><h4 id="数据结构的操作的定义与具体实现有关。"><a href="#数据结构的操作的定义与具体实现有关。" class="headerlink" title="数据结构的操作的定义与具体实现有关。"></a>数据结构的操作的定义与具体实现有关。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 对<em>正确答案:</em> <strong>错</strong></p><h4 id="判断题-数据项是数据不可分割的最小单位。"><a href="#判断题-数据项是数据不可分割的最小单位。" class="headerlink" title="(判断题) 数据项是数据不可分割的最小单位。"></a>(判断题) 数据项是数据不可分割的最小单位。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 对<em>正确答案:</em> <strong>对</strong></p><h3 id="第二章（线性表）"><a href="#第二章（线性表）" class="headerlink" title="第二章（线性表）"></a>第二章（线性表）</h3><ol start="6"><li>(单选题) 设一个链表最常用的操作是在末尾插入结点和删除尾结点，则选用（  ）最节省时间。</li></ol><ul><li>A. 单链表</li><li>B. 单循环链表</li><li>C. 带尾指针的单循环链表</li><li>D. 带头指针的单循环链表</li></ul><p><em>我的答案:</em> D:带头指针的单循环链表;</p><h4 id="单选题-若长度为n的线性表采用顺序存储结构，在其第i个位置插入一个新元素的算法的时间复杂度为（-）-1≤i≤n-1-。"><a href="#单选题-若长度为n的线性表采用顺序存储结构，在其第i个位置插入一个新元素的算法的时间复杂度为（-）-1≤i≤n-1-。" class="headerlink" title="(单选题) 若长度为n的线性表采用顺序存储结构，在其第i个位置插入一个新元素的算法的时间复杂度为（  ）(1≤i≤n+1)。"></a>(单选题) 若长度为n的线性表采用顺序存储结构，在其第i个位置<strong>插入</strong>一个新元素的算法的时间复杂度为（  ）(1≤i≤n+1)。</h4><ul><li>A. O(0)</li><li>B. O(1)</li><li>C. O(n)</li><li>D. O(<img src="https://mooc1.chaoxing.com/ananas/latex/p/576" alt="img">)</li></ul><p><em>我的答案:</em> C</p><ol start="11"><li>(单选题) 线性表（a1,a2,…,an）以<strong>链接方式</strong>存储时，访问第i位置元素的时间复杂度为（  ）。</li></ol><ul><li>A. O（i）</li><li>B. O（1）</li><li>C. O（n）</li><li>D. O（i-1）</li></ul><p><em>我的答案:</em> C:O（n）;</p><ol start="12"><li>(单选题) 非空的循环单链表head的尾结点p满足（  ）。</li></ol><ul><li>A. p-&gt;next&#x3D;&#x3D;head</li><li>B. p-&gt;next&#x3D;&#x3D;NULL</li><li>C. p&#x3D;&#x3D;NULL</li><li>D. p&#x3D; head</li></ul><p><em>我的答案:</em> A:p-&gt;next&#x3D;&#x3D;head;</p><ol start="13"><li>(单选题) 在单链表指针为p的结点之后插入指针为s的结点，正确的操作是（  ）。</li></ol><ul><li>A. p-&gt;next&#x3D;s;s-&gt;next&#x3D;p-&gt;next;</li><li>B. s-&gt;next&#x3D;p-&gt;next;p-&gt;next&#x3D;s;</li><li>C. p-&gt;next&#x3D;s;p-&gt;next&#x3D;s-&gt;next;</li><li>D. p-&gt;next&#x3D;s-&gt;next;p-&gt;next&#x3D;s;</li></ul><p><em>我的答案:</em> B:s-&gt;next&#x3D;p-&gt;next;p-&gt;next&#x3D;s;；</p><ol start="14"><li>(单选题) 对于一个头指针为head的带头结点的单链表，判定该表为空表的条件是（  ）。</li></ol><ul><li>A. head&#x3D;&#x3D;NULL</li><li>B. head-&gt;next&#x3D;&#x3D;NULL</li><li>C. Head-&gt;next&#x3D;&#x3D;head</li><li>D. head!&#x3D;NULL</li></ul><p><em>我的答案:</em> B:head-&gt;next&#x3D;&#x3D;NULL;</p><ol start="15"><li>(单选题) 完成在非空双向循环链表结点p之后插入s的操作是（  ）。</li></ol><ul><li>A. p-&gt;next&#x3D;s ; s-&gt;prior&#x3D;p; p-&gt;next-&gt;prior&#x3D;s ; s-&gt;next&#x3D;p-&gt;next;</li><li>B. p-&gt;next-&gt;prior&#x3D;s; p-&gt;next&#x3D;s; s-&gt;prior&#x3D;p; s-&gt;next&#x3D;p-&gt;next;</li><li>C. s-&gt;prior&#x3D;p; s-&gt;next&#x3D;p-&gt;next; p-&gt;next&#x3D;s; p-&gt;next-&gt;prior&#x3D;s ;</li><li>D. s-&gt;next&#x3D;p-&gt;next; p-&gt;next-&gt;prior&#x3D;s ; s-&gt;prior&#x3D;p; p-&gt;next&#x3D;s;</li></ul><p><em>我的答案:</em> C:s-&gt;prior&#x3D;p; s-&gt;next&#x3D;p-&gt;next; p-&gt;next&#x3D;s; p-&gt;next-&gt;prior&#x3D;s ;;</p><ol start="16"><li>(单选题) 在双向循环链表中，删除p所指的结点时须修改指针（  ）。</li></ol><ul><li>A. p-&gt;prior-&gt;next&#x3D;p-&gt;next；   p-&gt;next-&gt;prior&#x3D;p-&gt;prior;</li><li>B. p-&gt;prior&#x3D;p-&gt;prior-&gt;prior ；  p-&gt;prior-&gt;next&#x3D;p;</li><li>C. p-&gt;next-&gt;prior&#x3D;p；      p-&gt;next&#x3D;p-&gt;next-&gt;next;</li><li>D. p-&gt;next&#x3D;p-&gt;prior-&gt;prior；   p-&gt;prior&#x3D;p-&gt;next-&gt;next;</li></ul><p><em>我的答案:</em> A:p-&gt;prior-&gt;next&#x3D;p-&gt;next； p-&gt;next-&gt;prior&#x3D;p-&gt;prior;;</p><h4 id="线性表L-x3D-（a1-a2-…-an）用数组表示，假定删除表中任一元素的概率相同，则删除一个元素平均需要移动元素的个数是（）。"><a href="#线性表L-x3D-（a1-a2-…-an）用数组表示，假定删除表中任一元素的概率相同，则删除一个元素平均需要移动元素的个数是（）。" class="headerlink" title="线性表L&#x3D;（a1,a2,…,an）用数组表示，假定删除表中任一元素的概率相同，则删除一个元素平均需要移动元素的个数是（）。"></a>线性表L&#x3D;（a1,a2,…,an）用数组表示，假定删除表中任一元素的概率相同，则删除一个元素平均需要移动元素的个数是（）。</h4><ul><li><p>我的答案：</p><p>(1) <strong>(n-1)&#x2F;2</strong></p></li></ul><h4 id="填空题-在一个长度为n的顺序表中第i个位置（1≤i≤n-1）插入一个元素时，需向后移动（）个元素。"><a href="#填空题-在一个长度为n的顺序表中第i个位置（1≤i≤n-1）插入一个元素时，需向后移动（）个元素。" class="headerlink" title="(填空题) 在一个长度为n的顺序表中第i个位置（1≤i≤n+1）插入一个元素时，需向后移动（）个元素。"></a>(填空题) 在一个长度为n的顺序表中第i个位置（1≤i≤n+1）插入一个元素时，需向后移动（）个元素。</h4><ul><li><p>我的答案：</p><p>(1) <strong>n - i + 1</strong></p></li></ul><h3 id="第三章-1"><a href="#第三章-1" class="headerlink" title="第三章"></a>第三章</h3><p>全是算法</p><h3 id="第四章（栈和队列）"><a href="#第四章（栈和队列）" class="headerlink" title="第四章（栈和队列）"></a>第四章（栈和队列）</h3><ol><li>(单选题)栈和队列的共同点是( )。</li></ol><ul><li>A. 没有共同点</li><li>B. 只允许在端点处插入和删除元素</li><li>C. 都是先进后出</li><li>D. 都是先进先出</li></ul><p><em>我的答案:</em> B:只允许在端点处插入和删除元素;</p><h4 id="单选题-循环队列占用的空间-。"><a href="#单选题-循环队列占用的空间-。" class="headerlink" title="(单选题) 循环队列占用的空间( )。"></a>(单选题) 循环队列占用的空间( )。</h4><ul><li><strong>A. 必须连续</strong></li><li>B. 不必连续</li><li>C. 不能连续</li><li>D. 可以不连续</li></ul><p>***的答案: A <em>正确答案:</em> A</p><p>4.(单选题) 若用一个大小为6的数组来实现循环队列,且当前front和rear的值分别为3和0,当从队列中删除一个元素,再加入两个元素后,front和rear的值分别为( )。</p><ul><li>A. 5和1</li><li>B. 4和2</li><li>C. 2和4</li><li>D. 1和5</li></ul><p>***的答案: B <em>正确答案:</em> B</p><ol start="8"><li>(单选题) 对于队列操作数据的原则是( )。</li></ol><ul><li><strong>A. 先进先出</strong></li><li>B. 后进先出</li><li>C. 先进后出</li><li>D. 不分顺序</li></ul><p>***的答案: A <em>正确答案:</em> A</p><ol start="13"><li>(单选题) 设链栈中结点的结构:data为数据域,next为指针域,且top是栈顶指针。若想在链栈的栈顶插入一个由指针s所指的结点,则应执行下列( )操作。</li></ol><ul><li><strong>A. s-&gt;next&#x3D;top-&gt;next;top-&gt;next&#x3D;s;</strong></li><li>B. top-&gt;next&#x3D;s;</li><li>C. s-&gt;next&#x3D;top;top&#x3D;top-&gt;next;</li><li>D. s-&gt;next&#x3D;top;top&#x3D;s;</li></ul><p>***的答案: D  <em>正确答案:</em> A</p><ol start="16"><li>(单选题) 队列中的元素个数是( )。</li></ol><ul><li>A. 不变的</li><li>B. 可变的</li><li>C. 任意的</li><li>D. 0</li></ul><p>***的答案: B <em>正确答案:</em> B</p><p>17.(单选题) 循环队列SQ队满的条件是( )。</p><ul><li>A. SQ-&gt;rear&#x3D;&#x3D;SQ-&gt;front</li><li>B. (SQ-&gt;rear+1)%MAXLEN&#x3D;&#x3D;SQ-&gt;front</li><li>C. SQ-&gt;rear&#x3D;&#x3D;O</li><li>D. SQ-&gt;front&#x3D;&#x3D;0</li></ul><p>***的答案: B <em>正确答案:</em> B</p><h4 id="填空题-顺序队列初始化后-front-x3D-rear-x3D-。"><a href="#填空题-顺序队列初始化后-front-x3D-rear-x3D-。" class="headerlink" title="(填空题) 顺序队列初始化后, front&#x3D;rear&#x3D;___。"></a>(填空题) 顺序队列初始化后, front&#x3D;rear&#x3D;___。</h4><ul><li><p>***的答案：</p><p>(1) 1</p></li><li><p><em>正确答案：</em></p><p>(1) <strong>-1</strong></p></li></ul><ol start="21"><li>(填空题) 在队列中,允许插入的一端称为___。</li></ol><ul><li><p>***的答案：</p><p>(1) 队尾</p></li><li><p><em>正确答案：</em></p><p>(1) 队尾</p></li></ul><ol start="27"><li>(填空题) 在队列中,允许删除的一端称为___。</li></ol><ul><li><p>***的答案：</p><p>(1) 队首</p></li><li><p><em>正确答案：</em></p><p>(1) 队头</p></li></ul><h4 id="判断题-栈和队列都是顺序存储的线性结构。"><a href="#判断题-栈和队列都是顺序存储的线性结构。" class="headerlink" title="(判断题) 栈和队列都是顺序存储的线性结构。"></a>(判断题) 栈和队列都是顺序存储的线性结构。</h4><ul><li>A. 对</li><li><strong>B. 错</strong></li></ul><p>***的答案:  错  正确答案: 错</p><h3 id="第五章（串和广义表）"><a href="#第五章（串和广义表）" class="headerlink" title="第五章（串和广义表）"></a>第五章（串和广义表）</h3><p>(单选题)广义表(a,b,c,d,e)的表尾是( )。</p><ul><li>A. (e)</li><li>B. ( )</li><li>C. (b,c,d,e)</li><li>D. (a,b,c,d,e)</li></ul><p><em>我的答案:</em> C</p><p>(单选题)广义表是线性表的推广,它们之间的区别在千( )。</p><ul><li>A. 能否使用子表</li><li>B. 能否使用原子项</li><li>C. 是否能为空</li><li>D. 表的长度</li></ul><p><em>我的答案:</em> A:能否使用子表;</p><h4 id="单选题-设有一个字符串S-x3D-”abcdefgh”-问该串的最大子串个数为-。"><a href="#单选题-设有一个字符串S-x3D-”abcdefgh”-问该串的最大子串个数为-。" class="headerlink" title="(单选题)设有一个字符串S&#x3D;”abcdefgh”,问该串的最大子串个数为( )。"></a>(单选题)设有一个字符串S&#x3D;”abcdefgh”,问该串的最大子串个数为( )。</h4><p>37&#x3D;(8*9)&#x2F;2+1</p><ul><li>A. 9</li><li>B. 37</li><li>C. 36</li><li>D. 8</li></ul><p><em>我的答案:</em> B:37;</p><h4 id="串的最大子串个数计算"><a href="#串的最大子串个数计算" class="headerlink" title="串的最大子串个数计算"></a>串的最大子串个数计算</h4><p><strong>字串： n（n+1）&#x2F;2 + 1</strong></p><p><strong>非空子串：n（n+1）&#x2F;2</strong></p><p><strong>非空真子串：n（n+1）&#x2F;2 - 1</strong></p><p>(单选题)若Strlndex(S,T)表示求T在S中的位置的操作,则对于S&#x3D;”Beijing and Nanjing”,T&#x3D;”jing”,Strlndex(S,T)的结果为( )。</p><ul><li>A. 4</li><li>B. 2</li><li>C. 3</li><li>D. 16</li></ul><p><em>正确答案:</em> A</p><h4 id="填空题-串链接存储的优点是（）-缺点是（）。"><a href="#填空题-串链接存储的优点是（）-缺点是（）。" class="headerlink" title="(填空题)串链接存储的优点是（）,缺点是（）。"></a>(填空题)串链接存储的优点是（）,缺点是（）。</h4><ul><li><p><em>我的答案：</em></p><p>(1) 可以任意地插入和删除子串，不需要移动其他子串</p><p>(2) 存储密度低，每个字符都需要一个指针来指向下一个字符，因此浪费了大量的存储空间</p></li></ul><h4 id="填空题-串顺序存储紧凑格式的缺点是对串的字符处理-。"><a href="#填空题-串顺序存储紧凑格式的缺点是对串的字符处理-。" class="headerlink" title="(填空题)串顺序存储紧凑格式的缺点是对串的字符处理___。"></a>(填空题)串顺序存储紧凑格式的缺点是对串的字符处理___。</h4><ul><li><p><em>我的答案：</em></p><p>(1) 比较困难</p></li></ul><h4 id="填空题-空格串的长度等于-。"><a href="#填空题-空格串的长度等于-。" class="headerlink" title="(填空题)空格串的长度等于___。"></a>(填空题)空格串的长度等于___。</h4><ul><li><p><em>我的答案：</em></p><p>(1) 空格的个数</p></li></ul><p>(填空题)在C语言中,以字符___表示串值的终结。</p><ul><li><p><em>我的答案：</em></p><p>(1) ’\0’</p></li></ul><h4 id="串的函数"><a href="#串的函数" class="headerlink" title="串的函数"></a>串的函数</h4><p><strong>ConcatStr(S1,S2)直接拼接S1和S2</strong></p><p><strong>SubStr(S1,2,LenStr(S2))选取</strong></p><p><strong>Strlndex(S,T)返回字符串t在字符串s中出现的开始位置或索引。</strong></p><p>(填空题)两个串相等是指两个串长度相等,且对应位置的___相等。</p><ul><li><p><em>我的答案：</em></p><p>(1) 字符</p></li></ul><h4 id="填空题-串顺序存储非紧凑格式的缺点是-。"><a href="#填空题-串顺序存储非紧凑格式的缺点是-。" class="headerlink" title="(填空题)串顺序存储非紧凑格式的缺点是___。"></a>(填空题)串顺序存储非紧凑格式的缺点是___。</h4><ul><li><p><em>我的答案：</em></p><p>(1) 空间利用率低</p></li></ul><ol start="29"><li>(填空题)字符串按存储方式可以分为：顺序存储,链接存储和___。</li></ol><ul><li><p><em>我的答案：</em></p><p>(1) 堆分配存储</p></li></ul><p>(判断题)在链串中为了提高存储密度,应该增大结点的大小。</p><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 对</p><h4 id="判断题-串是n个字母的有限序列-n≥0-。"><a href="#判断题-串是n个字母的有限序列-n≥0-。" class="headerlink" title="(判断题)串是n个字母的有限序列(n≥0)。"></a>(判断题)串是n个字母的有限序列(n≥0)。</h4><ul><li>A. 对</li><li><strong>B. 错</strong></li></ul><p><em>我的答案:</em> 错</p><h4 id="判断题-广义表不能递归。"><a href="#判断题-广义表不能递归。" class="headerlink" title="(判断题)广义表不能递归。"></a>(判断题)广义表不能递归。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错</p><h3 id="第六章（树）"><a href="#第六章（树）" class="headerlink" title="第六章（树）"></a>第六章（树）</h3><h4 id="单选题-在一棵度为3的树中-度为3的结点数为2个-度为2的结点数为1个-度为1的结点数为2个-那么度为0的结点数有-个。"><a href="#单选题-在一棵度为3的树中-度为3的结点数为2个-度为2的结点数为1个-度为1的结点数为2个-那么度为0的结点数有-个。" class="headerlink" title="(单选题) 在一棵度为3的树中,度为3的结点数为2个,度为2的结点数为1个,度为1的结点数为2个,那么度为0的结点数有( )个。"></a><strong>(单选题) 在一棵度为3的树中,度为3的结点数为2个,度为2的结点数为1个,度为1的结点数为2个,那么度为0的结点数有( )个。</strong></h4><ul><li>A. 4</li><li>B. 5</li><li><strong>C. 6</strong></li><li>D. 7</li></ul><p>我的答案: A 正确答案: <strong>C</strong></p><p>（第一种解法： 没看懂，叶子的度数为0；那么设叶子数为x，则此树的总分叉数为1* 4+ 2 * 2+ 3* 1+ 4* 1&#x3D;15；此树的节点个数为16（此处涉及到一个公式;节点 数&#x3D;分叉数+1，由图形便可以观察出来）。又根据题目可以知道顶点数目还可以列出一个式子：4+2+1+1+x便可以得到等 式：4+2+1+1+x&#x3D;16；x&#x3D;8为叶子数。）</p><p>（第二种解法：设该树总共有n个节点,则n&#x3D;n0+n1+n2+n3. </p><p> 该树中除了根节点没有前驱以外,每个节点有且只有一个前驱,因此有n个节点的树的总边数为n-1条.根据度的定义,总边数与度之间的关系为：n-1&#x3D;0<em>n0+1</em>n1+2<em>n2+3</em>n3.</p><p>  联立两个方程求解,可以得到n0&#x3D;6）</p><h4 id="单选题-某二又树的后序遍历序列为DABEC-中序遍历序列为DEBAC-则先序遍历序列为-。-过程写在课本上"><a href="#单选题-某二又树的后序遍历序列为DABEC-中序遍历序列为DEBAC-则先序遍历序列为-。-过程写在课本上" class="headerlink" title="(单选题) 某二又树的后序遍历序列为DABEC,中序遍历序列为DEBAC,则先序遍历序列为()。(过程写在课本上)"></a>(单选题) 某二又树的后序遍历序列为DABEC,中序遍历序列为DEBAC,则先序遍历序列为()。(过程写在课本上)</h4><ul><li>A. ACBED</li><li>B. DECAB</li><li>C. DEABC</li><li>D**. CEDBA**</li></ul><p> 正确答案: D</p><h4 id="单选题-已知一棵完全二叉树的结点总数为9个-则最后一层的结点数为-。"><a href="#单选题-已知一棵完全二叉树的结点总数为9个-则最后一层的结点数为-。" class="headerlink" title="(单选题) 已知一棵完全二叉树的结点总数为9个,则最后一层的结点数为( )。"></a>(单选题) 已知一棵完全二叉树的结点总数为9个,则最后一层的结点数为( )。</h4><ul><li>A. 1</li><li>B. 2</li><li>C. 3</li><li>D. 4</li></ul><p>***的答案: B 正确答案: B</p><p>（完全二叉树<strong>最大结点数是2的k次方 - 1</strong>，k表示深度，所以，总数9的结点数，深度应该是4，前3层共结点数2的3次方 -1 &#x3D; 7， 9 - 7 等于2，所以最后一层结点数是2）</p><ol start="6"><li><strong>(单选题) 假设在一棵二叉树中,双分支结点数为15,单分支结点数为30个,则叶子结点数为( )个。</strong></li></ol><ul><li>A. 15</li><li>B. 16</li><li>C. 17</li><li>D. 47</li></ul><p>***的答案: B <em>正确答案:</em> B</p><p>在数据结构中一般常用的 公式为：二叉树：度为0的节点数&#x3D;度为2的节点数+1（n0&#x3D;15+1&#x3D;16）此公式可由上述计算思想推导）</p><ol start="8"><li>(单选题) 具有35个结点的完全二叉树的深度为( )。</li></ol><ul><li>A. 5</li><li>B. 6</li><li>C. 7</li><li>D. 8</li></ul><p>***的答案: B <em>正确答案:</em> B</p><h4 id="节点个树n和树深k的关系"><a href="#节点个树n和树深k的关系" class="headerlink" title="节点个树n和树深k的关系"></a>节点个树n和树深k的关系</h4><p>所以节点个树n和树深k的关系为：2^k-1&#x3D;n<br>所以树深：k&#x3D;log_2(n+1)或者⌊log₂n⌋+1 ?</p><h4 id="单选题-用顺序存储的方法将完全二叉树中所有结点逐层存放在数组a-1-a-n-中-结点a-i-若有左孩子-其左孩子的编号为结点-。"><a href="#单选题-用顺序存储的方法将完全二叉树中所有结点逐层存放在数组a-1-a-n-中-结点a-i-若有左孩子-其左孩子的编号为结点-。" class="headerlink" title="(单选题) 用顺序存储的方法将完全二叉树中所有结点逐层存放在数组a[1]~a[n]中,结点a[i]若有左孩子,其左孩子的编号为结点( )。"></a>(单选题) 用顺序存储的方法将完全二叉树中所有结点逐层存放在数组a[1]~a[n]中,结点a[i]若有左孩子,其左孩子的编号为结点( )。</h4><ul><li>A. a[2i+1]</li><li>B. a[2i-1]</li><li>C. a[i&#x2F;2]</li><li><strong>D. a[2i]</strong></li></ul><p>***的答案: D <em>正确答案:</em> D</p><p><strong>因为在完全二叉树中，左孩子的位置是当前结点的位置乘以2。</strong></p><h4 id="单选题-二叉树的先序遍历序列为ABC的不同二叉树有-种形态。"><a href="#单选题-二叉树的先序遍历序列为ABC的不同二叉树有-种形态。" class="headerlink" title="(单选题) 二叉树的先序遍历序列为ABC的不同二叉树有( )种形态。"></a>(单选题) 二叉树的先序遍历序列为ABC的不同二叉树有( )种形态。</h4><ul><li>A. 3</li><li>B. 4</li><li><strong>C. 5</strong></li><li>D. 6</li></ul><p>***的答案: C <em>正确答案:</em> C</p><h4 id="填空题-一棵深度为k的满二叉树的结点总数为（）-一棵深度为k的完全二叉树的结点总数的最小值为（）-最大值为（）。"><a href="#填空题-一棵深度为k的满二叉树的结点总数为（）-一棵深度为k的完全二叉树的结点总数的最小值为（）-最大值为（）。" class="headerlink" title="(填空题) 一棵深度为k的满二叉树的结点总数为（）,一棵深度为k的完全二叉树的结点总数的最小值为（）,最大值为（）。"></a>(填空题) 一棵深度为k的满二叉树的结点总数为（）,一棵深度为k的完全二叉树的结点总数的最小值为（）,最大值为（）。</h4><ul><li><p>***的答案：</p><p>(1)2^k-1  </p><p>(2) 2^(k-1) </p><p>(3) 2^k-1</p></li><li><p><em>正确答案：</em></p><p>(1) <strong>2^k-1</strong></p><p>(2) <strong>2^(k-1)</strong></p><p>(3) <strong>2^k-1</strong></p></li></ul><h4 id="填空题-先序序列和中序序列相同的二叉树为-。"><a href="#填空题-先序序列和中序序列相同的二叉树为-。" class="headerlink" title="(填空题) 先序序列和中序序列相同的二叉树为___。"></a>(填空题) 先序序列和中序序列相同的二叉树为___。</h4><ul><li><p>***的答案：</p><p>(1) 没有左孩子</p></li><li><p><em>正确答案：</em></p><p>(1) <strong>单右枝二叉树或孤立结点</strong></p></li></ul><ol start="19"><li>(填空题) 由三个结点构成的二叉树,共有___种不同的结构。</li></ol><ul><li><p>***的答案：</p><p>(1) 5</p></li><li><p><em>正确答案：</em></p><p>(1) 5</p></li></ul><ol start="20"><li>(填空题) 假定一棵树的广义表表示法为A(B(E),C(F(H,I,J),G),D),则该树的度为（）,树的深度为（）,终端结点的个数为（）,单分支结点的个数为（）,双分支的结点个数为（）,三分支的结点个数为（）,C结点的双亲结点为（）,其孩子结点为（）和（）结点。</li></ol><ul><li><p>***的答案：</p><p>(1) 3</p><p>(2) 4</p><p>(3) 6</p><p>(4) 1</p><p>(5) 1</p><p>(6) 2</p><p>(7) A</p><p>(8) F</p><p>(9) G</p></li><li><p><em>正确答案：</em></p><p>(1) 3</p><p>(2) 4</p><p>(3) 6</p><p>(4) 1</p><p>(5) 1</p><p>(6) 2</p><p>(7) A</p><p>(8) F</p><p>(9) G</p></li></ul><h4 id="填空题-哈夫曼树是指-的二叉树。"><a href="#填空题-哈夫曼树是指-的二叉树。" class="headerlink" title="(填空题) 哈夫曼树是指___的二叉树。"></a>(填空题) 哈夫曼树是指___的二叉树。</h4><ul><li><p>***的答案：</p><p>(1) 最优</p></li><li><p><em>正确答案：</em></p><p>(1) <strong>带权路径长度最小</strong></p></li></ul><h4 id="填空题-设一棵二叉树共有50个叶子结点-终端结点-则有-个度为2的结点。"><a href="#填空题-设一棵二叉树共有50个叶子结点-终端结点-则有-个度为2的结点。" class="headerlink" title="(填空题) 设一棵二叉树共有50个叶子结点(终端结点),则有___个度为2的结点。"></a>(填空题) 设一棵二叉树共有50个叶子结点(终端结点),则有___个度为2的结点。</h4><ul><li><p>***的答案：</p><p>(1) 49</p></li><li><p><em>正确答案：</em></p><p>(1) 49</p></li></ul><p>在数据结构中一般常用的 公式为：二叉树：度为2的节点数&#x3D;度为0的节点数-1（n0&#x3D;50-1&#x3D;49）此公式可由上述计算思想推导）</p><h4 id="填空题-对于一个具有n个结点的二叉树-当它为一棵（）二叉树时-具有最小高度-即为（）-当它为一棵单支树时具有（）高度-即为（）。"><a href="#填空题-对于一个具有n个结点的二叉树-当它为一棵（）二叉树时-具有最小高度-即为（）-当它为一棵单支树时具有（）高度-即为（）。" class="headerlink" title="(填空题) 对于一个具有n个结点的二叉树,当它为一棵（）二叉树时,具有最小高度,即为（）,当它为一棵单支树时具有（）高度,即为（）。"></a>(填空题) 对于一个具有n个结点的二叉树,当它为一棵（）二叉树时,具有最小高度,即为（）,当它为一棵单支树时具有（）高度,即为（）。</h4><ul><li><p>***的答案：</p><p>(1) 完全</p><p>(2) log2n+1 </p><p>(3) n</p><p>(4) 线性表</p></li><li><p><em>正确答案：</em></p><p>(1) <strong>完全</strong></p><p>(2) <strong>⌊log₂n⌋+1</strong></p><p>(3) <strong>最大</strong></p><p>(4) <strong>线性表</strong></p></li></ul><h4 id="填空题-对于二叉树来说-第i层上最多有-个结点。"><a href="#填空题-对于二叉树来说-第i层上最多有-个结点。" class="headerlink" title="(填空题) 对于二叉树来说,第i层上最多有___个结点。"></a>(填空题) 对于二叉树来说,第i层上最多有___个结点。</h4><ul><li><p>***的答案：</p><p>(1) 2</p></li><li><p><em>正确答案：</em></p><p>(1) <strong>2^(i-1)</strong></p></li></ul><h4 id="填空题-由带权为3-6-2-5的4个叶子结点构成的一棵哈夫曼树-则带权路径长度为-。"><a href="#填空题-由带权为3-6-2-5的4个叶子结点构成的一棵哈夫曼树-则带权路径长度为-。" class="headerlink" title="(填空题) 由带权为3,6,2,5的4个叶子结点构成的一棵哈夫曼树,则带权路径长度为___。"></a>(填空题) 由带权为3,6,2,5的4个叶子结点构成的一棵哈夫曼树,则带权路径长度为___。</h4><ul><li><p>***的答案：</p><p>(1) 31</p></li><li><p><em>正确答案：</em></p><p>(1) <strong>31</strong></p></li></ul><p>构建哈夫曼树：</p><p>1、给其排序，2，3，5，6</p><p>2、找到其中最小的两数，开始画树，2，3</p><p>3、计算两数之和，并将该和加入到待找最小两数的数组里，跟着一起被选</p><p>如果选中的是两个原数组的数，则在旁边重开一个全新的分支</p><p>如果权值与一个原数组的数相同，则选择最小的这两个数，但是计算带权路径长度时不能带上它</p><p>4、算带权路径长度 2* 3（深度）+3* 3+6* 1&#x3D;31</p><h4 id="填空题-设F是森林-B是由F转换得到的二叉树-F中有n个非终端结点-B中右指针域为空的结点有-。"><a href="#填空题-设F是森林-B是由F转换得到的二叉树-F中有n个非终端结点-B中右指针域为空的结点有-。" class="headerlink" title="(填空题) 设F是森林,B是由F转换得到的二叉树,F中有n个非终端结点,B中右指针域为空的结点有___。"></a>(填空题) 设F是森林,B是由F转换得到的二叉树,F中有n个非终端结点,B中右指针域为空的结点有___。</h4><ul><li><p>***的答案：</p><p>(1) n+1</p></li><li><p><em>正确答案：</em></p><p>(1) <strong>n+1</strong></p></li></ul><p>在将森林F转换为二叉树B时，每个非终端节点都会转换为一个二叉树节点。由于B是二叉树，每个节点最多只有两个指针域，即左指针和右指针。在转换过程中，每个非终端节点都会在B中生成一个包含自身的二叉树节点，而这个节点的右指针域为空。</p><ol start="30"><li>(判断题) 由树转换成二叉树,其根结点的右子树一定为空。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><p>***的答案: 对 <em>正确答案:</em> 对</p><ol start="33"><li>(判断题) 树结构中的每个结点最多只有一个直接前驱。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><p>***的答案: 对 <em>正确答案:</em> 对</p><h3 id="第七章（图）"><a href="#第七章（图）" class="headerlink" title="第七章（图）"></a>第七章（图）</h3><h4 id="单选题-下列说法不正确的是-。"><a href="#单选题-下列说法不正确的是-。" class="headerlink" title="(单选题) 下列说法不正确的是( )。"></a>(单选题) 下列说法不正确的是( )。</h4><ul><li>A. 图的遍历是从给定的源点出发每一个顶点仅被访问一次</li><li>B. 遍历的基本算法有两种：深度优先遍历和广度优先遍历</li><li>C. 图的深度优先遍历不适用于有向图</li><li>D. 图的深度优先遍历是一个递归过程</li></ul><p>我的答案:C<em>正确答案:</em> C</p><p>(单选题) 一个n个顶点的连通<strong>无向图</strong>,其边的个数至少为( )。</p><ul><li>A. n-1</li><li>B. n</li><li>C. n+1</li><li>D. nlog₂n</li></ul><p>我的答案: A<em>正确答案:</em> A</p><p>(单选题) 要连通具有n个顶点的<strong>有向图</strong>,至少需要( )条边。</p><ul><li>A. n-1</li><li>B. n</li><li>C. n+1</li><li>D. 2n</li></ul><p>我的答案: B<em>正确答案:</em> B</p><p>(单选题) 无向图G&#x3D;(V,E),其中：v&#x3D;{a,b,c,d,e,f},E&#x3D;{(a,b),(a,e),(a,c),(b,e),(c,f),(f,d),(e,d)｝,对该图进行深度优先遍历,得到的顶点序列正确的是( )。</p><ul><li>A. a,b,e,c,d,f</li><li>B. a,c,f,e,b,d</li><li>C. a,e,b,c,f,d</li><li>D. a,e,d,f,c,b</li></ul><p>我的答案: D<em>正确答案:</em> D</p><h4 id="DFS的原理"><a href="#DFS的原理" class="headerlink" title="DFS的原理"></a>DFS的原理</h4><p>DFS算法的特点是从根顶点出发， </p><p>​    \1. 访问所到达的顶点v。 </p><p>​    \2. 前往v的未被访问的邻接点。</p><p>​      若v的所有邻接点均被访问过，则回溯到访问历史中v的上一个顶点v’，对其进行第2步，即访问v’除v之外的其他邻接点；这种回溯可以一直到根顶点；若回溯到根顶点后仍有节点未被访问，且不与根顶点邻接，则更换根节点。</p><p>解析：</p><p>A. a, b, e, c, d, f </p><p>  a-&gt;b, 没问题；到b后，b的邻接点中只剩下e未被访问，b-&gt;e没问题 </p><p>  e-&gt;c，不行，e此时仍有未被访问的邻接点d, 且e没有跟c连通，答案错误 </p><p>  B. a, c, f, e, b, d </p><p>  a-&gt;c-&gt;f, 没问题；f-&gt;e，不行，f此时仍有未被访问的邻接点d，且f没有跟e连通，答案错误 </p><p>  C. a, e, b, c, f, d </p><p>  a-&gt;e-&gt;b，没问题；到b后，b的邻接点均被访问，应回溯到e，然后访问e其他未被访问的邻接点（只剩d），且b没有跟c连通，答案错误 </p><p>  D. a, e, d, f, c, b </p><p>  a-&gt;e-&gt;d-&gt;f-&gt;c，没问题；到c后，其两个邻接点a与f均已被访问，按c-&gt;f-&gt;d-&gt;e-&gt;a回溯时候发现，e顶点仍有未被访问的顶点b，于是a-&gt;e-&gt;d-&gt;f-&gt;c-&gt;b</p><p>(单选题) 用邻接表表示图进行<strong>广度</strong>优先遍历时,通常采用( )来实现算法。</p><ul><li>A. 栈</li><li>B. 队列</li><li>C. 树</li><li>D. 图</li></ul><p>我的答案: B<em>正确答案:</em> B</p><p>(单选题) 用邻接表表示图进行<strong>深度</strong>优先遍历时,通常采用( )来实现算法。</p><ul><li>A. 栈</li><li>B. 队列</li><li>C. 树</li><li>D. 图</li></ul><p>我的答案: A<em>正确答案:</em> A</p><p>(单选题) 无向图顶点V的度是关联于该顶点( )的数目。</p><ul><li>A. 顶点</li><li>B. 边</li><li>C. 序号</li><li>D. 下标</li></ul><p>我的的答案:B<em>正确答案:</em> B</p><p>每个顶点所拥有的边的个数叫作<strong>度</strong></p><p>(单选题) 图中有关路径的定义是( )。</p><ul><li>A. 由顶点和相邻顶点序偶构成的边所形成的序列</li><li>B. 由不同顶点所形成的序列</li><li>C. 由不同边所形成的序列</li><li>D. 上述定义都不是</li></ul><p>我的答案: A<em>正确答案:</em> A</p><p>(单选题) n个结点的<strong>完全有向图</strong>含有边的数目( )。</p><ul><li>A. n*n</li><li>B. n(n+1)</li><li>C. n&#x2F;2</li><li>D. n*(n-1)</li></ul><p>我的答案: D<em>正确答案:</em> D</p><p>(单选题) 设<strong>无向图</strong>的顶点个数为n,则该图<strong>最多</strong>有( )条边。</p><ul><li>A. n-1</li><li>B. n(n-1)&#x2F;2</li><li>C. n+1</li><li>D. 0</li><li>E. n²</li></ul><p>我的答案: B<em>正确答案:</em> B</p><p>(单选题) 一个无向图有5个顶点、8条边,则其生成树将要去掉( )条边。</p><p><strong>边至少为5-1条</strong></p><ul><li>A. 3</li><li><strong>B. 4</strong></li><li>C. 5</li><li>D. 6</li></ul><p>我的答案: B<em>正确答案:</em> B</p><h4 id="单选题-任何一个无向连通图的最小生成树-。"><a href="#单选题-任何一个无向连通图的最小生成树-。" class="headerlink" title="(单选题) 任何一个无向连通图的最小生成树( )。"></a>(单选题) 任何一个无向连通图的最小生成树( )。</h4><ul><li>A. 只有一棵</li><li>B. 一棵或多棵</li><li>C. 一定有多棵</li><li>D. 可能不存在</li></ul><p><em>正确答案:</em> A</p><h4 id="多选题-在一个无向图中-所有顶点的度数之和等于所有边数-倍-在一个有向图中-所有顶点的入度之和等千所有顶点出度之和的-倍。"><a href="#多选题-在一个无向图中-所有顶点的度数之和等于所有边数-倍-在一个有向图中-所有顶点的入度之和等千所有顶点出度之和的-倍。" class="headerlink" title="(多选题) 在一个无向图中,所有顶点的度数之和等于所有边数( )倍,在一个有向图中,所有顶点的入度之和等千所有顶点出度之和的( )倍。"></a>(多选题) 在一个无向图中,所有顶点的度数之和等于所有边数( )倍,在一个有向图中,所有顶点的入度之和等千所有顶点出度之和的( )倍。</h4><ul><li>A. 1&#x2F;2</li><li>B. 2</li><li>C. 1</li><li>D. 4</li></ul><p>我的答案: BC<em>正确答案:</em> BC</p><h4 id="多选题-一个有n个结点的图-最少有-个连通分量-最多有-个连通分量。"><a href="#多选题-一个有n个结点的图-最少有-个连通分量-最多有-个连通分量。" class="headerlink" title="(多选题) 一个有n个结点的图,最少有( )个连通分量,最多有( )个连通分量。"></a>(多选题) 一个有n个结点的图,最少有( )个连通分量,最多有( )个连通分量。</h4><ul><li>A. 0</li><li>B. 1</li><li>C. n-1</li><li>D. n</li></ul><p><em>正确答案:</em> BD</p><h4 id="填空题-G是一个非连通无向图-共有28条边-则该图至少有-个顶点。"><a href="#填空题-G是一个非连通无向图-共有28条边-则该图至少有-个顶点。" class="headerlink" title="(填空题) G是一个非连通无向图,共有28条边,则该图至少有___个顶点。"></a>(填空题) G是一个非连通无向图,共有28条边,则该图至少有___个顶点。</h4><p>用到无向图公式n(n-1)&#x2F;2，n为顶点数，而最后因为是<strong>非连通图</strong>所以还要n+1为9</p><ul><li><p>我的答案：</p><p>(1) 9</p></li><li><p><em>正确答案：</em></p><p>(1) 9</p></li></ul><p>(填空题) 具有10个顶点的无向图,边的总数最多为___。</p><ul><li><p>我的答案：</p><p>(1) 45</p></li><li><p><em>正确答案：</em></p><p>(1) 45</p></li></ul><h4 id="填空题-一个连通图的-是一个极小连通子图。"><a href="#填空题-一个连通图的-是一个极小连通子图。" class="headerlink" title="(填空题) 一个连通图的___是一个极小连通子图。"></a>(填空题) 一个连通图的___是一个极小连通子图。</h4><ul><li><p>我的答案：</p><p>(1) 生成树</p></li><li><p><em>正确答案：</em></p><p>(1) 生成树</p></li></ul><h4 id="填空题-如果含n个顶点的图形形成一个环-则它有-棵生成树。"><a href="#填空题-如果含n个顶点的图形形成一个环-则它有-棵生成树。" class="headerlink" title="(填空题) 如果含n个顶点的图形形成一个环,则它有___棵生成树。"></a>(填空题) 如果含n个顶点的图形形成一个环,则它有___棵生成树。</h4><ul><li><p>我的答案：</p><p>(1) n</p></li><li><p><em>正确答案：</em></p><p>(1) n</p></li></ul><h4 id="填空题-有向图的强连通分量是指-。"><a href="#填空题-有向图的强连通分量是指-。" class="headerlink" title="(填空题) 有向图的强连通分量是指___。"></a>(填空题) 有向图的强连通分量是指___。</h4><ul><li><p>我的答案：</p><p>(1) 有向图的极大强连通子图</p></li><li><p><em>正确答案：</em></p><p>(1) 有向图的极大强连通子图</p></li></ul><h4 id="填空题-在有n个顶点的有向图中-每个顶点的度最大可达-。"><a href="#填空题-在有n个顶点的有向图中-每个顶点的度最大可达-。" class="headerlink" title="(填空题) 在有n个顶点的有向图中,每个顶点的度最大可达___。"></a>(填空题) 在有n个顶点的有向图中,每个顶点的度最大可达___。</h4><p>一个出度一个入度，所以*2</p><ul><li><p>我的答案：</p><p>(1) 2(n-1)</p></li><li><p><em>正确答案：</em></p><p>(1) 2(n-1)</p></li></ul><h4 id="填空题-N个顶点的连通图的生成树含有-条边。"><a href="#填空题-N个顶点的连通图的生成树含有-条边。" class="headerlink" title="(填空题) N个顶点的连通图的生成树含有___条边。"></a>(填空题) N个顶点的连通图的生成树含有___条边。</h4><ul><li><p>我的答案：</p><p>(1) N-1</p></li><li><p><em>正确答案：</em></p><p>(1) N-1</p></li></ul><h4 id="填空题-判断一个无向图是一棵树的条件是-。"><a href="#填空题-判断一个无向图是一棵树的条件是-。" class="headerlink" title="(填空题) 判断一个无向图是一棵树的条件是___。"></a>(填空题) 判断一个无向图是一棵树的条件是___。</h4><ul><li><p>我的答案：</p><p>(1) 有n个顶点,n-1条边的无向连通图</p></li><li><p><em>正确答案：</em></p><p>(1) 有n个顶点,n-1条边的无向连通图</p></li></ul><h4 id="填空题-若用n表示图中顶点数目-则有-条边的无向图成为完全图。"><a href="#填空题-若用n表示图中顶点数目-则有-条边的无向图成为完全图。" class="headerlink" title="(填空题) 若用n表示图中顶点数目,则有___条边的无向图成为完全图。"></a>(填空题) 若用n表示图中顶点数目,则有___条边的无向图成为完全图。</h4><p>注意这里是题目是完全图，一般如果是有向或者连通图就n，无向则为n-1</p><ul><li><p>我的答案：</p><p>(1) n(n-1)&#x2F;2</p></li><li><p><em>正确答案：</em></p><p>(1) n(n-1)&#x2F;2</p></li></ul><h4 id="判断题-有向图不能进行广度优先遍历。"><a href="#判断题-有向图不能进行广度优先遍历。" class="headerlink" title="(判断题) 有向图不能进行广度优先遍历。"></a>(判断题) 有向图不能进行广度优先遍历。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p>我的答案:错<em>正确答案:</em> 错</p><h4 id="判断题-带权图最小生成树是唯一的。"><a href="#判断题-带权图最小生成树是唯一的。" class="headerlink" title="(判断题) 带权图最小生成树是唯一的。"></a>(判断题) 带权图最小生成树是唯一的。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p>我的答案: 错<em>正确答案:</em> 错</p><h4 id="判断题-若以某个顶点开始-对有n个顶点的有向图G进行深度优先遍历-所得的遍历序列唯一-则可以断定其弧数为n-1。"><a href="#判断题-若以某个顶点开始-对有n个顶点的有向图G进行深度优先遍历-所得的遍历序列唯一-则可以断定其弧数为n-1。" class="headerlink" title="(判断题) 若以某个顶点开始,对有n个顶点的有向图G进行深度优先遍历,所得的遍历序列唯一,则可以断定其弧数为n-1。"></a>(判断题) 若以某个顶点开始,对有n个顶点的有向图G进行深度优先遍历,所得的遍历序列唯一,则可以断定其弧数为n-1。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p>我的答案:错<em>正确答案:</em> 错</p><h3 id="第八章（查找）"><a href="#第八章（查找）" class="headerlink" title="第八章（查找）"></a>第八章（查找）</h3><p>(单选题)顺序查找法适合于存储结构为( )的线性表。</p><ul><li>A. 散列存储</li><li>B. 顺序存储或是链式存储</li><li>C. 压缩存储</li><li>D. 索引存储</li></ul><p><em>我的答案:</em> B:顺序存储或是链式存储;</p><p>(单选题)用折半查找表的元素的速度比用顺序法( )。</p><ul><li>A. 必然快</li><li>B. 必然慢</li><li>C. 相等</li><li>D. 不能确定</li></ul><p><em>我的答案:</em> D:不能确定;</p><p>(单选题)当在一个有序的顺序存储表上查找一个数据时,即可用折半查找,也可用顺序查找,但前者比后者的查找速度( )。</p><ul><li>A. 必定快</li><li>B. 不一定</li><li>C. 在大部分情况下要快</li><li>D. 取决于表递增还是递减</li></ul><p><em>我的答案:</em> C:在大部分情况下要快;</p><p>(单选题)下面关于哈希(Hash,杂凑)查找的说法正确的是( )</p><ul><li>A. 哈希函数构造的越复杂越好,因为这样随机性好,冲突小</li><li>B. 除留余数法是所有哈希函数中最好的</li><li>C. 不存在特别好与坏的哈希函数,要视情况而定</li><li>D. 若需在哈希表中删去一个元素,不管用何种方法解决冲突都只要简单的将该元素删去即可</li></ul><p><em>我的答案:</em> C:不存在特别好与坏的哈希函数,要视情况而定;</p><p>(单选题)如果要求一个线性表既能较快地查找,又能适应动态变化的要求,可以采用( )查找方法。</p><ul><li>A. 分块</li><li>B. 顺序</li><li>C. 折半</li><li>D. 散列</li></ul><p><em>我的答案:</em> A</p><h4 id="填空题-在分块查找方法中-首先查找-然后再查找相应的-。"><a href="#填空题-在分块查找方法中-首先查找-然后再查找相应的-。" class="headerlink" title="(填空题)在分块查找方法中,首先查找(),然后再查找相应的___。"></a>(填空题)在分块查找方法中,首先查找(),然后再查找相应的___。</h4><ul><li><p><em>我的答案：</em></p><p>(1) 索引</p><p>(2) 块</p></li></ul><h4 id="填空题-在分块查找方法中-表中每块内的元素可以-块与块之间必须按-存放。"><a href="#填空题-在分块查找方法中-表中每块内的元素可以-块与块之间必须按-存放。" class="headerlink" title="(填空题)在分块查找方法中,表中每块内的元素可以(),块与块之间必须按___存放。"></a>(填空题)在分块查找方法中,表中每块内的元素可以(),块与块之间必须按___存放。</h4><ul><li><p><em>我的答案：</em></p><p>(1) 任意存放</p><p>(2) 关键字有序</p></li></ul><h4 id="填空题-顺序查找、折半查找、分块查找都属于-查找。"><a href="#填空题-顺序查找、折半查找、分块查找都属于-查找。" class="headerlink" title="(填空题)顺序查找、折半查找、分块查找都属于___查找。"></a>(填空题)顺序查找、折半查找、分块查找都属于___查找。</h4><ul><li><p><em>我的答案：</em></p><p>(1) 静态</p></li></ul><h4 id="填空题-在线性表的哈希存储中-装填因子ɑ又称为装填系数-若用m表示哈希表的长度-n表示线性表中的元素的个数-则ɑ等于-。"><a href="#填空题-在线性表的哈希存储中-装填因子ɑ又称为装填系数-若用m表示哈希表的长度-n表示线性表中的元素的个数-则ɑ等于-。" class="headerlink" title="(填空题)在线性表的哈希存储中,装填因子ɑ又称为装填系数,若用m表示哈希表的长度,n表示线性表中的元素的个数,则ɑ等于___。"></a>(填空题)在线性表的哈希存储中,装填因子ɑ又称为装填系数,若用m表示哈希表的长度,n表示线性表中的元素的个数,则ɑ等于___。</h4><ul><li><p><em>我的答案：</em></p><p>(1) n&#x2F;m</p></li></ul><h4 id="判断题-在二叉排序树中-根结点的值都小于孩子结点的值。"><a href="#判断题-在二叉排序树中-根结点的值都小于孩子结点的值。" class="headerlink" title="(判断题)在二叉排序树中,根结点的值都小于孩子结点的值。"></a>(判断题)在二叉排序树中,根结点的值都小于孩子结点的值。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错</p><h4 id="判断题-直接插入排序时-关键字的比较次数与记录的初始排列无关。"><a href="#判断题-直接插入排序时-关键字的比较次数与记录的初始排列无关。" class="headerlink" title="(判断题)直接插入排序时,关键字的比较次数与记录的初始排列无关。"></a>(判断题)直接插入排序时,关键字的比较次数与记录的初始排列无关。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 对</p><p>(判断题)排序要求数据一定要按顺序方式存储。</p><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错</p><h4 id="判断题-对千两棵具有相同关键字但形状不同的二叉排序树-按中序遍历它们得到的序列的顺序是一样的。"><a href="#判断题-对千两棵具有相同关键字但形状不同的二叉排序树-按中序遍历它们得到的序列的顺序是一样的。" class="headerlink" title="(判断题)对千两棵具有相同关键字但形状不同的二叉排序树,按中序遍历它们得到的序列的顺序是一样的。"></a>(判断题)对千两棵具有相同关键字但形状不同的二叉排序树,按中序遍历它们得到的序列的顺序是一样的。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 对</p><h4 id="单选题-二叉排序树的查找效率与二叉树的-1-有关，在-2-时其查找效率最低。"><a href="#单选题-二叉排序树的查找效率与二叉树的-1-有关，在-2-时其查找效率最低。" class="headerlink" title="(单选题)二叉排序树的查找效率与二叉树的 (1) 有关，在 (2) 时其查找效率最低。"></a>(单选题)二叉排序树的查找效率与二叉树的 (1) 有关，在 (2) 时其查找效率最低。</h4><p>(1) (单选题) 1</p><ul><li>A. 高度</li><li>B. 结点的多少</li><li>C. 树型</li><li>D. 结点的位置</li></ul><p><em>我的答案:</em> C</p><p>(2) (单选题) 2</p><ul><li>A. 结点太多</li><li>B. 完全二叉树</li><li>C. 呈单枝树</li><li>D. 结点太复杂。</li></ul><p><em>我的答案:</em> C</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++算法</title>
      <link href="/posts/6e93dd78.html"/>
      <url>/posts/6e93dd78.html</url>
      
        <content type="html"><![CDATA[<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="高精度算法"><a href="#高精度算法" class="headerlink" title="高精度算法"></a>高精度算法</h2><h3 id="高精度-高精度"><a href="#高精度-高精度" class="headerlink" title="高精度+高精度"></a>高精度+高精度</h3><p>1、建立两个整型数组、设立初值、设定长度（给定数字的情况下，直接用length，不是给定的话，在if（x）里也会对长度进行自增，直接设定为1也可以）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">200</span>],b[<span class="number">200</span>];  </span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="comment">//给定数字</span></span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">int</span> lenb = num2.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//多个数字，或者未给定</span></span><br><span class="line"><span class="type">int</span> lena = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> lenb = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>2、输入高精度数（根据题目要求来进行,有时还需要先去除前导零（倒序））</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//去除前导零</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num1[lena<span class="number">-1</span>-i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、核心代码，将两者相加（那就是题目要求有多个高精度数相加），或者使用另一个数组c来接收结果,还是看题目要求怎么加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//x为进位</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">max</span>(lena, lenb);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">c[i] = a[i]+b[i] + x;</span><br><span class="line">x = c[i] / <span class="number">10</span>;</span><br><span class="line">c[i] = c[i] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">c[len] = x;</span><br><span class="line">    <span class="comment">//这里的x = x / 10;可以不加，因为如果是加法的话，是不会存在加到最高位时，x超过两位数的情况</span></span><br><span class="line">    x = x / <span class="number">10</span>;</span><br><span class="line">len++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、去除前导0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (c[len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; len - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//倒序输出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num1;</span><br><span class="line">string num2 ;</span><br><span class="line"><span class="type">int</span> a[<span class="number">200</span>],b[<span class="number">200</span>],c[<span class="number">200</span>];</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line"><span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in">sizeof</span>(c));</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//为什么倒序取该数组 </span></span><br><span class="line"><span class="comment">//因为num前面会有0出现，这样才能从a[0]开始取各个位置与b相加</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num1[lena<span class="number">-1</span>-i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="type">int</span> lenb = num2.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//为什么倒序取该数组 </span></span><br><span class="line"><span class="comment">//因为num前面会有0出现，这样才能从a[0]开始取各个位置与b相加</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lenb; i++) &#123;</span><br><span class="line">b[i] = num2[lenb - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">max</span>(lena, lenb);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//高精度+高精度核心代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">c[i] = a[i]+b[i] + x;</span><br><span class="line">x = c[i] / <span class="number">10</span>;</span><br><span class="line">c[i] = c[i] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断最高位</span></span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">c[len] = x;</span><br><span class="line">len++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (c[len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; len - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1173：阶乘和（估计考）"><a href="#1173：阶乘和（估计考）" class="headerlink" title="1173：阶乘和（估计考）"></a>1173：阶乘和（估计考）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chen</span><span class="params">(<span class="type">int</span> b[], <span class="type">int</span>&amp; lenb, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lenb; i++) &#123;</span><br><span class="line">b[i] = b[i] * n + x;</span><br><span class="line">x = b[i] / <span class="number">10</span>;</span><br><span class="line">b[i] = b[i] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">b[lenb] = x % <span class="number">10</span>;</span><br><span class="line">x = x / <span class="number">10</span>;</span><br><span class="line">lenb++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">jia</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span>&amp; lena, <span class="type">int</span> b[], <span class="type">int</span> lenb)</span> </span>&#123;</span><br><span class="line">lena = <span class="built_in">max</span>(lena, lenb);</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = a[i] +b[i] + x;</span><br><span class="line">x = a[i] / <span class="number">10</span>;</span><br><span class="line">a[i] = a[i] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x) &#123;</span><br><span class="line">a[lena] = x;</span><br><span class="line">lena++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10000</span>];</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> lena = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> b[<span class="number">10000</span>];</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line">b[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> lenb = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;=n; i++) &#123;</span><br><span class="line"><span class="built_in">chen</span>(b, lenb, i);</span><br><span class="line"><span class="built_in">jia</span>(a, lena, b,lenb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (a[lena - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lena - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">lena--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lena - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="高精度-低精度"><a href="#高精度-低精度" class="headerlink" title="高精度+低精度"></a>高精度+低精度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num = <span class="string">&quot;00000000000011111111112321321312312312321&quot;</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">1234</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="type">int</span> lena = num.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//为什么倒序取该数组 </span></span><br><span class="line"><span class="comment">//因为num前面会有0出现，这样才能从a[0]开始取各个位置与b相加</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num[lena<span class="number">-1</span>-i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">a[<span class="number">0</span>] = a[<span class="number">0</span>] + b;</span><br><span class="line"></span><br><span class="line"><span class="comment">//做进位，以及把各个位置相加，流程结束会得到num与b相加的结果，只对低精度部分进行变化</span></span><br><span class="line"><span class="comment">//更高位，直接逆序输出即可</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = a[i] + x;</span><br><span class="line">x = a[i] / <span class="number">10</span>;</span><br><span class="line">a[i] = a[i] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为了意外的情况，高精度的位数没有低精度的位数高，比如1（高精度）+10000（低精度）</span></span><br><span class="line"><span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">a[lena] = x % <span class="number">10</span>;</span><br><span class="line">x = x / <span class="number">10</span>;</span><br><span class="line">lena++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (a[lena - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lena - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">lena--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lena - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="高精度-低精度-1"><a href="#高精度-低精度-1" class="headerlink" title="高精度-低精度"></a>高精度-低精度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num1 = <span class="string">&quot;11111111111111111111111112&quot;</span>;</span><br><span class="line"><span class="type">int</span> num2 = <span class="number">112</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">200</span>], b[<span class="number">200</span>], c[<span class="number">200</span>];</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//倒序取得数组a</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num1[lena - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一位减去低精度数后，后续的位数就只需要减去所借的x</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">a[<span class="number">0</span>] = a[<span class="number">0</span>] - num2 - x;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">////以下是高精度-低精度数乘法的核心代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line"><span class="comment">//该位数减去所借的x</span></span><br><span class="line">a[i] = a[i] - x;</span><br><span class="line"><span class="comment">//上面已经把所借的x减去，所以x要归零</span></span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//借位，如果不够减，就需要多借一位</span></span><br><span class="line"><span class="keyword">while</span> (a[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">x++;</span><br><span class="line"><span class="comment">//该位得到所借得的10</span></span><br><span class="line">a[i] = a[i] + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (a[lena - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lena - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">lena--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lena - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="高精度-高精度-1"><a href="#高精度-高精度-1" class="headerlink" title="高精度-高精度"></a>高精度-高精度</h3><p>1、建立两个整型数组、设立初值、设定长度（给定数字的情况下，直接用length，不是给定的话，在if（x）里也会对长度进行自增，直接设定为1也可以）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">200</span>],b[<span class="number">200</span>];  </span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="comment">//给定数字</span></span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">int</span> lenb = num2.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//多个数字，或者未给定</span></span><br><span class="line"><span class="type">int</span> lena = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> lenb = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>2、输入高精度数（根据题目要求来进行,有时还需要先去除前导零（倒序））</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//去除前导零</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num1[lena<span class="number">-1</span>-i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、核心代码，将两者相加（那就是题目要求有多个高精度数相加），或者使用另一个数组c来接收结果,还是看题目要求怎么加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//x为进位</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">max</span>(lena, lenb);</span><br><span class="line"><span class="comment">//当第一次减去的值为负数时，则需要减去进位，比如第二位要还第一位的向它借的1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">c[i] = a[i] - b[i] - x;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//以下借位的步骤，每次循环如果a[i]还是小于0，则需要继续往前一位借1</span></span><br><span class="line"><span class="keyword">while</span> (c[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">x++;</span><br><span class="line">c[i] = c[i] + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、去除前导0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (c[len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; len - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//倒序输出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num1;</span><br><span class="line">string num2;</span><br><span class="line"><span class="type">int</span> a[<span class="number">200</span>], b[<span class="number">200</span>], c[<span class="number">201</span>];</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in">sizeof</span>(c));</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//倒序取得数组a</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num1[lena - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//倒序取得数组b</span></span><br><span class="line"><span class="type">int</span> lenb = num2.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lenb; i++) &#123;</span><br><span class="line">b[i] = num2[lenb - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先取得第一次所减去的值</span></span><br><span class="line"><span class="comment">//a[0]=2,减去num2之后就是-1，要进行借位</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//len=等于lena与lenb之主的最大值</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">max</span>(lena, lenb);</span><br><span class="line"><span class="comment">//当第一次减去的值为负数时，则需要减去进位，比如第二位要还第一位的向它借的1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">c[i] = a[i] - b[i] - x;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//以下借位的步骤，每次循环如果a[i]还是小于0，则需要继续往前一位借1</span></span><br><span class="line"><span class="keyword">while</span> (c[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">x++;</span><br><span class="line">c[i] = c[i] + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (c[len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; len - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//倒序输出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="高精度-低精度-2"><a href="#高精度-低精度-2" class="headerlink" title="高精度*低精度"></a>高精度*低精度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num = <span class="string">&quot;00000000000011111111112321321312312312321&quot;</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="type">int</span> lena = num.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//倒序取数组a</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num[lena - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下是高精度*低精度数乘法的核心代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = a[i] * b + x;</span><br><span class="line">x = a[i] / <span class="number">10</span>;</span><br><span class="line">a[i] = a[i] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一定要用while，因为可能a[i]的位数大于一位，比如200，那就得一直进位</span></span><br><span class="line"><span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">a[lena] = x % <span class="number">10</span>;</span><br><span class="line">x = x / <span class="number">10</span>;</span><br><span class="line">lena++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (a[lena - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lena - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">lena--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lena - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1170：计算2的N次方-估计考"><a href="#1170：计算2的N次方-估计考" class="headerlink" title="1170：计算2的N次方(估计考)"></a>1170：计算2的N次方(估计考)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; b;</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="type">int</span> lena = num.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//倒序取数组a</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num[lena - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> s = <span class="number">0</span>; s &lt; b; s++) &#123;</span><br><span class="line"><span class="comment">//以下是高精度*低精度数乘法的核心代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = a[i] * <span class="number">2</span> + x;</span><br><span class="line">x = a[i] / <span class="number">10</span>;</span><br><span class="line">a[i] = a[i] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一定要用while，因为可能a[i]的位数大于一位，比如200，那就得一直进位</span></span><br><span class="line"><span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">a[lena] = x % <span class="number">10</span>;</span><br><span class="line">x = x / <span class="number">10</span>;</span><br><span class="line">lena++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (a[lena - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lena - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">lena--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lena - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求10000以内n的阶乘（考过）"><a href="#求10000以内n的阶乘（考过）" class="headerlink" title="求10000以内n的阶乘（考过）"></a>求10000以内n的阶乘（考过）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化数组,数组要开的足够大</span></span><br><span class="line">    <span class="type">int</span> num[<span class="number">100000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    num[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">1</span>; <span class="comment">// len 表示当前数组中存储的数的位数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算阶乘</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> carry = <span class="number">0</span>; <span class="comment">// 进位标志</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="type">int</span> temp = num[j] * i + carry; <span class="comment">// 当前位乘以i并加上进位</span></span><br><span class="line">            num[j] = temp % <span class="number">10</span>; <span class="comment">// 更新当前位的值</span></span><br><span class="line">            carry = temp / <span class="number">10</span>; <span class="comment">// 计算进位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理剩余进位，进位没有处理完，就继续处理+1</span></span><br><span class="line">        <span class="keyword">while</span> (carry) &#123;</span><br><span class="line">            <span class="comment">//此处增加了num的长度len</span></span><br><span class="line">            num[len++] = carry % <span class="number">10</span>;</span><br><span class="line">            carry /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从高位向低位输出数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        cout &lt;&lt; num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度-高精度-不考"><a href="#高精度-高精度-不考" class="headerlink" title="高精度*高精度(不考)"></a>高精度*高精度(不考)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num1;</span><br><span class="line">string num2;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>], b[<span class="number">100</span>], c[<span class="number">400</span>];</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line"><span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in">sizeof</span>(c));</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//倒序取数组a</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num1[lena - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="type">int</span> lenb = num2.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//倒序取数组b</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lenb; i++) &#123;</span><br><span class="line">b[i] = num2[lenb - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len = lena + lenb;</span><br><span class="line"><span class="comment">//以下是高精度*高精度数乘法的核心代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line"><span class="comment">//每一趟，x都要清零</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; lenb; j++) &#123;</span><br><span class="line"><span class="comment">//每一个得到的数都来自于多趟数字相加</span></span><br><span class="line">c[i + j] = c[i + j] + a[i] * b[j] + x;</span><br><span class="line"><span class="comment">//x为下一个数字的进位</span></span><br><span class="line">x = c[i + j] / <span class="number">10</span>;</span><br><span class="line"><span class="comment">//此处的c[i + j]为该位的输出</span></span><br><span class="line">c[i + j] = c[i + j] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第i趟结束时，进位存在本趟的最高位</span></span><br><span class="line">c[i + lenb] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (c[len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; len - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="高精度-x2F-单精度"><a href="#高精度-x2F-单精度" class="headerlink" title="高精度&#x2F;单精度"></a>高精度&#x2F;单精度</h3><p>1、建立两个整型数组、设立初值、设定长度（给定数字的情况下，直接用length，不是给定的话，在if（x）里也会对长度进行自增，直接设定为1也可以）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">200</span>],b[<span class="number">200</span>];  </span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="comment">//给定数字</span></span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">int</span> lenb = num2.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//多个数字，或者未给定</span></span><br><span class="line"><span class="type">int</span> lena = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> lenb = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>2、输入高精度数（根据题目要求来进行,有时还需要先去除前导零（倒序））</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//除法的高精度是唯一不需要倒序取的算法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、核心代码，将两者相加（那就是题目要求有多个高精度数相加），或者使用另一个数组c来接收结果,还是看题目要求怎么加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//t为新的被除数，c[i]为商的每一位，x为余数</span></span><br><span class="line"><span class="comment">//比如我们130除以13，第一次循环a[0]为0*10+1=1，c[0]=1/13=0,x=1%13=0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">t = x * <span class="number">10</span> + a[i];</span><br><span class="line">c[i] = t / b;</span><br><span class="line">x = t % b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、去除前导0+输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面的代码作用为将前导0删除</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="comment">//首先使用一个for循环遍历结果数组c，如果当前位不为0或者之前已经输出过一位数字（flag为1），则输出该位数字，并将flag设置为1，表示最高位已经输出。</span></span><br><span class="line"><span class="keyword">if</span> (c[i] != <span class="number">0</span> || flag == <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num ;</span><br><span class="line"><span class="type">int</span> b = <span class="number">13</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>],c[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="type">int</span> lena = num.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//除法的高精度是唯一不需要倒序取的算法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in">sizeof</span>(c));</span><br><span class="line"><span class="type">int</span> len = lena;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//t为新的被除数，c[i]为商的每一位，x为余数</span></span><br><span class="line">    <span class="comment">//比如我们130除以13，第一次循环a[0]为0*10+1=1，c[0]=1/13=0,x=1%13=0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">t = x * <span class="number">10</span> + a[i];</span><br><span class="line">c[i] = t / b;</span><br><span class="line">x = t % b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面的代码作用为将前导0删除</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="comment">//首先使用一个for循环遍历结果数组c，如果当前位不为0或者之前已经输出过一位数字（flag为1），则输出该位数字，并将flag设置为1，表示最高位已经输出。</span></span><br><span class="line"><span class="keyword">if</span> (c[i] != <span class="number">0</span> || flag == <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//最后需要判断flag的值，如果为0，说明结果为0，需要输出一个0。否则就已经将结果输出完毕了，直接结束程序即可。</span></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; x;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1171：大整数的因子-估计考，可能性最大"><a href="#1171：大整数的因子-估计考，可能性最大" class="headerlink" title="1171：大整数的因子(估计考，可能性最大)"></a>1171：大整数的因子(估计考，可能性最大)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string a;</span><br><span class="line"><span class="type">int</span> c[<span class="number">31</span>],len,t,x,flag;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line">len = a.<span class="built_in">size</span>();</span><br><span class="line"><span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in">sizeof</span>(c));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">c[i] = a[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> s = <span class="number">2</span>; s &lt;= <span class="number">9</span>; s++) &#123;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"></span><br><span class="line">t = x * <span class="number">10</span> + c[i];</span><br><span class="line">x = t % s;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; s &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;none&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度-x2F-高精度（不考）"><a href="#高精度-x2F-高精度（不考）" class="headerlink" title="高精度&#x2F;高精度（不考）"></a>高精度&#x2F;高精度（不考）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果余数d比除数b大，则返回true</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">big</span><span class="params">(<span class="type">int</span> d[], <span class="type">int</span> lend, <span class="type">int</span> b[], <span class="type">int</span> lenb)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//下面是lenb、lend相等的情况</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = lend - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">////这里的条件很关键，d[lend - 1]!=0这个条件如果不加，就会出现d数组取值=&#123;0,0&#125;，但是lend为2大于lenb为1，返回了ture，而不断减去b，导致错误（QAQ这个条件卡了三个半小时）</span></span><br><span class="line"><span class="keyword">if</span> (lend &gt; lenb&amp;&amp;d[lend - <span class="number">1</span>]!=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (lend &lt; lenb) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (d[i] &gt; b[i]) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (d[i] &lt; b[i]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//重复循环</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//每一位相等的情况下，则返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将余数d-除数b，执行减法后，d的长度将改变，必须通过引用(&amp;)传递出来</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">jianfa</span><span class="params">(<span class="type">int</span> d[], <span class="type">int</span>&amp; lend, <span class="type">int</span> b[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//x是借位，初始第0位是没有借位的</span></span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//这里是正序的因为减法从原本数字的最低位开始，而数组是逆序存放数字的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lend; i++) &#123;</span><br><span class="line">        d[i] = d[i] - b[i] - x;</span><br><span class="line">        <span class="keyword">if</span> (d[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            d[i] += <span class="number">10</span>;</span><br><span class="line">            x = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改余数d的长度</span></span><br><span class="line">    <span class="keyword">while</span> (d[lend - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lend - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        lend--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num1;</span><br><span class="line">string num2;</span><br><span class="line"><span class="comment">//a数组是被除数，b数组是除数，c数组是商，d数组是余数</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">300</span>], b[<span class="number">300</span>], c[<span class="number">300</span>],d[<span class="number">300</span>];</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">int</span> lenb = num2.<span class="built_in">length</span>();</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in">sizeof</span>(c));</span><br><span class="line"><span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line"><span class="comment">//倒序取数组a</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num1[lena - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//倒序取数组b</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lenb; i++) &#123;</span><br><span class="line">b[i] = num2[lenb - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//余数长度为0</span></span><br><span class="line"><span class="type">int</span> lend = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//从被除数的最高位开始</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lena - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="comment">//1.将余数全部位数向右移动一位,因为一次循环后，相当于有一位已经完成了除法，所以有余数的话，向后退一位，而先前的那一位，后面会塞下新的a[i]，相当于把余数放大10倍（等同于高精度除单精度中的x*10步骤）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = lend - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">d[j + <span class="number">1</span>] = d[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.获得余数的新第0位</span></span><br><span class="line">d[<span class="number">0</span>] = a[i];</span><br><span class="line"><span class="comment">//3.余数的位数多加一位，因为上面最前面多加了一位</span></span><br><span class="line">lend++;</span><br><span class="line"><span class="comment">//4.将余数d和除数b相减，每减一次，则第i位商+1</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">big</span>(d, lend, b, lenb)) &#123;</span><br><span class="line"><span class="built_in">jianfa</span>(d, lend, b);</span><br><span class="line">c[i]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//商c的长度不超过被除数a的长度</span></span><br><span class="line"><span class="type">int</span> lenc = lena;</span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="keyword">while</span> (c[lenc - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lenc - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">lenc--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (d[lend - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lend - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">lend--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lenc - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lend - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; d[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>核心代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡算法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//j从0开始，但是要小于n-i-1，是因为无序区元素个数为n-i，而一共要比较n-i-1次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="comment">//此处为小于，所以为递增</span></span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j], a[j + <span class="number">1</span>]);  </span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//全程无交换，则说明本来就是有序的，不需要浪费时间进行循环，直接跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//冒泡算法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j], a[j + <span class="number">1</span>]);  </span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//全程无交换，则说明本来就是有序的，不需要浪费时间进行循环，直接跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>] ;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt;  a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bubble_sort</span>(a,n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(a,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="整数奇偶排序（考过）"><a href="#整数奇偶排序（考过）" class="headerlink" title="整数奇偶排序（考过）"></a>整数奇偶排序（考过）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j], a[j + <span class="number">1</span>]);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//全程无交换，跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort2</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j], a[j + <span class="number">1</span>]);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//全程无交换，跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>], b[<span class="number">10</span>], c[<span class="number">10</span>], cnt = <span class="number">0</span>, cntc = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            b[cnt++] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            c[cntc++] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bubble_sort</span>(b, cnt);</span><br><span class="line">    <span class="built_in">bubble_sort2</span>(c, cntc);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(b, cnt);</span><br><span class="line">    <span class="built_in">print</span>(c, cntc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="奇数单增序列"><a href="#奇数单增序列" class="headerlink" title="奇数单增序列"></a>奇数单增序列</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//为了题目格式要求，对输出函数做一点改变</span></span><br><span class="line">    cout &lt;&lt; a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j], a[j + <span class="number">1</span>]);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//全程无交换，跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">500</span>], b[<span class="number">500</span>], cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            b[cnt++] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bubble_sort</span>(b, cnt);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(b, cnt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>核心代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertsort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注意这个循环范围，因为第一个无序区的元素下标为1，而最后一个下标为n-1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//t为需要排序的数组a的元素</span></span><br><span class="line">        <span class="type">int</span> t = a[i];</span><br><span class="line">        <span class="comment">//t找位置的过程，在过程中数组t前面的元素位置往后撤</span></span><br><span class="line">        <span class="comment">//此处大于，所以为递增</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; a[j] &gt; t) &#123;</span><br><span class="line">            a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//t通过不断前移找到正确的位置</span></span><br><span class="line">        <span class="comment">//而a[j+1]要么是第一个位置，j=-1时,a[j+1]=a[0]</span></span><br><span class="line">        <span class="comment">//要么此时a[j]&lt;t了，排序就已经按照递增来排序了</span></span><br><span class="line">        a[j + <span class="number">1</span>] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt;  a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertsort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//t为需要排序的数组a的元素</span></span><br><span class="line">        <span class="type">int</span> t = a[i];</span><br><span class="line">        <span class="comment">//t找位置的过程，在过程中数组t前面的元素位置往后撤</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; a[j] &gt; t) &#123;</span><br><span class="line">            a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//t找到正确的位置</span></span><br><span class="line">        a[j + <span class="number">1</span>] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">500</span>], b[<span class="number">500</span>], cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">insertsort</span>(a, n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(a, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求逆序对（模拟考过）"><a href="#求逆序对（模拟考过）" class="headerlink" title="求逆序对（模拟考过）"></a>求逆序对（模拟考过）</h4><p>不会，直接过</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Max = <span class="number">1e6</span> + <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> a[Max] = &#123;&#125;; <span class="comment">// 存储输入序列的数组</span></span><br><span class="line"><span class="type">int</span> b[Max]; <span class="comment">// 存储归并排序过程中的临时数组</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> num = <span class="number">0</span>; <span class="comment">// 用于存储逆序对的数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序中的归并操作，将两个已排序的数组合并成一个有序的数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> mid, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = l; <span class="comment">// 左半部分数组的下标</span></span><br><span class="line">    <span class="type">int</span> j = mid + <span class="number">1</span>; <span class="comment">// 右半部分数组的下标</span></span><br><span class="line">    <span class="type">int</span> k = l; <span class="comment">// 临时数组的下标</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123; <span class="comment">// 比较左右两部分数组中的元素，合并为一个有序的数组</span></span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; a[j]) &#123; <span class="comment">// 如果左边元素大于右边元素，说明存在逆序对</span></span><br><span class="line">            b[k++] = a[j++]; <span class="comment">// 将右边元素存储在临时数组中</span></span><br><span class="line">            num += mid - i + <span class="number">1</span>; <span class="comment">// 统计逆序对数量，注意这里的统计方式</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// 如果左边元素小于等于右边元素，不需要统计逆序对</span></span><br><span class="line">            b[k++] = a[i++]; <span class="comment">// 将左边元素存储在临时数组中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123; <span class="comment">// 如果左半部分数组有剩余元素，将其存储在临时数组中</span></span><br><span class="line">        b[k++] = a[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) &#123; <span class="comment">// 如果右半部分数组有剩余元素，将其存储在临时数组中</span></span><br><span class="line">        b[k++] = a[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = l; i &lt;= r; i++) &#123; <span class="comment">// 将归并排序过程中得到的有序数组覆盖原始数组</span></span><br><span class="line">        a[i] = b[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序，对序列进行排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> mid;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; r) &#123; <span class="comment">// 递归终止条件，当左右下标相等时表示已经排好序</span></span><br><span class="line">        mid = l + ((r - l) /<span class="number">2</span>); <span class="comment">// 计算中间位置，避免溢出</span></span><br><span class="line">        <span class="built_in">mergeSort</span>(l, mid); <span class="comment">// 对左半部分数组进行归并排序</span></span><br><span class="line">        <span class="built_in">mergeSort</span>(mid + <span class="number">1</span>, r); <span class="comment">// 对右半部分数组进行归并排序</span></span><br><span class="line">        <span class="built_in">merge</span>(l, mid, r); <span class="comment">// 归并操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n; <span class="comment">// 输入序列长度</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">// 输入序列</span></span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mergeSort</span>(<span class="number">0</span>, n - <span class="number">1</span>); <span class="comment">// 对序列进行归并排序</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; num ; <span class="comment">// 输出逆序对数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序-结构体-考"><a href="#快速排序-结构体-考" class="headerlink" title="快速排序+结构体(考)"></a>快速排序+结构体(考)</h3><h4 id="1176：谁考了第k名"><a href="#1176：谁考了第k名" class="headerlink" title="1176：谁考了第k名"></a><strong>1176：谁考了第k名</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">float</span> score;</span><br><span class="line">&#125;s[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照分数由小到大排序</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(student a,student b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果前面学生的分数大于后面学生的分数，则不交换</span></span><br><span class="line">    <span class="keyword">if</span> (a.score &gt; b.score) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//也可以这么写，理解为前面的始终大于后面的</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Student a, Student b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.grade &gt; b.grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; s[i].id &gt;&gt; s[i].score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(s,s+n,cmp);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; s[k<span class="number">-1</span>].id &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s[k<span class="number">-1</span>].score;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1178：成绩排序"><a href="#1178：成绩排序" class="headerlink" title="1178：成绩排序"></a><strong>1178：成绩排序</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> &#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">float</span> score;</span><br><span class="line">&#125;s[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照分数由小到大排序</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(student a,student b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果前面学生的分数大于后面学生的分数，则是正确的排序方法（true），则不交换</span></span><br><span class="line">    <span class="keyword">if</span> (a.score &gt; b.score) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果前面学生的分数等于后面学生的分数，则比较名字的大小</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.score == b.score) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.name &lt; b.name) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.score &lt; b.score) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; s[i].name &gt;&gt; s[i].score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(s,s+n,cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; s[i].name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s[i].score &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1182：合影效果"><a href="#1182：合影效果" class="headerlink" title="1182：合影效果"></a>1182：合影效果</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、cmp结构体的优化写法：直接返回：return a.height &lt; b.height;</span></span><br><span class="line"><span class="comment">//2、string类型的字符可以直接通过：a.gender == &quot;male&quot;进行比较</span></span><br><span class="line"><span class="comment">//3、流操作符 fixed，它表示浮点输出应该以固定点或小数点表示法显示，当它与 setprecision 操作符一起使用时，它将指定浮点数字的小数点后要显示的位数：cout&lt;&lt;fixed &lt;&lt; setprecision(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个结构体表示每个人的信息</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    string gender; <span class="comment">// 性别</span></span><br><span class="line">    <span class="type">double</span> height; <span class="comment">// 身高</span></span><br><span class="line">&#125;people[<span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序规则：男生从矮到高，女生从高到矮</span></span><br><span class="line"><span class="comment">// 这里的a和b就比较像左边和右边的关系了，实际上a和b根据题目还可以引申为先后之类的关系</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> Person&amp; a, <span class="type">const</span> Person&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.gender == <span class="string">&quot;male&quot;</span> &amp;&amp; b.gender == <span class="string">&quot;male&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.height &lt; b.height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.gender == <span class="string">&quot;female&quot;</span> &amp;&amp; b.gender == <span class="string">&quot;female&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.height &gt; b.height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.gender == <span class="string">&quot;male&quot;</span> &amp;&amp; b.gender == <span class="string">&quot;female&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 男生在左边，女生在右边</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个数组存储每个人的信息</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; people[i].gender &gt;&gt; people[i].height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    <span class="built_in">sort</span>(people, people + n, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出每个人的身高</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; people[i].height &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1183：病人排队"><a href="#1183：病人排队" class="headerlink" title="1183：病人排队"></a>1183：病人排队</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、如果在cmp函数中没有覆盖所有的情况，就会导致报错：无效的比较器</span></span><br><span class="line"><span class="comment">//2、可以用过order变量记录前后顺序，避免了用string类型的id来进行前后顺序比较</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个结构体表示每个人的信息</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    string id;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span> order; <span class="comment">// 记录每个人的登记顺序，这个变量是因为id为string类型，可能存在英文，不能用id大小来比较前后顺序</span></span><br><span class="line">&#125;people[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序规则：</span></span><br><span class="line"><span class="comment">// 1、老年人（年龄 &gt;= 60岁）比非老年人优先看病。</span></span><br><span class="line"><span class="comment">// 2、老年人按年龄从大到小的顺序看病，年龄相同的按登记的先后顺序排序。</span></span><br><span class="line"><span class="comment">// 3、非老年人按登记的先后顺序看病。</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> Person&amp; a, <span class="type">const</span> Person&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、</span></span><br><span class="line">    <span class="keyword">if</span> (a.age &gt;= <span class="number">60</span> &amp;&amp; b.age &lt; <span class="number">60</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.age &lt; <span class="number">60</span> &amp;&amp; b.age &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2、</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.age &gt;= <span class="number">60</span> &amp;&amp; b.age &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.age == b.age) &#123;</span><br><span class="line">            <span class="keyword">return</span> a.order &lt; b.order;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a.age &gt; b.age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3、</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a.order &lt; b.order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个数组存储每个人的信息</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; people[i].id &gt;&gt; people[i].age;</span><br><span class="line">        people[i].order = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    <span class="built_in">sort</span>(people, people + n, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出每个人的ID</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; people[i].id &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分数线划定"><a href="#分数线划定" class="headerlink" title="分数线划定"></a>分数线划定</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span><span class="comment">//建立结构体</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> name, mark;<span class="comment">//name为编号、mark为成绩</span></span><br><span class="line">&#125;pp[<span class="number">5005</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span><span class="comment">//建立结构体a和b;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.mark == b.mark)<span class="comment">//如果成绩相同</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.name &lt; b.name;<span class="comment">//编号小的靠前</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.mark &gt; b.mark;<span class="comment">//否则成绩高的靠前</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, need, sum = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; pp[i].name &gt;&gt; pp[i].mark;<span class="comment">//输入编号和成绩</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(pp, pp + n, cmp);</span><br><span class="line">    need = m * <span class="number">1.5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; pp[need - <span class="number">1</span>].mark &lt;= pp[i].mark; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; pp[need - <span class="number">1</span>].mark &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; sum &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; pp[i].name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; pp[i].mark &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递推"><a href="#递推" class="headerlink" title="递推"></a>递推</h2><p>做递推的关键在于找到递推式</p><h3 id="1190：上台阶"><a href="#1190：上台阶" class="headerlink" title="1190：上台阶"></a>1190：上台阶</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、使用大数组来进行递推（推荐递推变量）</span></span><br><span class="line"><span class="comment">//2、输入时碰到0则停止：while (cin &gt;&gt; n &amp;&amp; n != 0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">72</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">zlt</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//走第0级有1种方法</span></span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//走第1级有1种方法</span></span><br><span class="line">    a[<span class="number">1</span>] = a[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//走第2级有2种方法</span></span><br><span class="line">    a[<span class="number">2</span>] = a[<span class="number">1</span>]+a[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//走第3级有4种方法</span></span><br><span class="line">    a[<span class="number">3</span>] = a[<span class="number">2</span>]+a[<span class="number">1</span>]+a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">4</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        a[i] = a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>] + a[i - <span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="comment">//输入到0停止</span></span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n &amp;&amp; n != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="built_in">zlt</span>(n);</span><br><span class="line">        cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1661-递推求斐波那契数列（高精度，感觉不可能结合考）"><a href="#1661-递推求斐波那契数列（高精度，感觉不可能结合考）" class="headerlink" title="1661: 递推求斐波那契数列（高精度，感觉不可能结合考）"></a>1661: 递推求斐波那契数列（高精度，感觉不可能结合考）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、数组作为递推变量的使用方法</span></span><br><span class="line"><span class="comment">//2、将一个数组赋值给另一个数组的方法，用于：memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="comment">//3、复习一遍高精度加高精度</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">10010</span>;  <span class="comment">// 数组的大小</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[MAXN], b[MAXN], c[MAXN];  <span class="comment">// 数组，用于存储斐波那契数列中的三个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加法函数，将数组 a 和 b 相加，结果存储在数组 c 中</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> c[])</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> carry = <span class="number">0</span>;  <span class="comment">// 进位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXN; i++) &#123;</span><br><span class="line">        c[i] = a[i] + b[i] + carry;  <span class="comment">// 计算 c[i]，等于 a[i] + b[i] + 进位</span></span><br><span class="line">        carry = c[i] / <span class="number">10</span>;  <span class="comment">// 计算进位，即 c[i] 除以 10 的商</span></span><br><span class="line">        c[i] %= <span class="number">10</span>;  <span class="comment">// 取个位数，即 c[i] 除以 10 的余数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算斐波那契数列的第 n 项</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fbnq</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化，将数组 a 和 b 的所有元素都赋值为 0，数组 c 的第一个元素赋值为 1</span></span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in">sizeof</span>(c));</span><br><span class="line">    a[<span class="number">0</span>] = b[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从第三项开始计算，依次计算出第 3 到第 n 项</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">add</span>(a, b, c);  <span class="comment">// 计算下一个数，将 a 和 b 相加，结果存储在数组 c 中</span></span><br><span class="line">        <span class="built_in">memcpy</span>(a, b, <span class="built_in">sizeof</span>(b));  <span class="comment">// 用 b 更新 a，将数组 b 的所有元素复制到数组 a 中</span></span><br><span class="line">        <span class="built_in">memcpy</span>(b, c, <span class="built_in">sizeof</span>(c));  <span class="comment">// 用 c 更新 b，将数组 c 的所有元素复制到数组 b 中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果，逆序输出数组 c 中的元素，即为斐波那契数列的第 n 项</span></span><br><span class="line">    <span class="type">int</span> pos = MAXN - <span class="number">1</span>;  <span class="comment">// pos 初始值为数组的最后一个元素的下标</span></span><br><span class="line">    <span class="keyword">while</span> (pos &gt; <span class="number">0</span> &amp;&amp; c[pos] == <span class="number">0</span>) pos--;  <span class="comment">// 找到最高位，即从后往前第一个非零元素的下标</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = pos; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        cout &lt;&lt; c[i];  <span class="comment">// 逆序输出数组 c 中的元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">fbnq</span>(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1196：踩方格"><a href="#1196：踩方格" class="headerlink" title="1196：踩方格"></a>1196：踩方格</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这种走方位的题目，当然也可以用递归或者深搜来做</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//找规律做法：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">21</span>];</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">    a[<span class="number">2</span>] = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//找规律</span></span><br><span class="line">        a[i] = <span class="number">2</span> * a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; a[n] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正常递推做法：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f[<span class="number">21</span>];</span><br><span class="line"><span class="type">int</span> l[<span class="number">21</span>], r[<span class="number">21</span>], u[<span class="number">21</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    l[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    r[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    u[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//最后一步向左走的走法</span></span><br><span class="line">        l[i] = l[i - <span class="number">1</span>] + u[i - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//最后一步向右的走法</span></span><br><span class="line">        r[i] = r[i - <span class="number">1</span>] + u[i - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//最后一步向上走的走法</span></span><br><span class="line">        u[i] = l[i - <span class="number">1</span>] + u[i - <span class="number">1</span>]+r[i - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//总的走法</span></span><br><span class="line">        f[i] = l[i ] + u[i]+ r[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[n];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1314：过河卒（模拟考过）"><a href="#1314：过河卒（模拟考过）" class="headerlink" title="1314：过河卒（模拟考过）"></a>1314：过河卒（模拟考过）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、先找到递推式（dp[i][j]=dp[i-1][j]+dp[i][j-1]），再找到递推式的多种初始值（边界初始化），最后再找需要排除的条件（马的控制点）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[<span class="number">21</span>][<span class="number">21</span>]=&#123;<span class="number">0</span>&#125;,g[<span class="number">21</span>][<span class="number">21</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m,x,y,i,j;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; x &gt;&gt; y;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;<span class="comment">//初始化出发点 </span></span><br><span class="line">g[x][y]=<span class="number">1</span>;<span class="comment">//标注卒</span></span><br><span class="line"><span class="comment">//判断卒可走的点是否越界 并标注不能走的马的控制点</span></span><br><span class="line"><span class="keyword">if</span>(x<span class="number">-2</span>&gt;=<span class="number">0</span>&amp;&amp;y<span class="number">-1</span>&gt;=<span class="number">0</span>)g[x<span class="number">-2</span>][y<span class="number">-1</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(x<span class="number">-1</span>&gt;=<span class="number">0</span>&amp;&amp;y<span class="number">-2</span>&gt;=<span class="number">0</span>)g[x<span class="number">-1</span>][y<span class="number">-2</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(x+<span class="number">1</span>&lt;=n&amp;&amp;y<span class="number">-2</span>&gt;=<span class="number">0</span>)g[x+<span class="number">1</span>][y<span class="number">-2</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(x+<span class="number">2</span>&lt;=n&amp;&amp;y<span class="number">-1</span>&gt;=<span class="number">0</span>)g[x+<span class="number">2</span>][y<span class="number">-1</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(x+<span class="number">2</span>&lt;=n&amp;&amp;y+<span class="number">1</span>&lt;=m)g[x+<span class="number">2</span>][y+<span class="number">1</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(x+<span class="number">1</span>&lt;=n&amp;&amp;y+<span class="number">2</span>&lt;=m)g[x+<span class="number">1</span>][y+<span class="number">2</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(x<span class="number">-1</span>&gt;=<span class="number">0</span>&amp;&amp;y+<span class="number">2</span>&lt;=m)g[x<span class="number">-1</span>][y+<span class="number">2</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(x<span class="number">-2</span>&gt;=<span class="number">0</span>&amp;&amp;y+<span class="number">1</span>&lt;=m)g[x<span class="number">-2</span>][y+<span class="number">1</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="comment">//初始化边界，按照边界走就只有一种走法，所以初始化为1</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(g[i][<span class="number">0</span>]==<span class="number">0</span>) dp[i][<span class="number">0</span>]=dp[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="keyword">if</span>(g[<span class="number">0</span>][i]==<span class="number">0</span>) dp[<span class="number">0</span>][i]=dp[<span class="number">0</span>][i<span class="number">-1</span>];</span><br><span class="line"><span class="comment">//递推公式</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(g[i][j]==<span class="number">1</span>)dp[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(g[i][j]==<span class="number">0</span>)dp[i][j]=dp[i<span class="number">-1</span>][j]+dp[i][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; dp[n][m];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//老师的方法，但是疑惑的是我必须用!in(c)才能正确，但是老师是in(c)正确，不过就逻辑上来讲也应该是in(c)，但是找不到我不同的原因</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> b[<span class="number">100</span>][<span class="number">100</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从马点前进的距离方位</span></span><br><span class="line"><span class="type">int</span> dir[<span class="number">8</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">-2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-2</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-2</span>&#125;,&#123;<span class="number">1</span>,<span class="number">-2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">-1</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">in</span><span class="params">(point p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p.x &gt;= <span class="number">0</span> &amp;&amp; p.x &lt;= n &amp;&amp; p.y &gt;= <span class="number">0</span> &amp;&amp; p.y &lt;= m) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">horse</span><span class="params">(point c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">in</span>(c)) &#123;</span><br><span class="line">b[c.x][c.y] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">point t;</span><br><span class="line">t.x = c.x + dir[i][<span class="number">0</span>];</span><br><span class="line">t.y = c.y + dir[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">in</span>(t)) &#123;</span><br><span class="line">b[t.x][t.y] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m, x, y;</span><br><span class="line">point p;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; p.x &gt;&gt; p.y;</span><br><span class="line"></span><br><span class="line"><span class="built_in">horse</span>(p);</span><br><span class="line"></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//初始化出发点 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化边界，按照边界走就只有一种走法，所以初始化为1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!b[i][<span class="number">0</span>]) &#123;</span><br><span class="line">dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!b[<span class="number">0</span>][j]) &#123;</span><br><span class="line">dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dp[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递推公式</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!b[i][j]) &#123;</span><br><span class="line">                <span class="comment">//到达位置 (i, j) 的方案数量等于到达其上方位置 (i - 1, j) 的方案数量与到达其左方位置 (i, j - 1) 的方案数量之和。</span></span><br><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dp[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; dp[n][m];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1194：移动路线-考过"><a href="#1194：移动路线-考过" class="headerlink" title="1194：移动路线(考过)"></a>1194：移动路线(考过)</h3><p>上面过河卒题目的没有条件的简单版本</p><p>注意这个循环的起始点，我一开始做的时候没有考虑我决定以dp1,1为起点，导致双重循环起点都写为了1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m, n,dp[<span class="number">21</span>][<span class="number">21</span>];</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="comment">//起点的初始条件别忘了</span></span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++) &#123;</span><br><span class="line">        dp[i][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        dp[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[n][m];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1191：流感传染-模拟考过"><a href="#1191：流感传染-模拟考过" class="headerlink" title="1191：流感传染(模拟考过)"></a>1191：流感传染(模拟考过)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,count=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> num[<span class="number">101</span>][<span class="number">101</span>],b[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            cin &gt;&gt;num[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            b[i][j]= num[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(count &lt; m<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (num[i][j] == <span class="string">&#x27;@&#x27;</span> ) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j + <span class="number">1</span> &lt; n &amp;&amp; num[i][j+<span class="number">1</span>] != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                        <span class="comment">//引入第二个数组储存结果，防止一直感染下去</span></span><br><span class="line">                        b[i][j + <span class="number">1</span>] = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (j - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; num[i][j<span class="number">-1</span>] != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                        b[i][j - <span class="number">1</span>] = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (i + <span class="number">1</span> &lt; n &amp;&amp; num[i+<span class="number">1</span>][j] != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                        b[i + <span class="number">1</span>][j] = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (i - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; num[i<span class="number">-1</span>][j] != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                        b[i - <span class="number">1</span>][j] = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                num[i][j] = b[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num[i][j] == <span class="string">&#x27;@&#x27;</span>) &#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; sum;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一种新的变量类型：节点node类型 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//data是节点的数据域 </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//lchild是节点的左指针（可以理解为左绳子） </span></span><br><span class="line"></span><br><span class="line">node* lchild;</span><br><span class="line"></span><br><span class="line"><span class="comment">//rchild是节点的左指针（可以理解为右绳子） </span></span><br><span class="line"></span><br><span class="line">node* rchild;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//创建一个节点变量 </span></span><br><span class="line"></span><br><span class="line"><span class="function">node* <span class="title">createNode</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从内存系统申请一个匿名node对象，并用绳子p牵着这个匿名node对象 </span></span><br><span class="line"></span><br><span class="line">node* p = <span class="keyword">new</span> node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绳子p所牵对象的data域赋值 </span></span><br><span class="line"></span><br><span class="line">p-&gt;data = v;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绳子p所牵对象的lchild域为NULL，表示不牵其他匿名node对象 </span></span><br><span class="line"></span><br><span class="line">p-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绳子p所牵对象的rchild域为NULL，表示不牵其他匿名node对象 </span></span><br><span class="line"></span><br><span class="line">p-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义二叉树的根节点 </span></span><br><span class="line"></span><br><span class="line">node* root = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成第1个node内存单元，并用绳子root牵着第1个node内存单元 </span></span><br><span class="line"></span><br><span class="line">root = <span class="built_in">createNode</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成第2个node内存单元，并用绳子l牵着第2个node内存单元</span></span><br><span class="line"></span><br><span class="line">node* l = <span class="built_in">createNode</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成第3个node内存单元，并用绳子r牵着第3个node内存单元 </span></span><br><span class="line"></span><br><span class="line">node* r = <span class="built_in">createNode</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将根节点变量root的左节点绳子牵向绳子l所牵的内存单元，即两根绳子都牵着第2个node内存单元 </span></span><br><span class="line"></span><br><span class="line">root-&gt;lchild = l;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将根节点变量root的右节点绳子牵向绳子r所牵的内存单元，即两根绳子都牵着第3个node内存单元 </span></span><br><span class="line"></span><br><span class="line">root-&gt;rchild = r;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成第4个node内存单元，并用绳子l重新牵着第4个node内存单元，注意：绳子l不再牵着第2个node内存单元 </span></span><br><span class="line"></span><br><span class="line">l = <span class="built_in">createNode</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成第5个node内存单元，并用绳子r重新牵着第5个node内存单元，注意：绳子r不再牵着第3个node内存单元 </span></span><br><span class="line"></span><br><span class="line">r = <span class="built_in">createNode</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将根节点变量root的左节点的左节点绳子牵向绳子l所牵的内存单元，即两根绳子都牵着第4个node内存单元 </span></span><br><span class="line"></span><br><span class="line">root-&gt;lchild-&gt;lchild = l;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将根节点变量root的左节点的右节点绳子牵向绳子r所牵的内存单元，即两根绳子都牵着第5个node内存单元 </span></span><br><span class="line"></span><br><span class="line">root-&gt;lchild-&gt;rchild = r;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成第6个node内存单元，并用绳子l重新牵着第6个node内存单元，注意：绳子l不再牵着第4个node内存单元 </span></span><br><span class="line"></span><br><span class="line">l = <span class="built_in">createNode</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成第7个node内存单元，并用绳子r重新牵着第7个node内存单元，注意：绳子r不再牵着第5个node内存单元 </span></span><br><span class="line"></span><br><span class="line">r = <span class="built_in">createNode</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将根节点变量root的右节点的左节点绳子牵向绳子l所牵的内存单元，即两根绳子都牵着第6个node内存单元 </span></span><br><span class="line"></span><br><span class="line">root-&gt;rchild-&gt;lchild = l;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将根节点变量root的右节点的右节点绳子牵向绳子r所牵的内存单元，即两根绳子都牵着第7个node内存单元 </span></span><br><span class="line"></span><br><span class="line">root-&gt;rchild-&gt;rchild = r;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1316：数的计数（模拟考过）"><a href="#1316：数的计数（模拟考过）" class="headerlink" title="1316：数的计数（模拟考过）"></a>1316：数的计数（模拟考过）</h3><p>此题的关键是通过数组ans节约了时间和空间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//csdn写法</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n)</span> <span class="comment">//统计m所扩展出的数据个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">ans++;      <span class="comment">//每出现一个原数，累加器加 1;</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n / <span class="number">2</span>; i++)  <span class="comment">//左边添加不超过原数一半的自然数，作为新原数,终止条件为i=1</span></span><br><span class="line"><span class="built_in">dfs</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">dfs</span>(n);</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//老师写法</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//此处是防止超时的如果计算过，则直接返回结果 ans[n]，节约了时间和空间</span></span><br><span class="line"><span class="keyword">if</span> (ans[n]) &#123;</span><br><span class="line"><span class="keyword">return</span> ans[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根节点自己是一个数</span></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="comment">//剪枝(超过前一个自然数一半的情况)</span></span><br><span class="line"><span class="keyword">if</span> (i &gt; n / <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//叶子结点</span></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非叶子结点</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> j = <span class="built_in">dfs</span>(i);</span><br><span class="line">cnt += j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用于保存已计算的数的拆分数量，节约了时间和空间</span></span><br><span class="line">ans[n] = cnt;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> cnt = <span class="built_in">dfs</span>(n);</span><br><span class="line">cout &lt;&lt; cnt;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1200：分解因数-模拟考过"><a href="#1200：分解因数-模拟考过" class="headerlink" title="1200：分解因数(模拟考过)"></a>1200：分解因数(模拟考过)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面的写法在模拟给的数据中会出现内存超限</span></span><br><span class="line"><span class="comment">//叶子写在for循环外面</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//叶子结点,分解方式ans+1，直接返回，不再执行</span></span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = s; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="comment">//非叶子结点(通过dfs(n / i, i)进行递归)</span></span><br><span class="line"><span class="keyword">if</span> (n%i==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">dfs</span>(n / i, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//剪枝(n%i!=0的情况)</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="built_in">dfs</span>(m, <span class="number">2</span>);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1204：爬楼梯-考过"><a href="#1204：爬楼梯-考过" class="headerlink" title="1204：爬楼梯(考过)"></a>1204：爬楼梯(考过)</h3><p>想复杂了，这类题还是找规律</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> n)</span>   <span class="comment">//递归算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">f</span>(n - <span class="number">1</span>) + <span class="built_in">f</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">f</span>(n) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1199：全排列-模拟考过"><a href="#1199：全排列-模拟考过" class="headerlink" title="1199：全排列(模拟考过)"></a>1199：全排列(模拟考过)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> b[<span class="number">1001</span>];<span class="comment">//标记 </span></span><br><span class="line"><span class="type">char</span> s[<span class="number">1001</span>], as[<span class="number">1001</span>]; <span class="comment">//s存储原字符串 as存储排序方案 </span></span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!b[s[j]]) &#123;<span class="comment">//判断是否用过 </span></span><br><span class="line">b[s[j]] = <span class="number">1</span>;</span><br><span class="line">as[i] = s[j];</span><br><span class="line"><span class="keyword">if</span> (i == len - <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; as&lt;&lt;endl;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">dfs</span>(i + <span class="number">1</span>);<span class="comment">//否则取下一个长度 </span></span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">//实际上下面的这行代码只有在i == len - 1后才会运行，因为不满足长度时，会一直进行dfs的递归</span></span><br><span class="line">b[s[j]] = <span class="number">0</span>;<span class="comment">//标记取消 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">len = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>);<span class="comment">//从长度0开始搜索 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h2><h3 id="归并排序（递归）"><a href="#归并排序（递归）" class="headerlink" title="归并排序（递归）"></a>归并排序（递归）</h3><p>这个原题目找不到了，看的不是很懂</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> tmp[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> L1, <span class="type">int</span> R1, <span class="type">int</span> L2, <span class="type">int</span> R2)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> i = L1;</span><br><span class="line"><span class="type">int</span> j = L2;</span><br><span class="line"><span class="type">int</span> k = L1;</span><br><span class="line"><span class="keyword">while</span> (i&lt;=R1&amp;&amp;j&lt;=R2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;=a[j])&#123;</span><br><span class="line">tmp[k++] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">tmp[k++] = a[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//男生多</span></span><br><span class="line"><span class="keyword">while</span> (i&lt;=R1)</span><br><span class="line">&#123;</span><br><span class="line">tmp[k++] = a[i++];</span><br><span class="line">&#125;<span class="keyword">while</span> (j &lt;= R2)</span><br><span class="line">&#123;</span><br><span class="line">tmp[k++] = a[i++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = L1; i &lt;= R2; i++) &#123;</span><br><span class="line">a[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergesort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">mergesort</span>(l, m);</span><br><span class="line"><span class="built_in">mergesort</span>(m+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">merge</span>(l, m, m + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;排序前:&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>();</span><br><span class="line"><span class="built_in">mergesort</span>(<span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;排序后:&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求逆序对（模拟考过）-1"><a href="#求逆序对（模拟考过）-1" class="headerlink" title="求逆序对（模拟考过）"></a>求逆序对（模拟考过）</h4><p>不会，直接过</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Max = <span class="number">1e6</span> + <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> a[Max] = &#123;&#125;; <span class="comment">// 存储输入序列的数组</span></span><br><span class="line"><span class="type">int</span> b[Max]; <span class="comment">// 存储归并排序过程中的临时数组</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> num = <span class="number">0</span>; <span class="comment">// 用于存储逆序对的数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序中的归并操作，将两个已排序的数组合并成一个有序的数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> mid, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = l; <span class="comment">// 左半部分数组的下标</span></span><br><span class="line">    <span class="type">int</span> j = mid + <span class="number">1</span>; <span class="comment">// 右半部分数组的下标</span></span><br><span class="line">    <span class="type">int</span> k = l; <span class="comment">// 临时数组的下标</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123; <span class="comment">// 比较左右两部分数组中的元素，合并为一个有序的数组</span></span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; a[j]) &#123; <span class="comment">// 如果左边元素大于右边元素，说明存在逆序对</span></span><br><span class="line">            b[k++] = a[j++]; <span class="comment">// 将右边元素存储在临时数组中</span></span><br><span class="line">            num += mid - i + <span class="number">1</span>; <span class="comment">// 统计逆序对数量，注意这里的统计方式</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// 如果左边元素小于等于右边元素，不需要统计逆序对</span></span><br><span class="line">            b[k++] = a[i++]; <span class="comment">// 将左边元素存储在临时数组中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123; <span class="comment">// 如果左半部分数组有剩余元素，将其存储在临时数组中</span></span><br><span class="line">        b[k++] = a[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) &#123; <span class="comment">// 如果右半部分数组有剩余元素，将其存储在临时数组中</span></span><br><span class="line">        b[k++] = a[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = l; i &lt;= r; i++) &#123; <span class="comment">// 将归并排序过程中得到的有序数组覆盖原始数组</span></span><br><span class="line">        a[i] = b[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序，对序列进行排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> mid;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; r) &#123; <span class="comment">// 递归终止条件，当左右下标相等时表示已经排好序</span></span><br><span class="line">        mid = l + ((r - l) /<span class="number">2</span>); <span class="comment">// 计算中间位置，避免溢出</span></span><br><span class="line">        <span class="built_in">mergeSort</span>(l, mid); <span class="comment">// 对左半部分数组进行归并排序</span></span><br><span class="line">        <span class="built_in">mergeSort</span>(mid + <span class="number">1</span>, r); <span class="comment">// 对右半部分数组进行归并排序</span></span><br><span class="line">        <span class="built_in">merge</span>(l, mid, r); <span class="comment">// 归并操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n; <span class="comment">// 输入序列长度</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">// 输入序列</span></span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mergeSort</span>(<span class="number">0</span>, n - <span class="number">1</span>); <span class="comment">// 对序列进行归并排序</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; num ; <span class="comment">// 输出逆序对数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并查找（就是回溯算法）"><a href="#归并查找（就是回溯算法）" class="headerlink" title="归并查找（就是回溯算法）"></a>归并查找（就是回溯算法）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;dfs(&quot;</span> &lt;&lt; l &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; r &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (l &gt; r) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (a[m] &lt; k) &#123;</span><br><span class="line"><span class="built_in">dfs</span>(m + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[m] &gt; k) &#123;</span><br><span class="line"><span class="built_in">dfs</span>(l, m - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[m] == k) &#123;</span><br><span class="line">cout &lt;&lt; m;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h2><h3 id="1213：八皇后问题"><a href="#1213：八皇后问题" class="headerlink" title="1213：八皇后问题"></a>1213：八皇后问题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面是四皇后</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> hx[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> sx[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> zxx[<span class="number">7</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> fxx[<span class="number">7</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> maze[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No.&quot;</span> &lt;&lt; cnt++ &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">cout &lt;&lt; maze[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;行放置皇后&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!hx[i] &amp;&amp; !sx[j] &amp;&amp; zxx[i + j] &amp;&amp; !fxx[i - j + <span class="number">3</span>]) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; 第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;行，第(&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;列位置&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;)放置皇后&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">maze[i][j] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line"><span class="built_in">print</span>();</span><br><span class="line">maze[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">hx[i] = <span class="number">1</span>;</span><br><span class="line">sx[j] = <span class="number">1</span>;</span><br><span class="line">zxx[i+j] = <span class="number">1</span>;</span><br><span class="line">fxx[i-j+<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">maze[i][j] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(i+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">hx[i] = <span class="number">0</span>;</span><br><span class="line">sx[j] = <span class="number">0</span>;</span><br><span class="line">zxx[i + j] = <span class="number">0</span>;</span><br><span class="line">fxx[i - j + <span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">maze[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; 第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;行，第(&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;列位置&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;)剪枝，不能放置皇后&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;行全部4列位置已经遍历&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1215：迷宫"><a href="#1215：迷宫" class="headerlink" title="1215：迷宫"></a>1215：迷宫</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CSDN:</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m, n1, m1, n2, m2, d = <span class="number">0</span>;<span class="comment">//n行m列 </span></span><br><span class="line"><span class="type">char</span> a[<span class="number">100</span>][<span class="number">100</span>];<span class="comment">//保存二维数组</span></span><br><span class="line"><span class="type">int</span> e[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125; &#125;;<span class="comment">//分别表示上下左右</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x == n2 &amp;&amp; y == m2)</span><br><span class="line">&#123;</span><br><span class="line">d = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)<span class="comment">//循环判断上下左右 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x1 = x + e[i][<span class="number">0</span>];<span class="comment">//计算下一个点的坐标 </span></span><br><span class="line"><span class="type">int</span> y1 = y + e[i][<span class="number">1</span>];<span class="comment">//计算下一个点的坐标 </span></span><br><span class="line"><span class="keyword">if</span> (x1 &gt;= <span class="number">0</span> &amp;&amp; y1 &gt;= <span class="number">0</span> &amp;&amp; x1 &lt; n &amp;&amp; y1 &lt; n &amp;&amp; a[x1][y1] != <span class="string">&#x27;#&#x27;</span>)<span class="comment">//判断边界，判断是否访问过，判断是否可以通过 </span></span><br><span class="line">&#123;</span><br><span class="line">a[x1][y1] = <span class="string">&#x27;#&#x27;</span>;<span class="comment">//走过就标记为不能走 </span></span><br><span class="line"><span class="built_in">fun</span>(x1, y1);<span class="comment">//进入下一个点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; n1 &gt;&gt; m1 &gt;&gt; n2 &gt;&gt; m2;</span><br><span class="line">d = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (a[n1][m1] == <span class="string">&#x27;#&#x27;</span> || a[n2][m2] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fun</span>(n1, m1);</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">1</span>)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//老师的dfs：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> a[<span class="number">101</span>][<span class="number">101</span>];<span class="comment">//保存二维数组</span></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125; &#125;;<span class="comment">//分别表示上下左右</span></span><br><span class="line"><span class="type">bool</span> vis[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x; </span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line">point a1;</span><br><span class="line">point a2;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">in</span><span class="params">(point k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (k.x &lt; n &amp;&amp; k.x &gt;= <span class="number">0</span> &amp;&amp; k.y &lt; n &amp;&amp; k.y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(point k)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)<span class="comment">//循环判断上下左右 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//终止条件，剪枝,防止超时</span></span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">point t;</span><br><span class="line">t.x = k.x + dir[i][<span class="number">0</span>];<span class="comment">//计算下一个点的坐标 </span></span><br><span class="line">t.y = k.y + dir[i][<span class="number">1</span>];<span class="comment">//计算下一个点的坐标 </span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">in</span>(t)&amp;&amp;!vis[t.x][t.y]&amp;&amp;a[t.x][t.y]==<span class="string">&#x27;.&#x27;</span>)&#123;<span class="comment">//判断边界，判断是否访问过，判断是否可以通过 </span></span><br><span class="line">vis[t.x][t.y] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (t.x == a2.x &amp;&amp; t.y == a2.y) &#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">dfs</span>(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t;i++)&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">cin &gt;&gt; a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; a1.x &gt;&gt; a1.y &gt;&gt; a2.x &gt;&gt; a2.y;</span><br><span class="line"></span><br><span class="line">flag=<span class="literal">false</span>;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a[a1.x][a1.y] == <span class="string">&#x27;#&#x27;</span> || a[a2.x][a2.y] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">dfs</span>(a1);</span><br><span class="line"><span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据老师改的bfs：</span></span><br><span class="line"><span class="comment">//bfs:</span></span><br><span class="line"><span class="comment">//1、建立队列queue&lt;point&gt; q;</span></span><br><span class="line"><span class="comment">//2、队尾插入传入元素q.push(k);</span></span><br><span class="line"><span class="comment">//3、队列不为空while (!q.empty())</span></span><br><span class="line"><span class="comment">//4、队首元素传入point k = q.front();</span></span><br><span class="line"><span class="comment">//5、队尾插入新的元素q.push(t);（相当于dfs的dfs（t））</span></span><br><span class="line"><span class="comment">//6、队首元素删除q.pop();（放在while层的下一级与for同级）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> a[<span class="number">101</span>][<span class="number">101</span>];<span class="comment">//保存二维数组</span></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125; &#125;;<span class="comment">//分别表示上下左右</span></span><br><span class="line"><span class="type">bool</span> vis[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line">point a1;</span><br><span class="line">point a2;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">in</span><span class="params">(point k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (k.x &lt; n &amp;&amp; k.x &gt;= <span class="number">0</span> &amp;&amp; k.y &lt; n &amp;&amp; k.y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(point k)</span> </span>&#123;</span><br><span class="line">queue&lt;point&gt;q;</span><br><span class="line">q.<span class="built_in">push</span>(k);</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">point k = q.<span class="built_in">front</span>();</span><br><span class="line"><span class="comment">//循环判断上下左右</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line"><span class="comment">//终止条件，剪枝,防止超时</span></span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">point t;</span><br><span class="line">t.x = k.x + dir[i][<span class="number">0</span>];<span class="comment">//计算下一个点的坐标 </span></span><br><span class="line">t.y = k.y + dir[i][<span class="number">1</span>];<span class="comment">//计算下一个点的坐标 </span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">in</span>(t) &amp;&amp; !vis[t.x][t.y] &amp;&amp; a[t.x][t.y] == <span class="string">&#x27;.&#x27;</span>) &#123;<span class="comment">//判断边界，判断是否访问过，判断是否可以通过 </span></span><br><span class="line">vis[t.x][t.y] = <span class="literal">true</span>;</span><br><span class="line">q.<span class="built_in">push</span>(t);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (t.x == a2.x &amp;&amp; t.y == a2.y) &#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; t; i++) &#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">cin &gt;&gt; a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; a1.x &gt;&gt; a1.y &gt;&gt; a2.x &gt;&gt; a2.y;</span><br><span class="line"></span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a[a1.x][a1.y] == <span class="string">&#x27;#&#x27;</span> || a[a2.x][a2.y] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">bfs</span>(a1);</span><br><span class="line"><span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1216：红与黑"><a href="#1216：红与黑" class="headerlink" title="1216：红与黑"></a><strong>1216：红与黑</strong></h3><p>下面有深搜法和广搜法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自己写的dfs：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a[<span class="number">21</span>][<span class="number">21</span>];<span class="comment">//保存二维数组</span></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125; &#125;;<span class="comment">//分别表示上下左右</span></span><br><span class="line"><span class="type">bool</span> vis[<span class="number">21</span>][<span class="number">21</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="type">int</span> x; </span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">point a1;</span><br><span class="line">point a2;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否在棋盘的界内</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">in</span><span class="params">(point k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (k.x &lt; y &amp;&amp; k.x &gt;= <span class="number">0</span> &amp;&amp; k.y &lt; x &amp;&amp; k.y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(point k)</span></span>&#123;</span><br><span class="line"><span class="comment">//循环判断上下左右 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">point t;</span><br><span class="line">t.x = k.x + dir[i][<span class="number">0</span>];<span class="comment">//计算下一个点的x坐标 </span></span><br><span class="line">t.y = k.y + dir[i][<span class="number">1</span>];<span class="comment">//计算下一个点的y坐标 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断边界，判断是否访问过，判断是否可以通过 </span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">in</span>(t)&amp;&amp;!vis[t.x][t.y]&amp;&amp;a[t.x][t.y]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line"><span class="comment">//走过的就不能再走一遍了，所以数组标记true</span></span><br><span class="line">vis[t.x][t.y] = <span class="literal">true</span>;</span><br><span class="line">num++;</span><br><span class="line"><span class="built_in">dfs</span>(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外层的while循环是因为可能存在多组数据，需要持续输出</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cin &gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="comment">//当在一行中读入的是两个零时，表示输入结束，这里的return 0来跳出while循环</span></span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//循环输入棋盘的具体情况，这里注意i&lt;y而不是i&lt;x，原因是i指代的应该是列数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; y; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; x; j++) &#123;</span><br><span class="line">cin &gt;&gt; a[i][j];</span><br><span class="line"><span class="comment">//遇到&#x27;@&#x27;，记录出现的位置，进行深度搜索</span></span><br><span class="line"><span class="keyword">if</span> (a[i][j] == <span class="string">&#x27;@&#x27;</span>) &#123;</span><br><span class="line">a1.x = i;</span><br><span class="line">a1.y = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意重置vis语句的位置，因为后续还可能有新一组的输入</span></span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="comment">//这里是因为题目中要求：记数时包括初始位置的瓷砖</span></span><br><span class="line">num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(a1);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; num&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自己改的bfs：</span></span><br><span class="line"><span class="comment">//bfs:</span></span><br><span class="line"><span class="comment">//1、建立队列queue&lt;point&gt; q;</span></span><br><span class="line"><span class="comment">//2、队尾插入传入元素q.push(k);</span></span><br><span class="line"><span class="comment">//3、队列不为空while (!q.empty())</span></span><br><span class="line"><span class="comment">//4、队首元素传入point k = q.front();</span></span><br><span class="line"><span class="comment">//5、队尾插入新的元素q.push(t);（相当于dfs的dfs（t））</span></span><br><span class="line"><span class="comment">//6、队首元素删除q.pop();（放在while层的下一级与for同级）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a[<span class="number">21</span>][<span class="number">21</span>];<span class="comment">//保存二维数组</span></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125; &#125;;<span class="comment">//分别表示上下左右</span></span><br><span class="line"><span class="type">bool</span> vis[<span class="number">21</span>][<span class="number">21</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span> &#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">point a1;</span><br><span class="line">point a2;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否在棋盘的界内</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">in</span><span class="params">(point k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (k.x &lt; y &amp;&amp; k.x &gt;= <span class="number">0</span> &amp;&amp; k.y &lt; x &amp;&amp; k.y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(point k)</span> </span>&#123;</span><br><span class="line">queue&lt;point&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(k);</span><br><span class="line"><span class="comment">//循环判断上下左右 </span></span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">point k = q.<span class="built_in">front</span>();</span><br><span class="line">point t;</span><br><span class="line">t.x = k.x + dir[i][<span class="number">0</span>];<span class="comment">//计算下一个点的x坐标 </span></span><br><span class="line">t.y = k.y + dir[i][<span class="number">1</span>];<span class="comment">//计算下一个点的y坐标 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断边界，判断是否访问过，判断是否可以通过 </span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">in</span>(t) &amp;&amp; !vis[t.x][t.y] &amp;&amp; a[t.x][t.y] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">//走过的就不能再走一遍了，所以数组标记true</span></span><br><span class="line">vis[t.x][t.y] = <span class="literal">true</span>;</span><br><span class="line">num++;</span><br><span class="line">q.<span class="built_in">push</span>(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外层的while循环是因为可能存在多组数据，需要持续输出</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="comment">//当在一行中读入的是两个零时，表示输入结束，这里的return 0来跳出while循环</span></span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//循环输入棋盘的具体情况，这里注意i&lt;y而不是i&lt;x，原因是i指代的应该是列数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; y; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; x; j++) &#123;</span><br><span class="line">cin &gt;&gt; a[i][j];</span><br><span class="line"><span class="comment">//遇到&#x27;@&#x27;，记录出现的位置，进行广度搜索</span></span><br><span class="line"><span class="keyword">if</span> (a[i][j] == <span class="string">&#x27;@&#x27;</span>) &#123;</span><br><span class="line">a1.x = i;</span><br><span class="line">a1.y = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意重置vis语句的位置，因为后续还可能有新一组的输入</span></span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="comment">//这里是因为题目中要求：记数时包括初始位置的瓷砖</span></span><br><span class="line">num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bfs</span>(a1);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1219：马走日（考过）"><a href="#1219：马走日（考过）" class="headerlink" title="1219：马走日（考过）"></a>1219：马走日（考过）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dir[<span class="number">8</span>][<span class="number">2</span>]=&#123; &#123;<span class="number">2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">-2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-2</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-2</span>&#125;,&#123;<span class="number">1</span>,<span class="number">-2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">-1</span>&#125; &#125;;</span><br><span class="line"><span class="type">int</span> n, m,sum=<span class="number">0</span>,visit[<span class="number">11</span>][<span class="number">11</span>],flag,step=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">horse</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x; </span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">in</span><span class="params">(horse h3)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (h3.x &gt;= <span class="number">0</span> &amp;&amp; h3.x &lt; n &amp;&amp; h3.y &gt;= <span class="number">0</span> &amp;&amp; h3.y &lt; m) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(horse h2,<span class="type">int</span> step)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (step==n*m) &#123;</span><br><span class="line">        sum++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        horse t;</span><br><span class="line">        t.x = h2.x + dir[i][<span class="number">0</span>];</span><br><span class="line">        t.y = h2.y + dir[i][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">in</span>(t)&amp;&amp;visit[t.x][t.y]==<span class="number">0</span>) &#123;</span><br><span class="line">            visit[t.x][t.y] = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(t,step+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//这里的visit[t.x][t.y] = 0;很关键，不然整个棋盘只能走一次,这点与1216:红与黑不同,红与黑是给定了起点和终点，只需要走一次</span></span><br><span class="line">            visit[t.x][t.y] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    horse h1;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> s = <span class="number">0</span>; s &lt; T; s++) &#123;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(visit, <span class="number">0</span>, <span class="built_in">sizeof</span>(visit));</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m &gt;&gt; h1.x &gt;&gt; h1.y;</span><br><span class="line"></span><br><span class="line">        visit[h1.x][h1.y] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(h1,<span class="number">1</span>);</span><br><span class="line">        cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1217：棋盘问题（模拟考过）"><a href="#1217：棋盘问题（模拟考过）" class="headerlink" title="1217：棋盘问题（模拟考过）"></a>1217：棋盘问题（模拟考过）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关键在于结束条件的构建，以及循环初值的设立</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line"><span class="type">int</span> n, k,sum=<span class="number">0</span>,vis[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (y==k) &#123;</span><br><span class="line">        sum++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i][j] == <span class="string">&#x27;#&#x27;</span> &amp;&amp; vis[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                vis[j] = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(i + <span class="number">1</span>, y + <span class="number">1</span>);</span><br><span class="line">                vis[j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n &gt;&gt; k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">-1</span> &amp;&amp; k == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    cin &gt;&gt; a[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            cout &lt;&lt; sum &lt;&lt; endl;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="1267：【例9-11】01背包问题"><a href="#1267：【例9-11】01背包问题" class="headerlink" title="1267：【例9.11】01背包问题"></a>1267：【例9.11】01背包问题</h3><p>记住下面的图，物品为i行，重量为j列</p><p>关键步：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; ++j)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span> (j &gt;= w[i])</span><br><span class="line">              <span class="comment">//当前物品能够装进背包的情况下，还需要比较装上该物品后，和上一次i-1行对应的最优解的价值大小，如果更大，则更新新的更大的价值，反之维持上一步的最优解</span></span><br><span class="line">               dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - w[i]] + c[i]);</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">               <span class="comment">//当前物品不能够装进背包的情况下，维持上一步的最优解</span></span><br><span class="line">               dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//未优化版本：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;----</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 35</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 250</span></span><br><span class="line"><span class="type">int</span> dp[N][M], w[N], c[N];<span class="comment">//dp[i][j]:在前i个物品中选择物品放入大小为j的背包能获得的最大价值 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        cin &gt;&gt; w[i] &gt;&gt; c[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= w[i])</span><br><span class="line">                <span class="comment">//当前物品能够装进背包的情况下，还需要比较装上该物品后，和上一次i-1行对应的最优解的价值大小，如果更大，则更新新的更大的价值，反之维持上一步的最优解</span></span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - w[i]] + c[i]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">//当前物品不能够装进背包的情况下，维持上一步的最优解</span></span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//最后答案就在所有循环结束后的最后一个数组里</span></span><br><span class="line">    cout &lt;&lt; dp[n][m];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(58).png" alt="屏幕截图(58)"></p><h3 id="最长连续字段和"><a href="#最长连续字段和" class="headerlink" title="最长连续字段和"></a>最长连续字段和</h3><p>关键步：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> maxsum = <span class="number">-1000</span>;</span><br><span class="line">dp[<span class="number">0</span>] = w[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="comment">//如果上一个dp是正数，就直接加上当前的w，不管w是不是负数</span></span><br><span class="line"><span class="keyword">if</span> (dp[i - <span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">dp[i] = dp[i - <span class="number">1</span>] + w[i];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//如果上一个dp是负数，就直接抛弃上一个dp，从这个dp开始重新计算</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dp[i] = w[i];</span><br><span class="line">&#125;</span><br><span class="line">maxsum = <span class="built_in">max</span>(maxsum, dp[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dp[<span class="number">101</span>],w[<span class="number">101</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> maxsum = <span class="number">-1000</span>;</span><br><span class="line">dp[<span class="number">0</span>] = w[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="comment">//如果上一个dp是正数，就直接加上当前的w，不管w是不是负数</span></span><br><span class="line"><span class="keyword">if</span> (dp[i - <span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">dp[i] = dp[i - <span class="number">1</span>] + w[i];</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//如果上一个dp是负数，就直接抛弃上一个dp，从这个dp开始重新计算</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dp[i] = w[i];</span><br><span class="line">&#125;</span><br><span class="line">maxsum = <span class="built_in">max</span>(maxsum, dp[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> maxsum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt;  n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; w[i];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="type">int</span> sumup=<span class="built_in">sum</span>();</span><br><span class="line">cout &lt;&lt; sumup;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长上升子序列-模拟考过"><a href="#最长上升子序列-模拟考过" class="headerlink" title="最长上升子序列(模拟考过)"></a>最长上升子序列(模拟考过)</h3><p>关键步：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意下面j终点是i</span></span><br><span class="line"><span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//枚举子序列的终点</span></span><br><span class="line">&#123;</span><br><span class="line">    dp[i] = <span class="number">1</span>;<span class="comment">// 初始化为1，长度最短为自身9</span></span><br><span class="line">    <span class="comment">//注意下面j终点是i</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++)<span class="comment">//从头向终点检查每一个元素</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; a[j])</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>);  <span class="comment">// 状态转移方程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="built_in">max</span>(ans, dp[i]);  <span class="comment">// 比较每一个dp[i],最大值为答案</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">10001</span>], dp[<span class="number">10001</span>];</span><br><span class="line"><span class="comment">// a数组为数据，dp[i]表示以a[i]结尾的最长递增子序列长度</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LIS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//枚举子序列的终点</span></span><br><span class="line">    &#123;</span><br><span class="line">        dp[i] = <span class="number">1</span>;<span class="comment">// 初始化为1，长度最短为自身9</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++)<span class="comment">//从头向终点检查每一个元素</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[j])</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>);  <span class="comment">// 状态转移方程</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, dp[i]);  <span class="comment">// 比较每一个dp[i],最大值为答案</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">         cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">LIS</span>();</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(64).png" alt="屏幕截图(64)"></p><h3 id="最长公共子串"><a href="#最长公共子串" class="headerlink" title="最长公共子串"></a>最长公共子串</h3><p>关键步：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= lena; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= lenb; j++)&#123;</span><br><span class="line">        <span class="comment">//如果相等，则将表格斜上角的数据dp[i - 1][j - 1]+1</span></span><br><span class="line">        <span class="keyword">if</span> (a[i - <span class="number">1</span>] == b[j - <span class="number">1</span>]) &#123;</span><br><span class="line">            dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果不相等，则选择表格左边dp[i][j - 1]和上边dp[i - 1][j]最大的dp数据放入dp[i][j]</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a[<span class="number">201</span>], b[<span class="number">201</span>];</span><br><span class="line"><span class="type">int</span> dp[<span class="number">201</span>][<span class="number">201</span>], lena, lenb,i,j;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lcs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= lena; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= lenb; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果相等，则将表格斜上角的数据dp[i - 1][j - 1]+1</span></span><br><span class="line">            <span class="keyword">if</span> (a[i - <span class="number">1</span>] == b[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果不相等，则选择表格左边dp[i][j - 1]和上边dp[i - 1][j]最大的dp数据放入dp[i][j]</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; a)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; b;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">        lena = <span class="built_in">strlen</span>(a);</span><br><span class="line">        lenb = <span class="built_in">strlen</span>(b);</span><br><span class="line">        <span class="built_in">lcs</span>();</span><br><span class="line">        cout &lt;&lt; dp[lena][lenb] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1296：开餐馆"><a href="#1296：开餐馆" class="headerlink" title="1296：开餐馆"></a>1296：开餐馆</h3><p>关键步</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">cin &gt;&gt; w[i];   <span class="comment">// n 个地点位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; c[i]; <span class="comment">// n个地点的餐馆利润</span></span><br><span class="line">dp[i] = c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// j为逆序，防止部分数据被冲掉（不清楚原因）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (w[i] - w[j] &gt; k)</span><br><span class="line">&#123;  <span class="comment">// 餐馆之间的距离必须大于k</span></span><br><span class="line">dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + c[i]); <span class="comment">// dp[i]表示前i个地点开餐馆的最大利润</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里的排序是为了找到利益的最大值</span></span><br><span class="line"><span class="comment">// 也可以使用for循环加max函数来求最大值</span></span><br><span class="line"><span class="built_in">sort</span>(dp + <span class="number">1</span>, dp + n + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> w[<span class="number">1001</span>], c[<span class="number">1001</span>], dp[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin &gt;&gt; t;<span class="comment">//测试数据组数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> s=<span class="number">1</span>;s&lt;=t;s++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k; <span class="comment">//输入总数n和距离限制K</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">cin &gt;&gt; w[i];   <span class="comment">// n 个地点位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">cin &gt;&gt; c[i];<span class="comment">// n个地点的餐馆利润</span></span><br><span class="line">dp[i] = c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="comment">//j为逆序，防止部分数据被冲掉（不清楚原因）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (w[i] - w[j] &gt; k) &#123;<span class="comment">//餐馆之间的距离必须大于k</span></span><br><span class="line">dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + c[i]);<span class="comment">//dp[i]表示前i个地点开餐馆的最大利润</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//这里的排序是为了找到利益的最大值</span></span><br><span class="line">        <span class="comment">//也可以使用for循环加max函数来求最大值</span></span><br><span class="line"><span class="built_in">sort</span>(dp + <span class="number">1</span>, dp + n + <span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; dp[n] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1293：买书"><a href="#1293：买书" class="headerlink" title="1293：买书"></a>1293：买书</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此方法省略步骤较多</span></span><br><span class="line"><span class="comment">//还没认真看</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span>  dp[<span class="number">1001</span>], c[<span class="number">5</span>] = &#123; <span class="number">0</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">100</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//初始条件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = c[i]; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (dp[j-c[i]]) &#123;</span><br><span class="line">dp[j] = dp[j] + dp[j - c[i]];  <span class="comment">//状态转移方程</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">cout &lt;&lt; dp[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1259：【例9-3】求最长不下降序列（模拟考过"><a href="#1259：【例9-3】求最长不下降序列（模拟考过" class="headerlink" title="1259：【例9.3】求最长不下降序列（模拟考过)"></a>1259：【例9.3】求最长不下降序列（模拟考过)</h3><p>这个比较有意思的是最长不下降序列的输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (dp[i] == ans)</span><br><span class="line">&#123;</span><br><span class="line">b[cnt] = a[i];</span><br><span class="line">cnt++;</span><br><span class="line">ans--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = cnt - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; b[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,ans=<span class="number">1</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">201</span>],dp[<span class="number">201</span>],b[<span class="number">201</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt;= a[j]) &#123;</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;max=&quot;</span>&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] == ans) &#123;</span><br><span class="line">            b[cnt] = a[i];</span><br><span class="line">            cnt++;</span><br><span class="line">            ans--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = cnt - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; b[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1284：摘花生"><a href="#1284：摘花生" class="headerlink" title="1284：摘花生"></a>1284：摘花生</h3><p>关键在于这个dp的改变,从上一步推演而来，就是左边和上面</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j] ,dp[i][j<span class="number">-1</span>])+M[i][j];</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> T,R,C,M[<span class="number">101</span>][<span class="number">101</span>],dp[<span class="number">101</span>][<span class="number">101</span>], res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> s = <span class="number">0</span>; s &lt; T; s++) &#123;</span><br><span class="line">        cin &gt;&gt; R &gt;&gt; C;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;=R; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= C; j++) &#123;</span><br><span class="line">                cin &gt;&gt; M[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= R; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= C; j++) &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j] ,dp[i][j<span class="number">-1</span>])+M[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; dp[R][C] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1258：【例9-2】数字金字塔"><a href="#1258：【例9-2】数字金字塔" class="headerlink" title="1258：【例9.2】数字金字塔"></a>1258：【例9.2】数字金字塔</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此做法为自上而下</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="type">int</span> dp[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//输入数塔</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++)&#123;</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">1</span>][<span class="number">1</span>] = a[<span class="number">1</span>][<span class="number">1</span>];<span class="comment">//粘贴过来</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) + a[i][j];</span><br><span class="line"><span class="comment">//cout &lt;&lt; dp[i][j]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">//状态转移方程：比较这一层dp的正上方与最上方右边一个哪个大</span></span><br><span class="line"><span class="comment">//大的与正下方a相加，作为dp正下方的值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> maxv = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">maxv = <span class="built_in">max</span>(maxv, dp[n][i]);<span class="comment">//比较最后一行结果值</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; maxv;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java爬虫</title>
      <link href="/posts/ade80941.html"/>
      <url>/posts/ade80941.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java爬虫"><a href="#Java爬虫" class="headerlink" title="Java爬虫"></a>Java爬虫</h1><h2 id="实现目标："><a href="#实现目标：" class="headerlink" title="实现目标："></a>实现目标：</h2><p>1、要求爬到该站点的所有小说，（且具有定时去查看小说更新的功能）<br>2、爬到的内容要求包含简介、作者名称、封面图片、小说名称、具体小说章节、最新更新章节、完结状态<br>3、上述要求内容还必须存到数据库中<br>4、小说内容应该以怎么样的形式存到数据库中</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>1、框架：seimicrawler、jsoup、WebMagic（决定采用jsoup）</p><p>2、采用selenium这类谷歌测试工具来爬取动态加载的网页</p><h2 id="python思路"><a href="#python思路" class="headerlink" title="python思路"></a>python思路</h2><p>先摆上python的<strong>静态</strong>爬虫提供相似思路(使用Xpath的方法找到标签)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;https://www.zwwx.com/book/67/67510/&#x27;</span></span><br><span class="line"><span class="comment"># header</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/&#x27;</span></span><br><span class="line">                         <span class="string">&#x27;537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/&#x27;</span></span><br><span class="line">                         <span class="string">&#x27;537.36 Edg/103.0.1264.49&#x27;</span>&#125;    <span class="comment"># 伪装headers</span></span><br><span class="line">response = requests.get(url=url, headers=headers)</span><br><span class="line">response.encoding = response.apparent_encoding  <span class="comment"># 转中文码(自动分析解码)</span></span><br><span class="line"><span class="comment"># re的正则表达式的方法</span></span><br><span class="line"><span class="comment"># print(response.text)</span></span><br><span class="line">href = re.findall(<span class="string">&#x27;&lt;dd&gt;&lt;a href=&quot;(.*?)&quot;&gt;.*?&lt;/a&gt;&lt;/dd&gt;&#x27;</span>, response.text)    <span class="comment"># 需要的用（.*?）代替，不需要的用.*?代替</span></span><br><span class="line">name = re.findall(<span class="string">&#x27;&lt;dt&gt;(.*?)&lt;/dt&gt;&#x27;</span>, response.text)[<span class="number">0</span>]   <span class="comment"># 同上,而[i] i代表第几个数据，从第0个开始</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> href:</span><br><span class="line">    index_url = <span class="string">&#x27;https://www.zwwx.com&#x27;</span> + index  <span class="comment"># 循环有点意思，实际上变量index就是href中的每一个链接</span></span><br><span class="line">    res = requests.get(url=index_url, headers=headers)</span><br><span class="line">    res.encoding = res.apparent_encoding</span><br><span class="line">    <span class="comment"># 有标签时用css和xpath(无法直接提取字符串数据，需要加.text),无标签用re正则(无需加.text)</span></span><br><span class="line">    selector = parsel.Selector(res.text)</span><br><span class="line">    title = selector.css(<span class="string">&#x27;.bookname &gt; h1::text&#x27;</span>).get()</span><br><span class="line">    <span class="comment"># 复杂版：#wrapper &gt; div.content_read &gt; div &gt; div.bookname &gt; h1::text</span></span><br><span class="line">    <span class="comment"># h1::text是提取标签内的文本,.get获取内容</span></span><br><span class="line">    content_list = selector.css(<span class="string">&#x27;#content::text&#x27;</span>).getall()</span><br><span class="line">    content = <span class="string">&#x27;\n&#x27;</span>.join(content_list)     <span class="comment"># 列表转为字符串</span></span><br><span class="line">    <span class="comment"># .get()是取一个 .getall()是提取全部！！！！！！！！！！提取出来是列表，而非字符串</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;novel\\<span class="subst">&#123;name&#125;</span>.txt&#x27;</span>, mode=<span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:  <span class="comment"># as f是将这个文件命名为f</span></span><br><span class="line">        <span class="comment"># 配置文件 文件路径 名字 保存方式（mode w写入数据(会覆盖) a追加保存 ） 编码格式</span></span><br><span class="line">        <span class="comment"># open()需要末尾加上f.close,而with open()则会自动关闭不需要加f.close</span></span><br><span class="line">        f.write(title)  <span class="comment"># 写入f文件中</span></span><br><span class="line">        f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.write(content)</span><br><span class="line">        f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;正在保存：&#x27;</span>, title)   <span class="comment"># 直接文字需双引号，变量不用，用 , 连接</span></span><br></pre></td></tr></table></figure><p><strong>动态</strong>爬虫</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">opt = Options()</span><br><span class="line">opt.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">opt.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">driver = Chrome(options=opt)</span><br><span class="line">url = <span class="string">&#x27;https://www.maofly.com/manga/6996/451102.html&#x27;</span></span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3</span>)  <span class="comment"># 这是为了让网页能够完全加载出来</span></span><br><span class="line"></span><br><span class="line">driver.get(url=url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10000</span>):</span><br><span class="line">    result = es.alert_is_present()(driver)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result:</span><br><span class="line">        <span class="built_in">print</span>(result.text)</span><br><span class="line">        result.accept()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;没有警告窗&#x27;</span>)</span><br><span class="line">        res = driver.page_source</span><br><span class="line">        selector = parsel.Selector(res)</span><br><span class="line">        <span class="comment"># //*[@id=&quot;all&quot;]/div/div[2]/div[1]/img</span></span><br><span class="line">        img_url = selector.xpath(<span class="string">&#x27;//*[@id=&quot;all&quot;]/div/div[2]/div[1]/img/@src&#x27;</span>).get()</span><br><span class="line">        pic_title = selector.xpath(<span class="string">&#x27;/html/body/div/h2/text()&#x27;</span>).get()</span><br><span class="line">        pic_name = selector.xpath(<span class="string">&#x27;/html/body/div/h1/a/text()&#x27;</span>).get()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;img\\&#x27;</span> + pic_name):  <span class="comment"># 如果该路径下没有这个文件夹，那就创建这个文件夹</span></span><br><span class="line">            os.mkdir(<span class="string">&#x27;img\\&#x27;</span> + pic_name)</span><br><span class="line">        img = requests.get(url=img_url).content</span><br><span class="line">        name = pic_title, i     <span class="comment"># 不能用pic_title + i</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;正在保存:&#x27;</span>, name, img_url)  <span class="comment"># 直接文字需双引号，变量不用，用 , 连接</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;img\\<span class="subst">&#123;pic_name&#125;</span>\\<span class="subst">&#123;name&#125;</span>.jpg&#x27;</span>, mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:  <span class="comment"># as f是将这个文件命名为f,变量需要加进&#123; &#125;\\内，定值直接输入\\</span></span><br><span class="line">            <span class="comment"># 配置文件 文件路径 名字 保存方式（mode w写入数据(会覆盖) a追加保存 ） 编码格式</span></span><br><span class="line">            <span class="comment"># open()需要末尾加上f.close,而with open()则会自动关闭不需要加f.close</span></span><br><span class="line">            f.write(img)  <span class="comment"># 写入f文件中</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;保存完成:&#x27;</span>, name)  <span class="comment"># 直接文字需双引号，变量不用，用 , 连接</span></span><br><span class="line"></span><br><span class="line">        button = driver.find_element(By.XPATH, <span class="string">&#x27;/html/body/div/div[2]/nav/div/a[4]&#x27;</span>)</span><br><span class="line">        button.click()</span><br></pre></td></tr></table></figure><p>在爬取数据方面我觉得在看完狂神的视频后问题不大，最大的问题是数据库写入的实现，以及不定期爬取更新资源的实现（可以等网站测试做完再说）</p><h2 id="Jsoup"><a href="#Jsoup" class="headerlink" title="Jsoup"></a>Jsoup</h2><h3 id="爬取小说地址具体代码"><a href="#爬取小说地址具体代码" class="headerlink" title="爬取小说地址具体代码"></a>爬取小说地址具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getBookUrl1</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ArrayList&lt;String&gt; bookUrlList1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//count用于计数完成了多少BookUrl的获取</span></span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//一共有5页</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=max;i++)&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlEver</span> <span class="operator">=</span> <span class="string">&quot;https://www.9biqu.com/class/1/&quot;</span>+i+<span class="string">&quot;.html&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(urlEver)</span><br><span class="line">                    .userAgent(ua)</span><br><span class="line">                    .proxy(currentProxy)</span><br><span class="line">                    .timeout(<span class="number">1000000000</span>)</span><br><span class="line">                    .get();</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            <span class="type">Elements</span> <span class="variable">NameUrlList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#newscontent &gt; div.update-list &gt; div &gt; div &gt; ul&gt;li&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Element el : NameUrlList)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">BookUrlPart</span> <span class="operator">=</span> el.select(<span class="string">&quot;span.s2 &gt; a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">BookUrl</span> <span class="operator">=</span><span class="string">&quot;https://www.9biqu.com&quot;</span>+ BookUrlPart;</span><br><span class="line">                bookUrlList1.add(BookUrl);</span><br><span class="line">                count++;</span><br><span class="line">                System.out.println(<span class="string">&quot;玄幻小说地址采集完成&quot;</span>+count+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            i--;</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说地址时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;玄幻小说已经全部采集完成&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bookUrlList1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="爬取小说信息具体代码"><a href="#爬取小说信息具体代码" class="headerlink" title="爬取小说信息具体代码"></a>爬取小说信息具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;BookInfo&gt; <span class="title function_">listBookDetails</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    BUrl1 = getBookUrl1();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt; BUrl1.size();i++)&#123;</span><br><span class="line">        String urlEverBook=BUrl1.get(i);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            count++;</span><br><span class="line">            <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(urlEverBook)</span><br><span class="line">                    .userAgent(ua)</span><br><span class="line">                    <span class="comment">// 将代理服务器对象传递给Jsoup</span></span><br><span class="line">                    .proxy(currentProxy)</span><br><span class="line">                    .timeout(<span class="number">1000000000</span>)</span><br><span class="line">                    .get();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">bookName</span> <span class="operator">=</span> document.select(<span class="string">&quot;#info &gt; h1&quot;</span>).text();</span><br><span class="line">            <span class="type">String</span> <span class="variable">authorName</span> <span class="operator">=</span> document.select(<span class="string">&quot;#info &gt; p:nth-child(2) &gt; a&quot;</span>).text();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">picUrl</span> <span class="operator">=</span> <span class="string">&quot;https://www.9biqu.com&quot;</span> + document.select(<span class="string">&quot;#fmimg &gt; img&quot;</span>).attr(<span class="string">&quot;src&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">lastChapterName</span> <span class="operator">=</span> document.select(<span class="string">&quot;#info &gt; p:nth-child(5) &gt; a&quot;</span>).text();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(authorName.equals(<span class="string">&quot;小说免费阅读&quot;</span>))&#123;</span><br><span class="line">                authorName=<span class="string">&quot;Tec&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">bookIntro</span> <span class="operator">=</span> document.select(<span class="string">&quot;#intro&quot;</span>).text();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本书名:&quot;</span>+bookName);</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本作者名:&quot;</span>+authorName);</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本介绍:&quot;</span>+bookIntro);</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本图片链接:&quot;</span>+picUrl);</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本最新章名:&quot;</span>+lastChapterName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            QueryWrapper&lt;BookInfo&gt;BookInfoNameQueryWrapper =<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">            BookInfoNameQueryWrapper.eq(<span class="string">&quot;book_name&quot;</span>, bookName);</span><br><span class="line">            <span class="type">BookInfo</span> <span class="variable">bookInfo</span> <span class="operator">=</span> bookInfoMapper.selectOne(BookInfoNameQueryWrapper);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(bookInfo==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">BookInfo</span> <span class="variable">bookInfo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookInfo</span>();</span><br><span class="line">                bookInfo1.setWorkDirection(<span class="number">0</span>);</span><br><span class="line">                bookInfo1.setCategoryId(<span class="number">1L</span>);</span><br><span class="line">                bookInfo1.setCategoryName(<span class="string">&quot;玄幻奇幻&quot;</span>);</span><br><span class="line">                bookInfo1.setPicUrl(picUrl);</span><br><span class="line">                bookInfo1.setBookName(bookName);</span><br><span class="line">                bookInfo1.setAuthorId(<span class="number">0L</span>);</span><br><span class="line">                bookInfo1.setAuthorName(authorName);</span><br><span class="line">                bookInfo1.setBookDesc(bookIntro);</span><br><span class="line">                bookInfo1.setScore(<span class="number">6</span>);</span><br><span class="line">                bookInfo1.setBookStatus(<span class="number">0</span>);</span><br><span class="line">                bookInfo1.setVisitCount(<span class="number">100L</span>);</span><br><span class="line">                <span class="comment">//bookInfo1.setWordCount();</span></span><br><span class="line">                bookInfo1.setCommentCount(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">//bookInfo1.setLastChapterId();</span></span><br><span class="line">                bookInfo1.setLastChapterName(lastChapterName);</span><br><span class="line">                bookInfo1.setLastChapterUpdateTime(LocalDateTime.now());</span><br><span class="line">                bookInfo1.setCreateTime(LocalDateTime.now());</span><br><span class="line">                bookInfo1.setUpdateTime(LocalDateTime.now());</span><br><span class="line">                bookInfo1.setIsVip(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                bookInfoMapper.insert(bookInfo1);</span><br><span class="line">                System.out.println(<span class="string">&quot;数据表bookInfo数据存入成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;在数据表bookInfo中书名为&quot;</span>+bookName+<span class="string">&quot;的小说在数据库中已经存在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说信息时，IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说信息时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="爬取小说章节内容具体代码"><a href="#爬取小说章节内容具体代码" class="headerlink" title="爬取小说章节内容具体代码"></a>爬取小说章节内容具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getBookContent</span><span class="params">(String BookContentUrl)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">bookContent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (bookContent == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(BookContentUrl)</span><br><span class="line">                    .userAgent(ua)</span><br><span class="line">                    .proxy(currentProxy)</span><br><span class="line">                    .timeout(<span class="number">1000000000</span>)</span><br><span class="line">                    .get();</span><br><span class="line">            Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">            <span class="type">Elements</span> <span class="variable">bookContentList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#content &gt; *:not(p:first-child)&quot;</span>);</span><br><span class="line"></span><br><span class="line">            bookContent = bookContentList.toString();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (SocketException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bookContent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**统记中文字数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countChineseCharacters</span><span class="params">(String bookContent)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (bookContent == <span class="literal">null</span> || bookContent.trim().isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    String[] words = bookContent.trim().split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : word.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isChineseCharacter(c)) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**判断是否是中文</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isChineseCharacter</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">    Character.<span class="type">UnicodeScript</span> <span class="variable">script</span> <span class="operator">=</span> Character.UnicodeScript.of(c);</span><br><span class="line">    <span class="keyword">return</span> script == Character.UnicodeScript.HAN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="爬取小说章节具体代码"><a href="#爬取小说章节具体代码" class="headerlink" title="爬取小说章节具体代码"></a>爬取小说章节具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;BookInfo&gt; <span class="title function_">listBookContent</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">countChapter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    BUrl1 = getBookUrl1();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt; BUrl1.size();i++)&#123;</span><br><span class="line">        String urlEverBook=BUrl1.get(i);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(urlEverBook)</span><br><span class="line">                    .userAgent(ua)</span><br><span class="line">                    <span class="comment">// 将代理服务器对象传递给Jsoup</span></span><br><span class="line">                    .proxy(currentProxy)</span><br><span class="line">                    .timeout(<span class="number">1000000000</span>)</span><br><span class="line">                    .get();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">bookName</span> <span class="operator">=</span> document.select(<span class="string">&quot;#info &gt; h1&quot;</span>).text();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//以下代码是取得每本书的每个章节名以及链接还有章节内容</span></span><br><span class="line">            String bookChapterName;</span><br><span class="line">            String bookChapterUrlPart;</span><br><span class="line">            String bookChapterUrl;</span><br><span class="line"></span><br><span class="line">            String bookContent;</span><br><span class="line"></span><br><span class="line">            Long bookId= <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">Elements</span> <span class="variable">bookChapter</span> <span class="operator">=</span> document.select(<span class="string">&quot;#list &gt; dl &gt; dd:gt(13)&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span>(Element el:bookChapter)&#123;</span><br><span class="line">                countChapter++;</span><br><span class="line">                bookChapterName = el.select(<span class="string">&quot;a&quot;</span>).text();</span><br><span class="line">                bookChapterUrlPart = el.select(<span class="string">&quot;a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">                bookChapterUrl = <span class="string">&quot;https://www.9biqu.com&quot;</span>+ bookChapterUrlPart;</span><br><span class="line">                bookContent = getBookContent(bookChapterUrl);</span><br><span class="line">                <span class="type">int</span> <span class="variable">chineseCharCount</span> <span class="operator">=</span> countChineseCharacters(bookContent);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本的第&quot;</span>+countChapter+<span class="string">&quot;章名&quot;</span>+bookChapterName);</span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本的第&quot;</span>+countChapter+<span class="string">&quot;章链接:&quot;</span>+bookChapterUrl);</span><br><span class="line">                <span class="comment">//System.out.println(&quot;第&quot;+count+&quot;本的第&quot;+countChapter+&quot;章内容:&quot;+bookContent);</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//查找是否有该小说的存在</span></span><br><span class="line">                QueryWrapper&lt;BookInfo&gt;BookInfoNameQueryWrapper =<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">                BookInfoNameQueryWrapper.eq(<span class="string">&quot;book_name&quot;</span>, bookName);</span><br><span class="line">                <span class="type">BookInfo</span> <span class="variable">bookInfoText</span> <span class="operator">=</span> bookInfoMapper.selectOne(BookInfoNameQueryWrapper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="type">BookInfo</span> <span class="variable">bookInfoId</span> <span class="operator">=</span> bookInfoMapper.selectOne(BookInfoNameQueryWrapper);</span><br><span class="line">                bookId = bookInfoId.getId();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//查找是否有重复章节内容的存在</span></span><br><span class="line">                QueryWrapper&lt;BookChapter&gt;BookChapterTextQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">                BookChapterTextQueryWrapper.eq(<span class="string">&quot;chapter_name&quot;</span>,bookChapterName);</span><br><span class="line">                BookChapterTextQueryWrapper.eq(<span class="string">&quot;book_id&quot;</span>,bookId);</span><br><span class="line">                <span class="type">BookChapter</span> <span class="variable">bookChapterText</span> <span class="operator">=</span> bookChapterMapper.selectOne(BookChapterTextQueryWrapper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 如果不存在相同的章节名字，则插入书籍信息</span></span><br><span class="line">                <span class="keyword">if</span>(bookInfoText != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (bookChapterText == <span class="literal">null</span> ) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        <span class="comment">//将数据存入bookChapter</span></span><br><span class="line">                        <span class="type">BookChapter</span> <span class="variable">bookChapter1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookChapter</span>();</span><br><span class="line">                        bookChapter1.setBookId(bookId);</span><br><span class="line">                        bookChapter1.setChapterNum(countChapter);</span><br><span class="line">                        bookChapter1.setChapterName(bookChapterName);</span><br><span class="line">                        bookChapter1.setWordCount(chineseCharCount);</span><br><span class="line">                        bookChapter1.setIsVip(<span class="number">0</span>);</span><br><span class="line">                        bookChapter1.setCreateTime(LocalDateTime.now());</span><br><span class="line">                        bookChapter1.setUpdateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">                        bookChapterMapper.insert(bookChapter1);</span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">&quot;数据表bookChapter数据存入成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 如果已经存在相同的书籍信息，则直接使用已存在的书籍信息的id</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;在数据表bookChapter中章节名为&quot;</span>+bookChapterName+<span class="string">&quot;的小说&quot;</span>+bookName+<span class="string">&quot;在数据库中已经存在&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;在数据表bookChapter中书名为&quot;</span>+bookName+<span class="string">&quot;的小说在数据库中不存在&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="type">Long</span> <span class="variable">chapterId</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 查询是否存在该章节和该书名</span></span><br><span class="line">                QueryWrapper&lt;BookChapter&gt; bookChapterQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">                bookChapterQueryWrapper.eq(<span class="string">&quot;book_id&quot;</span>, bookId);</span><br><span class="line">                bookChapterQueryWrapper.eq(<span class="string">&quot;chapter_name&quot;</span>, bookChapterName);</span><br><span class="line">                <span class="type">BookChapter</span> <span class="variable">bookChapterText2</span> <span class="operator">=</span> bookChapterMapper.selectOne(bookChapterQueryWrapper);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果章节存在，则获取其 ID</span></span><br><span class="line">                <span class="keyword">if</span> ( bookChapterText2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                    chapterId = bookChapterText2.getId();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                QueryWrapper&lt;BookContent&gt;BookContentQueryWrapper =<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">                BookContentQueryWrapper.eq(<span class="string">&quot;chapter_id&quot;</span>,chapterId);</span><br><span class="line">                <span class="type">BookContent</span> <span class="variable">bookContentText</span> <span class="operator">=</span> bookContentMapper.selectOne(BookContentQueryWrapper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果不存在相同的章节内容，则插入书籍信息</span></span><br><span class="line">                <span class="keyword">if</span> (bookContentText==<span class="literal">null</span> &amp;&amp; bookInfoText !=<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">BookContent</span> <span class="variable">bookContent1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookContent</span>();</span><br><span class="line">                    bookContent1.setChapterId(chapterId);</span><br><span class="line">                    bookContent1.setContent(bookContent);</span><br><span class="line">                    bookContent1.setCreateTime(LocalDateTime.now());</span><br><span class="line">                    bookContent1.setUpdateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">                    bookContentMapper.insert(bookContent1);</span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">&quot;数据表bookContent数据存入成功&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果已经存在相同的书籍信息，则直接使用已存在的书籍信息的id</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;在数据表bookContent中书名为&quot;</span>+bookName+<span class="string">&quot;的小说在数据库中已经存在&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说章节时，IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说章节时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h3><h4 id="解析html的两种方式"><a href="#解析html的两种方式" class="headerlink" title="解析html的两种方式"></a>解析html的两种方式</h4><p>1、Jsoup.parse</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Document document= Jsoup.parse(<span class="keyword">new</span> <span class="title class_">URL</span>(urlEver), <span class="number">300000</span>);</span><br></pre></td></tr></table></figure><p>2、Jsoup.connect</p><p>userAgent更换访问头</p><p>proxy更换IP</p><p>timeout防止超时异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(urlEverBook)</span><br><span class="line">        .userAgent(ua)</span><br><span class="line">        .proxy(currentProxy)</span><br><span class="line">        .timeout(<span class="number">1000000000</span>)</span><br><span class="line">        .get();</span><br></pre></td></tr></table></figure><h4 id="获取元素的方式"><a href="#获取元素的方式" class="headerlink" title="获取元素的方式"></a>获取元素的方式</h4><h5 id="DOM解析"><a href="#DOM解析" class="headerlink" title="DOM解析"></a>DOM解析</h5><p>.getElementsByTag(“h1”)——标签名</p><p>getElementById(“intro”)——id名</p><p>.text()获取文字</p><p>.attr(“href”)获取元素的某个属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">bookName</span> <span class="operator">=</span> document.getElementsByTag(<span class="string">&quot;h1&quot;</span>).get(<span class="number">0</span>).text();</span><br><span class="line"><span class="type">String</span> <span class="variable">src</span> <span class="operator">=</span> el.getElementsByTag(<span class="string">&quot;a&quot;</span>).eq(<span class="number">0</span>).attr(<span class="string">&quot;href&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h5><p>.select（”#info &gt; h1”）——selector地址</p><p>.text()获取文字</p><p>.attr(“href”)获取元素的某个属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取单条数据：</span></span><br><span class="line"><span class="type">String</span> <span class="variable">bookName</span> <span class="operator">=</span> document.select(<span class="string">&quot;#info &gt; h1&quot;</span>).text();</span><br><span class="line"></span><br><span class="line"><span class="comment">//取多条数据：</span></span><br><span class="line"><span class="comment">//注意这个select取得的位置一定要看清楚</span></span><br><span class="line"><span class="comment">//select(&quot;span.s2 &gt; a&quot;)</span></span><br><span class="line"><span class="type">Elements</span> <span class="variable">NameUrlList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#newscontent &gt; div.update-list &gt; div &gt; div &gt; ul&gt;li&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Element el : NameUrlList)&#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">BookUrlPart</span> <span class="operator">=</span> el.select(<span class="string">&quot;span.s2 &gt; a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">BookUrl</span> <span class="operator">=</span><span class="string">&quot;https://www.9biqu.com&quot;</span>+ BookUrlPart;</span><br><span class="line">      bookUrlList1.add(BookUrl);</span><br><span class="line">      count++;</span><br><span class="line">      System.out.println(<span class="string">&quot;小说地址采集完成&quot;</span>+count+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照条件取多条数据：</span></span><br><span class="line"><span class="comment">//从第13个数据开始取</span></span><br><span class="line"><span class="comment">//#list &gt; dl &gt; dd:gt(13)</span></span><br><span class="line"><span class="type">Elements</span> <span class="variable">bookChapter</span> <span class="operator">=</span> document.select(<span class="string">&quot;#list &gt; dl &gt; dd:gt(13)&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(Element el:bookChapter)&#123;</span><br><span class="line">     countChapter++;</span><br><span class="line">     bookChapterName = el.select(<span class="string">&quot;a&quot;</span>).text();</span><br><span class="line">     bookChapterUrlPart = el.select(<span class="string">&quot;a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">     bookChapterUrl = <span class="string">&quot;https://www.9biqu.com&quot;</span>+ bookChapterUrlPart;</span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本的第&quot;</span>+countChapter+<span class="string">&quot;章名&quot;</span>+bookChapterName);</span><br><span class="line">     System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本的第&quot;</span>+countChapter+<span class="string">&quot;章链接&quot;</span>+bookChapterUrl);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     chapterNameList.add(bookChapterName);</span><br><span class="line">     chapterUrlList.add(bookChapterUrl);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//选择除了第一个以外的所有数据：</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getBookContent</span><span class="params">(String BookContentUrl)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">     String bookContent;</span><br><span class="line">     <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(BookContentUrl)</span><br><span class="line">             .userAgent(ua)</span><br><span class="line">             .proxy(proxy)</span><br><span class="line">             .get();</span><br><span class="line">     Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">    <span class="comment">//#content &gt; *:not(p:first-child)</span></span><br><span class="line">     <span class="comment">//选择id为content的元素下除第一个p元素外的所有元素</span></span><br><span class="line">     <span class="type">Elements</span> <span class="variable">bookContentList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#content &gt; *:not(p:first-child)&quot;</span>);</span><br><span class="line"> <span class="comment">//toString()</span></span><br><span class="line">     <span class="comment">//将Elements对象转化为String对象</span></span><br><span class="line">     bookContent = bookContentList.toString();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> bookContent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Jsoup的选择器"><a href="#Jsoup的选择器" class="headerlink" title="Jsoup的选择器"></a>Jsoup的选择器</h4><h5 id="伪选择器selectors"><a href="#伪选择器selectors" class="headerlink" title="伪选择器selectors"></a>伪选择器selectors</h5><p>:lt(n): 查找哪些元素的同级索引值（它的位置在DOM树中是相对于它的父节点）小于n，比如：td:lt(3) 表示小于三列的元素</p><p>:gt(n):查找哪些元素的同级索引值大于n，比如： div p:gt(2)表示哪些div中有包含2个以上的p元素</p><p>:eq(n): 查找哪些元素的同级索引值与n相等，比如：form input:eq(1)表示包含一个input标签的Form元素</p><p>:has(seletor): 查找匹配选择器包含元素的元素，比如：div:has(p)表示哪些div包含了p元素</p><p>:not(selector): 查找与选择器不匹配的元素，比如： div:not(.logo) 表示不包含 class&#x3D;logo 元素的所有 div 列表</p><p>:contains(text): 查找包含给定文本的元素，搜索不区分大不写，比如： p:contains(jsoup)</p><p>:containsOwn(text): 查找直接包含给定文本的元素</p><p>:matches(regex): 查找哪些元素的文本匹配指定的正则表达式，比如：div:matches((?i)login)</p><p>:matchesOwn(regex): 查找自身包含文本匹配指定正则表达式的元素</p><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>使用try、catch来进行异常处理，一般在第一次出现异常后，根据异常提示，来进行进一步操作，比如输出信息或者线程休眠（这里注意try是否在循环语句里，可以通过类似**i–**的方法来保证循环的正常进行）</p><p>也可以在try语句中主动抛出异常，这里如果bookContentList&#x3D;&#x3D;null直接存入数据库中，会有空指针的异常。所以提前报错到catch语句里，再一次获取bookContentList</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(BookContentUrl)</span><br><span class="line">                .userAgent(ua)</span><br><span class="line">                .proxy(currentProxy)</span><br><span class="line">                .timeout(<span class="number">1000000000</span>)</span><br><span class="line">                .get();</span><br><span class="line">        Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        <span class="type">Elements</span> <span class="variable">bookContentList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#content &gt; *:not(p:first-child)&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(bookContentList!=<span class="literal">null</span>)&#123;</span><br><span class="line">            bookContent = bookContentList.toString();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SocketException</span>(<span class="string">&quot;获取书籍内容失败，将再次尝试获取&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (SocketException e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="IP代理池的创建"><a href="#IP代理池的创建" class="headerlink" title="IP代理池的创建"></a>IP代理池的创建</h4><p>先创建一个List存放IP以及端口以及定义currentProxyIndex存放位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Proxy&gt; proxies = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Proxy</span>(Proxy.Type.HTTP, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;139.200.74.178&quot;</span>, <span class="number">4283</span>)),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Proxy</span>(Proxy.Type.HTTP, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;60.169.245.20&quot;</span>, <span class="number">4215</span>)),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Proxy</span>(Proxy.Type.HTTP, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;183.147.27.251&quot;</span>, <span class="number">4231</span>))</span><br><span class="line">    );</span><br><span class="line"><span class="type">int</span> <span class="variable">currentProxyIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>从List中获取到一个IP以及地址，赋值给currentProxy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br></pre></td></tr></table></figure><p>然后使用proxy方法使用连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(urlEverBook)</span><br><span class="line">                        .proxy(currentProxy)</span><br><span class="line">                        .get();</span><br></pre></td></tr></table></figure><p>最后是根据情况来更换IP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;在爬取小说信息时，IP地址被禁止，将更换IP...&quot;</span>);</span><br><span class="line">    <span class="comment">//下面是换IP的逻辑计算</span></span><br><span class="line">    currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="存入数据库时需要的处理"><a href="#存入数据库时需要的处理" class="headerlink" title="存入数据库时需要的处理"></a>存入数据库时需要的处理</h4><h5 id="防止重复数据"><a href="#防止重复数据" class="headerlink" title="防止重复数据"></a>防止重复数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先通过QueryWrapper来约束条件</span></span><br><span class="line">QueryWrapper&lt;BookInfo&gt;BookInfoNameQueryWrapper =<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">      BookInfoNameQueryWrapper.eq(<span class="string">&quot;book_name&quot;</span>, bookName);</span><br><span class="line">      <span class="type">BookInfo</span> <span class="variable">bookInfo</span> <span class="operator">=</span> bookInfoMapper.selectOne(BookInfoNameQueryWrapper);</span><br><span class="line"><span class="comment">//通过selectOne后为空，可以判断不存在该数据，则存入数据库</span></span><br><span class="line">      <span class="keyword">if</span>(bookInfo==<span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="type">BookInfo</span> <span class="variable">bookInfo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookInfo</span>();</span><br><span class="line">      bookInfo1.setBookName(bookName);</span><br><span class="line"><span class="comment">//·········</span></span><br><span class="line">          </span><br><span class="line">      bookInfoMapper.insert(bookInfo1);</span><br><span class="line">      System.out.println(<span class="string">&quot;数据表bookInfo数据存入成功&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;在数据表bookInfo中书名为&quot;</span>+bookName+<span class="string">&quot;的小说在数据库中已经存在&quot;</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h5 id="获取其他表的数据存入另一张表"><a href="#获取其他表的数据存入另一张表" class="headerlink" title="获取其他表的数据存入另一张表"></a>获取其他表的数据存入另一张表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先通过QueryWrapper来约束条件</span></span><br><span class="line">QueryWrapper&lt;BookInfo&gt;BookInfoNameQueryWrapper =<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">      BookInfoNameQueryWrapper.eq(<span class="string">&quot;book_name&quot;</span>, bookName);</span><br><span class="line">      <span class="type">BookInfo</span> <span class="variable">bookInfoId</span> <span class="operator">=</span> bookInfoMapper.selectOne(BookInfoNameQueryWrapper);</span><br><span class="line"><span class="comment">//获取到这个ID（这是一个自增的数据，所以需要在其其他数据存入之后，再进行getId来获取）</span></span><br><span class="line">      bookId = bookInfoId.getId();</span><br><span class="line"><span class="comment">//存入数据到另外一张数据表book_capter中</span></span><br><span class="line"><span class="type">BookChapter</span> <span class="variable">bookChapter1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookChapter</span>();</span><br><span class="line">      bookChapter1.setBookId(bookId);</span><br><span class="line">bookChapterMapper.insert(bookChapter1);</span><br></pre></td></tr></table></figure><h5 id="防止数据为空"><a href="#防止数据为空" class="headerlink" title="防止数据为空"></a>防止数据为空</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">bookContent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//如果数据bookContent一直为空，则一直进行try的语句</span></span><br><span class="line">      <span class="keyword">while</span> (bookContent == <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">      <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(BookContentUrl)</span><br><span class="line">      .userAgent(ua)</span><br><span class="line">      .proxy(currentProxy)</span><br><span class="line">      .timeout(<span class="number">1000000000</span>)</span><br><span class="line">      .get();</span><br><span class="line">      Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">      <span class="type">Elements</span> <span class="variable">bookContentList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#content &gt; *:not(p:first-child)&quot;</span>);</span><br><span class="line"></span><br><span class="line">      bookContent = bookContentList.toString();</span><br><span class="line"></span><br><span class="line">      &#125;<span class="keyword">catch</span> (SocketException e)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">      Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">      currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">      &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">      Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">      currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> bookContent;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/posts/ee69e452.html"/>
      <url>/posts/ee69e452.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h2><p>开启 Flexbox 布局：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: flex;</span><br></pre></td></tr></table></figure><p>主轴（水平轴）对齐方式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">justify-content</span>: flex-start;<span class="comment">/*默认*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: center;<span class="comment">/*居中对齐*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: space-between;<span class="comment">/*两端对齐*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: flex-end <span class="comment">/*靠右对齐*/</span></span><br></pre></td></tr></table></figure><p>交叉轴（竖轴）对称方式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-items</span>: stretch; <span class="comment">/*默认,自动把子元素拉伸成容器的高度*/</span></span><br><span class="line"><span class="attribute">align-items</span>: flex-start; <span class="comment">/*靠上对齐，在交叉轴开始的最上方，可以看到子元素不再占满容器高度：*/</span></span><br><span class="line"><span class="attribute">align-items</span>: center; <span class="comment">/*居中对齐*/</span></span><br><span class="line"><span class="attribute">align-items</span>: flex-end; <span class="comment">/*靠下对齐：*/</span></span><br></pre></td></tr></table></figure><p>空间占比：</p><p>子元素可以通过设置<code>flex</code>属性来调整空间的占比，例如让 <code>flex2</code> 在水平方向上占据其他子元素的 2 倍大小，可以设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex1</span>,</span><br><span class="line"><span class="selector-class">.flex3</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex2</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收缩(当它们的宽度超过 flex 容器之后，该如何进行收缩)：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*flex-grow*/</span></span><br><span class="line"><span class="selector-class">.flex2</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;<span class="comment">/*其它的元素保持默认的宽度（即内容的宽度，flex-basis 为 auto)，那么 .flex2 就会自动增长并占据整个剩余空间*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*flex-shrink*/</span></span><br><span class="line"><span class="selector-class">.flex1</span>,</span><br><span class="line"><span class="selector-class">.flex3</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex2</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">2</span>;</span><br><span class="line">&#125;<span class="comment">/*通过 flex-shrink 来设置一个数值，数值越大，收缩程度也越大，比如flex-shrink: 2的元素会比flex-shrink:1收缩的值大 2 倍：*/</span></span><br></pre></td></tr></table></figure><p>flex属性:</p><p>说完<code>flex-grow</code>、<code>flex-shrink</code> 和 <code>flex-basis</code> 之后，再来看一下这个 <code>flex</code> 属性，它其实是前边三个属性的缩写，默认值是 <code>0 1 auto</code>，即不增长，但收缩，收缩比例为 1，flex-basis 为 auto，即取自用户定义的宽度或内容的宽度。</p><p>换行：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-wrap</span>: nowrap; <span class="comment">/*默认，不换行*/</span></span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap; <span class="comment">/*来让元素进行折行排列，使得每行的元素都不超过容器的宽度*/</span></span><br></pre></td></tr></table></figure><p>开启换行后，控制各行布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-content</span>: center; <span class="comment">/*居中对齐*/</span></span><br><span class="line"><span class="attribute">align-content</span>: space-between; <span class="comment">/*两端对齐*/</span></span><br></pre></td></tr></table></figure><h2 id="html基础"><a href="#html基础" class="headerlink" title="html基础"></a>html基础</h2><h3 id="ol、ul、li"><a href="#ol、ul、li" class="headerlink" title="ol、ul、li"></a>ol、ul、li</h3><p>li标签（全称为list item）是HTML语言中的一个元素标签。属于列表标签。以 li 开始 &#x2F;li 结束，li 标签可用在<strong>有序</strong>列表 (ol) 和<strong>无序</strong>列表 (ul) 中。</p><p>li标签则用的范围<strong>比较少</strong>，通常用在<strong>导航栏、列表栏、图片</strong>显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>有序列表：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>打开冰箱门<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>把大象放进去<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>关上冰箱门<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>无序列表：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>雪碧<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>可乐<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>凉茶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>去除无需列表前的原点</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dl、dt、dd"><a href="#dl、dt、dd" class="headerlink" title="dl、dt、dd"></a>dl、dt、dd</h3><p>只有当你<strong>需要对列表项进行解释</strong>的时候, 你才需要 使用 dl, 否则就没有必要使用dl, 或者说使用dl就不是那么 恰当了，主要是html要求最好见名知意.</p><p>dt（define list title）是用于生成定义列表中各列表项的标题，重复使用可以定义多个列表项的标题。</p><ul><li>dl —— define list——定义列表</li><li>dt—— define list title —— 用于生成定义列表中各列表项的标题，重复使用可以定义多个列表项的标题。用来创建列表中的上层项目。</li><li>dd —— define list define —— 用于生成定义列表各列表项的说明文字段，重复使用可以定义多个说明文字段。dd是对应dt的简短说明或解释。用来创建列表中最下层项目。默认存在两格缩进</li></ul><p>dl 列表中有较为强烈的“描述”、“解释”、“补充”意义。 dt 和 dd 有明显的逻辑关系，dd 从属于 dt，dd 中的内容是对 dt 的“描述”、“解释”、“补充”。另外，dd 之间虽然是平行关系，但是其描述的内容是多角度的，不同于单纯的 li。</p><h3 id="div"><a href="#div" class="headerlink" title="div"></a>div</h3><p>div标签总是从新行开始显示，它包含的元素会自动换行；span标签是行内元素，拥有行内元素的特点。但是可以通过flex改变div的作为块状元素的属性</p><h3 id="span"><a href="#span" class="headerlink" title="span"></a>span</h3><p>span标签元素会和其他标签元素会在一行显示</p><p>使用 span来组合行内元素，以便通过样式来格式化它们。</p><p>span标签通常使用来将文本的一部分或者文档的一部分独立出来，从而对独立出来的内容设置单独的样式。span本身没有任何属性，也没有固定的格式表现，当对它应用样式时，它会产生视觉上的变化。</p><h3 id="href-x3D-”-”与javascript：void（0）的区别"><a href="#href-x3D-”-”与javascript：void（0）的区别" class="headerlink" title="href&#x3D;”#”与javascript：void（0）的区别"></a><strong>href&#x3D;”#”与javascript：void（0）的区别</strong></h3><p>href&#x3D;”#”方法其实也是空连接的意思，但是点击之后会自动跳转到页面的最上面，因为用了这个方法就相当于点击了一个锚记，但是这个锚记又没写ID，所以就默认跳转到页面顶部。从上面的例子也可以看出，当要执行某些处理，但是不整体刷新页面的情况下，可以使用void(0),但是在需要对页面进行refresh的情况下，那就要仔细了。<br>其实我们可以这样用，这句话会进行一次submit操作。那什么情况下用void(0)比较多呢，无刷新，当然是Ajax了，看一下Ajax的web页面的话，一般都会看到有很多的void(0)，所以在使用void(0)之前,最好先想一想,这个页面是否需要整体刷新。<br>说白了，href&#x3D;”#”这种形式会整体刷新页面，而href&#x3D;”javascript:void(0)” 则不会。所以如果是空连接的话，还是推荐javascript:void(0)。</p><p>而且href&#x3D;”javascript:void(0)”最好写在@click&#x3D;”nextChapter(data.chapterInfo.bookId)”<strong>后面</strong>这样就不会导致一直在最底端的情况QAQ</p><h2 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h2><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><p>id 选择器：要选择具有特定 id 的元素，请写一个井号（＃），后跟该元素的 id。</p><p>类选择器：如需选择拥有特定 class 的元素，请写一个句点（.）字符，后面跟类名。</p><p>伪类选择器、伪元素选择器</p><h4 id="CSS-组合器"><a href="#CSS-组合器" class="headerlink" title="CSS 组合器"></a>CSS 组合器</h4><p>后代选择器<br>后代选择器匹配属于指定元素后代的所有元素。</p><p>子选择器<br>子选择器匹配属于指定元素子元素的所有元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-content</span>: center; <span class="comment">/*居中对齐*/</span></span><br><span class="line"><span class="attribute">align-content</span>: space-between; <span class="comment">/*两端对齐*/</span></span><br></pre></td></tr></table></figure><p>nth-child(n) 选择器</p><p>:nth-child(<em>n</em>) 选择器匹配属于其父元素的第 N 个子元素，不论元素的类型</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el-menu-item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">260px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS类"><a href="#CSS类" class="headerlink" title="CSS类"></a>CSS类</h3><p>CSS 伪类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 未访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FF0000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 已访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00FF00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标悬停链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FF00FF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 已选择的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0000FF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>CSS 伪元素：</p><p>::first-line 伪元素<br>::first-line 伪元素用于向文本的首行添加特殊样式。</p><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>当我们在HTML中定义一个元素时，它会自动创建一个盒子，这个盒子包含了这个元素的所有内容（包括文本、图片等）以及一些与元素相关的属性（例如宽度、高度、边框、内边距和外边距）。CSS盒子模型描述了这个盒子是如何构造的。</p><p>在CSS盒子模型中，一个盒子有4个部分：</p><p>1.内容区（Content）：元素的文本内容、图像和其他子元素都在这里。</p><p>2.内边距区（Padding）：这是内容区和边框之间的空间，可以使用padding属性设置。</p><p>3.边框区（Border）：边框围绕着内边距和内容区。可以使用border属性设置。</p><p>4.外边距区（Margin）：这是边框和周围元素之间的空间。可以使用margin属性设置。</p><p>这些部分的宽度和高度会受到相应的属性的影响。例如，元素的宽度&#x3D;左边距+左边框+左内边距+内容宽度+右内边距+右边框+右边距。</p><p>在默认的盒子模型中，盒子的宽度和高度不包括内边距和边框，只包括内容区。但是，我们可以通过CSS中的box-sizing属性来改变这种行为。例如，将box-sizing设置为border-box可以让盒子的宽度和高度包括内边距和边框。</p><p>一般推荐将box-sizing属性设置为border-box</p><h2 id="Vue相关"><a href="#Vue相关" class="headerlink" title="Vue相关"></a>Vue相关</h2><p>element-ui的样式可以通过F12看到类名直接改到喜欢的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el-menu--horizontal</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#79bbff</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>element-ui菜单跳转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;Nav&quot;&gt;</span><br><span class="line">        &lt;el-menu :router=&#x27;true&#x27; class=&quot;el-menu-demo&quot; mode=&quot;horizontal&quot; &gt;</span><br><span class="line">            &lt;el-menu-item index=&quot;/&quot;&gt;首页&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index=&quot;/about&quot; &gt;我的书架&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;!--router=&#x27;true&#x27;必须开启 index=&quot;路由的地址&quot;--&gt;</span><br><span class="line">        &lt;/el-menu&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>el-button的引用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*&lt;el-button type=&quot;primary&quot; round&gt;Primary&lt;/el-button&gt;在写css时实际上应该用类选择器*/</span></span><br><span class="line"><span class="selector-class">.lijizhuce-content</span>&gt;<span class="selector-class">.el-button</span>&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>element-plus el-button图标的添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top-button&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">style</span>=<span class="string">&quot;vertical-align: middle&quot;</span>&gt;</span>/**/</span><br><span class="line">            <span class="tag">&lt;<span class="name">Search</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;vertical-align: middle&quot;</span>&gt;</span> 搜索 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/css-button.png" alt="css-button"></p><p>element-plus el-input图标的添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;input&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入验证码&quot;</span> <span class="attr">clearable</span> <span class="attr">prefix-icon</span>=<span class="string">&quot;Message&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- prefix-icon是在前面的图标，suffix-icon是在后面的图标 --&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/css-input.png" alt="css-input"></p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="小说项目"><a href="#小说项目" class="headerlink" title="小说项目"></a>小说项目</h3><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/css-%E6%8E%92%E7%89%88%E7%BB%83%E4%B9%A0.png" alt="css-排版练习"></p><p>首先是分析html元素首先是外层有一个整体的div并且存在boder,内部排布需要flex布局，且需要分成两排，使用flex-wrap: wrap换行,</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hot-list</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">700px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">350px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#c3dfea</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap; <span class="comment">/*来让元素进行折行排列，使得每行的元素都不超过容器的宽度*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后观察内部可以分为图片以及介绍两大板块包含在一起所以还有一个div，因为两个板块在同一条线上，所以此处的div也需要flex布局,同时考虑到美观层面，将每一个书籍的左侧和上部增加间距，再加上整体的局部增加了内间距刚好可以实现，全部书籍之间存在间隙，书籍与整体盒子之间也有一定的距离</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.itemList</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="图片板块"><a href="#图片板块" class="headerlink" title="图片板块:"></a>图片板块:</h4><p>作为图片外层的div可以与图片的尺寸相同，也可以像下面一样，多出一部分，省去了写magin，而且使用百分比（%）使得整体的布局更加清晰，但是要预留出书本详情的版块</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.items_img</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">45%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">158px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="图片："><a href="#图片：" class="headerlink" title="图片："></a>图片：</h5><p>按照两本书同一行的大小，进行width和height的尝试，这里不能使用百分比（%）的话，则是按照上一层div的大小来进行缩放，所以此处的height的值可以是100%，并无差别</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.items_img</span>&gt;<span class="selector-tag">a</span>&gt;<span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">116px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">158px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="书籍详情板块："><a href="#书籍详情板块：" class="headerlink" title="书籍详情板块："></a>书籍详情板块：</h4><p>确定板块的大小，同时也可以先指定好整体的字所需要的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.items_txt</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">52%</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: small;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="书名："><a href="#书名：" class="headerlink" title="书名："></a>书名：</h5><p>因为<dt>为行类型的标签，所以这里先指定好display为块状放置，以免和作者的名字处于同一个水平线上</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.home-bookName</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">font-size</span>: medium;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h5><p>intro为div，指定盒子的大小后，因为介绍的长度，所以将超出的部分直接隐藏，达到更好看的效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.intro</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适配练习"><a href="#适配练习" class="headerlink" title="适配练习"></a>适配练习</h3><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E9%80%82%E9%85%8D%E7%BB%83%E4%B9%A0.png" alt="适配练习"></p><p>该练习是因为在上面的小说项目之后，我发现不同设备无法进行适配，该练习是为了能够适配各种设备，相同的办法应该会经常用到</p><h4 id="HomeView部分："><a href="#HomeView部分：" class="headerlink" title="HomeView部分："></a>HomeView部分：</h4><p>最外层的部分直接用display：flex会导致整个页面随着缩放随意的变动，但是又需要达到整体处于界面水平中心的样式，所以选择在最外层再加一个div把整体包裹进去，再使用margin：0  auto；(使用这个样式必须要有width存在，否则水平居中的效果消失，同时在这个界面中width基本就确定了其他部分的width)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.home-center</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Navbar部分："><a href="#Navbar部分：" class="headerlink" title="Navbar部分："></a>Navbar部分：</h4><p>需要多加两个div，一个div和HomeView部分的思路是一样的固定width以及magin来实现水平居中，再在里面的子元素中使用display：flex来调整样式</p><p>另一个再加一个最外层的div来保证底层的颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Nav的Css样式 */</span></span><br><span class="line"><span class="selector-class">.el-menu-item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Nav</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Nav-center</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#79bbff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Nav-color</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#79bbff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Top部分"><a href="#Top部分" class="headerlink" title="Top部分"></a>Top部分</h4><p>最外层同样思路，内层的top-center要使用width: 100%;和height: 100%;保证与外层的top相同</p><p>其中headr里的min-width: 1100px;需要注意，否则header会随着缩放不断缩小，而里面的top则保持在1100px的width，那background-color就会有部分不一样</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 组件header里的Css样式 */</span></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">1100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.top</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.top-center</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="comment">/*居中对齐*/</span></span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="comment">/*居中对齐*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.input</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">342px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.top-a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.user</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.top-input</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>在最外层加上width: 1100px;和margin: 0 auto;保持水平居中，内层则使用flex布局，外层的width和height多使用具体的数值，内层的width和height多使用百分比，在部分元素因为缩放变样时，min-width可以很好的解决这个问题</p><h2 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h2><p>1、文字垂直居中：使line-height等于该区域的height</p><p>2、在写网页之前一般都需要去除各种的margin,padding防止边框的产生</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;<span class="comment">/*忽略边框的盒装模型*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、导航栏高度铺满网页</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“100vh”是指大小为“100”单位为“vh”的一个相对长度值；“vh”是css中的一个相对长度单位，是相对于视窗的高度，“100vh”就是指元素的高度等于当前浏览器的视窗高度，即浏览器内部的可视区域的高度大小</p><p> min-height 属性设置元素的最小高度。该属性值会对元素的高度设置一个最低限制。因此，元素可以比指定值高，但不能比其矮。不允许指定负值。</p><p>4、裁剪 div 元素中内容的左&#x2F;右边缘 - 如果溢出元素的内容区域的话</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">overflow-x</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、通过动态边长实现缩进导航栏</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/image-20221217214444893.png" alt="image-20221217214444893"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;HomeView&#x27;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    collapse() &#123;  // 点击收缩按钮触发</span><br><span class="line">      this.isCollapse = !this.isCollapse</span><br><span class="line">      if (this.isCollapse) &#123;  // 收缩</span><br><span class="line">        this.sideWidth = 64</span><br><span class="line">        this.collapseBtnClass = &#x27;el-icon-s-unfold&#x27;</span><br><span class="line">        this.logoTextShow = false</span><br><span class="line">      &#125; else &#123;   // 展开</span><br><span class="line">        this.sideWidth = 200</span><br><span class="line">        this.collapseBtnClass = &#x27;el-icon-s-fold&#x27;</span><br><span class="line">        this.logoTextShow = true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/image-20221217214451740.png" alt="image-20221217214451740"></p><p>6、将搜索栏input框与按钮button边框分开</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、内边距padding</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">5px</span> <span class="number">15px</span> <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">5px</span> <span class="number">15px</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span>;</span><br></pre></td></tr></table></figure><p>8、居中对齐元素<br>要使块元素（例如 <div> ）水平和垂直方向上都居中对齐，请使用 margin: auto;将某个元素在水平方向上居中对齐：margin: 0 auto;</p><p>9、居中对齐文本<br>如果仅需在元素内居中文本，请使用 text-align: center;</p><p>10、居中对齐图像<br>如需居中图像，请将左右外边距设置为 auto，并将其设置为块元素：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">  <span class="attribute">margin-right</span>: auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>11、整体放大缩小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleX</span>(x);         <span class="comment">/*沿X轴方向缩放*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleY</span>(y);         <span class="comment">/*沿Y轴方向缩放*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(x, y);        <span class="comment">/*沿X轴和Y轴同时缩放*/</span></span><br></pre></td></tr></table></figure><p>12、在遇到利用width无法缩放的情况时(可能是子元素的大小大于父元素)可以使用min-width或者max-width</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el-menu-item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">260px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>13、border</p><p>border（可加方向）: border-width（可加auto（方便居中），只写两个则是先上下&#x2F;再左右距离）  border-style（dotted（点状） solid（实线） double（双线） dashed（虚线）; ）  border-color;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tuijian-list</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">5px</span> solid red;<span class="comment">/*边框的宽度5px,边框的样式实线,边框的颜色红色*/</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>14、段落样式：</p><p>大小：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.footer-content</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: small;<span class="comment">/*也可以是5px、80%*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行高：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.footer-content</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;<span class="comment">/*也可以是90%*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文字居中（不用margin来凑）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.footer</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/posts/9ea13874.html"/>
      <url>/posts/9ea13874.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="SpringBoot项目建立"><a href="#SpringBoot项目建立" class="headerlink" title="SpringBoot项目建立"></a>SpringBoot项目建立</h2><p>新建项目，勾选依赖项,如：</p><p>Developer Tools中的Lombok(通过注释简化java开发)</p><p>Web中的Spring Web（相当于SpringMVC）</p><p>SQL中的Mybatis Framework(Mybatis的框架)和MySQL Driver（MySQL的驱动）</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/image-20221221201317655.png" alt="image-20221221201317655"></p><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>通过Navicat创造新的MySQL数据库，并设计表格的名称，类型，以便于后端拿数据</p><h2 id="SpringBoot各级设计"><a href="#SpringBoot各级设计" class="headerlink" title="SpringBoot各级设计"></a>SpringBoot各级设计</h2><h3 id="配置类编写"><a href="#配置类编写" class="headerlink" title="配置类编写"></a>配置类编写</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#--------------------------通用配置-------------------------</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 应用名</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">novel</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="string">---</span> <span class="comment">#---------------------数据库配置---------------------------</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/novel?useUnicode=true&amp;characterEncoding=utf-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">Tec@258011</span></span><br><span class="line"><span class="string">---</span> <span class="comment">#---------------------自定义配置----------------------------</span></span><br><span class="line"><span class="attr">novel:</span></span><br><span class="line">  <span class="comment"># 跨域配置</span></span><br><span class="line">  <span class="attr">cors:</span></span><br><span class="line">    <span class="comment"># 允许跨域的域名</span></span><br><span class="line">    <span class="attr">allow-origins:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http://localhost:1024</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http://localhost:8888</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http://localhost:8080</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">---</span> <span class="comment">#配置mapper xml文件的路径（找不到xml的问题，最后是用config层的MybatisPlusConfig的相关配置来解决的）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="string">mapUnderscoreToCamelCase=true:</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># JSON 序列化时，将所有 Number 类型的属性都转为 String 类型返回，避免前端数据精度丢失的问题。(Long类型最多17位，超过的部分会变成相同数量的0，卡了一个下午加一个过了考试周的晚上QAQ，问题一开始在前端收到的id与数据库不一致，然后发现F12中的预览和响应不同，而响应是对的)</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">generator:</span></span><br><span class="line">      <span class="attr">write_numbers_as_strings:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="Dao层编写"><a href="#Dao层编写" class="headerlink" title="Dao层编写"></a>Dao层编写</h3><p>数据访问对象，负责封装对数据库的CRUD操作，与数据库进行交互，一般是mapper写接口，xml文件写sql语句的形式。</p><p>包括<strong>entity层（实体层）</strong>编写以及<strong>Mapper层</strong>编写</p><h4 id="entity层（实体层）"><a href="#entity层（实体层）" class="headerlink" title="entity层（实体层）"></a>entity层（实体层）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@TableName：如果数据库的表名是home_book，但是实体类的名字不同，那么就需要借助TableName去做绑定  implements Serializable：一个对象序列化的接口，一个类只有实现了Serializable接口，它的对象才是可序列化的。因此如果要序列化某些类的对象，这些类就必须实现Serializable接口。而实际上，Serializable是一个空接口，没有什么具体内容，它的目的只是简单的标识一个类的对象可以被序列化。</span></span><br><span class="line"><span class="meta">@TableName(&quot;home_book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeBook</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"><span class="comment">//@TableId：主键专属比如数据中的表中的字段是id，但是实体类是userId，那么就需要在userId上打上这个注解，用法：设置主键映射 value映射主键字段的名字</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long bookId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mapper层"><a href="#Mapper层" class="headerlink" title="Mapper层"></a>Mapper层</h4><p>不要忘了在启动类下@MapperScan(“com.tec.vuepractice.dao.mapper”)，这样在包扫描的时候就不会漏掉mapper层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//extends BaseMapper&lt;HomeBook&gt;是mybaits-plus的组件，用来进行基础的增删改查</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HomeBookMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;HomeBook&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service层编写-Impl-实现层"><a href="#Service层编写-Impl-实现层" class="headerlink" title="Service层编写+Impl(实现层)"></a>Service层编写+Impl(实现层)</h3><p>更加关注业务逻辑，是业务处理层，将manager组合过的操作和业务逻辑组合在一起，再封装成业务操作。</p><h4 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HomeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询首页小说推荐列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 首页小说推荐列表的 rest 响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RestResp&lt;List&lt;HomeBookRespDto&gt;&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="serviceImpl层"><a href="#serviceImpl层" class="headerlink" title="serviceImpl层"></a>serviceImpl层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="comment">//implements:一个类通过关键字implements声明自己使用一个或者多个接口。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">HomeService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeBookCacheManager homeBookCacheManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RestResp&lt;List&lt;HomeBookRespDto&gt;&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RestResp.ok(homeBookCacheManager.listHomeBooks());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller层编写"><a href="#Controller层编写" class="headerlink" title="Controller层编写"></a>Controller层编写</h3><p>主要负责接受前台的数据和请求，并且在底层处理完之后把结果返回回去，一般不能写业务逻辑在这一层，因为第一造成了不可复用，第二以后的维护困难，第三这一层没有上层，如果给用户返回了奇怪的错误信息将会非常丑陋。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RestController：作用等同于@Controller + @ResponseBody</span></span><br><span class="line"><span class="comment">//@Controller：在一个类上添加@Controller注解，表明了这个类是一个控制器类</span></span><br><span class="line"><span class="comment">//@RestController：用其实是将java对象转为json格式的数据</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="comment">//@RequestMapping：映射URL</span></span><br><span class="line"><span class="meta">@RequestMapping(ApiRouterConsts.API_FRONT_HOME_URL_PREFIX)</span><span class="comment">//（/home）</span></span><br><span class="line"><span class="comment">//在springboot项目中，controller或service层中需要注入多个mapper接口或者另外的service接口，这时候代码中就会有多个@AutoWired注解，使得代码看起来非常的混乱。</span></span><br><span class="line"><span class="comment">//@RequiredArgsConstructor写在类上面可以代替@AutoWired注解，需要注意的是：在注入的时候需要用final定义，或者使用@notnull注解</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeController</span> &#123;</span><br><span class="line"><span class="comment">//注入service</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeService homeService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首页小说推荐查询接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;books&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RestResp&lt;List&lt;HomeBookRespDto&gt;&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> homeService.listHomeBooks();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//@PathVariable(&quot;chapterId&quot;）（卡了3.1一整晚加上3.2早上一小时QAQ）</span></span><br><span class="line"><span class="comment">//@PathVariable 映射 URL 绑定的占位符</span></span><br><span class="line"><span class="comment">//通过 @PathVariable 可以将 URL 中占位符参数绑定到控制器处理方法的入参中:URL 中的 &#123;xxx&#125; 占位符可以通过</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;content/&#123;chapterId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RestResp&lt;BookContentAboutRespDto&gt;  <span class="title function_">getBookContentAbout</span><span class="params">(<span class="meta">@PathVariable(&quot;chapterId&quot;)</span> Long chapterId)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;查询方法调用之前，参数id=&#123;&#125;&quot;</span>, chapterId);</span><br><span class="line">        <span class="keyword">return</span> bookService.getBookContentAbout(chapterId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Dto层编写"><a href="#Dto层编写" class="headerlink" title="Dto层编写"></a>Dto层编写</h3><p>传输对象，一般是把数据库表封装成对象，表的各个字段就是该对象的各个变量</p><p>包括<strong>req层</strong>(Http 请求数据封装)<strong>resp层</strong>（Http 响应数据封装）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小说信息 响应DTO</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiongxiaoyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/5/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@Data:@Data ： 注在类上，提供类的get、set、equals、hashCode、canEqual、toString方法</span></span><br><span class="line"><span class="comment">//@AllArgsConstructor ： 注在类上，提供类的全参构造</span></span><br><span class="line"><span class="comment">//@NoArgsConstructor ： 注在类上，提供类的无参构造</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookInfoRespDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Schema:Swagger3的注解，用于输出api文档，此处提供了描述</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;小说ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类别ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;类别ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类别名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;类别名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小说封面地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;小说封面地址&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String picUrl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小说名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;小说名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作家id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;作家id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long authorId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作家名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;作家名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String authorName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 书籍描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;书籍描述&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bookDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 书籍状态;0-连载中 1-已完结</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;书籍状态;0-连载中 1-已完结&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer bookStatus;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;点击量&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long visitCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总字数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;总字数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer wordCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 评论数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;评论数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer commentCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首章节ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;首章节ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long firstChapterId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新章节ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;最新章节ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long lastChapterId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新章节名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;最新章节名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lastChapterName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新章节更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;最新章节更新时间&quot;)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="manager层编写"><a href="#manager层编写" class="headerlink" title="manager层编写"></a>manager层编写</h3><p>负责将Dao层中的数据库操作组合复用，主要是一些缓存方案，中间件的处理，以及对第三方平台封装的层。</p><h4 id="cache层编写"><a href="#cache层编写" class="headerlink" title="cache层编写"></a>cache层编写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeBookCacheManager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeBookMapper homeBookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookInfoMapper bookInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询首页小说推荐，并放入缓存中（此处没有采用缓存策略）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;HomeBookRespDto&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 从首页小说推荐表中查询出需要推荐的小说</span></span><br><span class="line">        QueryWrapper&lt;HomeBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//orderByAsc：按照DatabaseConsts.CommonColumnEnum.SORT.getName()排序</span></span><br><span class="line">        queryWrapper.orderByAsc(DatabaseConsts.CommonColumnEnum.SORT.getName());</span><br><span class="line">        List&lt;HomeBook&gt; homeBooks = homeBookMapper.selectList(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取推荐小说ID列表</span></span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(homeBooks)) &#123;</span><br><span class="line">            List&lt;Long&gt; bookIds = homeBooks.stream()</span><br><span class="line">                    .map(HomeBook::getBookId)</span><br><span class="line">                    .toList();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据小说ID列表查询相关的小说信息列表</span></span><br><span class="line">            QueryWrapper&lt;BookInfo&gt; bookInfoQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">            bookInfoQueryWrapper.in(DatabaseConsts.CommonColumnEnum.ID.getName(), bookIds);</span><br><span class="line">            List&lt;BookInfo&gt; bookInfos = bookInfoMapper.selectList(bookInfoQueryWrapper);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 组装 HomeBookRespDto 列表数据并返回</span></span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(bookInfos)) &#123;</span><br><span class="line">                Map&lt;Long, BookInfo&gt; bookInfoMap = bookInfos.stream()</span><br><span class="line">                        .collect(Collectors.toMap(BookInfo::getId, Function.identity()));</span><br><span class="line">                <span class="keyword">return</span> homeBooks.stream().map(v -&gt; &#123;</span><br><span class="line">                    <span class="type">BookInfo</span> <span class="variable">bookInfo</span> <span class="operator">=</span> bookInfoMap.get(v.getBookId());</span><br><span class="line">                    <span class="type">HomeBookRespDto</span> <span class="variable">bookRespDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HomeBookRespDto</span>();</span><br><span class="line">                    bookRespDto.setType(v.getType());</span><br><span class="line">                    bookRespDto.setBookId(v.getBookId());</span><br><span class="line">                    bookRespDto.setBookName(bookInfo.getBookName());</span><br><span class="line">                    bookRespDto.setPicUrl(bookInfo.getPicUrl());</span><br><span class="line">                    bookRespDto.setAuthorName(bookInfo.getAuthorName());</span><br><span class="line">                    bookRespDto.setBookDesc(bookInfo.getBookDesc());</span><br><span class="line">                    <span class="keyword">return</span> bookRespDto;</span><br><span class="line">                &#125;).toList();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一般的业务的写法"><a href="#一般的业务的写法" class="headerlink" title="一般的业务的写法"></a>一般的业务的写法</h4><p>（自己写的，对以后的业务编写挺有参考意义的，感动QAQ）</p><p>上面的manager层编写业务的写法主要是在<strong>使用缓存</strong>时使用</p><p>一般在写业务逻辑的时候还是在service层下的<strong>Impl层</strong>比较常用，下面是该业务的常规写法</p><h5 id="mapper层"><a href="#mapper层" class="headerlink" title="mapper层"></a>mapper层</h5><p>先准备好需要的mapper接口</p><h6 id="HomeBookMapper"><a href="#HomeBookMapper" class="headerlink" title="HomeBookMapper"></a>HomeBookMapper</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HomeBookMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;HomeBook&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="BookInfoMapper"><a href="#BookInfoMapper" class="headerlink" title="BookInfoMapper"></a>BookInfoMapper</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookInfoMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;BookInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="service层-1"><a href="#service层-1" class="headerlink" title="service层"></a>service层</h5><p>然后在service层下定义好方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HomeService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;HomeBook&gt; &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;HomeBookRespDto&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="impl层"><a href="#impl层" class="headerlink" title="impl层"></a>impl层</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;HomeBookMapper, HomeBook&gt; <span class="keyword">implements</span> <span class="title class_">HomeService</span> &#123;</span><br><span class="line">    <span class="comment">//@Autowired可能会导致找不到Mapper的bean（常见错误），而使用@Resource则会按照名字来搜素，可以解决找不到Mapper的bean的问题</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeBookMapper homeBookMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookInfoMapper bookInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;HomeBookRespDto&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 从首页小说推荐表中查询出需要推荐的小说</span></span><br><span class="line">        QueryWrapper&lt;HomeBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// orderByAsc（实现递增排序）</span></span><br><span class="line">        <span class="comment">// orderByDesc（实现递减排序）</span></span><br><span class="line">        queryWrapper.orderByAsc(DatabaseConsts.CommonColumnEnum.SORT.getName());</span><br><span class="line">        <span class="comment">//selectlist:根据 entity 条件，查询全部记录</span></span><br><span class="line">        <span class="comment">//selectOne:根据 entity 条件，查询一条记录</span></span><br><span class="line">        List&lt;HomeBook&gt; homeBooks = homeBookMapper.selectList(queryWrapper);</span><br><span class="line"><span class="comment">//CollectionUtils.isEmpty(list): false</span></span><br><span class="line">        <span class="comment">//CollectionUtils.isNotEmpty(list): true</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//这段代码的功能是将一个名为homeBooks的集合中的HomeBook对象的bookId属性取出来，并将它们组成一个Long类型的List集合bookIds。</span></span><br><span class="line">        <span class="comment">//代码的执行过程如下：</span></span><br><span class="line"><span class="comment">//1、判断homeBooks集合是否为空，使用了CollectionUtils.isEmpty()方法来判断，该方法是Spring框架提供的一个工具类方法，用于判断集合是否为空。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、如果homeBooks集合不为空，则使用Java 8中的Stream流对集合进行处理，调用map()方法将HomeBook对象中的bookId属性取出来，然后使用toList()方法将结果转换为List集合。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、最终得到一个名为bookIds的List集合，其中包含了homeBooks集合中所有HomeBook对象的bookId属性值。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取推荐小说ID列表</span></span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(homeBooks)) &#123;</span><br><span class="line">            List&lt;Long&gt; bookIds = homeBooks.stream()</span><br><span class="line">                    .map(HomeBook::getBookId)</span><br><span class="line">                    .toList();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//这段代码的功能是根据给定的bookIds列表，从数据库中查询对应的BookInfo记录，并将查询结果存储在一个名为bookInfos的List集合中。</span></span><br><span class="line"><span class="comment">//代码的执行过程如下：</span></span><br><span class="line"><span class="comment">//1、创建一个QueryWrapper对象bookInfoQueryWrapper，该对象是MyBatis-Plus框架提供的一个查询条件构造器，可以通过该对象构建查询条件。</span></span><br><span class="line"><span class="comment">//2、调用QueryWrapper对象的in()方法，该方法用于构建一个in查询条件，查询的是数据库中名为ID的列，该列的值必须包含在bookIds列表中。</span></span><br><span class="line"><span class="comment">//3、创建一个名为bookInfos的List集合，用于存储查询结果。</span></span><br><span class="line"><span class="comment">//4、调用bookInfoMapper对象的selectList()方法，该方法用于执行查询操作，查询符合指定条件的BookInfo记录，并将查询结果存储在bookInfos集合中。</span></span><br><span class="line"><span class="comment">//5、最终得到一个名为bookInfos的List集合，其中包含了数据库中所有ID值在bookIds列表中的BookInfo记录。</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 根据小说ID列表查询相关的小说信息列表</span></span><br><span class="line">            QueryWrapper&lt;BookInfo&gt; bookInfoQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">            bookInfoQueryWrapper.in(DatabaseConsts.CommonColumnEnum.ID.getName(), bookIds);</span><br><span class="line">            List&lt;BookInfo&gt; bookInfos = bookInfoMapper.selectList(bookInfoQueryWrapper);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//这段代码的功能是将查询出来的BookInfo记录与给定的HomeBook集合进行关联，并将结果组成一个名为bookRespDto的List集合返回。</span></span><br><span class="line"><span class="comment">//代码的执行过程如下：</span></span><br><span class="line"><span class="comment">//1、判断查询结果bookInfos是否为空，如果为空，则直接返回一个空的List集合。</span></span><br><span class="line"><span class="comment">//2、如果bookInfos不为空，则将查询结果转换为一个Map集合bookInfoMap，以BookInfo记录的id作为key，BookInfo对象本身作为value，使用Java 8中的Stream流对查询结果进行处理，调用collect()方法和toMap()方法实现转换。</span></span><br><span class="line"><span class="comment">//3、使用Java 8中的Stream流和Lambda表达式对给定的HomeBook集合进行处理，调用map()方法将每个HomeBook对象映射为一个HomeBookRespDto对象，其中的属性值从关联的BookInfo对象中获取。</span></span><br><span class="line"><span class="comment">//4、使用Map集合bookInfoMap中的get()方法获取每个HomeBook对象关联的BookInfo对象，然后将获取到的属性值设置到HomeBookRespDto对象中，最终得到一个名为bookRespDto的List集合。</span></span><br><span class="line"><span class="comment">//5、返回名为bookRespDto的List集合，其中包含了与HomeBook集合关联的BookInfo记录的属性信息。</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 组装 HomeBookRespDto 列表数据并返回</span></span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(bookInfos)) &#123;</span><br><span class="line">                Map&lt;Long, BookInfo&gt; bookInfoMap = bookInfos.stream()</span><br><span class="line">                        .collect(Collectors.toMap(BookInfo::getId, Function.identity()));</span><br><span class="line">                <span class="keyword">return</span> homeBooks.stream().map(v -&gt; &#123;</span><br><span class="line">                    <span class="type">BookInfo</span> <span class="variable">bookInfo</span> <span class="operator">=</span> bookInfoMap.get(v.getBookId());</span><br><span class="line">                    <span class="type">HomeBookRespDto</span> <span class="variable">bookRespDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HomeBookRespDto</span>();</span><br><span class="line">                    bookRespDto.setType(v.getType());</span><br><span class="line">                    bookRespDto.setBookId(v.getBookId());</span><br><span class="line">                    bookRespDto.setBookName(bookInfo.getBookName());</span><br><span class="line">                    bookRespDto.setPicUrl(bookInfo.getPicUrl());</span><br><span class="line">                    bookRespDto.setAuthorName(bookInfo.getAuthorName());</span><br><span class="line">                    bookRespDto.setBookDesc(bookInfo.getBookDesc());</span><br><span class="line">                    <span class="keyword">return</span> bookRespDto;</span><br><span class="line">                &#125;).toList();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="衍生QueryWrapper的知识点"><a href="#衍生QueryWrapper的知识点" class="headerlink" title="衍生QueryWrapper的知识点"></a>衍生QueryWrapper的知识点</h6><p>orderByAsc：实现递增排序</p><p>orderByDesc：实现递减排序</p><h6 id="衍生BaseMapper接口CRUD的知识点"><a href="#衍生BaseMapper接口CRUD的知识点" class="headerlink" title="衍生BaseMapper接口CRUD的知识点"></a>衍生BaseMapper接口CRUD的知识点</h6><p>引入：extends<code> </code>BaseMapper<UserBean></p><p>selectlist:根据 entity 条件，查询全部记录<br>selectOne:根据 entity 条件，查询一条记录</p><h6 id="衍生Service接口CRUD"><a href="#衍生Service接口CRUD" class="headerlink" title="衍生Service接口CRUD"></a>衍生Service接口CRUD</h6><p>引入implements<code> </code>IService<T>（T：实体层）</p><h6 id="衍生的工具类"><a href="#衍生的工具类" class="headerlink" title="衍生的工具类"></a>衍生的工具类</h6><p>CollectionUtils.isEmpty(list): false</p><p>CollectionUtils.isNotEmpty(list): true</p><p>上面的!CollectionUtils.isEmpty(bookInfos)其实相当于第二种，也同时是第一种判断为flase后相反（！）为true</p><h6 id="衍生的final的作用"><a href="#衍生的final的作用" class="headerlink" title="衍生的final的作用"></a>衍生的final的作用</h6><p>在这里将 HomeBookMapper 声明为 final 主要是出于两个原因：<br>    1、线程安全：当我们将一个对象声明为 final 时，它的引用就不能再指向其他对象，也就是说这个对象是不可变的，这可以避免多线程访问时发生冲突。在Spring中，@Autowired 自动注入的属性默认是可变的，将其声明为 final 可以使其不可变，从而提高线程安全性。<br>    2、提高可读性：使用 final 关键字来声明变量，可以让人们更加明确地知道这个变量不会被修改，也可以让编译器进行更多的优化，提高代码的性能。此外，通过将类中的属性声明为 final，可以让读者更容易地看出这个属性是类的“特征”，不会在运行过程中被修改。<br>    总的来说，将 HomeBookMapper 声明为 final 可以提高代码的可读性和线程安全性。</p><h6 id="衍生的stream的知识点："><a href="#衍生的stream的知识点：" class="headerlink" title="衍生的stream的知识点："></a>衍生的stream的知识点：</h6><pre><code> .stream是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。 .stream.map(方法)：其中的方法获取了小说ID，而map是一种键值对存储结构，用于存储一组不重复的键和对应的值，例如此处的ID键和它所对应的值</code></pre><p>​.toList():将数组转化为List</p><h6 id="衍生的Lambda表达式的知识点："><a href="#衍生的Lambda表达式的知识点：" class="headerlink" title="衍生的Lambda表达式的知识点："></a>衍生的Lambda表达式的知识点：</h6><p>Lambda表达式：（方法参数） -&gt;{方法实现}<br>            （单个参数可以省略括号）</p><pre><code>  lambda遍历List集合          集合的遍历，采用lambda表达式会更简洁：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 8之前：</span></span><br><span class="line"><span class="type">List</span> <span class="variable">features</span> <span class="operator">=</span> Arrays.asList(<span class="string">&quot;Lambdas&quot;</span>, <span class="string">&quot;Default Method&quot;</span>, <span class="string">&quot;Stream API&quot;</span>, <span class="string">&quot;Date and Time API&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String feature : features) &#123;</span><br><span class="line">System.out.println(feature);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java 8之后：</span></span><br><span class="line"><span class="type">List</span> <span class="variable">features</span> <span class="operator">=</span> Arrays.asList(<span class="string">&quot;Lambdas&quot;</span>, <span class="string">&quot;Default Method&quot;</span>, <span class="string">&quot;Stream API&quot;</span>, <span class="string">&quot;Date and Time API&quot;</span>);</span><br><span class="line">features.forEach(n -&gt; System.out.println(n));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Java 8的方法引用更方便，方法引用由::双冒号操作符标示，</span></span><br><span class="line">features.forEach(System.out::println);</span><br><span class="line"><span class="comment">//方法引用是使用两个冒号::这个操作符号。</span></span><br></pre></td></tr></table></figure><h6 id="衍生的toMap-BookInfo-getId-Function-identity-解释："><a href="#衍生的toMap-BookInfo-getId-Function-identity-解释：" class="headerlink" title="衍生的toMap(BookInfo::getId, Function.identity())解释："></a>衍生的toMap(BookInfo::getId, Function.identity())解释：</h6><p>​            Function.identity() 是一个静态方法，它返回一个函数，这个函数接收一个参数并返回其自身。也就是说，它返回一个标识函数，将输入对象直接返回，不做任何处理。<br>​在这个例子中，Function.identity() 方法用作 toMap() 方法的第二个参数。toMap() 方法期望一个将键映射到值的函数，所以使用 Function.identity() 将对象自身作为键的映射值。因此，对于一个 BookInfo 对象 bookInfo，bookInfo.getId() 作为键，bookInfo 自身作为值。<br>​简而言之，这里使用 Function.identity() 是为了将 BookInfo 对象本身作为值，方便后续从 Map 中获取对象并使用其属性。</p><p>stream流（List<Long> bookIds &#x3D; homeBooks.stream()）\</p><p>在 Java8 之前，我们通常是通过 for 循环或者 Iterator 迭代来重新排序合并数据，又或者通过重新定义 Collections.sorts 的 Comparator 方法来实现，这两种方式对于大数据量系统来说，效率并不是很理想。Stream 的<strong>聚合操作</strong>与数据库 SQL 的聚合操作 sorted、filter、map 等类似。我们在应用层就可以高效地实现类似数据库 SQL 的 聚合操作了，而在数据操作方面，Stream 不仅可以通过串行的方式实现数据操作，还可以<strong>通过并行的方式处理大批量数据，提高数据 的处理效率</strong></p><h6 id="总结的方法："><a href="#总结的方法：" class="headerlink" title="总结的方法："></a>总结的方法：</h6><p>1、List类型的数据库查找方法</p><p>主要是return部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;BookInfoRespDto&gt; <span class="title function_">listHomeCategory</span><span class="params">()</span> &#123;</span><br><span class="line">        QueryWrapper&lt;BookInfo&gt;CategoryQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> bookInfoMapper.selectList(CategoryQueryWrapper).stream()</span><br><span class="line">                .map(v -&gt; BookInfoRespDto.builder()</span><br><span class="line">                        .id(v.getId())</span><br><span class="line">                        .categoryId(v.getCategoryId())</span><br><span class="line">                        .categoryName(v.getCategoryName())</span><br><span class="line">                        .bookDesc(v.getBookDesc())</span><br><span class="line">                        .bookName(v.getBookName())</span><br><span class="line">                        .build()).toList();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2、Dto类型的数据库查找方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BookChapterRespDto <span class="title function_">getChapter</span><span class="params">(Long chapterId)</span>&#123;</span><br><span class="line">        QueryWrapper&lt;BookChapter&gt;chapterQueryWrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        chapterQueryWrapper.eq(<span class="string">&quot;id&quot;</span>, chapterId);</span><br><span class="line">        <span class="type">BookChapter</span> <span class="variable">bookChapter</span> <span class="operator">=</span> bookChapterMapper.selectOne(chapterQueryWrapper);</span><br><span class="line">        <span class="keyword">return</span> BookChapterRespDto.builder()</span><br><span class="line">            <span class="comment">//.BookChapterRespDto的属性(bookChapter的get方法)，这样就把筛选过的数据存入Dto中</span></span><br><span class="line">                .id(chapterId)</span><br><span class="line">                .bookId(bookChapter.getBookId())</span><br><span class="line">                .chapterNum(bookChapter.getChapterNum())</span><br><span class="line">                .chapterName(bookChapter.getChapterName())</span><br><span class="line">                .chapterWordCount(bookChapter.getWordCount())</span><br><span class="line">                .chapterUpdateTime(bookChapter.getUpdateTime())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(ApiRouterConsts.API_FRONT_HOME_URL_PREFIX)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//final的作用：同impl层</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeBookMapper homeBookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookInfoMapper bookInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeService homeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;books&quot;)</span></span><br><span class="line">    <span class="comment">//因为前端axios作检验的时候要看code，所以这里必须要用通用返回类RestResp&lt;T&gt;</span></span><br><span class="line">    <span class="keyword">public</span> RestResp&lt;List&lt;HomeBookRespDto&gt;&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//这里使用了通用返回类RestResp的方法RestResp&lt;T&gt;（T data）</span></span><br><span class="line">        <span class="keyword">return</span> RestResp.ok(homeService.listHomeBooks());</span><br><span class="line">        <span class="comment">//直接这么写会报错，刚好点击报错，就可以直接帮你在service层写出这个方法，算小技巧吧，同样，直接这么在service层创建也会报错，同样的方式，会帮你在serviceIpl层创建好方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="core层编写"><a href="#core层编写" class="headerlink" title="core层编写"></a>core层编写</h3><h4 id="config层"><a href="#config层" class="headerlink" title="config层"></a>config层</h4><h5 id="MybatisPlusConfig"><a href="#MybatisPlusConfig" class="headerlink" title="MybatisPlusConfig"></a><strong>MybatisPlusConfig</strong></h5><p>卡了我两个下午QAQ</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 兼容 mybatis-plus 3.5.1</span></span><br><span class="line"><span class="comment"> * mybatis-plus 的 MybatisSqlSessionFactoryBean 中使用到了这个异常</span></span><br><span class="line"><span class="comment"> * Spring 6 开始移除了该异常</span></span><br><span class="line"><span class="comment"> *mybatis puls的坑：使用mybatis-plus时不能使用自带的SqlSessionFactory，要使用</span></span><br><span class="line"><span class="comment"> *MybatisSqlSessionFactory，在配置类中加入如下配置（springboot）</span></span><br><span class="line"><span class="comment"> *啊啊啊啊啊啊啊卡我两个下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(&quot;db1SqlSessionFactory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">db1SqlSessionFactory</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使用 mybatis plus 配置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">MybatisSqlSessionFactoryBean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisSqlSessionFactoryBean</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;dataSourceLyz&quot;</span>+dataSource.toString());</span><br><span class="line">        b1.setDataSource(dataSource);</span><br><span class="line">        b1.setMapperLocations(<span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>().getResources(<span class="string">&quot;classpath:mapper/*.xml&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> b1.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CorsProperties"><a href="#CorsProperties" class="headerlink" title="CorsProperties"></a>CorsProperties</h5><p>解决跨域问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;novel.cors&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">CorsProperties</span><span class="params">(List&lt;String&gt; allowOrigins)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CorsConfig"><a href="#CorsConfig" class="headerlink" title="CorsConfig"></a>CorsConfig</h5><p>解决跨域问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(CorsProperties.class)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CorsProperties corsProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">// 允许的域,不要写*，否则cookie就无法使用了</span></span><br><span class="line">        <span class="keyword">for</span> (String allowOrigin : corsProperties.allowOrigins()) &#123;</span><br><span class="line">            config.addAllowedOrigin(allowOrigin);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 允许的头信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 允许的请求方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 是否允许携带Cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">configurationSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        <span class="comment">// 添加映射路径，拦截一切请求</span></span><br><span class="line">        configurationSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(configurationSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="common层"><a href="#common层" class="headerlink" title="common层"></a>common层</h3><h4 id="comstant层（通用常量层）"><a href="#comstant层（通用常量层）" class="headerlink" title="comstant层（通用常量层）"></a>comstant层（通用常量层）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="comment">//提供类的全参构造，减少了@Autowired的书写</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="comment">//enum:通常用于常量类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ErrorCodeEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正确执行后的返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    OK(<span class="string">&quot;00000&quot;</span>, <span class="string">&quot;一切 ok&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一级宏观错误码，用户端错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_ERROR(<span class="string">&quot;A0001&quot;</span>, <span class="string">&quot;用户端错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二级宏观错误码，用户注册错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REGISTER_ERROR(<span class="string">&quot;A0100&quot;</span>, <span class="string">&quot;用户注册错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户未同意隐私协议</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_NO_AGREE_PRIVATE_ERROR(<span class="string">&quot;A0101&quot;</span>, <span class="string">&quot;用户未同意隐私协议&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册国家或地区受限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REGISTER_AREA_LIMIT_ERROR(<span class="string">&quot;A0102&quot;</span>, <span class="string">&quot;注册国家或地区受限&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户验证码错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_VERIFY_CODE_ERROR(<span class="string">&quot;A0240&quot;</span>, <span class="string">&quot;用户验证码错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名已存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_NAME_EXIST(<span class="string">&quot;A0111&quot;</span>, <span class="string">&quot;用户名已存在&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户账号不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_ACCOUNT_NOT_EXIST(<span class="string">&quot;A0201&quot;</span>, <span class="string">&quot;用户账号不存在&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户密码错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_PASSWORD_ERROR(<span class="string">&quot;A0210&quot;</span>, <span class="string">&quot;用户密码错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二级宏观错误码，用户请求参数错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REQUEST_PARAM_ERROR(<span class="string">&quot;A0400&quot;</span>, <span class="string">&quot;用户请求参数错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录已过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_LOGIN_EXPIRED(<span class="string">&quot;A0230&quot;</span>, <span class="string">&quot;用户登录已过期&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问未授权</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_UN_AUTH(<span class="string">&quot;A0301&quot;</span>, <span class="string">&quot;访问未授权&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户请求服务异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REQ_EXCEPTION(<span class="string">&quot;A0500&quot;</span>, <span class="string">&quot;用户请求服务异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求超出限制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REQ_MANY(<span class="string">&quot;A0501&quot;</span>, <span class="string">&quot;请求超出限制&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户评论异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_COMMENT(<span class="string">&quot;A2000&quot;</span>, <span class="string">&quot;用户评论异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户评论异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_COMMENTED(<span class="string">&quot;A2001&quot;</span>, <span class="string">&quot;用户已发表评论&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作家发布异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AUTHOR_PUBLISH(<span class="string">&quot;A3000&quot;</span>, <span class="string">&quot;作家发布异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小说名已存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AUTHOR_BOOK_NAME_EXIST(<span class="string">&quot;A3001&quot;</span>, <span class="string">&quot;小说名已存在&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户上传文件异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_UPLOAD_FILE_ERROR(<span class="string">&quot;A0700&quot;</span>, <span class="string">&quot;用户上传文件异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户上传文件类型不匹配</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_UPLOAD_FILE_TYPE_NOT_MATCH(<span class="string">&quot;A0701&quot;</span>, <span class="string">&quot;用户上传文件类型不匹配&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一级宏观错误码，系统执行出错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SYSTEM_ERROR(<span class="string">&quot;B0001&quot;</span>, <span class="string">&quot;系统执行出错&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二级宏观错误码，系统执行超时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SYSTEM_TIMEOUT_ERROR(<span class="string">&quot;B0100&quot;</span>, <span class="string">&quot;系统执行超时&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一级宏观错误码，调用第三方服务出错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    THIRD_SERVICE_ERROR(<span class="string">&quot;C0001&quot;</span>, <span class="string">&quot;调用第三方服务出错&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一级宏观错误码，中间件服务出错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MIDDLEWARE_SERVICE_ERROR(<span class="string">&quot;C0100&quot;</span>, <span class="string">&quot;中间件服务出错&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中文描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="resp层"><a href="#resp层" class="headerlink" title="resp层"></a>resp层</h4><p>Http Rest 响应工具及数据格式封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestResp</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;错误码，00000-没有错误&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;响应消息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;响应数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = ErrorCodeEnum.OK.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = ErrorCodeEnum.OK.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">(ErrorCodeEnum errorCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = errorCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = errorCode.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理成功,无数据返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理成功，有数据返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RestResp&lt;T&gt; <span class="title function_">ok</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">fail</span><span class="params">(ErrorCodeEnum errorCode)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(errorCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(ErrorCodeEnum.SYSTEM_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(<span class="built_in">this</span>.code, ErrorCodeEnum.OK.getCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="req层"><a href="#req层" class="headerlink" title="req层"></a>req层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestResp</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ErrorCodeEnum为常量层下的类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = ErrorCodeEnum.OK.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = ErrorCodeEnum.OK.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">(ErrorCodeEnum errorCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = errorCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = errorCode.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理成功,无数据返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理成功，有数据返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RestResp&lt;T&gt; <span class="title function_">ok</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">fail</span><span class="params">(ErrorCodeEnum errorCode)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(errorCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(ErrorCodeEnum.SYSTEM_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(<span class="built_in">this</span>.code, ErrorCodeEnum.OK.getCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//mapper包扫描</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.tec.vuepractice.dao.mapper&quot;)</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VuePracticeApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(VuePracticeApplication.class, args);</span><br><span class="line">        log.info(<span class="string">&quot;项目启动成功！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/posts/f8e09374.html"/>
      <url>/posts/f8e09374.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="Vuecil脚手架安装"><a href="#Vuecil脚手架安装" class="headerlink" title="Vuecil脚手架安装"></a>Vuecil脚手架安装</h3><p>依次安装Node.js、Vue、Vuecli</p><p>安装脚手架</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install -g <span class="variable">@vue</span>/cli</span><br></pre></td></tr></table></figure><p>检查版本</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vue</span> --version</span><br></pre></td></tr></table></figure><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vue</span> create hello-world</span><br></pre></td></tr></table></figure><h3 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vue</span> ui</span><br></pre></td></tr></table></figure><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/image-20221216142020026.png" alt="image-20221216142020026"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── node_modules </span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico: 页签图标</span><br><span class="line">│   └── index.html: 主页面</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets: 存放静态资源</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   │── component: 存放组件</span><br><span class="line">│   │   └── HelloWorld.vue</span><br><span class="line">│   │── App.vue: 汇总所有组件</span><br><span class="line">│   │── main.js: 入口文件</span><br><span class="line">├── .gitignore: git版本管制忽略的配置</span><br><span class="line">├── babel.config.js: babel的配置文件</span><br><span class="line">├── package.json: 应用包配置文件 </span><br><span class="line">├── README.md: 应用描述文件</span><br><span class="line">├── package-lock.json：包版本控制文件</span><br></pre></td></tr></table></figure><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>Vue为只有一个index.html作为单页面，会用路由实现多页面的跳转，路由则将路径和页面进行映射</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(53).png" alt="屏幕截图(53)"></p><p>路由：router包下面写index.js文件并附上path和name(<strong>注意！！！path: ‘&#x2F;‘也就代表了网页的第一个页面是什么</strong>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomeView</span> <span class="keyword">from</span> <span class="string">&#x27;../views/HomeView.vue&#x27;</span><span class="comment">/* 1、引入AboutView.vue，一般不使用这种 */</span> </span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeView</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">    <span class="comment">// route level code-splitting</span></span><br><span class="line">    <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">    <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="comment">/* 2、引入AboutView.vue，一般建议使用这种 */</span> <span class="string">&#x27;../views/AboutView.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>路由在组件中的使用：<router-link to></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;router-link :to=&quot;&#123; name: &#x27;home&#x27; &#125;&quot;&gt;首页&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">  &lt;router-link :to=&quot;&#123; name: &#x27;bookclass&#x27; &#125;&quot;&gt; 全部作品 &lt;/router-link&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;router-link :to=&quot;&#123; name: &#x27;bookRank&#x27; &#125;&quot;&gt;排行榜&lt;/router-link&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>当你点击 <code>&lt;router-link&gt;</code> 时， <code>router.push</code> 方法会在内部调用，所以说，点击<code>&lt;router-link :to=&quot;...&quot;&gt;</code> 等同于调用 <code>router.push(...)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 字符串</span><br><span class="line">router.push(&#x27;home&#x27;)</span><br><span class="line"> </span><br><span class="line">// 对象</span><br><span class="line">this.$router.push(&#123;path: &#x27;/login?url=&#x27; + this.$route.path&#125;);</span><br><span class="line"> </span><br><span class="line">// 命名的路由</span><br><span class="line">router.push(&#123; name: &#x27;user&#x27;, params: &#123; userId: 123 &#125;&#125;)</span><br></pre></td></tr></table></figure><p>路由在父组件App.vue的<router-view></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default  &#123;</span><br><span class="line">  name:  &#x27;App&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在views包下写主要页面，再在如Home.vue里引入components(当然组件自己也可以引用自己)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">    &lt;Top /&gt;</span><br><span class="line">    &lt;Navbar /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>引用组件时要记得注册组件,并引入文件位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import Navbar from &quot;@/components/common/Navbar&quot;;</span><br><span class="line">import Top from &quot;@/components/common/Top&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Header&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Navbar,</span><br><span class="line">    Top,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Css的引入"><a href="#Css的引入" class="headerlink" title="Css的引入"></a>Css的引入</h3><p>在assets包（静态资源管理包）下建立css包并命名global.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后在main.js中引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/assets/css/global.css&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>Axios 是一个基于 <em><a href="https://javascript.info/promise-basics">promise</a></em> 网络请求库,这不是一种新技术，本质上还是对原生XMLHttpRequest的封装,用来实现Ajax(异步网络请求。Ajax能够让页面无刷新的请求数据，由来是浏览器页面在向服务器请求数据时，因为返回的是整个页面的数据，页面都会强制刷新一下，这对于用户来讲并不是很友好。并且我们只是需要修改页面的部分数据，但是从服务器端发送的却是整个页面的数据，十分消耗网络资源。而我们只是需要修改页面的部分数据，也希望不刷新页面，因此异步网络请求就应运而生。)</p><p>安装</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install axios</span><br></pre></td></tr></table></figure><p>最基础需要写比较长的配置来使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">&lt;!-- 方法一 --&gt;   </span><br><span class="line">axios(&#123;</span><br><span class="line">            method:&quot;get&quot;,</span><br><span class="line">            url:&quot;https://www.baidu.com&quot;，</span><br><span class="line">            data:user_id=7</span><br><span class="line">        &#125;).then(res =&gt; &#123;</span><br><span class="line">            console.log(res.data);</span><br><span class="line">        &#125;)</span><br><span class="line">&lt;!-- 方法二 --&gt; </span><br><span class="line">axios.get(&quot;https://www.baidu.com&quot;).then(res =&gt; &#123;</span><br><span class="line">            this.obj= res.data[0];</span><br><span class="line">            console.log(res.data);</span><br><span class="line">        &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/axios-1.png" alt="axios-1"></p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/axios-2.png" alt="axios-2"></p><p>也可以全局注册后使用（这里不展开）</p><p>但是一般在请求数量增多时会需要来进行封装axios来简化开发</p><p>在utils下创建request.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken, removeToken, removeNickName, setToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API_URL</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">10000</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">withCredentials</span> = <span class="literal">true</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>[<span class="string">&#x27;X-Requested-With&#x27;</span>] = <span class="string">&#x27;XMLHttpRequest&#x27;</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="title function_">getToken</span>()</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> res.<span class="property">data</span> !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;服务端异常！&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> != <span class="string">&quot;00000&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">message</span>) &#123;</span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">message</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 登录已过期</span></span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> == <span class="string">&#x27;A0230&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 移除 token </span></span><br><span class="line">            <span class="title function_">removeToken</span>();</span><br><span class="line">            <span class="title function_">removeNickName</span>();</span><br><span class="line">            router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;网络异常！&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure><p>在main.js中注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;./util/axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(store)</span><br><span class="line">   .<span class="title function_">use</span>(router)</span><br><span class="line">   .<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$axios</span> = axios;</span><br></pre></td></tr></table></figure><p>封装api在api包下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;../utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">listHomeBooks</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">get</span>(<span class="string">&#x27;/front/home/books&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//动态传入用$&#123;bookId&#125;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getBookById</span>(<span class="params">bookId</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">get</span>(<span class="string">`/front/book/<span class="subst">$&#123;bookId&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在vue的生命周期函数里调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">&lt;!--导入--&gt;    </span><br><span class="line">import &#123; reactive, toRefs, onMounted &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useRouter, useRoute &#125; from &quot;vue-router&quot;;</span><br><span class="line">import &#123; listHomeBooks &#125; from &quot;@/api/home&quot;;</span><br><span class="line">&lt;!--注册组件--&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;home&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Header,</span><br><span class="line">    LatestNews,</span><br><span class="line">    FriendLink,</span><br><span class="line">    BookVisitRank,</span><br><span class="line">    BookNewestRank,</span><br><span class="line">    BookUpdateRank,</span><br><span class="line">    Footer,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">&lt;!--route是一个跳转的路由对象，每一个路由都会有一个route对象，是一个局部的对象，可以获取对应的name,path,params,query等：--&gt;</span><br><span class="line">    const route = useRoute();</span><br><span class="line">&lt;!--router是VueRouter的一个对象，通过Vue.use(VueRouter)和VueRouter构造函数得到一个router的实例对象，这个对象中是一个全局的对象，包含了所有的路由包含了许多关键的对象和属性。例如history对象$router.push(&#123;path:’/path’&#125;); 本质是向history栈中添加一个路由，在我们看来是 切换路由，但本质是在添加一个history记录--&gt;</span><br><span class="line">    const router = useRouter();</span><br><span class="line">&lt;!--reactive（）函数接收一个普通对象，返回一个响应式的数据对象。访问： state.参数名--&gt;</span><br><span class="line">    const state = reactive(&#123;</span><br><span class="line">      // 轮播图</span><br><span class="line">      sliderContent: [],</span><br><span class="line">      // 顶部栏</span><br><span class="line">      topBooks1: [],</span><br><span class="line">      //本周强推</span><br><span class="line">      weekcommend: [],</span><br><span class="line">      // 热门推荐</span><br><span class="line">      hotRecommend: [],</span><br><span class="line">      // 精品推荐</span><br><span class="line">      goodRecommend: [],</span><br><span class="line">      imgBaseUrl: process.env.VUE_APP_BASE_IMG_URL,</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;!--生命周期函数--&gt;</span><br><span class="line">    onMounted(async () =&gt; &#123;</span><br><span class="line">      const loadingInstance = ElLoading.service(&#123;</span><br><span class="line">        target: &quot;#topBooks2&quot;,</span><br><span class="line">        text: &quot;加载中。。。&quot;,</span><br><span class="line">      &#125;);</span><br><span class="line">&lt;!--等待listHomeBooks()方法传来数据给data--&gt;</span><br><span class="line">      const &#123; data &#125; = await listHomeBooks();</span><br><span class="line"></span><br><span class="line">&lt;!--可能book和v-for的item相似，属于别名，这段的意思就是从--&gt;</span><br><span class="line">      await data.forEach((book) =&gt; &#123;</span><br><span class="line">        if (book.type == 0) &#123;</span><br><span class="line">          // 轮播图</span><br><span class="line">          state.sliderContent[state.sliderContent.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 1) &#123;</span><br><span class="line">          // 顶部栏</span><br><span class="line">          state.topBooks1[state.topBooks1.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 2) &#123;</span><br><span class="line">          //本周强推</span><br><span class="line">          state.weekcommend[state.weekcommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 3) &#123;</span><br><span class="line">          //热门推荐</span><br><span class="line">          state.hotRecommend[state.hotRecommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 4) &#123;</span><br><span class="line">          //精品推荐</span><br><span class="line">          state.goodRecommend[state.goodRecommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">        </span><br><span class="line">&lt;!--push就是在浏览器的历史记录中追加一个新的记录，你可以通过window.history看到这个记录。而replace则是将当前的路由记录替换掉，替换后你如果回退，会发现上一个路由地址已经消失了。此处是点击链接后触发的方法，将跳转到小说的详情页--&gt;</span><br><span class="line">    const bookDetail = (bookId) =&gt; &#123;</span><br><span class="line">      router.push(&#123; path: `/book/$&#123;bookId&#125;` &#125;);</span><br><span class="line">    &#125;；</span><br><span class="line">&lt;!--toRefs将一个响应式对象，转换为普通对象，并且将其中的属性转换为 Ref 对象，与reactive搭配使用，reactive将数据变成响应式数据，当数据发生变化时state也会自动更新--&gt;        </span><br><span class="line">    return &#123;</span><br><span class="line">      ...toRefs(state),</span><br><span class="line">      bookDetail,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue3与Vue2的不同"><a href="#Vue3与Vue2的不同" class="headerlink" title="Vue3与Vue2的不同"></a>Vue3与Vue2的不同</h2><h3 id="Vite脚手架的安装"><a href="#Vite脚手架的安装" class="headerlink" title="Vite脚手架的安装"></a>Vite脚手架的安装</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line"><span class="attribute">npm</span> init vite-app vue3_test-vite</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line">cd vue3_test-vite</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="分析文件目录"><a href="#分析文件目录" class="headerlink" title="分析文件目录"></a>分析文件目录</h3><h4 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h4><p>Vue2项目的main.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  render: h =&gt; h(App),</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><p>我们再来看看Vue3项目中的main.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">createApp(App).mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><p>分析一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 引入的不再是Vue构造函数了，引入的是一个名为createApp的工厂函数</span><br><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">// 创建应用实例对象——app(类似于之前Vue2中的vm，但app比vm更“轻”)</span><br><span class="line">const app = createApp(App)</span><br><span class="line">console.log(app)</span><br><span class="line">// 挂载</span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><h4 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h4><p>我们再来看看组件</p><p>在<code>template</code>标签里可以没有根标签了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- Vue3组件中的模板结构可以没有根标签 --&gt;</span><br><span class="line">&lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot;&gt;</span><br><span class="line">&lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="setup函数"><a href="#setup函数" class="headerlink" title="setup函数"></a>setup函数</h3><p>代替了Vue2的data（）以及method</p><h2 id="vue基础"><a href="#vue基础" class="headerlink" title="vue基础"></a>vue基础</h2><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p><strong>一、ref函数的引入</strong></p><p>　　import { ref } from ‘vue’</p><p><strong>二、什么是 ref</strong></p><p>​1、ref 和 reactive 一样都是实现响应式数据的方法</p><p>​2、由于 reactive 必须传递一个对象，所以导致我们再企业开发中，如果我们只想让某个变量实现响应式的时候非常麻烦，所以 Vue3 就提供了 ref 方法，实现对简单值的监听</p><p><strong>三、ref 的本质</strong></p><p>​<strong>const input &#x3D; ref(‘’)</strong></p><p>　　ref 底层的本质还是 reactive 系统会自动根据我们给 ref 传入的值将他转换成 ref(xx) —— reactive({value: xx})</p><p><strong>四、ref 注意点</strong></p><p>　1、在 VUE 的模板中使用 ref 的值不需要通过 value 获取 （Vue 会通过自动给 ref 的值加上 .value）</p><p>　2、在 js 中使用 ref 的值必须使用 .value 获取’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;uni-popup ref=&quot;popup&quot; type=&quot;dialog&quot;&gt;</span><br><span class="line">        &lt;!--mode=&quot;base&quot;为对话框加两个按钮的形式--&gt;</span><br><span class="line">        &lt;uni-popup-dialog mode=&quot;base&quot; title=&quot;确定要放弃吗?&quot; content=&quot;本次计时将不会得到任何分数&quot; :duration=&quot;2000&quot; :before-close=&quot;true&quot;</span><br><span class="line">            @close=&quot;close&quot; @confirm=&quot;confirm&quot;&gt;&lt;/uni-popup-dialog&gt;</span><br><span class="line">    &lt;/uni-popup&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    </span><br><span class="line">let popup = ref(null); //记着赋初值，本质是reactive(&#123;value:null&#125;)</span><br><span class="line"></span><br><span class="line">const timeEnd = () =&gt; &#123;</span><br><span class="line">popup.value.open() //记得.value然后调用函数</span><br><span class="line">&#125;</span><br><span class="line">const confirm = () =&gt; &#123;</span><br><span class="line">popup.value.close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const close = () =&gt; &#123;</span><br><span class="line">popup.value.close()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p><strong>在v-for中使用字符串</strong></p><p>string：data中的源数据字符串，</p><p>str：data数据string字符串的每一个，</p><p>index：string字符串索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 这里表示被vue控制的区域 --&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;(str, index) in string&quot;&gt;</span><br><span class="line">            &#123;&#123; index &#125;&#125;---&#123;&#123; str &#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#app&#x27;, // 控制id为app的元素</span><br><span class="line">        data: &#123;</span><br><span class="line">            // 存放所需要的数据</span><br><span class="line">            string: &#x27;abcdefgh&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/v-for.png"></p><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;sliderContent&quot;&gt;</span><br><span class="line">          &lt;dl class=&quot;scBigImg&quot; id=&quot;carouseBig&quot;&gt;</span><br><span class="line">            &lt;dd v-for=&quot;(item, index) in sliderContent&quot; :key=&quot;index&quot; :class=&quot;&#123; on: index == 0 &#125;&quot;&gt;</span><br><span class="line">                &lt;!-- 点击触发bookDetail函数，传入sliderContent.bookid,并在最后使用push来跳转到小说的详情页 --&gt;</span><br><span class="line">              &lt;a href=&quot;javascript:void(0)&quot; @click=&quot;bookDetail(item.bookId)&quot;&gt;</span><br><span class="line">                &lt;img :src=&quot;`$&#123;imgBaseUrl&#125;` + `$&#123;item.picUrl&#125;`&quot; :alt=&quot;item.bookName&quot;</span><br><span class="line">                  onerror=&quot;this.src=&#x27;default.gif&#x27;;this.onerror=null&quot; /&gt;</span><br><span class="line">              &lt;/a&gt;</span><br><span class="line">            &lt;/dd&gt;</span><br><span class="line">          &lt;/dl&gt;</span><br><span class="line">    &lt;/div&gt;    </span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>其中</p><p>sliderContent：data中的源数据数组（会从数据库中获得），</p><p>item：data数据list数组的别名，</p><p>index：list数组索引,即为数据数字的多少</p><h3 id="函数传入数据："><a href="#函数传入数据：" class="headerlink" title="函数传入数据："></a>函数传入数据：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//targetNoTimeDelete(index)来传入数据index,方便下面接收</span><br><span class="line">&lt;view class=&quot;targetMenuDetailD&quot; v-for=&quot;(item, index) in state.targetNoTime&quot; :key=&quot;index&quot;</span><br><span class="line">@click=&quot;targetNoTimeDelete(index)&quot;&gt;</span><br><span class="line">&lt;text&gt;&#123;&#123;item.targetName&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;view class=&quot;targetMenuDetailDI&quot;&gt;</span><br><span class="line">&lt;img src=&quot;@\static\coin.svg&quot; style=&quot;width: 34rpx;height:34rpx;&quot;&gt;</span><br><span class="line">&lt;text&gt;X&#123;&#123;item.targetPoint&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;text&gt;任意时间&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    //记忆一下书写方式</span><br><span class="line">const targetNoTimeDelete = (index) =&gt; &#123;</span><br><span class="line">uni.request(&#123;</span><br><span class="line">url: &#x27;http://localhost:8181/target/delete&#x27;,</span><br><span class="line">method: &quot;POST&quot;,</span><br><span class="line">data: &#123;</span><br><span class="line">targetName: state.targetWithTime[index].targetName,</span><br><span class="line">ifPoints: 1,</span><br><span class="line">&#125;,</span><br><span class="line">success: (res) =&gt; &#123;</span><br><span class="line">console.log(res)</span><br><span class="line">// 从targetWithTime数组中移除已删除的目标数据</span><br><span class="line">state.targetWithTime.splice(index, 1);</span><br><span class="line">user.data.point = res.data.data.targetPoint</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="route-params-categoryId的用法"><a href="#route-params-categoryId的用法" class="headerlink" title="route.params.categoryId的用法"></a>route.params.categoryId的用法</h3><p>route.params.url参数</p><p>url参数来自于:categoryId(要求与该变量完全一致，卡了半小时QAQ)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/:categoryId&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;bookcategory&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/BookCategory&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>正式使用：</p><p>在onMounted生命周期函数里，就用变量来接，之后要记得放进带参数的变量里，还是要求id参数一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive, toRefs, onMounted &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useRouter, useRoute &#125; from &quot;vue-router&quot;;</span><br><span class="line">import &#123; listHomeCategoryId &#125; from &quot;@/api/home&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;home&quot;,</span><br><span class="line">    setup() &#123;</span><br><span class="line">        const route = useRoute();</span><br><span class="line">        const router = useRouter();</span><br><span class="line">        const state = reactive(&#123;</span><br><span class="line">            // 分类推荐</span><br><span class="line">            catagorycommendId: [],</span><br><span class="line">        &#125;);</span><br><span class="line">        onMounted(async () =&gt; &#123;</span><br><span class="line">            const categoryId = route.params.categoryId-2;</span><br><span class="line">            dataCategoryId(categoryId);</span><br><span class="line">        &#125;);</span><br><span class="line">        const dataCategoryId = async (categoryId) =&gt; &#123;</span><br><span class="line">            const &#123; data &#125; = await listHomeCategoryId(categoryId);</span><br><span class="line">            await data.forEach((book) =&gt; &#123;</span><br><span class="line">                &#123;</span><br><span class="line">                    //历史推荐</span><br><span class="line">                    state.catagorycommendId[state.catagorycommendId.length] = book;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        return &#123;</span><br><span class="line">            ...toRefs(state),</span><br><span class="line">            dataCategoryId,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>组件是.vue的单文件组件，实现代码复用，以及理顺css以及js之间的关系，可以用script setup这样就可以在引入之后自动注册组件</p><h3 id="选项式api"><a href="#选项式api" class="headerlink" title="选项式api"></a>选项式api</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    //js对象</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;targetMenu&quot;,</span><br><span class="line">        //实例对象的属性</span><br><span class="line">data() &#123;</span><br><span class="line">            //返回出去的才是响应式数据</span><br><span class="line">return &#123;</span><br><span class="line">showFocusAfter: true,</span><br><span class="line">showTargetAfter: false,</span><br><span class="line">showTargetBefore: true,</span><br><span class="line">showFocusBefore: false,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">        //实例对象的方法</span><br><span class="line">methods() &#123;</span><br><span class="line">const menuItems = this.$route.meta.menuItems || []</span><br><span class="line">if (menuItems.includes(&#x27;target&#x27;)) &#123;</span><br><span class="line">this.showFocusAfter = false;</span><br><span class="line">this.showTargetBefore = false;</span><br><span class="line">this.showTargetAfter = true;</span><br><span class="line">this.showFocusBefore = true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="组合式api"><a href="#组合式api" class="headerlink" title="组合式api"></a>组合式api</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">//使用setup,可以直接写变量，但是只是普通变量，需要通过const state = reactive(&#123;hotRecommend: [], &#125;);来变成响应式变量，也可以用ref（），可以接收任何值，不止于此对象，把数据转化为&#123;value：0&#125;</span><br><span class="line">import &#123; reactive, toRefs, onMounted &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useRouter, useRoute &#125; from &quot;vue-router&quot;;</span><br><span class="line">import Header from &#x27;@/components/Header&#x27;;</span><br><span class="line">import Footer from &#x27;@/components/Footer&#x27;;</span><br><span class="line">import &#123; listHomeBooks, listHomeCategory,listHomeCategory2,listHomeCategory3,listHomeCategory4 &#125; from &quot;@/api/home&quot;;</span><br><span class="line">import &#123; getBookById, &#125; from &quot;@/api/book&quot;;</span><br><span class="line">import &#123; SetUp &#125; from &#x27;@element-plus/icons-vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;home&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Header,</span><br><span class="line">    Footer,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const route = useRoute();</span><br><span class="line">    const router = useRouter();</span><br><span class="line">    const state = reactive(&#123;</span><br><span class="line">      // 热门推荐</span><br><span class="line">      hotRecommend: [],</span><br><span class="line">      // 精品推荐</span><br><span class="line">      goodRecommend: [],</span><br><span class="line">      // 分类推荐</span><br><span class="line">      catagorycommend: [],</span><br><span class="line">      catagorycommend2: [],</span><br><span class="line">      catagorycommend3: [],</span><br><span class="line">      catagorycommend4: [],</span><br><span class="line">      imgBaseUrl: process.env.VUE_APP_BASE_IMG_URL,</span><br><span class="line">    &#125;);</span><br><span class="line">    onMounted(async () =&gt; &#123;</span><br><span class="line">      const &#123; data &#125; = await listHomeBooks();</span><br><span class="line">      await data.forEach((book) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        if (book.type == 3) &#123;</span><br><span class="line">          //热门推荐</span><br><span class="line">          state.hotRecommend[state.hotRecommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 4) &#123;</span><br><span class="line">          //精品推荐</span><br><span class="line">          state.goodRecommend[state.goodRecommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      dataCategory();</span><br><span class="line">      dataCategory2();</span><br><span class="line">      dataCategory3();</span><br><span class="line">      dataCategory4();</span><br><span class="line">    &#125;);</span><br><span class="line">    const bookDetail = (bookId) =&gt; &#123;</span><br><span class="line">      router.push(&#123; path: `/book/$&#123;bookId&#125;` &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    const dataCategory = async () =&gt; &#123;</span><br><span class="line">      const &#123; data &#125; = await listHomeCategory();</span><br><span class="line">      await data.forEach((book) =&gt; &#123;</span><br><span class="line">        if (book.categoryName == &quot;历史军事&quot;) &#123;</span><br><span class="line">          //历史推荐</span><br><span class="line">          state.catagorycommend[state.catagorycommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    const dataCategory2 = async () =&gt; &#123;</span><br><span class="line">      const &#123; data &#125; = await listHomeCategory2();</span><br><span class="line">      await data.forEach((book) =&gt; &#123;</span><br><span class="line">        if (book.categoryName == &quot;科幻灵异&quot;) &#123;</span><br><span class="line">          //历史推荐</span><br><span class="line">          state.catagorycommend2[state.catagorycommend2.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    const dataCategory3 = async () =&gt; &#123;</span><br><span class="line">      const &#123; data &#125; = await listHomeCategory3();</span><br><span class="line">      await data.forEach((book) =&gt; &#123;</span><br><span class="line">        if (book.categoryName == &quot;都市言情&quot;) &#123;</span><br><span class="line">          //历史推荐</span><br><span class="line">          state.catagorycommend3[state.catagorycommend3.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    const dataCategory4 = async () =&gt; &#123;</span><br><span class="line">      const &#123; data &#125; = await listHomeCategory4();</span><br><span class="line">      await data.forEach((book) =&gt; &#123;</span><br><span class="line">        if (book.categoryName == &quot;玄幻奇幻&quot;) &#123;</span><br><span class="line">          //历史推荐</span><br><span class="line">          state.catagorycommend4[state.catagorycommend4.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      ...toRefs(state),</span><br><span class="line">      bookDetail,</span><br><span class="line">      dataCategory,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>当需要在属性内使用动态数据的时候则需要使用v-bind，标签内则可以直接使用双大括号，可简写为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;img v-bind:src=&quot;imgPath&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">//简写</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;img :src=&quot;imgPath&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="style-scoped"><a href="#style-scoped" class="headerlink" title="style scoped"></a>style scoped</h3><p>这样设置会成为局部样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.menu &#123;</span><br><span class="line">width: 200px;</span><br><span class="line">margin-left: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.menuButton &#123;</span><br><span class="line">margin-top: 50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="style-module"><a href="#style-module" class="headerlink" title="style module"></a>style module</h3><p>css 变成模块，通过：class&#x3D;”$style.box1”使用</p><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>v-on:click简写为@click</p><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>双向绑定</p><p>此处还采用了pinia集中管理状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;LoginInput&quot;&gt;</span><br><span class="line">&lt;text&gt;你的邮箱&lt;/text&gt;</span><br><span class="line">&lt;input v-model=&quot;user.data.userEmail&quot; name=&quot;txtEmail&quot; type=&quot;text&quot;                  id=&quot;txtPassword&quot; placeholder=&quot;请输入邮箱&quot;</span><br><span class="line">class=&quot;LoginInputIn&quot;&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;view class=&quot;LoginP&quot;&gt;</span><br><span class="line">&lt;text&gt;登陆&lt;/text&gt;</span><br><span class="line">&lt;text&gt;将使用&#123;&#123;user.data.userEmail&#125;&#125;登陆&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;</span><br><span class="line">useUserStore</span><br><span class="line">&#125; from &quot;../../store/user&quot;;</span><br><span class="line">const user = useUserStore()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><h3 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h3><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute,useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">HomeR</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">router.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="attr">path</span>: <span class="string">`/Login`</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Route"><a href="#Route" class="headerlink" title="Route"></a>Route</h3><h4 id="引入-1"><a href="#引入-1" class="headerlink" title="引入"></a>引入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute,useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line"><span class="keyword">const</span> id = route.<span class="property">params</span>.<span class="property">id</span>;</span><br></pre></td></tr></table></figure><h3 id="params"><a href="#params" class="headerlink" title="params"></a>params</h3><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>在组合式api和setup语法糖中需要按下面的方式进行定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">navbarTo: &#123;</span><br><span class="line">type: String,</span><br><span class="line">required: true</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="组件传参"><a href="#组件传参" class="headerlink" title="组件传参"></a>组件传参</h3><p>1、组件内定义props</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">navbarTo: &#123;</span><br><span class="line">type: String,</span><br><span class="line">required: true</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2、在需要使用组件的部分进行数据双向绑定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Navbar :navbarTo=&quot;&#x27;/menu/2&#x27;&quot;&gt;&lt;/Navbar&gt;</span><br></pre></td></tr></table></figure><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><p>1、定义参数：router-link :to&#x3D;“params”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;#&quot;&gt;</span><br><span class="line">router-link :to=&quot;props.navbarTo&quot;&gt; </span><br><span class="line">    &lt;img src=&quot;@\assets\Filter.png&quot; alt=&quot;#&quot;&gt;</span><br><span class="line">    &lt;/router-link&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>2、接收参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>();</span><br><span class="line"><span class="keyword">const</span> id = route.<span class="property">params</span>.<span class="property">id</span>;</span><br></pre></td></tr></table></figure><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>1、在需要控制出现与否的标签上加上v-if(注意不需要双向绑定 ：，但是要加上state.)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;FocusAfter v-if=&quot;state.showFocusAfter&quot;&gt;&lt;/FocusAfter&gt;</span><br><span class="line">&lt;TargetBefore v-if=&quot;state.showTargetBefore&quot;&gt;&lt;/TargetBefore&gt;</span><br><span class="line">&lt;FocusBefore v-if=&quot;state.showFocusBefore&quot;&gt;&lt;/FocusBefore&gt;</span><br><span class="line">&lt;TargetAfter v-if=&quot;state.showTargetAfter&quot;&gt;&lt;/TargetAfter&gt;</span><br></pre></td></tr></table></figure><p>2、通过响应式的数据，更改标签出现与否</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>();</span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line"><span class="attr">showFocusAfter</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">showTargetBefore</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">showFocusBefore</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">showTargetAfter</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> id = route.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line"><span class="keyword">if</span> (id == <span class="number">2</span>) &#123;</span><br><span class="line">state.<span class="property">showFocusAfter</span> = <span class="literal">false</span>;</span><br><span class="line">state.<span class="property">showTargetBefore</span> = <span class="literal">false</span>;</span><br><span class="line">state.<span class="property">showFocusBefore</span> = <span class="literal">true</span>;</span><br><span class="line">state.<span class="property">showTargetAfter</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>用于父组件和子组件的数据传递（但是只能用于父组件和子组件）</p><p>父组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;provide&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="attr">provide</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;这是祖先组件提供的消息&#x27;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;inject&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="attr">provide</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;这是祖先组件提供的消息&#x27;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="pinia"><a href="#pinia" class="headerlink" title="pinia"></a>pinia</h3><p>在面对多组件内传参的情况下，可以使用集中的状态管理pinia对应vue2的vuex</p><p>1、创建store文件夹下的js文件进行后续定义</p><p>2、定义状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">defineStore</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;user&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">userEmail</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">userName</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">userPassword</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">userCode</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;),</span><br><span class="line"><span class="attr">actions</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3、在所需要该状态的组件内进行引用和使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">useUserStore</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;../../store/user&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;&#125;)</span><br><span class="line"><span class="keyword">const</span> user = <span class="title function_">useUserStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">data</span>.<span class="property">userEmail</span>)</span><br></pre></td></tr></table></figure><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;view class=&quot;timerWork&quot;&gt;</span></span><br><span class="line"><span class="comment">//&lt;!-- 计时 --&gt;</span></span><br><span class="line"><span class="comment">//&lt;text&gt;&#123;&#123; formattedTime &#125;&#125;&lt;/text&gt;</span></span><br><span class="line"><span class="comment">//&lt;/view&gt;</span></span><br><span class="line"><span class="comment">// 获取格式化后的时间</span></span><br><span class="line"><span class="keyword">const</span> formattedTime = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">state.<span class="property">hours</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(state.<span class="property">remainingTime</span> / <span class="number">3600</span>);</span><br><span class="line">state.<span class="property">minutes</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>((state.<span class="property">remainingTime</span> % <span class="number">3600</span>) / <span class="number">60</span>);</span><br><span class="line">state.<span class="property">seconds</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(state.<span class="property">remainingTime</span> % <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;formatTime(state.hours)&#125;</span>:<span class="subst">$&#123;formatTime(state.minutes)&#125;</span>:<span class="subst">$&#123;formatTime(state.seconds)&#125;</span>`</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="js基础"><a href="#js基础" class="headerlink" title="js基础"></a>js基础</h2><h3 id="时间类函数"><a href="#时间类函数" class="headerlink" title="时间类函数"></a>时间类函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//今天的时间</span></span><br><span class="line"><span class="keyword">let</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="keyword">let</span> myDate = time.<span class="title function_">getDate</span>()</span><br><span class="line"><span class="keyword">let</span> dayNum = time.<span class="title function_">getDay</span>()</span><br><span class="line"><span class="keyword">let</span> myMonth = time.<span class="title function_">getMonth</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化一个date对象</span></span><br><span class="line"><span class="keyword">const</span> selectedDate = <span class="keyword">new</span> <span class="title class_">Date</span>(time.<span class="title function_">getFullYear</span>(), state.<span class="property">dayList</span>[<span class="number">0</span>].<span class="property">month</span>, <span class="number">1</span>);</span><br><span class="line">time = <span class="keyword">new</span> <span class="title class_">Date</span>(selectedDate); <span class="comment">// 创建新的日期对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//时间自增</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">time.<span class="title function_">setDate</span>(time.<span class="title function_">getDate</span>() + <span class="number">1</span>)</span><br><span class="line">state.<span class="property">dayList</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="string">&#x27;day&#x27;</span>: time.<span class="title function_">getDate</span>(),</span><br><span class="line"><span class="string">&#x27;month&#x27;</span>: time.<span class="title function_">getMonth</span>(),</span><br><span class="line"><span class="string">&#x27;week&#x27;</span>: weeks[time.<span class="title function_">getDay</span>()],</span><br><span class="line"><span class="string">&#x27;className&#x27;</span>: <span class="string">&#x27;Num&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置时间</span></span><br><span class="line">time.<span class="title function_">setDate</span>(time.<span class="title function_">getDate</span>() + <span class="number">1</span>)</span><br><span class="line">time.<span class="title function_">setDate</span>(state.<span class="property">dayList</span>[index].<span class="property">day</span>)</span><br><span class="line">time.<span class="title function_">setMonth</span>(state.<span class="property">dayList</span>[index].<span class="property">month</span>)</span><br><span class="line"><span class="comment">//时间差计算</span></span><br><span class="line"><span class="keyword">let</span> currentTime = <span class="keyword">new</span> <span class="title class_">Date</span>(target.<span class="property">data</span>.<span class="property">currentTime</span>)</span><br><span class="line"><span class="keyword">let</span> timeDiff = item.<span class="title function_">getTime</span>() - currentTime.<span class="title function_">getTime</span>()</span><br><span class="line"><span class="keyword">let</span> dayDiff = <span class="title class_">Math</span>.<span class="title function_">floor</span>(timeDiff / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>))</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line"><span class="attr">dayList</span>: []</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line">target.<span class="property">data</span>.<span class="property">deadlineDate</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> currentTime = <span class="keyword">new</span> <span class="title class_">Date</span>(target.<span class="property">data</span>.<span class="property">currentTime</span>)</span><br><span class="line"><span class="keyword">let</span> timeDiff = item.<span class="title function_">getTime</span>() - currentTime.<span class="title function_">getTime</span>()</span><br><span class="line"><span class="keyword">let</span> dayDiff = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(timeDiff / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//增加元素</span></span><br><span class="line">state.<span class="property">dayList</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="string">&#x27;day&#x27;</span>: time.<span class="title function_">getDate</span>(),</span><br><span class="line"><span class="string">&#x27;month&#x27;</span>: time.<span class="title function_">getMonth</span>(),</span><br><span class="line"><span class="string">&#x27;week&#x27;</span>: weeks[time.<span class="title function_">getDay</span>()],</span><br><span class="line"><span class="string">&#x27;className&#x27;</span>: <span class="string">&#x27;Num&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//去除元素</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">targetNoTimeDelete</span> = (<span class="params">index</span>) =&gt; &#123;</span><br><span class="line"><span class="comment">// 从targetWithTime数组中移除已删除的目标数据</span></span><br><span class="line">    <span class="comment">//第index个元素开始，删除1个</span></span><br><span class="line">state.<span class="property">targetWithTime</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拼接为“20：02”</span></span><br><span class="line"><span class="keyword">const</span> hours = item.<span class="title function_">getHours</span>();</span><br><span class="line"><span class="keyword">const</span> minutes = item.<span class="title function_">getMinutes</span>();</span><br><span class="line"><span class="keyword">const</span> timeString = <span class="string">`<span class="subst">$&#123;hours&#125;</span>:<span class="subst">$&#123;minutes.toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拼接为“5.30”</span></span><br><span class="line"><span class="keyword">const</span> month = item.<span class="title function_">getMonth</span>() + <span class="number">1</span>; <span class="comment">// 当前月份</span></span><br><span class="line"><span class="keyword">const</span> date = item.<span class="title function_">getDate</span>(); <span class="comment">// 当前日期</span></span><br><span class="line">dayDiff = <span class="string">`<span class="subst">$&#123;month&#125;</span>.<span class="subst">$&#123;date&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><h3 id="math函数"><a href="#math函数" class="headerlink" title="math函数"></a>math函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Math.floor() 函数总是返回小于等于一个给定数字的最大整数。</span></span><br><span class="line"><span class="keyword">let</span> dayDiff = <span class="title class_">Math</span>.<span class="title function_">floor</span>(timeDiff / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>))</span><br><span class="line"><span class="comment">//Math.ceil() 函数总是四舍五入并返回大于等于给定数字的最小整数。</span></span><br><span class="line"><span class="keyword">let</span> dayDiff = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(timeDiff / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>))</span><br><span class="line"><span class="comment">//Math.trunc() 方法会将数字的小数部分去掉，只保留整数部分。</span></span><br><span class="line"><span class="keyword">let</span> dayDiff = <span class="title class_">Math</span>.<span class="title function_">trunc</span>(timeDiff / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>))</span><br></pre></td></tr></table></figure><h3 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">7</span>)); <span class="comment">// 输出 &quot;world!&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(-<span class="number">6</span>)); <span class="comment">// 输出 &quot;world!&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">7</span>, <span class="number">5</span>)); <span class="comment">// 输出 &quot;world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;text class=&quot;UserProgressDC&quot;&gt;比起上&#123;&#123;state.UserTimeP.substr(-2)&#125;&#125;&lt;/text&gt;</span></span><br></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="数组刷新重复输入问题"><a href="#数组刷新重复输入问题" class="headerlink" title="数组刷新重复输入问题"></a>数组刷新重复输入问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关键在于在函数里给数组赋初值为空，这样每次刷新都会清空数组，方便放入下一组数据</span></span><br><span class="line"><span class="title function_">onMounted</span>(</span><br><span class="line">uni.<span class="title function_">request</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://localhost:8181/target/get&#x27;</span>,</span><br><span class="line"><span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line"><span class="attr">data</span>: user.<span class="property">data</span>.<span class="property">userEmail</span>,</span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//数组赋初值为空</span></span><br><span class="line">target.<span class="property">data</span>.<span class="property">deadlineDate</span> = []</span><br><span class="line">                </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">status</span> == <span class="number">0</span>) &#123;</span><br><span class="line">state.<span class="property">targetNoTime</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="string">&#x27;targetName&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetName</span>,</span><br><span class="line"><span class="string">&#x27;targetDescribe&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetDescribe</span>,</span><br><span class="line"><span class="string">&#x27;targetPoint&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetPoint</span>,</span><br><span class="line"><span class="string">&#x27;deadline&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">deadline</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">status</span> == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> deadline = <span class="keyword">new</span> <span class="title class_">Date</span>(res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">deadline</span>)</span><br><span class="line"><span class="keyword">if</span> (!target.<span class="property">data</span>.<span class="property">deadlineDate</span>.<span class="title function_">includes</span>(deadline)) &#123;</span><br><span class="line">target.<span class="property">data</span>.<span class="property">deadlineDate</span>.<span class="title function_">push</span>(deadline);</span><br><span class="line">&#125;</span><br><span class="line">state.<span class="property">targetWithTime</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="string">&#x27;targetName&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetName</span>,</span><br><span class="line"><span class="string">&#x27;targetDescribe&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetDescribe</span>,</span><br><span class="line"><span class="string">&#x27;targetPoint&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetPoint</span>,</span><br><span class="line"><span class="string">&#x27;deadline&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">deadline</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">status</span> == <span class="number">2</span>) &#123;</span><br><span class="line">state.<span class="property">targetCompleted</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="string">&#x27;targetName&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetName</span>,</span><br><span class="line"><span class="string">&#x27;targetDescribe&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetDescribe</span>,</span><br><span class="line"><span class="string">&#x27;targetPoint&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetPoint</span>,</span><br><span class="line"><span class="string">&#x27;deadline&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">deadline</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">status</span> == <span class="number">3</span>) &#123;</span><br><span class="line">state.<span class="property">targetExpire</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="string">&#x27;targetName&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetName</span>,</span><br><span class="line"><span class="string">&#x27;targetDescribe&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetDescribe</span>,</span><br><span class="line"><span class="string">&#x27;targetPoint&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetPoint</span>,</span><br><span class="line"><span class="string">&#x27;deadline&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">deadline</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="后端交互完前端页面不更新问题"><a href="#后端交互完前端页面不更新问题" class="headerlink" title="后端交互完前端页面不更新问题"></a>后端交互完前端页面不更新问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关键在于，响应式的数据没有更新，所以界面就没有更新</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">targetNoTimeDelete</span> = (<span class="params">index</span>) =&gt; &#123;</span><br><span class="line">uni.<span class="title function_">request</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://localhost:8181/target/delete&#x27;</span>,</span><br><span class="line"><span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">targetName</span>: state.<span class="property">targetWithTime</span>[index].<span class="property">targetName</span>,</span><br><span class="line"><span class="attr">ifPoints</span>: <span class="number">1</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"><span class="comment">// 从targetWithTime数组中移除已删除的目标数据</span></span><br><span class="line">        <span class="comment">//这里的对state.targetWithTime和user.data.point的操作很关键</span></span><br><span class="line">        <span class="comment">//因为数据库操作成功了，但是前端数据并没有发送改变</span></span><br><span class="line">        <span class="comment">//这时候就需要对响应式数据进行相应的改变，来保证页面的改变</span></span><br><span class="line">state.<span class="property">targetWithTime</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">user.<span class="property">data</span>.<span class="property">point</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">targetPoint</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于点击转换样式的练习"><a href="#关于点击转换样式的练习" class="headerlink" title="关于点击转换样式的练习"></a>关于点击转换样式的练习</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//关键在于通过数组的方式，使得每个v-for生成的元素都有它独立的className：state.dayList[index].className</span><br><span class="line">//这样就可以通过改变特定的className，来达成效果</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class=&quot;tagetDay&quot;&gt;</span><br><span class="line">&lt;scroll-view class=&quot;scroll-view&quot; scroll-x=&quot;true&quot; enable-flex=&quot;true&quot;&gt;</span><br><span class="line">&lt;view class=&quot;Mon&quot; v-for=&quot;(item, index) in state.dayList&quot; :key=&quot;index&quot; @click=&quot;classChange(index)&quot;&gt;</span><br><span class="line">&lt;text&gt;&#123;&#123;item.week&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;view :class=&quot;item.className&quot;&gt;</span><br><span class="line">&lt;text class=&quot;Num&quot;&gt;&#123;&#123;item.day&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/scroll-view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const state = reactive(&#123;</span><br><span class="line">dayList: []</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">state.dayList.push(&#123;</span><br><span class="line">&#x27;className&#x27;: &#x27;NumCenter&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">for (let i = 0; i &lt; 30; i++) &#123;</span><br><span class="line">time.setDate(time.getDate() + 1)</span><br><span class="line">state.dayList.push(&#123;</span><br><span class="line">&#x27;className&#x27;: &#x27;Num&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const classChange = (index) =&gt; &#123;</span><br><span class="line">state.dayList.forEach((item) =&gt; &#123;</span><br><span class="line">item.className = &quot;Num&quot;; // 先将所有日期的 className 属性设置为 Num</span><br><span class="line">&#125;);</span><br><span class="line">state.dayList[index].className = &quot;NumCenter&quot;; // 将点击的日期的 className 属性设置为 NumCenter</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="前端获取不到初值的原因"><a href="#前端获取不到初值的原因" class="headerlink" title="前端获取不到初值的原因"></a>前端获取不到初值的原因</h3><p>使用中经常出现，赋不上初值的问题，需要在刷新时才能获取到数据，在通过打印后发现，网络请求返回前，初值已经赋上，解决方法就是在需要该数据的前一个页面就要加上请求语句，获取到所有的数据（clock的bug QAQ）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const home = () =&gt; &#123;</span><br><span class="line">uni.request(&#123;</span><br><span class="line">url: &#x27;http://localhost:8181/user/home&#x27;,</span><br><span class="line">method: &quot;POST&quot;,</span><br><span class="line">data: user.data.userEmail,</span><br><span class="line">success: (res) =&gt; &#123;</span><br><span class="line">if (res.data.code != null) &#123;</span><br><span class="line">uni.redirectTo(&#123;</span><br><span class="line">url: &#x27;../../pages/Login/Login&#x27;</span><br><span class="line">&#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">uni.redirectTo(&#123;</span><br><span class="line">url: &#x27;../../pages/Sign/Sign&#x27;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">        //后续需要的tag数据</span><br><span class="line">uni.request(&#123;</span><br><span class="line">url: &#x27;http://localhost:8181/tag/get&#x27;,</span><br><span class="line">method: &quot;POST&quot;,</span><br><span class="line">data: user.data.userEmail,</span><br><span class="line">success: (res) =&gt; &#123;</span><br><span class="line">console.log(res)</span><br><span class="line">tag.data.tagName = res.data.data[0].tagName</span><br><span class="line">tag.data.tagDescribe = res.data.data[0].tagDescribe</span><br><span class="line">tag.data.tagPoint = res.data.data[0].tagPoint</span><br><span class="line">tag.data.tagHour = res.data.data[0].tagHour</span><br><span class="line">tag.data.tagMinute = res.data.data[0].tagMinute</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">        //此处的time.data.remainingTime其实还是零，原因就是上面所说的，所以在下一个页面有相同的语句，获取到time.data.remainingTime的初值，此处因为在需要数据的页面前有两个页面才能完成需求，不知道有没有其他办法来优化</span><br><span class="line">time.data.remainingTime = (tag.data.tagHour * 3600) + (tag.data.tagMinute * 60) + tag.data.tagSecond</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>整体项目流程参考</title>
      <link href="/posts/2a16d212.html"/>
      <url>/posts/2a16d212.html</url>
      
        <content type="html"><![CDATA[<h1 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>在本项目中前端的页面都采用了vue的渐进式开发，依托后端来启动所有的项目，且采用了element-ui所提供的样式，使得页面更加整洁美观</p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>在项目的后端使用maven提供专业化的目录，以及进行项目的打包和快捷的插件管理，整体都使用lombok的注解式开发，再以spring-boot作为项目的主框架，加快项目的开发应用，也更方便对接mysql的数据库</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>而在数据库方面，使用了国人所升级的MybatisPlus，再在controller层实现业务逻辑，通过@RequestMapping来接受页面所发送的ajax请求以及json数据，同时利用DTO将多个字段封装到一个对象里，实现对于数据库基本的增删改查，最后在前端回显所修改的数据，在这整个用户交互的流程中，filter层会保持拦截用户所不该访问的页面，也会使用Redis来进行缓存优化，来达到更好的用户体验</p><h2 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h2><p>而在部署项目上采用腾讯云的云服务器，以及Git仓库来管理历史版本的代码以及团队协作，在Linux系统上进行部署，保证项目的安全性，再通过SSH连接工具就可以实现从本地连接到远程的Linux系统服务器</p><p><img src="https://cdn.jsdelivr.net/gh/TECNB/picgodemo@main/img/default_top_img.jpg" alt="壁纸"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
