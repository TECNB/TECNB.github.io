<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java爬虫</title>
      <link href="/posts/ade80941.html"/>
      <url>/posts/ade80941.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java爬虫"><a href="#Java爬虫" class="headerlink" title="Java爬虫"></a>Java爬虫</h1><h2 id="实现目标："><a href="#实现目标：" class="headerlink" title="实现目标："></a>实现目标：</h2><p>1、要求爬到该站点的所有小说，（且具有定时去查看小说更新的功能）<br>2、爬到的内容要求包含简介、作者名称、封面图片、小说名称、具体小说章节、最新更新章节、完结状态<br>3、上述要求内容还必须存到数据库中<br>4、小说内容应该以怎么样的形式存到数据库中</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>1、框架：seimicrawler、jsoup、WebMagic（决定采用jsoup）</p><p>2、采用selenium这类谷歌测试工具来爬取动态加载的网页</p><h2 id="python思路"><a href="#python思路" class="headerlink" title="python思路"></a>python思路</h2><p>先摆上python的<strong>静态</strong>爬虫提供相似思路(使用Xpath的方法找到标签)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;https://www.zwwx.com/book/67/67510/&#x27;</span></span><br><span class="line"><span class="comment"># header</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/&#x27;</span></span><br><span class="line">                         <span class="string">&#x27;537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/&#x27;</span></span><br><span class="line">                         <span class="string">&#x27;537.36 Edg/103.0.1264.49&#x27;</span>&#125;    <span class="comment"># 伪装headers</span></span><br><span class="line">response = requests.get(url=url, headers=headers)</span><br><span class="line">response.encoding = response.apparent_encoding  <span class="comment"># 转中文码(自动分析解码)</span></span><br><span class="line"><span class="comment"># re的正则表达式的方法</span></span><br><span class="line"><span class="comment"># print(response.text)</span></span><br><span class="line">href = re.findall(<span class="string">&#x27;&lt;dd&gt;&lt;a href=&quot;(.*?)&quot;&gt;.*?&lt;/a&gt;&lt;/dd&gt;&#x27;</span>, response.text)    <span class="comment"># 需要的用（.*?）代替，不需要的用.*?代替</span></span><br><span class="line">name = re.findall(<span class="string">&#x27;&lt;dt&gt;(.*?)&lt;/dt&gt;&#x27;</span>, response.text)[<span class="number">0</span>]   <span class="comment"># 同上,而[i] i代表第几个数据，从第0个开始</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> href:</span><br><span class="line">    index_url = <span class="string">&#x27;https://www.zwwx.com&#x27;</span> + index  <span class="comment"># 循环有点意思，实际上变量index就是href中的每一个链接</span></span><br><span class="line">    res = requests.get(url=index_url, headers=headers)</span><br><span class="line">    res.encoding = res.apparent_encoding</span><br><span class="line">    <span class="comment"># 有标签时用css和xpath(无法直接提取字符串数据，需要加.text),无标签用re正则(无需加.text)</span></span><br><span class="line">    selector = parsel.Selector(res.text)</span><br><span class="line">    title = selector.css(<span class="string">&#x27;.bookname &gt; h1::text&#x27;</span>).get()</span><br><span class="line">    <span class="comment"># 复杂版：#wrapper &gt; div.content_read &gt; div &gt; div.bookname &gt; h1::text</span></span><br><span class="line">    <span class="comment"># h1::text是提取标签内的文本,.get获取内容</span></span><br><span class="line">    content_list = selector.css(<span class="string">&#x27;#content::text&#x27;</span>).getall()</span><br><span class="line">    content = <span class="string">&#x27;\n&#x27;</span>.join(content_list)     <span class="comment"># 列表转为字符串</span></span><br><span class="line">    <span class="comment"># .get()是取一个 .getall()是提取全部！！！！！！！！！！提取出来是列表，而非字符串</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;novel\\<span class="subst">&#123;name&#125;</span>.txt&#x27;</span>, mode=<span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:  <span class="comment"># as f是将这个文件命名为f</span></span><br><span class="line">        <span class="comment"># 配置文件 文件路径 名字 保存方式（mode w写入数据(会覆盖) a追加保存 ） 编码格式</span></span><br><span class="line">        <span class="comment"># open()需要末尾加上f.close,而with open()则会自动关闭不需要加f.close</span></span><br><span class="line">        f.write(title)  <span class="comment"># 写入f文件中</span></span><br><span class="line">        f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.write(content)</span><br><span class="line">        f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;正在保存：&#x27;</span>, title)   <span class="comment"># 直接文字需双引号，变量不用，用 , 连接</span></span><br></pre></td></tr></table></figure><p><strong>动态</strong>爬虫</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">opt = Options()</span><br><span class="line">opt.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">opt.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">driver = Chrome(options=opt)</span><br><span class="line">url = <span class="string">&#x27;https://www.maofly.com/manga/6996/451102.html&#x27;</span></span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3</span>)  <span class="comment"># 这是为了让网页能够完全加载出来</span></span><br><span class="line"></span><br><span class="line">driver.get(url=url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10000</span>):</span><br><span class="line">    result = es.alert_is_present()(driver)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result:</span><br><span class="line">        <span class="built_in">print</span>(result.text)</span><br><span class="line">        result.accept()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;没有警告窗&#x27;</span>)</span><br><span class="line">        res = driver.page_source</span><br><span class="line">        selector = parsel.Selector(res)</span><br><span class="line">        <span class="comment"># //*[@id=&quot;all&quot;]/div/div[2]/div[1]/img</span></span><br><span class="line">        img_url = selector.xpath(<span class="string">&#x27;//*[@id=&quot;all&quot;]/div/div[2]/div[1]/img/@src&#x27;</span>).get()</span><br><span class="line">        pic_title = selector.xpath(<span class="string">&#x27;/html/body/div/h2/text()&#x27;</span>).get()</span><br><span class="line">        pic_name = selector.xpath(<span class="string">&#x27;/html/body/div/h1/a/text()&#x27;</span>).get()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;img\\&#x27;</span> + pic_name):  <span class="comment"># 如果该路径下没有这个文件夹，那就创建这个文件夹</span></span><br><span class="line">            os.mkdir(<span class="string">&#x27;img\\&#x27;</span> + pic_name)</span><br><span class="line">        img = requests.get(url=img_url).content</span><br><span class="line">        name = pic_title, i     <span class="comment"># 不能用pic_title + i</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;正在保存:&#x27;</span>, name, img_url)  <span class="comment"># 直接文字需双引号，变量不用，用 , 连接</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;img\\<span class="subst">&#123;pic_name&#125;</span>\\<span class="subst">&#123;name&#125;</span>.jpg&#x27;</span>, mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:  <span class="comment"># as f是将这个文件命名为f,变量需要加进&#123; &#125;\\内，定值直接输入\\</span></span><br><span class="line">            <span class="comment"># 配置文件 文件路径 名字 保存方式（mode w写入数据(会覆盖) a追加保存 ） 编码格式</span></span><br><span class="line">            <span class="comment"># open()需要末尾加上f.close,而with open()则会自动关闭不需要加f.close</span></span><br><span class="line">            f.write(img)  <span class="comment"># 写入f文件中</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;保存完成:&#x27;</span>, name)  <span class="comment"># 直接文字需双引号，变量不用，用 , 连接</span></span><br><span class="line"></span><br><span class="line">        button = driver.find_element(By.XPATH, <span class="string">&#x27;/html/body/div/div[2]/nav/div/a[4]&#x27;</span>)</span><br><span class="line">        button.click()</span><br></pre></td></tr></table></figure><p>在爬取数据方面我觉得在看完狂神的视频后问题不大，最大的问题是数据库写入的实现，以及不定期爬取更新资源的实现（可以等网站测试做完再说）</p><h2 id="Jsoup"><a href="#Jsoup" class="headerlink" title="Jsoup"></a>Jsoup</h2><h3 id="爬取小说地址具体代码"><a href="#爬取小说地址具体代码" class="headerlink" title="爬取小说地址具体代码"></a>爬取小说地址具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getBookUrl1</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ArrayList&lt;String&gt; bookUrlList1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//count用于计数完成了多少BookUrl的获取</span></span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//一共有5页</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=max;i++)&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlEver</span> <span class="operator">=</span> <span class="string">&quot;https://www.9biqu.com/class/1/&quot;</span>+i+<span class="string">&quot;.html&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(urlEver)</span><br><span class="line">                    .userAgent(ua)</span><br><span class="line">                    .proxy(currentProxy)</span><br><span class="line">                    .timeout(<span class="number">1000000000</span>)</span><br><span class="line">                    .get();</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            <span class="type">Elements</span> <span class="variable">NameUrlList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#newscontent &gt; div.update-list &gt; div &gt; div &gt; ul&gt;li&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Element el : NameUrlList)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">BookUrlPart</span> <span class="operator">=</span> el.select(<span class="string">&quot;span.s2 &gt; a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">BookUrl</span> <span class="operator">=</span><span class="string">&quot;https://www.9biqu.com&quot;</span>+ BookUrlPart;</span><br><span class="line">                bookUrlList1.add(BookUrl);</span><br><span class="line">                count++;</span><br><span class="line">                System.out.println(<span class="string">&quot;玄幻小说地址采集完成&quot;</span>+count+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            i--;</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说地址时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;玄幻小说已经全部采集完成&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bookUrlList1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="爬取小说信息具体代码"><a href="#爬取小说信息具体代码" class="headerlink" title="爬取小说信息具体代码"></a>爬取小说信息具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;BookInfo&gt; <span class="title function_">listBookDetails</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    BUrl1 = getBookUrl1();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt; BUrl1.size();i++)&#123;</span><br><span class="line">        String urlEverBook=BUrl1.get(i);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            count++;</span><br><span class="line">            <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(urlEverBook)</span><br><span class="line">                    .userAgent(ua)</span><br><span class="line">                    <span class="comment">// 将代理服务器对象传递给Jsoup</span></span><br><span class="line">                    .proxy(currentProxy)</span><br><span class="line">                    .timeout(<span class="number">1000000000</span>)</span><br><span class="line">                    .get();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">bookName</span> <span class="operator">=</span> document.select(<span class="string">&quot;#info &gt; h1&quot;</span>).text();</span><br><span class="line">            <span class="type">String</span> <span class="variable">authorName</span> <span class="operator">=</span> document.select(<span class="string">&quot;#info &gt; p:nth-child(2) &gt; a&quot;</span>).text();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">picUrl</span> <span class="operator">=</span> <span class="string">&quot;https://www.9biqu.com&quot;</span> + document.select(<span class="string">&quot;#fmimg &gt; img&quot;</span>).attr(<span class="string">&quot;src&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">lastChapterName</span> <span class="operator">=</span> document.select(<span class="string">&quot;#info &gt; p:nth-child(5) &gt; a&quot;</span>).text();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(authorName.equals(<span class="string">&quot;小说免费阅读&quot;</span>))&#123;</span><br><span class="line">                authorName=<span class="string">&quot;Tec&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">bookIntro</span> <span class="operator">=</span> document.select(<span class="string">&quot;#intro&quot;</span>).text();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本书名:&quot;</span>+bookName);</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本作者名:&quot;</span>+authorName);</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本介绍:&quot;</span>+bookIntro);</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本图片链接:&quot;</span>+picUrl);</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本最新章名:&quot;</span>+lastChapterName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            QueryWrapper&lt;BookInfo&gt;BookInfoNameQueryWrapper =<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">            BookInfoNameQueryWrapper.eq(<span class="string">&quot;book_name&quot;</span>, bookName);</span><br><span class="line">            <span class="type">BookInfo</span> <span class="variable">bookInfo</span> <span class="operator">=</span> bookInfoMapper.selectOne(BookInfoNameQueryWrapper);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(bookInfo==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">BookInfo</span> <span class="variable">bookInfo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookInfo</span>();</span><br><span class="line">                bookInfo1.setWorkDirection(<span class="number">0</span>);</span><br><span class="line">                bookInfo1.setCategoryId(<span class="number">1L</span>);</span><br><span class="line">                bookInfo1.setCategoryName(<span class="string">&quot;玄幻奇幻&quot;</span>);</span><br><span class="line">                bookInfo1.setPicUrl(picUrl);</span><br><span class="line">                bookInfo1.setBookName(bookName);</span><br><span class="line">                bookInfo1.setAuthorId(<span class="number">0L</span>);</span><br><span class="line">                bookInfo1.setAuthorName(authorName);</span><br><span class="line">                bookInfo1.setBookDesc(bookIntro);</span><br><span class="line">                bookInfo1.setScore(<span class="number">6</span>);</span><br><span class="line">                bookInfo1.setBookStatus(<span class="number">0</span>);</span><br><span class="line">                bookInfo1.setVisitCount(<span class="number">100L</span>);</span><br><span class="line">                <span class="comment">//bookInfo1.setWordCount();</span></span><br><span class="line">                bookInfo1.setCommentCount(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">//bookInfo1.setLastChapterId();</span></span><br><span class="line">                bookInfo1.setLastChapterName(lastChapterName);</span><br><span class="line">                bookInfo1.setLastChapterUpdateTime(LocalDateTime.now());</span><br><span class="line">                bookInfo1.setCreateTime(LocalDateTime.now());</span><br><span class="line">                bookInfo1.setUpdateTime(LocalDateTime.now());</span><br><span class="line">                bookInfo1.setIsVip(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                bookInfoMapper.insert(bookInfo1);</span><br><span class="line">                System.out.println(<span class="string">&quot;数据表bookInfo数据存入成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;在数据表bookInfo中书名为&quot;</span>+bookName+<span class="string">&quot;的小说在数据库中已经存在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说信息时，IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说信息时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="爬取小说章节内容具体代码"><a href="#爬取小说章节内容具体代码" class="headerlink" title="爬取小说章节内容具体代码"></a>爬取小说章节内容具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getBookContent</span><span class="params">(String BookContentUrl)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">bookContent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (bookContent == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(BookContentUrl)</span><br><span class="line">                    .userAgent(ua)</span><br><span class="line">                    .proxy(currentProxy)</span><br><span class="line">                    .timeout(<span class="number">1000000000</span>)</span><br><span class="line">                    .get();</span><br><span class="line">            Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">            <span class="type">Elements</span> <span class="variable">bookContentList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#content &gt; *:not(p:first-child)&quot;</span>);</span><br><span class="line"></span><br><span class="line">            bookContent = bookContentList.toString();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (SocketException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bookContent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**统记中文字数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countChineseCharacters</span><span class="params">(String bookContent)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (bookContent == <span class="literal">null</span> || bookContent.trim().isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    String[] words = bookContent.trim().split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : word.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isChineseCharacter(c)) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**判断是否是中文</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isChineseCharacter</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">    Character.<span class="type">UnicodeScript</span> <span class="variable">script</span> <span class="operator">=</span> Character.UnicodeScript.of(c);</span><br><span class="line">    <span class="keyword">return</span> script == Character.UnicodeScript.HAN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="爬取小说章节具体代码"><a href="#爬取小说章节具体代码" class="headerlink" title="爬取小说章节具体代码"></a>爬取小说章节具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;BookInfo&gt; <span class="title function_">listBookContent</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">countChapter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    BUrl1 = getBookUrl1();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt; BUrl1.size();i++)&#123;</span><br><span class="line">        String urlEverBook=BUrl1.get(i);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(urlEverBook)</span><br><span class="line">                    .userAgent(ua)</span><br><span class="line">                    <span class="comment">// 将代理服务器对象传递给Jsoup</span></span><br><span class="line">                    .proxy(currentProxy)</span><br><span class="line">                    .timeout(<span class="number">1000000000</span>)</span><br><span class="line">                    .get();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">bookName</span> <span class="operator">=</span> document.select(<span class="string">&quot;#info &gt; h1&quot;</span>).text();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//以下代码是取得每本书的每个章节名以及链接还有章节内容</span></span><br><span class="line">            String bookChapterName;</span><br><span class="line">            String bookChapterUrlPart;</span><br><span class="line">            String bookChapterUrl;</span><br><span class="line"></span><br><span class="line">            String bookContent;</span><br><span class="line"></span><br><span class="line">            Long bookId= <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">Elements</span> <span class="variable">bookChapter</span> <span class="operator">=</span> document.select(<span class="string">&quot;#list &gt; dl &gt; dd:gt(13)&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span>(Element el:bookChapter)&#123;</span><br><span class="line">                countChapter++;</span><br><span class="line">                bookChapterName = el.select(<span class="string">&quot;a&quot;</span>).text();</span><br><span class="line">                bookChapterUrlPart = el.select(<span class="string">&quot;a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">                bookChapterUrl = <span class="string">&quot;https://www.9biqu.com&quot;</span>+ bookChapterUrlPart;</span><br><span class="line">                bookContent = getBookContent(bookChapterUrl);</span><br><span class="line">                <span class="type">int</span> <span class="variable">chineseCharCount</span> <span class="operator">=</span> countChineseCharacters(bookContent);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本的第&quot;</span>+countChapter+<span class="string">&quot;章名&quot;</span>+bookChapterName);</span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本的第&quot;</span>+countChapter+<span class="string">&quot;章链接:&quot;</span>+bookChapterUrl);</span><br><span class="line">                <span class="comment">//System.out.println(&quot;第&quot;+count+&quot;本的第&quot;+countChapter+&quot;章内容:&quot;+bookContent);</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//查找是否有该小说的存在</span></span><br><span class="line">                QueryWrapper&lt;BookInfo&gt;BookInfoNameQueryWrapper =<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">                BookInfoNameQueryWrapper.eq(<span class="string">&quot;book_name&quot;</span>, bookName);</span><br><span class="line">                <span class="type">BookInfo</span> <span class="variable">bookInfoText</span> <span class="operator">=</span> bookInfoMapper.selectOne(BookInfoNameQueryWrapper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="type">BookInfo</span> <span class="variable">bookInfoId</span> <span class="operator">=</span> bookInfoMapper.selectOne(BookInfoNameQueryWrapper);</span><br><span class="line">                bookId = bookInfoId.getId();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//查找是否有重复章节内容的存在</span></span><br><span class="line">                QueryWrapper&lt;BookChapter&gt;BookChapterTextQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">                BookChapterTextQueryWrapper.eq(<span class="string">&quot;chapter_name&quot;</span>,bookChapterName);</span><br><span class="line">                BookChapterTextQueryWrapper.eq(<span class="string">&quot;book_id&quot;</span>,bookId);</span><br><span class="line">                <span class="type">BookChapter</span> <span class="variable">bookChapterText</span> <span class="operator">=</span> bookChapterMapper.selectOne(BookChapterTextQueryWrapper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 如果不存在相同的章节名字，则插入书籍信息</span></span><br><span class="line">                <span class="keyword">if</span>(bookInfoText != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (bookChapterText == <span class="literal">null</span> ) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        <span class="comment">//将数据存入bookChapter</span></span><br><span class="line">                        <span class="type">BookChapter</span> <span class="variable">bookChapter1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookChapter</span>();</span><br><span class="line">                        bookChapter1.setBookId(bookId);</span><br><span class="line">                        bookChapter1.setChapterNum(countChapter);</span><br><span class="line">                        bookChapter1.setChapterName(bookChapterName);</span><br><span class="line">                        bookChapter1.setWordCount(chineseCharCount);</span><br><span class="line">                        bookChapter1.setIsVip(<span class="number">0</span>);</span><br><span class="line">                        bookChapter1.setCreateTime(LocalDateTime.now());</span><br><span class="line">                        bookChapter1.setUpdateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">                        bookChapterMapper.insert(bookChapter1);</span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">&quot;数据表bookChapter数据存入成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 如果已经存在相同的书籍信息，则直接使用已存在的书籍信息的id</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;在数据表bookChapter中章节名为&quot;</span>+bookChapterName+<span class="string">&quot;的小说&quot;</span>+bookName+<span class="string">&quot;在数据库中已经存在&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;在数据表bookChapter中书名为&quot;</span>+bookName+<span class="string">&quot;的小说在数据库中不存在&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="type">Long</span> <span class="variable">chapterId</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 查询是否存在该章节和该书名</span></span><br><span class="line">                QueryWrapper&lt;BookChapter&gt; bookChapterQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">                bookChapterQueryWrapper.eq(<span class="string">&quot;book_id&quot;</span>, bookId);</span><br><span class="line">                bookChapterQueryWrapper.eq(<span class="string">&quot;chapter_name&quot;</span>, bookChapterName);</span><br><span class="line">                <span class="type">BookChapter</span> <span class="variable">bookChapterText2</span> <span class="operator">=</span> bookChapterMapper.selectOne(bookChapterQueryWrapper);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果章节存在，则获取其 ID</span></span><br><span class="line">                <span class="keyword">if</span> ( bookChapterText2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                    chapterId = bookChapterText2.getId();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                QueryWrapper&lt;BookContent&gt;BookContentQueryWrapper =<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">                BookContentQueryWrapper.eq(<span class="string">&quot;chapter_id&quot;</span>,chapterId);</span><br><span class="line">                <span class="type">BookContent</span> <span class="variable">bookContentText</span> <span class="operator">=</span> bookContentMapper.selectOne(BookContentQueryWrapper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果不存在相同的章节内容，则插入书籍信息</span></span><br><span class="line">                <span class="keyword">if</span> (bookContentText==<span class="literal">null</span> &amp;&amp; bookInfoText !=<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">BookContent</span> <span class="variable">bookContent1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookContent</span>();</span><br><span class="line">                    bookContent1.setChapterId(chapterId);</span><br><span class="line">                    bookContent1.setContent(bookContent);</span><br><span class="line">                    bookContent1.setCreateTime(LocalDateTime.now());</span><br><span class="line">                    bookContent1.setUpdateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">                    bookContentMapper.insert(bookContent1);</span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">&quot;数据表bookContent数据存入成功&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果已经存在相同的书籍信息，则直接使用已存在的书籍信息的id</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;在数据表bookContent中书名为&quot;</span>+bookName+<span class="string">&quot;的小说在数据库中已经存在&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说章节时，IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说章节时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h3><h4 id="解析html的两种方式"><a href="#解析html的两种方式" class="headerlink" title="解析html的两种方式"></a>解析html的两种方式</h4><p>1、Jsoup.parse</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Document document= Jsoup.parse(<span class="keyword">new</span> <span class="title class_">URL</span>(urlEver), <span class="number">300000</span>);</span><br></pre></td></tr></table></figure><p>2、Jsoup.connect</p><p>userAgent更换访问头</p><p>proxy更换IP</p><p>timeout防止超时异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(urlEverBook)</span><br><span class="line">        .userAgent(ua)</span><br><span class="line">        .proxy(currentProxy)</span><br><span class="line">        .timeout(<span class="number">1000000000</span>)</span><br><span class="line">        .get();</span><br></pre></td></tr></table></figure><h4 id="获取元素的方式"><a href="#获取元素的方式" class="headerlink" title="获取元素的方式"></a>获取元素的方式</h4><h5 id="DOM解析"><a href="#DOM解析" class="headerlink" title="DOM解析"></a>DOM解析</h5><p>.getElementsByTag(“h1”)——标签名</p><p>getElementById(“intro”)——id名</p><p>.text()获取文字</p><p>.attr(“href”)获取元素的某个属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">bookName</span> <span class="operator">=</span> document.getElementsByTag(<span class="string">&quot;h1&quot;</span>).get(<span class="number">0</span>).text();</span><br><span class="line"><span class="type">String</span> <span class="variable">src</span> <span class="operator">=</span> el.getElementsByTag(<span class="string">&quot;a&quot;</span>).eq(<span class="number">0</span>).attr(<span class="string">&quot;href&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h5><p>.select（”#info &gt; h1”）——selector地址</p><p>.text()获取文字</p><p>.attr(“href”)获取元素的某个属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取单条数据：</span></span><br><span class="line"><span class="type">String</span> <span class="variable">bookName</span> <span class="operator">=</span> document.select(<span class="string">&quot;#info &gt; h1&quot;</span>).text();</span><br><span class="line"></span><br><span class="line"><span class="comment">//取多条数据：</span></span><br><span class="line"><span class="comment">//注意这个select取得的位置一定要看清楚</span></span><br><span class="line"><span class="comment">//select(&quot;span.s2 &gt; a&quot;)</span></span><br><span class="line"><span class="type">Elements</span> <span class="variable">NameUrlList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#newscontent &gt; div.update-list &gt; div &gt; div &gt; ul&gt;li&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Element el : NameUrlList)&#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">BookUrlPart</span> <span class="operator">=</span> el.select(<span class="string">&quot;span.s2 &gt; a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">BookUrl</span> <span class="operator">=</span><span class="string">&quot;https://www.9biqu.com&quot;</span>+ BookUrlPart;</span><br><span class="line">      bookUrlList1.add(BookUrl);</span><br><span class="line">      count++;</span><br><span class="line">      System.out.println(<span class="string">&quot;小说地址采集完成&quot;</span>+count+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照条件取多条数据：</span></span><br><span class="line"><span class="comment">//从第13个数据开始取</span></span><br><span class="line"><span class="comment">//#list &gt; dl &gt; dd:gt(13)</span></span><br><span class="line"><span class="type">Elements</span> <span class="variable">bookChapter</span> <span class="operator">=</span> document.select(<span class="string">&quot;#list &gt; dl &gt; dd:gt(13)&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(Element el:bookChapter)&#123;</span><br><span class="line">     countChapter++;</span><br><span class="line">     bookChapterName = el.select(<span class="string">&quot;a&quot;</span>).text();</span><br><span class="line">     bookChapterUrlPart = el.select(<span class="string">&quot;a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">     bookChapterUrl = <span class="string">&quot;https://www.9biqu.com&quot;</span>+ bookChapterUrlPart;</span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本的第&quot;</span>+countChapter+<span class="string">&quot;章名&quot;</span>+bookChapterName);</span><br><span class="line">     System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本的第&quot;</span>+countChapter+<span class="string">&quot;章链接&quot;</span>+bookChapterUrl);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     chapterNameList.add(bookChapterName);</span><br><span class="line">     chapterUrlList.add(bookChapterUrl);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//选择除了第一个以外的所有数据：</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getBookContent</span><span class="params">(String BookContentUrl)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">     String bookContent;</span><br><span class="line">     <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(BookContentUrl)</span><br><span class="line">             .userAgent(ua)</span><br><span class="line">             .proxy(proxy)</span><br><span class="line">             .get();</span><br><span class="line">     Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">    <span class="comment">//#content &gt; *:not(p:first-child)</span></span><br><span class="line">     <span class="comment">//选择id为content的元素下除第一个p元素外的所有元素</span></span><br><span class="line">     <span class="type">Elements</span> <span class="variable">bookContentList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#content &gt; *:not(p:first-child)&quot;</span>);</span><br><span class="line"> <span class="comment">//toString()</span></span><br><span class="line">     <span class="comment">//将Elements对象转化为String对象</span></span><br><span class="line">     bookContent = bookContentList.toString();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> bookContent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Jsoup的选择器"><a href="#Jsoup的选择器" class="headerlink" title="Jsoup的选择器"></a>Jsoup的选择器</h4><h5 id="伪选择器selectors"><a href="#伪选择器selectors" class="headerlink" title="伪选择器selectors"></a>伪选择器selectors</h5><p>:lt(n): 查找哪些元素的同级索引值（它的位置在DOM树中是相对于它的父节点）小于n，比如：td:lt(3) 表示小于三列的元素</p><p>:gt(n):查找哪些元素的同级索引值大于n，比如： div p:gt(2)表示哪些div中有包含2个以上的p元素</p><p>:eq(n): 查找哪些元素的同级索引值与n相等，比如：form input:eq(1)表示包含一个input标签的Form元素</p><p>:has(seletor): 查找匹配选择器包含元素的元素，比如：div:has(p)表示哪些div包含了p元素</p><p>:not(selector): 查找与选择器不匹配的元素，比如： div:not(.logo) 表示不包含 class&#x3D;logo 元素的所有 div 列表</p><p>:contains(text): 查找包含给定文本的元素，搜索不区分大不写，比如： p:contains(jsoup)</p><p>:containsOwn(text): 查找直接包含给定文本的元素</p><p>:matches(regex): 查找哪些元素的文本匹配指定的正则表达式，比如：div:matches((?i)login)</p><p>:matchesOwn(regex): 查找自身包含文本匹配指定正则表达式的元素</p><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>使用try、catch来进行异常处理，一般在第一次出现异常后，根据异常提示，来进行进一步操作，比如输出信息或者线程休眠（这里注意try是否在循环语句里，可以通过类似**i–**的方法来保证循环的正常进行）</p><p>也可以在try语句中主动抛出异常，这里如果bookContentList&#x3D;&#x3D;null直接存入数据库中，会有空指针的异常。所以提前报错到catch语句里，再一次获取bookContentList</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(BookContentUrl)</span><br><span class="line">                .userAgent(ua)</span><br><span class="line">                .proxy(currentProxy)</span><br><span class="line">                .timeout(<span class="number">1000000000</span>)</span><br><span class="line">                .get();</span><br><span class="line">        Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        <span class="type">Elements</span> <span class="variable">bookContentList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#content &gt; *:not(p:first-child)&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(bookContentList!=<span class="literal">null</span>)&#123;</span><br><span class="line">            bookContent = bookContentList.toString();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SocketException</span>(<span class="string">&quot;获取书籍内容失败，将再次尝试获取&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (SocketException e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="IP代理池的创建"><a href="#IP代理池的创建" class="headerlink" title="IP代理池的创建"></a>IP代理池的创建</h4><p>先创建一个List存放IP以及端口以及定义currentProxyIndex存放位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Proxy&gt; proxies = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Proxy</span>(Proxy.Type.HTTP, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;139.200.74.178&quot;</span>, <span class="number">4283</span>)),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Proxy</span>(Proxy.Type.HTTP, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;60.169.245.20&quot;</span>, <span class="number">4215</span>)),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Proxy</span>(Proxy.Type.HTTP, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;183.147.27.251&quot;</span>, <span class="number">4231</span>))</span><br><span class="line">    );</span><br><span class="line"><span class="type">int</span> <span class="variable">currentProxyIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>从List中获取到一个IP以及地址，赋值给currentProxy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br></pre></td></tr></table></figure><p>然后使用proxy方法使用连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(urlEverBook)</span><br><span class="line">                        .proxy(currentProxy)</span><br><span class="line">                        .get();</span><br></pre></td></tr></table></figure><p>最后是根据情况来更换IP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;在爬取小说信息时，IP地址被禁止，将更换IP...&quot;</span>);</span><br><span class="line">    <span class="comment">//下面是换IP的逻辑计算</span></span><br><span class="line">    currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="存入数据库时需要的处理"><a href="#存入数据库时需要的处理" class="headerlink" title="存入数据库时需要的处理"></a>存入数据库时需要的处理</h4><h5 id="防止重复数据"><a href="#防止重复数据" class="headerlink" title="防止重复数据"></a>防止重复数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先通过QueryWrapper来约束条件</span></span><br><span class="line">QueryWrapper&lt;BookInfo&gt;BookInfoNameQueryWrapper =<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">      BookInfoNameQueryWrapper.eq(<span class="string">&quot;book_name&quot;</span>, bookName);</span><br><span class="line">      <span class="type">BookInfo</span> <span class="variable">bookInfo</span> <span class="operator">=</span> bookInfoMapper.selectOne(BookInfoNameQueryWrapper);</span><br><span class="line"><span class="comment">//通过selectOne后为空，可以判断不存在该数据，则存入数据库</span></span><br><span class="line">      <span class="keyword">if</span>(bookInfo==<span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="type">BookInfo</span> <span class="variable">bookInfo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookInfo</span>();</span><br><span class="line">      bookInfo1.setBookName(bookName);</span><br><span class="line"><span class="comment">//·········</span></span><br><span class="line">          </span><br><span class="line">      bookInfoMapper.insert(bookInfo1);</span><br><span class="line">      System.out.println(<span class="string">&quot;数据表bookInfo数据存入成功&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;在数据表bookInfo中书名为&quot;</span>+bookName+<span class="string">&quot;的小说在数据库中已经存在&quot;</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h5 id="获取其他表的数据存入另一张表"><a href="#获取其他表的数据存入另一张表" class="headerlink" title="获取其他表的数据存入另一张表"></a>获取其他表的数据存入另一张表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先通过QueryWrapper来约束条件</span></span><br><span class="line">QueryWrapper&lt;BookInfo&gt;BookInfoNameQueryWrapper =<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">      BookInfoNameQueryWrapper.eq(<span class="string">&quot;book_name&quot;</span>, bookName);</span><br><span class="line">      <span class="type">BookInfo</span> <span class="variable">bookInfoId</span> <span class="operator">=</span> bookInfoMapper.selectOne(BookInfoNameQueryWrapper);</span><br><span class="line"><span class="comment">//获取到这个ID（这是一个自增的数据，所以需要在其其他数据存入之后，再进行getId来获取）</span></span><br><span class="line">      bookId = bookInfoId.getId();</span><br><span class="line"><span class="comment">//存入数据到另外一张数据表book_capter中</span></span><br><span class="line"><span class="type">BookChapter</span> <span class="variable">bookChapter1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookChapter</span>();</span><br><span class="line">      bookChapter1.setBookId(bookId);</span><br><span class="line">bookChapterMapper.insert(bookChapter1);</span><br></pre></td></tr></table></figure><h5 id="防止数据为空"><a href="#防止数据为空" class="headerlink" title="防止数据为空"></a>防止数据为空</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">bookContent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//如果数据bookContent一直为空，则一直进行try的语句</span></span><br><span class="line">      <span class="keyword">while</span> (bookContent == <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">      <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(BookContentUrl)</span><br><span class="line">      .userAgent(ua)</span><br><span class="line">      .proxy(currentProxy)</span><br><span class="line">      .timeout(<span class="number">1000000000</span>)</span><br><span class="line">      .get();</span><br><span class="line">      Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">      <span class="type">Elements</span> <span class="variable">bookContentList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#content &gt; *:not(p:first-child)&quot;</span>);</span><br><span class="line"></span><br><span class="line">      bookContent = bookContentList.toString();</span><br><span class="line"></span><br><span class="line">      &#125;<span class="keyword">catch</span> (SocketException e)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">      Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">      currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">      &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">      Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">      currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> bookContent;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/posts/9ea13874.html"/>
      <url>/posts/9ea13874.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="SpringBoot项目建立"><a href="#SpringBoot项目建立" class="headerlink" title="SpringBoot项目建立"></a>SpringBoot项目建立</h2><p>新建项目，勾选依赖项,如：</p><p>Developer Tools中的Lombok(通过注释简化java开发)</p><p>Web中的Spring Web（相当于SpringMVC）</p><p>SQL中的Mybatis Framework(Mybatis的框架)和MySQL Driver（MySQL的驱动）</p><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/image-20221221201317655.png" alt="image-20221221201317655"></p><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>通过Navicat创造新的MySQL数据库，并设计表格的名称，类型，以便于后端拿数据</p><h2 id="SpringBoot各级设计"><a href="#SpringBoot各级设计" class="headerlink" title="SpringBoot各级设计"></a>SpringBoot各级设计</h2><h3 id="配置类编写"><a href="#配置类编写" class="headerlink" title="配置类编写"></a>配置类编写</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#--------------------------通用配置-------------------------</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 应用名</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">novel</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="string">---</span> <span class="comment">#---------------------数据库配置---------------------------</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/novel?useUnicode=true&amp;characterEncoding=utf-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">Tec@258011</span></span><br><span class="line"><span class="string">---</span> <span class="comment">#---------------------自定义配置----------------------------</span></span><br><span class="line"><span class="attr">novel:</span></span><br><span class="line">  <span class="comment"># 跨域配置</span></span><br><span class="line">  <span class="attr">cors:</span></span><br><span class="line">    <span class="comment"># 允许跨域的域名</span></span><br><span class="line">    <span class="attr">allow-origins:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http://localhost:1024</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http://localhost:8888</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http://localhost:8080</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">---</span> <span class="comment">#配置mapper xml文件的路径（找不到xml的问题，最后是用config层的MybatisPlusConfig的相关配置来解决的）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="string">mapUnderscoreToCamelCase=true:</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># JSON 序列化时，将所有 Number 类型的属性都转为 String 类型返回，避免前端数据精度丢失的问题。(Long类型最多17位，超过的部分会变成相同数量的0，卡了一个下午加一个过了考试周的晚上QAQ，问题一开始在前端收到的id与数据库不一致，然后发现F12中的预览和响应不同，而响应是对的)</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">generator:</span></span><br><span class="line">      <span class="attr">write_numbers_as_strings:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="Dao层编写"><a href="#Dao层编写" class="headerlink" title="Dao层编写"></a>Dao层编写</h3><p>数据访问对象，负责封装对数据库的CRUD操作，与数据库进行交互，一般是mapper写接口，xml文件写sql语句的形式。</p><p>包括<strong>entity层（实体层）</strong>编写以及<strong>Mapper层</strong>编写</p><h4 id="entity层（实体层）"><a href="#entity层（实体层）" class="headerlink" title="entity层（实体层）"></a>entity层（实体层）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@TableName：如果数据库的表名是home_book，但是实体类的名字不同，那么就需要借助TableName去做绑定  implements Serializable：一个对象序列化的接口，一个类只有实现了Serializable接口，它的对象才是可序列化的。因此如果要序列化某些类的对象，这些类就必须实现Serializable接口。而实际上，Serializable是一个空接口，没有什么具体内容，它的目的只是简单的标识一个类的对象可以被序列化。</span></span><br><span class="line"><span class="meta">@TableName(&quot;home_book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeBook</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"><span class="comment">//@TableId：主键专属比如数据中的表中的字段是id，但是实体类是userId，那么就需要在userId上打上这个注解，用法：设置主键映射 value映射主键字段的名字</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long bookId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mapper层"><a href="#Mapper层" class="headerlink" title="Mapper层"></a>Mapper层</h4><p>不要忘了在启动类下@MapperScan(“com.tec.vuepractice.dao.mapper”)，这样在包扫描的时候就不会漏掉mapper层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//extends BaseMapper&lt;HomeBook&gt;是mybaits-plus的组件，用来进行基础的增删改查</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HomeBookMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;HomeBook&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service层编写-Impl-实现层"><a href="#Service层编写-Impl-实现层" class="headerlink" title="Service层编写+Impl(实现层)"></a>Service层编写+Impl(实现层)</h3><p>更加关注业务逻辑，是业务处理层，将manager组合过的操作和业务逻辑组合在一起，再封装成业务操作。</p><h4 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HomeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询首页小说推荐列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 首页小说推荐列表的 rest 响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RestResp&lt;List&lt;HomeBookRespDto&gt;&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="serviceImpl层"><a href="#serviceImpl层" class="headerlink" title="serviceImpl层"></a>serviceImpl层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="comment">//implements:一个类通过关键字implements声明自己使用一个或者多个接口。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">HomeService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeBookCacheManager homeBookCacheManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RestResp&lt;List&lt;HomeBookRespDto&gt;&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RestResp.ok(homeBookCacheManager.listHomeBooks());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller层编写"><a href="#Controller层编写" class="headerlink" title="Controller层编写"></a>Controller层编写</h3><p>主要负责接受前台的数据和请求，并且在底层处理完之后把结果返回回去，一般不能写业务逻辑在这一层，因为第一造成了不可复用，第二以后的维护困难，第三这一层没有上层，如果给用户返回了奇怪的错误信息将会非常丑陋。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RestController：作用等同于@Controller + @ResponseBody</span></span><br><span class="line"><span class="comment">//@Controller：在一个类上添加@Controller注解，表明了这个类是一个控制器类</span></span><br><span class="line"><span class="comment">//@RestController：用其实是将java对象转为json格式的数据</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="comment">//@RequestMapping：映射URL</span></span><br><span class="line"><span class="meta">@RequestMapping(ApiRouterConsts.API_FRONT_HOME_URL_PREFIX)</span><span class="comment">//（/home）</span></span><br><span class="line"><span class="comment">//在springboot项目中，controller或service层中需要注入多个mapper接口或者另外的service接口，这时候代码中就会有多个@AutoWired注解，使得代码看起来非常的混乱。</span></span><br><span class="line"><span class="comment">//@RequiredArgsConstructor写在类上面可以代替@AutoWired注解，需要注意的是：在注入的时候需要用final定义，或者使用@notnull注解</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeController</span> &#123;</span><br><span class="line"><span class="comment">//注入service</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeService homeService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首页小说推荐查询接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;books&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RestResp&lt;List&lt;HomeBookRespDto&gt;&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> homeService.listHomeBooks();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//@PathVariable(&quot;chapterId&quot;）（卡了3.1一整晚加上3.2早上一小时QAQ）</span></span><br><span class="line"><span class="comment">//@PathVariable 映射 URL 绑定的占位符</span></span><br><span class="line"><span class="comment">//通过 @PathVariable 可以将 URL 中占位符参数绑定到控制器处理方法的入参中:URL 中的 &#123;xxx&#125; 占位符可以通过</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;content/&#123;chapterId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RestResp&lt;BookContentAboutRespDto&gt;  <span class="title function_">getBookContentAbout</span><span class="params">(<span class="meta">@PathVariable(&quot;chapterId&quot;)</span> Long chapterId)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;查询方法调用之前，参数id=&#123;&#125;&quot;</span>, chapterId);</span><br><span class="line">        <span class="keyword">return</span> bookService.getBookContentAbout(chapterId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Dto层编写"><a href="#Dto层编写" class="headerlink" title="Dto层编写"></a>Dto层编写</h3><p>传输对象，一般是把数据库表封装成对象，表的各个字段就是该对象的各个变量</p><p>包括<strong>req层</strong>(Http 请求数据封装)<strong>resp层</strong>（Http 响应数据封装）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小说信息 响应DTO</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiongxiaoyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/5/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@Data:@Data ： 注在类上，提供类的get、set、equals、hashCode、canEqual、toString方法</span></span><br><span class="line"><span class="comment">//@AllArgsConstructor ： 注在类上，提供类的全参构造</span></span><br><span class="line"><span class="comment">//@NoArgsConstructor ： 注在类上，提供类的无参构造</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookInfoRespDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Schema:Swagger3的注解，用于输出api文档，此处提供了描述</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;小说ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类别ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;类别ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类别名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;类别名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小说封面地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;小说封面地址&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String picUrl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小说名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;小说名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作家id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;作家id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long authorId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作家名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;作家名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String authorName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 书籍描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;书籍描述&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bookDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 书籍状态;0-连载中 1-已完结</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;书籍状态;0-连载中 1-已完结&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer bookStatus;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;点击量&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long visitCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总字数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;总字数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer wordCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 评论数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;评论数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer commentCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首章节ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;首章节ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long firstChapterId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新章节ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;最新章节ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long lastChapterId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新章节名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;最新章节名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lastChapterName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新章节更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;最新章节更新时间&quot;)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="manager层编写"><a href="#manager层编写" class="headerlink" title="manager层编写"></a>manager层编写</h3><p>负责将Dao层中的数据库操作组合复用，主要是一些缓存方案，中间件的处理，以及对第三方平台封装的层。</p><h4 id="cache层编写"><a href="#cache层编写" class="headerlink" title="cache层编写"></a>cache层编写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeBookCacheManager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeBookMapper homeBookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookInfoMapper bookInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询首页小说推荐，并放入缓存中（此处没有采用缓存策略）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;HomeBookRespDto&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 从首页小说推荐表中查询出需要推荐的小说</span></span><br><span class="line">        QueryWrapper&lt;HomeBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//orderByAsc：按照DatabaseConsts.CommonColumnEnum.SORT.getName()排序</span></span><br><span class="line">        queryWrapper.orderByAsc(DatabaseConsts.CommonColumnEnum.SORT.getName());</span><br><span class="line">        List&lt;HomeBook&gt; homeBooks = homeBookMapper.selectList(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取推荐小说ID列表</span></span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(homeBooks)) &#123;</span><br><span class="line">            List&lt;Long&gt; bookIds = homeBooks.stream()</span><br><span class="line">                    .map(HomeBook::getBookId)</span><br><span class="line">                    .toList();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据小说ID列表查询相关的小说信息列表</span></span><br><span class="line">            QueryWrapper&lt;BookInfo&gt; bookInfoQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">            bookInfoQueryWrapper.in(DatabaseConsts.CommonColumnEnum.ID.getName(), bookIds);</span><br><span class="line">            List&lt;BookInfo&gt; bookInfos = bookInfoMapper.selectList(bookInfoQueryWrapper);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 组装 HomeBookRespDto 列表数据并返回</span></span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(bookInfos)) &#123;</span><br><span class="line">                Map&lt;Long, BookInfo&gt; bookInfoMap = bookInfos.stream()</span><br><span class="line">                        .collect(Collectors.toMap(BookInfo::getId, Function.identity()));</span><br><span class="line">                <span class="keyword">return</span> homeBooks.stream().map(v -&gt; &#123;</span><br><span class="line">                    <span class="type">BookInfo</span> <span class="variable">bookInfo</span> <span class="operator">=</span> bookInfoMap.get(v.getBookId());</span><br><span class="line">                    <span class="type">HomeBookRespDto</span> <span class="variable">bookRespDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HomeBookRespDto</span>();</span><br><span class="line">                    bookRespDto.setType(v.getType());</span><br><span class="line">                    bookRespDto.setBookId(v.getBookId());</span><br><span class="line">                    bookRespDto.setBookName(bookInfo.getBookName());</span><br><span class="line">                    bookRespDto.setPicUrl(bookInfo.getPicUrl());</span><br><span class="line">                    bookRespDto.setAuthorName(bookInfo.getAuthorName());</span><br><span class="line">                    bookRespDto.setBookDesc(bookInfo.getBookDesc());</span><br><span class="line">                    <span class="keyword">return</span> bookRespDto;</span><br><span class="line">                &#125;).toList();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一般的业务的写法"><a href="#一般的业务的写法" class="headerlink" title="一般的业务的写法"></a>一般的业务的写法</h4><p>（自己写的，对以后的业务编写挺有参考意义的，感动QAQ）</p><p>上面的manager层编写业务的写法主要是在<strong>使用缓存</strong>时使用</p><p>一般在写业务逻辑的时候还是在service层下的<strong>Impl层</strong>比较常用，下面是该业务的常规写法</p><h5 id="mapper层"><a href="#mapper层" class="headerlink" title="mapper层"></a>mapper层</h5><p>先准备好需要的mapper接口</p><h6 id="HomeBookMapper"><a href="#HomeBookMapper" class="headerlink" title="HomeBookMapper"></a>HomeBookMapper</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HomeBookMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;HomeBook&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="BookInfoMapper"><a href="#BookInfoMapper" class="headerlink" title="BookInfoMapper"></a>BookInfoMapper</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookInfoMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;BookInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="service层-1"><a href="#service层-1" class="headerlink" title="service层"></a>service层</h5><p>然后在service层下定义好方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HomeService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;HomeBook&gt; &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;HomeBookRespDto&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="impl层"><a href="#impl层" class="headerlink" title="impl层"></a>impl层</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;HomeBookMapper, HomeBook&gt; <span class="keyword">implements</span> <span class="title class_">HomeService</span> &#123;</span><br><span class="line">    <span class="comment">//@Autowired可能会导致找不到Mapper的bean（常见错误），而使用@Resource则会按照名字来搜素，可以解决找不到Mapper的bean的问题</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeBookMapper homeBookMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookInfoMapper bookInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;HomeBookRespDto&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 从首页小说推荐表中查询出需要推荐的小说</span></span><br><span class="line">        QueryWrapper&lt;HomeBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// orderByAsc（实现递增排序）</span></span><br><span class="line">        <span class="comment">// orderByDesc（实现递减排序）</span></span><br><span class="line">        queryWrapper.orderByAsc(DatabaseConsts.CommonColumnEnum.SORT.getName());</span><br><span class="line">        <span class="comment">//selectlist:根据 entity 条件，查询全部记录</span></span><br><span class="line">        <span class="comment">//selectOne:根据 entity 条件，查询一条记录</span></span><br><span class="line">        List&lt;HomeBook&gt; homeBooks = homeBookMapper.selectList(queryWrapper);</span><br><span class="line"><span class="comment">//CollectionUtils.isEmpty(list): false</span></span><br><span class="line">        <span class="comment">//CollectionUtils.isNotEmpty(list): true</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//这段代码的功能是将一个名为homeBooks的集合中的HomeBook对象的bookId属性取出来，并将它们组成一个Long类型的List集合bookIds。</span></span><br><span class="line">        <span class="comment">//代码的执行过程如下：</span></span><br><span class="line"><span class="comment">//1、判断homeBooks集合是否为空，使用了CollectionUtils.isEmpty()方法来判断，该方法是Spring框架提供的一个工具类方法，用于判断集合是否为空。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、如果homeBooks集合不为空，则使用Java 8中的Stream流对集合进行处理，调用map()方法将HomeBook对象中的bookId属性取出来，然后使用toList()方法将结果转换为List集合。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、最终得到一个名为bookIds的List集合，其中包含了homeBooks集合中所有HomeBook对象的bookId属性值。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取推荐小说ID列表</span></span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(homeBooks)) &#123;</span><br><span class="line">            List&lt;Long&gt; bookIds = homeBooks.stream()</span><br><span class="line">                    .map(HomeBook::getBookId)</span><br><span class="line">                    .toList();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//这段代码的功能是根据给定的bookIds列表，从数据库中查询对应的BookInfo记录，并将查询结果存储在一个名为bookInfos的List集合中。</span></span><br><span class="line"><span class="comment">//代码的执行过程如下：</span></span><br><span class="line"><span class="comment">//1、创建一个QueryWrapper对象bookInfoQueryWrapper，该对象是MyBatis-Plus框架提供的一个查询条件构造器，可以通过该对象构建查询条件。</span></span><br><span class="line"><span class="comment">//2、调用QueryWrapper对象的in()方法，该方法用于构建一个in查询条件，查询的是数据库中名为ID的列，该列的值必须包含在bookIds列表中。</span></span><br><span class="line"><span class="comment">//3、创建一个名为bookInfos的List集合，用于存储查询结果。</span></span><br><span class="line"><span class="comment">//4、调用bookInfoMapper对象的selectList()方法，该方法用于执行查询操作，查询符合指定条件的BookInfo记录，并将查询结果存储在bookInfos集合中。</span></span><br><span class="line"><span class="comment">//5、最终得到一个名为bookInfos的List集合，其中包含了数据库中所有ID值在bookIds列表中的BookInfo记录。</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 根据小说ID列表查询相关的小说信息列表</span></span><br><span class="line">            QueryWrapper&lt;BookInfo&gt; bookInfoQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">            bookInfoQueryWrapper.in(DatabaseConsts.CommonColumnEnum.ID.getName(), bookIds);</span><br><span class="line">            List&lt;BookInfo&gt; bookInfos = bookInfoMapper.selectList(bookInfoQueryWrapper);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//这段代码的功能是将查询出来的BookInfo记录与给定的HomeBook集合进行关联，并将结果组成一个名为bookRespDto的List集合返回。</span></span><br><span class="line"><span class="comment">//代码的执行过程如下：</span></span><br><span class="line"><span class="comment">//1、判断查询结果bookInfos是否为空，如果为空，则直接返回一个空的List集合。</span></span><br><span class="line"><span class="comment">//2、如果bookInfos不为空，则将查询结果转换为一个Map集合bookInfoMap，以BookInfo记录的id作为key，BookInfo对象本身作为value，使用Java 8中的Stream流对查询结果进行处理，调用collect()方法和toMap()方法实现转换。</span></span><br><span class="line"><span class="comment">//3、使用Java 8中的Stream流和Lambda表达式对给定的HomeBook集合进行处理，调用map()方法将每个HomeBook对象映射为一个HomeBookRespDto对象，其中的属性值从关联的BookInfo对象中获取。</span></span><br><span class="line"><span class="comment">//4、使用Map集合bookInfoMap中的get()方法获取每个HomeBook对象关联的BookInfo对象，然后将获取到的属性值设置到HomeBookRespDto对象中，最终得到一个名为bookRespDto的List集合。</span></span><br><span class="line"><span class="comment">//5、返回名为bookRespDto的List集合，其中包含了与HomeBook集合关联的BookInfo记录的属性信息。</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 组装 HomeBookRespDto 列表数据并返回</span></span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(bookInfos)) &#123;</span><br><span class="line">                Map&lt;Long, BookInfo&gt; bookInfoMap = bookInfos.stream()</span><br><span class="line">                        .collect(Collectors.toMap(BookInfo::getId, Function.identity()));</span><br><span class="line">                <span class="keyword">return</span> homeBooks.stream().map(v -&gt; &#123;</span><br><span class="line">                    <span class="type">BookInfo</span> <span class="variable">bookInfo</span> <span class="operator">=</span> bookInfoMap.get(v.getBookId());</span><br><span class="line">                    <span class="type">HomeBookRespDto</span> <span class="variable">bookRespDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HomeBookRespDto</span>();</span><br><span class="line">                    bookRespDto.setType(v.getType());</span><br><span class="line">                    bookRespDto.setBookId(v.getBookId());</span><br><span class="line">                    bookRespDto.setBookName(bookInfo.getBookName());</span><br><span class="line">                    bookRespDto.setPicUrl(bookInfo.getPicUrl());</span><br><span class="line">                    bookRespDto.setAuthorName(bookInfo.getAuthorName());</span><br><span class="line">                    bookRespDto.setBookDesc(bookInfo.getBookDesc());</span><br><span class="line">                    <span class="keyword">return</span> bookRespDto;</span><br><span class="line">                &#125;).toList();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="衍生QueryWrapper的知识点"><a href="#衍生QueryWrapper的知识点" class="headerlink" title="衍生QueryWrapper的知识点"></a>衍生QueryWrapper的知识点</h6><p>orderByAsc：实现递增排序</p><p>orderByDesc：实现递减排序</p><h6 id="衍生BaseMapper接口CRUD的知识点"><a href="#衍生BaseMapper接口CRUD的知识点" class="headerlink" title="衍生BaseMapper接口CRUD的知识点"></a>衍生BaseMapper接口CRUD的知识点</h6><p>引入：extends<code> </code>BaseMapper<UserBean></p><p>selectlist:根据 entity 条件，查询全部记录<br>selectOne:根据 entity 条件，查询一条记录</p><h6 id="衍生Service接口CRUD"><a href="#衍生Service接口CRUD" class="headerlink" title="衍生Service接口CRUD"></a>衍生Service接口CRUD</h6><p>引入implements<code> </code>IService<T>（T：实体层）</p><h6 id="衍生的工具类"><a href="#衍生的工具类" class="headerlink" title="衍生的工具类"></a>衍生的工具类</h6><p>CollectionUtils.isEmpty(list): false</p><p>CollectionUtils.isNotEmpty(list): true</p><p>上面的!CollectionUtils.isEmpty(bookInfos)其实相当于第二种，也同时是第一种判断为flase后相反（！）为true</p><h6 id="衍生的final的作用"><a href="#衍生的final的作用" class="headerlink" title="衍生的final的作用"></a>衍生的final的作用</h6><p>在这里将 HomeBookMapper 声明为 final 主要是出于两个原因：<br>    1、线程安全：当我们将一个对象声明为 final 时，它的引用就不能再指向其他对象，也就是说这个对象是不可变的，这可以避免多线程访问时发生冲突。在Spring中，@Autowired 自动注入的属性默认是可变的，将其声明为 final 可以使其不可变，从而提高线程安全性。<br>    2、提高可读性：使用 final 关键字来声明变量，可以让人们更加明确地知道这个变量不会被修改，也可以让编译器进行更多的优化，提高代码的性能。此外，通过将类中的属性声明为 final，可以让读者更容易地看出这个属性是类的“特征”，不会在运行过程中被修改。<br>    总的来说，将 HomeBookMapper 声明为 final 可以提高代码的可读性和线程安全性。</p><h6 id="衍生的stream的知识点："><a href="#衍生的stream的知识点：" class="headerlink" title="衍生的stream的知识点："></a>衍生的stream的知识点：</h6><pre><code> .stream是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。 .stream.map(方法)：其中的方法获取了小说ID，而map是一种键值对存储结构，用于存储一组不重复的键和对应的值，例如此处的ID键和它所对应的值</code></pre><p>​.toList():将数组转化为List</p><h6 id="衍生的Lambda表达式的知识点："><a href="#衍生的Lambda表达式的知识点：" class="headerlink" title="衍生的Lambda表达式的知识点："></a>衍生的Lambda表达式的知识点：</h6><p>Lambda表达式：（方法参数） -&gt;{方法实现}<br>            （单个参数可以省略括号）</p><pre><code>  lambda遍历List集合          集合的遍历，采用lambda表达式会更简洁：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 8之前：</span></span><br><span class="line"><span class="type">List</span> <span class="variable">features</span> <span class="operator">=</span> Arrays.asList(<span class="string">&quot;Lambdas&quot;</span>, <span class="string">&quot;Default Method&quot;</span>, <span class="string">&quot;Stream API&quot;</span>, <span class="string">&quot;Date and Time API&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String feature : features) &#123;</span><br><span class="line">System.out.println(feature);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java 8之后：</span></span><br><span class="line"><span class="type">List</span> <span class="variable">features</span> <span class="operator">=</span> Arrays.asList(<span class="string">&quot;Lambdas&quot;</span>, <span class="string">&quot;Default Method&quot;</span>, <span class="string">&quot;Stream API&quot;</span>, <span class="string">&quot;Date and Time API&quot;</span>);</span><br><span class="line">features.forEach(n -&gt; System.out.println(n));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Java 8的方法引用更方便，方法引用由::双冒号操作符标示，</span></span><br><span class="line">features.forEach(System.out::println);</span><br><span class="line"><span class="comment">//方法引用是使用两个冒号::这个操作符号。</span></span><br></pre></td></tr></table></figure><h6 id="衍生的toMap-BookInfo-getId-Function-identity-解释："><a href="#衍生的toMap-BookInfo-getId-Function-identity-解释：" class="headerlink" title="衍生的toMap(BookInfo::getId, Function.identity())解释："></a>衍生的toMap(BookInfo::getId, Function.identity())解释：</h6><p>​            Function.identity() 是一个静态方法，它返回一个函数，这个函数接收一个参数并返回其自身。也就是说，它返回一个标识函数，将输入对象直接返回，不做任何处理。<br>​在这个例子中，Function.identity() 方法用作 toMap() 方法的第二个参数。toMap() 方法期望一个将键映射到值的函数，所以使用 Function.identity() 将对象自身作为键的映射值。因此，对于一个 BookInfo 对象 bookInfo，bookInfo.getId() 作为键，bookInfo 自身作为值。<br>​简而言之，这里使用 Function.identity() 是为了将 BookInfo 对象本身作为值，方便后续从 Map 中获取对象并使用其属性。</p><p>stream流（List<Long> bookIds &#x3D; homeBooks.stream()）\</p><p>在 Java8 之前，我们通常是通过 for 循环或者 Iterator 迭代来重新排序合并数据，又或者通过重新定义 Collections.sorts 的 Comparator 方法来实现，这两种方式对于大数据量系统来说，效率并不是很理想。Stream 的<strong>聚合操作</strong>与数据库 SQL 的聚合操作 sorted、filter、map 等类似。我们在应用层就可以高效地实现类似数据库 SQL 的 聚合操作了，而在数据操作方面，Stream 不仅可以通过串行的方式实现数据操作，还可以<strong>通过并行的方式处理大批量数据，提高数据 的处理效率</strong></p><h6 id="总结的方法："><a href="#总结的方法：" class="headerlink" title="总结的方法："></a>总结的方法：</h6><p>1、List类型的数据库查找方法</p><p>主要是return部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;BookInfoRespDto&gt; <span class="title function_">listHomeCategory</span><span class="params">()</span> &#123;</span><br><span class="line">        QueryWrapper&lt;BookInfo&gt;CategoryQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> bookInfoMapper.selectList(CategoryQueryWrapper).stream()</span><br><span class="line">                .map(v -&gt; BookInfoRespDto.builder()</span><br><span class="line">                        .id(v.getId())</span><br><span class="line">                        .categoryId(v.getCategoryId())</span><br><span class="line">                        .categoryName(v.getCategoryName())</span><br><span class="line">                        .bookDesc(v.getBookDesc())</span><br><span class="line">                        .bookName(v.getBookName())</span><br><span class="line">                        .build()).toList();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2、Dto类型的数据库查找方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BookChapterRespDto <span class="title function_">getChapter</span><span class="params">(Long chapterId)</span>&#123;</span><br><span class="line">        QueryWrapper&lt;BookChapter&gt;chapterQueryWrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        chapterQueryWrapper.eq(<span class="string">&quot;id&quot;</span>, chapterId);</span><br><span class="line">        <span class="type">BookChapter</span> <span class="variable">bookChapter</span> <span class="operator">=</span> bookChapterMapper.selectOne(chapterQueryWrapper);</span><br><span class="line">        <span class="keyword">return</span> BookChapterRespDto.builder()</span><br><span class="line">            <span class="comment">//.BookChapterRespDto的属性(bookChapter的get方法)，这样就把筛选过的数据存入Dto中</span></span><br><span class="line">                .id(chapterId)</span><br><span class="line">                .bookId(bookChapter.getBookId())</span><br><span class="line">                .chapterNum(bookChapter.getChapterNum())</span><br><span class="line">                .chapterName(bookChapter.getChapterName())</span><br><span class="line">                .chapterWordCount(bookChapter.getWordCount())</span><br><span class="line">                .chapterUpdateTime(bookChapter.getUpdateTime())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(ApiRouterConsts.API_FRONT_HOME_URL_PREFIX)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//final的作用：同impl层</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeBookMapper homeBookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookInfoMapper bookInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeService homeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;books&quot;)</span></span><br><span class="line">    <span class="comment">//因为前端axios作检验的时候要看code，所以这里必须要用通用返回类RestResp&lt;T&gt;</span></span><br><span class="line">    <span class="keyword">public</span> RestResp&lt;List&lt;HomeBookRespDto&gt;&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//这里使用了通用返回类RestResp的方法RestResp&lt;T&gt;（T data）</span></span><br><span class="line">        <span class="keyword">return</span> RestResp.ok(homeService.listHomeBooks());</span><br><span class="line">        <span class="comment">//直接这么写会报错，刚好点击报错，就可以直接帮你在service层写出这个方法，算小技巧吧，同样，直接这么在service层创建也会报错，同样的方式，会帮你在serviceIpl层创建好方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="core层编写"><a href="#core层编写" class="headerlink" title="core层编写"></a>core层编写</h3><h4 id="config层"><a href="#config层" class="headerlink" title="config层"></a>config层</h4><h5 id="MybatisPlusConfig"><a href="#MybatisPlusConfig" class="headerlink" title="MybatisPlusConfig"></a><strong>MybatisPlusConfig</strong></h5><p>卡了我两个下午QAQ</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 兼容 mybatis-plus 3.5.1</span></span><br><span class="line"><span class="comment"> * mybatis-plus 的 MybatisSqlSessionFactoryBean 中使用到了这个异常</span></span><br><span class="line"><span class="comment"> * Spring 6 开始移除了该异常</span></span><br><span class="line"><span class="comment"> *mybatis puls的坑：使用mybatis-plus时不能使用自带的SqlSessionFactory，要使用</span></span><br><span class="line"><span class="comment"> *MybatisSqlSessionFactory，在配置类中加入如下配置（springboot）</span></span><br><span class="line"><span class="comment"> *啊啊啊啊啊啊啊卡我两个下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(&quot;db1SqlSessionFactory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">db1SqlSessionFactory</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使用 mybatis plus 配置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">MybatisSqlSessionFactoryBean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisSqlSessionFactoryBean</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;dataSourceLyz&quot;</span>+dataSource.toString());</span><br><span class="line">        b1.setDataSource(dataSource);</span><br><span class="line">        b1.setMapperLocations(<span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>().getResources(<span class="string">&quot;classpath:mapper/*.xml&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> b1.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CorsProperties"><a href="#CorsProperties" class="headerlink" title="CorsProperties"></a>CorsProperties</h5><p>解决跨域问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;novel.cors&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">CorsProperties</span><span class="params">(List&lt;String&gt; allowOrigins)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CorsConfig"><a href="#CorsConfig" class="headerlink" title="CorsConfig"></a>CorsConfig</h5><p>解决跨域问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(CorsProperties.class)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CorsProperties corsProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">// 允许的域,不要写*，否则cookie就无法使用了</span></span><br><span class="line">        <span class="keyword">for</span> (String allowOrigin : corsProperties.allowOrigins()) &#123;</span><br><span class="line">            config.addAllowedOrigin(allowOrigin);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 允许的头信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 允许的请求方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 是否允许携带Cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">configurationSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        <span class="comment">// 添加映射路径，拦截一切请求</span></span><br><span class="line">        configurationSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(configurationSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="common层"><a href="#common层" class="headerlink" title="common层"></a>common层</h3><h4 id="comstant层（通用常量层）"><a href="#comstant层（通用常量层）" class="headerlink" title="comstant层（通用常量层）"></a>comstant层（通用常量层）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="comment">//提供类的全参构造，减少了@Autowired的书写</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="comment">//enum:通常用于常量类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ErrorCodeEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正确执行后的返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    OK(<span class="string">&quot;00000&quot;</span>, <span class="string">&quot;一切 ok&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一级宏观错误码，用户端错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_ERROR(<span class="string">&quot;A0001&quot;</span>, <span class="string">&quot;用户端错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二级宏观错误码，用户注册错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REGISTER_ERROR(<span class="string">&quot;A0100&quot;</span>, <span class="string">&quot;用户注册错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户未同意隐私协议</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_NO_AGREE_PRIVATE_ERROR(<span class="string">&quot;A0101&quot;</span>, <span class="string">&quot;用户未同意隐私协议&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册国家或地区受限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REGISTER_AREA_LIMIT_ERROR(<span class="string">&quot;A0102&quot;</span>, <span class="string">&quot;注册国家或地区受限&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户验证码错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_VERIFY_CODE_ERROR(<span class="string">&quot;A0240&quot;</span>, <span class="string">&quot;用户验证码错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名已存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_NAME_EXIST(<span class="string">&quot;A0111&quot;</span>, <span class="string">&quot;用户名已存在&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户账号不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_ACCOUNT_NOT_EXIST(<span class="string">&quot;A0201&quot;</span>, <span class="string">&quot;用户账号不存在&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户密码错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_PASSWORD_ERROR(<span class="string">&quot;A0210&quot;</span>, <span class="string">&quot;用户密码错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二级宏观错误码，用户请求参数错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REQUEST_PARAM_ERROR(<span class="string">&quot;A0400&quot;</span>, <span class="string">&quot;用户请求参数错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录已过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_LOGIN_EXPIRED(<span class="string">&quot;A0230&quot;</span>, <span class="string">&quot;用户登录已过期&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问未授权</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_UN_AUTH(<span class="string">&quot;A0301&quot;</span>, <span class="string">&quot;访问未授权&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户请求服务异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REQ_EXCEPTION(<span class="string">&quot;A0500&quot;</span>, <span class="string">&quot;用户请求服务异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求超出限制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REQ_MANY(<span class="string">&quot;A0501&quot;</span>, <span class="string">&quot;请求超出限制&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户评论异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_COMMENT(<span class="string">&quot;A2000&quot;</span>, <span class="string">&quot;用户评论异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户评论异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_COMMENTED(<span class="string">&quot;A2001&quot;</span>, <span class="string">&quot;用户已发表评论&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作家发布异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AUTHOR_PUBLISH(<span class="string">&quot;A3000&quot;</span>, <span class="string">&quot;作家发布异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小说名已存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AUTHOR_BOOK_NAME_EXIST(<span class="string">&quot;A3001&quot;</span>, <span class="string">&quot;小说名已存在&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户上传文件异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_UPLOAD_FILE_ERROR(<span class="string">&quot;A0700&quot;</span>, <span class="string">&quot;用户上传文件异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户上传文件类型不匹配</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_UPLOAD_FILE_TYPE_NOT_MATCH(<span class="string">&quot;A0701&quot;</span>, <span class="string">&quot;用户上传文件类型不匹配&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一级宏观错误码，系统执行出错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SYSTEM_ERROR(<span class="string">&quot;B0001&quot;</span>, <span class="string">&quot;系统执行出错&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二级宏观错误码，系统执行超时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SYSTEM_TIMEOUT_ERROR(<span class="string">&quot;B0100&quot;</span>, <span class="string">&quot;系统执行超时&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一级宏观错误码，调用第三方服务出错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    THIRD_SERVICE_ERROR(<span class="string">&quot;C0001&quot;</span>, <span class="string">&quot;调用第三方服务出错&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一级宏观错误码，中间件服务出错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MIDDLEWARE_SERVICE_ERROR(<span class="string">&quot;C0100&quot;</span>, <span class="string">&quot;中间件服务出错&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中文描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="resp层"><a href="#resp层" class="headerlink" title="resp层"></a>resp层</h4><p>Http Rest 响应工具及数据格式封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestResp</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;错误码，00000-没有错误&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;响应消息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;响应数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = ErrorCodeEnum.OK.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = ErrorCodeEnum.OK.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">(ErrorCodeEnum errorCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = errorCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = errorCode.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理成功,无数据返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理成功，有数据返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RestResp&lt;T&gt; <span class="title function_">ok</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">fail</span><span class="params">(ErrorCodeEnum errorCode)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(errorCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(ErrorCodeEnum.SYSTEM_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(<span class="built_in">this</span>.code, ErrorCodeEnum.OK.getCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="req层"><a href="#req层" class="headerlink" title="req层"></a>req层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestResp</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ErrorCodeEnum为常量层下的类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = ErrorCodeEnum.OK.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = ErrorCodeEnum.OK.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">(ErrorCodeEnum errorCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = errorCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = errorCode.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理成功,无数据返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理成功，有数据返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RestResp&lt;T&gt; <span class="title function_">ok</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">fail</span><span class="params">(ErrorCodeEnum errorCode)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(errorCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(ErrorCodeEnum.SYSTEM_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(<span class="built_in">this</span>.code, ErrorCodeEnum.OK.getCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//mapper包扫描</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.tec.vuepractice.dao.mapper&quot;)</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VuePracticeApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(VuePracticeApplication.class, args);</span><br><span class="line">        log.info(<span class="string">&quot;项目启动成功！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/posts/f8e09374.html"/>
      <url>/posts/f8e09374.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="Vuecil脚手架安装"><a href="#Vuecil脚手架安装" class="headerlink" title="Vuecil脚手架安装"></a>Vuecil脚手架安装</h3><p>依次安装Node.js、Vue、Vuecli</p><p>安装脚手架</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install -g <span class="variable">@vue</span>/cli</span><br></pre></td></tr></table></figure><p>检查版本</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vue</span> --version</span><br></pre></td></tr></table></figure><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vue</span> create hello-world</span><br></pre></td></tr></table></figure><h3 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vue</span> ui</span><br></pre></td></tr></table></figure><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/image-20221216142020026.png" alt="image-20221216142020026"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── node_modules </span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico: 页签图标</span><br><span class="line">│   └── index.html: 主页面</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets: 存放静态资源</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   │── component: 存放组件</span><br><span class="line">│   │   └── HelloWorld.vue</span><br><span class="line">│   │── App.vue: 汇总所有组件</span><br><span class="line">│   │── main.js: 入口文件</span><br><span class="line">├── .gitignore: git版本管制忽略的配置</span><br><span class="line">├── babel.config.js: babel的配置文件</span><br><span class="line">├── package.json: 应用包配置文件 </span><br><span class="line">├── README.md: 应用描述文件</span><br><span class="line">├── package-lock.json：包版本控制文件</span><br></pre></td></tr></table></figure><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>组件是.vue的单文件组件，实现代码复用，以及理顺css以及js之间的关系</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>Vue为只有一个index.html作为单页面，会用路由实现多页面的跳转，路由则将路径和页面进行映射</p><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(53).png" alt="屏幕截图(53)"></p><p>路由：router包下面写index.js文件并附上path和name(<strong>注意！！！path: ‘&#x2F;‘也就代表了网页的第一个页面是什么</strong>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomeView</span> <span class="keyword">from</span> <span class="string">&#x27;../views/HomeView.vue&#x27;</span><span class="comment">/* 1、引入AboutView.vue，一般不使用这种 */</span> </span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeView</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">    <span class="comment">// route level code-splitting</span></span><br><span class="line">    <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">    <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="comment">/* 2、引入AboutView.vue，一般建议使用这种 */</span> <span class="string">&#x27;../views/AboutView.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>路由在组件中的使用：<router-link to></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;router-link :to=&quot;&#123; name: &#x27;home&#x27; &#125;&quot;&gt;首页&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">  &lt;router-link :to=&quot;&#123; name: &#x27;bookclass&#x27; &#125;&quot;&gt; 全部作品 &lt;/router-link&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;router-link :to=&quot;&#123; name: &#x27;bookRank&#x27; &#125;&quot;&gt;排行榜&lt;/router-link&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>当你点击 <code>&lt;router-link&gt;</code> 时， <code>router.push</code> 方法会在内部调用，所以说，点击<code>&lt;router-link :to=&quot;...&quot;&gt;</code> 等同于调用 <code>router.push(...)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 字符串</span><br><span class="line">router.push(&#x27;home&#x27;)</span><br><span class="line"> </span><br><span class="line">// 对象</span><br><span class="line">this.$router.push(&#123;path: &#x27;/login?url=&#x27; + this.$route.path&#125;);</span><br><span class="line"> </span><br><span class="line">// 命名的路由</span><br><span class="line">router.push(&#123; name: &#x27;user&#x27;, params: &#123; userId: 123 &#125;&#125;)</span><br></pre></td></tr></table></figure><p>路由在父组件App.vue的<router-view></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default  &#123;</span><br><span class="line">  name:  &#x27;App&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在views包下写主要页面，再在如Home.vue里引入components(当然组件自己也可以引用自己)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">    &lt;Top /&gt;</span><br><span class="line">    &lt;Navbar /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>引用组件时要记得注册组件,并引入文件位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import Navbar from &quot;@/components/common/Navbar&quot;;</span><br><span class="line">import Top from &quot;@/components/common/Top&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Header&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Navbar,</span><br><span class="line">    Top,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Css的引入"><a href="#Css的引入" class="headerlink" title="Css的引入"></a>Css的引入</h3><p>在assets包（静态资源管理包）下建立css包并命名global.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后在main.js中引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/assets/css/global.css&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>Axios 是一个基于 <em><a href="https://javascript.info/promise-basics">promise</a></em> 网络请求库,这不是一种新技术，本质上还是对原生XMLHttpRequest的封装,用来实现Ajax(异步网络请求。Ajax能够让页面无刷新的请求数据，由来是浏览器页面在向服务器请求数据时，因为返回的是整个页面的数据，页面都会强制刷新一下，这对于用户来讲并不是很友好。并且我们只是需要修改页面的部分数据，但是从服务器端发送的却是整个页面的数据，十分消耗网络资源。而我们只是需要修改页面的部分数据，也希望不刷新页面，因此异步网络请求就应运而生。)</p><p>安装</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install axios</span><br></pre></td></tr></table></figure><p>最基础需要写比较长的配置来使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">&lt;!-- 方法一 --&gt;   </span><br><span class="line">axios(&#123;</span><br><span class="line">            method:&quot;get&quot;,</span><br><span class="line">            url:&quot;https://www.baidu.com&quot;，</span><br><span class="line">            data:user_id=7</span><br><span class="line">        &#125;).then(res =&gt; &#123;</span><br><span class="line">            console.log(res.data);</span><br><span class="line">        &#125;)</span><br><span class="line">&lt;!-- 方法二 --&gt; </span><br><span class="line">axios.get(&quot;https://www.baidu.com&quot;).then(res =&gt; &#123;</span><br><span class="line">            this.obj= res.data[0];</span><br><span class="line">            console.log(res.data);</span><br><span class="line">        &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/axios-1.png" alt="axios-1"></p><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/axios-2.png" alt="axios-2"></p><p>也可以全局注册后使用（这里不展开）</p><p>但是一般在请求数量增多时会需要来进行封装axios来简化开发</p><p>在utils下创建request.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken, removeToken, removeNickName, setToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API_URL</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">10000</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">withCredentials</span> = <span class="literal">true</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>[<span class="string">&#x27;X-Requested-With&#x27;</span>] = <span class="string">&#x27;XMLHttpRequest&#x27;</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="title function_">getToken</span>()</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> res.<span class="property">data</span> !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;服务端异常！&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> != <span class="string">&quot;00000&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">message</span>) &#123;</span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">message</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 登录已过期</span></span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> == <span class="string">&#x27;A0230&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 移除 token </span></span><br><span class="line">            <span class="title function_">removeToken</span>();</span><br><span class="line">            <span class="title function_">removeNickName</span>();</span><br><span class="line">            router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;网络异常！&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure><p>在main.js中注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;./util/axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(store)</span><br><span class="line">   .<span class="title function_">use</span>(router)</span><br><span class="line">   .<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$axios</span> = axios;</span><br></pre></td></tr></table></figure><p>封装api在api包下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;../utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">listHomeBooks</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">get</span>(<span class="string">&#x27;/front/home/books&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//动态传入用$&#123;bookId&#125;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getBookById</span>(<span class="params">bookId</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">get</span>(<span class="string">`/front/book/<span class="subst">$&#123;bookId&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在vue的生命周期函数里调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">&lt;!--导入--&gt;    </span><br><span class="line">import &#123; reactive, toRefs, onMounted &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useRouter, useRoute &#125; from &quot;vue-router&quot;;</span><br><span class="line">import &#123; listHomeBooks &#125; from &quot;@/api/home&quot;;</span><br><span class="line">&lt;!--注册组件--&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;home&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Header,</span><br><span class="line">    LatestNews,</span><br><span class="line">    FriendLink,</span><br><span class="line">    BookVisitRank,</span><br><span class="line">    BookNewestRank,</span><br><span class="line">    BookUpdateRank,</span><br><span class="line">    Footer,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">&lt;!--route是一个跳转的路由对象，每一个路由都会有一个route对象，是一个局部的对象，可以获取对应的name,path,params,query等：--&gt;</span><br><span class="line">    const route = useRoute();</span><br><span class="line">&lt;!--router是VueRouter的一个对象，通过Vue.use(VueRouter)和VueRouter构造函数得到一个router的实例对象，这个对象中是一个全局的对象，包含了所有的路由包含了许多关键的对象和属性。例如history对象$router.push(&#123;path:’/path’&#125;); 本质是向history栈中添加一个路由，在我们看来是 切换路由，但本质是在添加一个history记录--&gt;</span><br><span class="line">    const router = useRouter();</span><br><span class="line">&lt;!--reactive（）函数接收一个普通对象，返回一个响应式的数据对象。访问： state.参数名--&gt;</span><br><span class="line">    const state = reactive(&#123;</span><br><span class="line">      // 轮播图</span><br><span class="line">      sliderContent: [],</span><br><span class="line">      // 顶部栏</span><br><span class="line">      topBooks1: [],</span><br><span class="line">      //本周强推</span><br><span class="line">      weekcommend: [],</span><br><span class="line">      // 热门推荐</span><br><span class="line">      hotRecommend: [],</span><br><span class="line">      // 精品推荐</span><br><span class="line">      goodRecommend: [],</span><br><span class="line">      imgBaseUrl: process.env.VUE_APP_BASE_IMG_URL,</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;!--生命周期函数--&gt;</span><br><span class="line">    onMounted(async () =&gt; &#123;</span><br><span class="line">      const loadingInstance = ElLoading.service(&#123;</span><br><span class="line">        target: &quot;#topBooks2&quot;,</span><br><span class="line">        text: &quot;加载中。。。&quot;,</span><br><span class="line">      &#125;);</span><br><span class="line">&lt;!--等待listHomeBooks()方法传来数据给data--&gt;</span><br><span class="line">      const &#123; data &#125; = await listHomeBooks();</span><br><span class="line"></span><br><span class="line">&lt;!--可能book和v-for的item相似，属于别名，这段的意思就是从--&gt;</span><br><span class="line">      await data.forEach((book) =&gt; &#123;</span><br><span class="line">        if (book.type == 0) &#123;</span><br><span class="line">          // 轮播图</span><br><span class="line">          state.sliderContent[state.sliderContent.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 1) &#123;</span><br><span class="line">          // 顶部栏</span><br><span class="line">          state.topBooks1[state.topBooks1.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 2) &#123;</span><br><span class="line">          //本周强推</span><br><span class="line">          state.weekcommend[state.weekcommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 3) &#123;</span><br><span class="line">          //热门推荐</span><br><span class="line">          state.hotRecommend[state.hotRecommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 4) &#123;</span><br><span class="line">          //精品推荐</span><br><span class="line">          state.goodRecommend[state.goodRecommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">        </span><br><span class="line">&lt;!--push就是在浏览器的历史记录中追加一个新的记录，你可以通过window.history看到这个记录。而replace则是将当前的路由记录替换掉，替换后你如果回退，会发现上一个路由地址已经消失了。此处是点击链接后触发的方法，将跳转到小说的详情页--&gt;</span><br><span class="line">    const bookDetail = (bookId) =&gt; &#123;</span><br><span class="line">      router.push(&#123; path: `/book/$&#123;bookId&#125;` &#125;);</span><br><span class="line">    &#125;；</span><br><span class="line">&lt;!--toRefs将一个响应式对象，转换为普通对象，并且将其中的属性转换为 Ref 对象，与reactive搭配使用，reactive将数据变成响应式数据，当数据发生变化时state也会自动更新--&gt;        </span><br><span class="line">    return &#123;</span><br><span class="line">      ...toRefs(state),</span><br><span class="line">      bookDetail,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue3与Vue2的不同"><a href="#Vue3与Vue2的不同" class="headerlink" title="Vue3与Vue2的不同"></a>Vue3与Vue2的不同</h2><h3 id="Vite脚手架的安装"><a href="#Vite脚手架的安装" class="headerlink" title="Vite脚手架的安装"></a>Vite脚手架的安装</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line"><span class="attribute">npm</span> init vite-app vue3_test-vite</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line">cd vue3_test-vite</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="分析文件目录"><a href="#分析文件目录" class="headerlink" title="分析文件目录"></a>分析文件目录</h3><h4 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h4><p>Vue2项目的main.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  render: h =&gt; h(App),</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><p>我们再来看看Vue3项目中的main.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">createApp(App).mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><p>分析一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 引入的不再是Vue构造函数了，引入的是一个名为createApp的工厂函数</span><br><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">// 创建应用实例对象——app(类似于之前Vue2中的vm，但app比vm更“轻”)</span><br><span class="line">const app = createApp(App)</span><br><span class="line">console.log(app)</span><br><span class="line">// 挂载</span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><h4 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h4><p>我们再来看看组件</p><p>在<code>template</code>标签里可以没有根标签了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- Vue3组件中的模板结构可以没有根标签 --&gt;</span><br><span class="line">&lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot;&gt;</span><br><span class="line">&lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="setup函数"><a href="#setup函数" class="headerlink" title="setup函数"></a>setup函数</h3><p>代替了Vue2的data（）以及method</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="import-ref-from-‘vue’"><a href="#import-ref-from-‘vue’" class="headerlink" title="import { ref } from ‘vue’"></a>import { ref } from ‘vue’</h3><p><strong>一、ref函数的引入</strong></p><p>　　import { ref } from ‘vue’</p><p><strong>二、什么是 ref</strong></p><p>​1、ref 和 reactive 一样都是实现响应式数据的方法</p><p>​2、由于 reactive 必须传递一个对象，所以导致我们再企业开发中，如果我们只想让某个变量实现响应式的时候非常麻烦，所以 Vue3 就提供了 ref 方法，实现对简单值的监听</p><p><strong>三、ref 的本质</strong></p><p>​<strong>const input &#x3D; ref(‘’)</strong></p><p>　　ref 底层的本质还是 reactive 系统会自动根据我们给 ref 传入的值将他转换成 ref(xx) —— reactive({value: xx})</p><p><strong>四、ref 注意点</strong></p><p>　1、在 VUE 的模板中使用 ref 的值不需要通过 value 获取 （Vue 会通过自动给 ref 的值加上 .value）</p><p>　2、在 js 中使用 ref 的值必须使用 .value 获取</p><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p><strong>在v-for中使用字符串</strong></p><p>string：data中的源数据字符串，</p><p>str：data数据string字符串的每一个，</p><p>index：string字符串索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 这里表示被vue控制的区域 --&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;(str, index) in string&quot;&gt;</span><br><span class="line">            &#123;&#123; index &#125;&#125;---&#123;&#123; str &#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#app&#x27;, // 控制id为app的元素</span><br><span class="line">        data: &#123;</span><br><span class="line">            // 存放所需要的数据</span><br><span class="line">            string: &#x27;abcdefgh&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/v-for.png"></p><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;sliderContent&quot;&gt;</span><br><span class="line">          &lt;dl class=&quot;scBigImg&quot; id=&quot;carouseBig&quot;&gt;</span><br><span class="line">            &lt;dd v-for=&quot;(item, index) in sliderContent&quot; :key=&quot;index&quot; :class=&quot;&#123; on: index == 0 &#125;&quot;&gt;</span><br><span class="line">                &lt;!-- 点击触发bookDetail函数，传入sliderContent.bookid,并在最后使用push来跳转到小说的详情页 --&gt;</span><br><span class="line">              &lt;a href=&quot;javascript:void(0)&quot; @click=&quot;bookDetail(item.bookId)&quot;&gt;</span><br><span class="line">                &lt;img :src=&quot;`$&#123;imgBaseUrl&#125;` + `$&#123;item.picUrl&#125;`&quot; :alt=&quot;item.bookName&quot;</span><br><span class="line">                  onerror=&quot;this.src=&#x27;default.gif&#x27;;this.onerror=null&quot; /&gt;</span><br><span class="line">              &lt;/a&gt;</span><br><span class="line">            &lt;/dd&gt;</span><br><span class="line">          &lt;/dl&gt;</span><br><span class="line">    &lt;/div&gt;    </span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>其中</p><p>sliderContent：data中的源数据数组（会从数据库中获得），</p><p>item：data数据list数组的别名，</p><p>index：list数组索引,即为数据数字的多少</p><h3 id="动态传入数据："><a href="#动态传入数据：" class="headerlink" title="动态传入数据："></a>动态传入数据：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">//下面为导包的过程，主要组件，和api，还有vue自身的组件要引用</span><br><span class="line">import &#123; reactive, toRefs, onMounted &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useRouter, useRoute &#125; from &quot;vue-router&quot;;</span><br><span class="line">import Header from &#x27;@/components/Header&#x27;;</span><br><span class="line">import Footer from &#x27;@/components/Footer&#x27;;</span><br><span class="line">import &#123; listHomeBooks, listHomeCategory &#125; from &quot;@/api/home&quot;;</span><br><span class="line">import &#123; getBookById, &#125; from &quot;@/api/book&quot;;</span><br><span class="line">import &#123; SetUp &#125; from &#x27;@element-plus/icons-vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">//name</span><br><span class="line">  name: &quot;home&quot;,</span><br><span class="line">//注册的组件</span><br><span class="line">  components: &#123;</span><br><span class="line">    Header,</span><br><span class="line">    Footer,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  setup() &#123;</span><br><span class="line">    const route = useRoute();</span><br><span class="line">    const router = useRouter();</span><br><span class="line">    const state = reactive(&#123;</span><br><span class="line">      // 热门推荐</span><br><span class="line">      hotRecommend: [],</span><br><span class="line">      // 精品推荐</span><br><span class="line">      goodRecommend: [],</span><br><span class="line">      // 分类推荐</span><br><span class="line">      catagorycommend: [],</span><br><span class="line">      imgBaseUrl: process.env.VUE_APP_BASE_IMG_URL,</span><br><span class="line">    &#125;);</span><br><span class="line">    onMounted(async () =&gt; &#123;</span><br><span class="line">      const &#123; data &#125; = await listHomeBooks();</span><br><span class="line">      await data.forEach((book) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        if (book.type == 3) &#123;</span><br><span class="line">          //热门推荐</span><br><span class="line">          state.hotRecommend[state.hotRecommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 4) &#123;</span><br><span class="line">          //精品推荐</span><br><span class="line">          state.goodRecommend[state.goodRecommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      dataCategory();</span><br><span class="line">    &#125;);  </span><br><span class="line">    const bookDetail = (bookId) =&gt; &#123;</span><br><span class="line">      router.push(&#123; path: `/book/$&#123;bookId&#125;` &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    //有参数的写法</span><br><span class="line">    const loadBook = async (bookId) =&gt; &#123;</span><br><span class="line">          const &#123; data &#125; = await getBookById(bookId);</span><br><span class="line">          state.book = data;</span><br><span class="line">          document</span><br><span class="line">              .getElementById(&quot;bookCover&quot;)</span><br><span class="line">              .setAttribute(&quot;onerror&quot;, &quot;this.src=&#x27;default.gif&#x27;;this.onerror=null&quot;);</span><br><span class="line">      &#125;;</span><br><span class="line">    //无参数的写法</span><br><span class="line">    const dataCategory = async () =&gt; &#123;</span><br><span class="line">      const &#123; data &#125; = await listHomeCategory();</span><br><span class="line">      await data.forEach((book) =&gt; &#123;</span><br><span class="line">        if (book.categoryName == &quot;历史军事&quot;) &#123;</span><br><span class="line">          //历史推荐</span><br><span class="line">          state.catagorycommend[state.catagorycommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      ...toRefs(state),</span><br><span class="line">      bookDetail,</span><br><span class="line">      dataCategory,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">//函数名需要先在onMounted里加载函数名（），最后还需要通过return返回</span><br><span class="line">const 函数名 = async () =&gt; &#123;</span><br><span class="line">      //api会返回数据给data，需要注意提前导包，是否需要传入id，</span><br><span class="line">      const &#123; data &#125; = await api;</span><br><span class="line">      //book为形参名</span><br><span class="line">      await data.forEach((book) =&gt; &#123;</span><br><span class="line">        if (book.categoryName == &quot;历史军事&quot;) &#123;</span><br><span class="line">          //catagorycommend为可响应数据，需要提前在reactive里写入，同时它也是在页面中&#123;&#123;&#125;&#125;的部分</span><br><span class="line">          state.catagorycommend[state.catagorycommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="route-params-categoryId的用法"><a href="#route-params-categoryId的用法" class="headerlink" title="route.params.categoryId的用法"></a>route.params.categoryId的用法</h3><p>route.params.url参数</p><p>url参数来自于:categoryId(要求与该变量完全一致，卡了半小时QAQ)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/:categoryId&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;bookcategory&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/BookCategory&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>正式使用：</p><p>在onMounted生命周期函数里，就用变量来接，之后要记得放进带参数的变量里，还是要求id参数一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive, toRefs, onMounted &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useRouter, useRoute &#125; from &quot;vue-router&quot;;</span><br><span class="line">import &#123; listHomeCategoryId &#125; from &quot;@/api/home&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;home&quot;,</span><br><span class="line">    setup() &#123;</span><br><span class="line">        const route = useRoute();</span><br><span class="line">        const router = useRouter();</span><br><span class="line">        const state = reactive(&#123;</span><br><span class="line">            // 分类推荐</span><br><span class="line">            catagorycommendId: [],</span><br><span class="line">        &#125;);</span><br><span class="line">        onMounted(async () =&gt; &#123;</span><br><span class="line">            const categoryId = route.params.categoryId-2;</span><br><span class="line">            dataCategoryId(categoryId);</span><br><span class="line">        &#125;);</span><br><span class="line">        const dataCategoryId = async (categoryId) =&gt; &#123;</span><br><span class="line">            const &#123; data &#125; = await listHomeCategoryId(categoryId);</span><br><span class="line">            await data.forEach((book) =&gt; &#123;</span><br><span class="line">                &#123;</span><br><span class="line">                    //历史推荐</span><br><span class="line">                    state.catagorycommendId[state.catagorycommendId.length] = book;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        return &#123;</span><br><span class="line">            ...toRefs(state),</span><br><span class="line">            dataCategoryId,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/posts/ee69e452.html"/>
      <url>/posts/ee69e452.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h2><p>开启 Flexbox 布局：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: flex;</span><br></pre></td></tr></table></figure><p>主轴（水平轴）对齐方式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">justify-content</span>: flex-start;<span class="comment">/*默认*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: center;<span class="comment">/*居中对齐*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: space-between;<span class="comment">/*两端对齐*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: flex-end <span class="comment">/*靠右对齐*/</span></span><br></pre></td></tr></table></figure><p>交叉轴（竖轴）对称方式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-items</span>: stretch; <span class="comment">/*默认,自动把子元素拉伸成容器的高度*/</span></span><br><span class="line"><span class="attribute">align-items</span>: flex-start; <span class="comment">/*靠上对齐，在交叉轴开始的最上方，可以看到子元素不再占满容器高度：*/</span></span><br><span class="line"><span class="attribute">align-items</span>: center; <span class="comment">/*居中对齐*/</span></span><br><span class="line"><span class="attribute">align-items</span>: flex-end; <span class="comment">/*靠下对齐：*/</span></span><br></pre></td></tr></table></figure><p>空间占比：</p><p>子元素可以通过设置<code>flex</code>属性来调整空间的占比，例如让 <code>flex2</code> 在水平方向上占据其他子元素的 2 倍大小，可以设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex1</span>,</span><br><span class="line"><span class="selector-class">.flex3</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex2</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收缩(当它们的宽度超过 flex 容器之后，该如何进行收缩)：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*flex-grow*/</span></span><br><span class="line"><span class="selector-class">.flex2</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;<span class="comment">/*其它的元素保持默认的宽度（即内容的宽度，flex-basis 为 auto)，那么 .flex2 就会自动增长并占据整个剩余空间*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*flex-shrink*/</span></span><br><span class="line"><span class="selector-class">.flex1</span>,</span><br><span class="line"><span class="selector-class">.flex3</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex2</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">2</span>;</span><br><span class="line">&#125;<span class="comment">/*通过 flex-shrink 来设置一个数值，数值越大，收缩程度也越大，比如flex-shrink: 2的元素会比flex-shrink:1收缩的值大 2 倍：*/</span></span><br></pre></td></tr></table></figure><p>flex属性:</p><p>说完<code>flex-grow</code>、<code>flex-shrink</code> 和 <code>flex-basis</code> 之后，再来看一下这个 <code>flex</code> 属性，它其实是前边三个属性的缩写，默认值是 <code>0 1 auto</code>，即不增长，但收缩，收缩比例为 1，flex-basis 为 auto，即取自用户定义的宽度或内容的宽度。</p><p>换行：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-wrap</span>: nowrap; <span class="comment">/*默认，不换行*/</span></span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap; <span class="comment">/*来让元素进行折行排列，使得每行的元素都不超过容器的宽度*/</span></span><br></pre></td></tr></table></figure><p>开启换行后，控制各行布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-content</span>: center; <span class="comment">/*居中对齐*/</span></span><br><span class="line"><span class="attribute">align-content</span>: space-between; <span class="comment">/*两端对齐*/</span></span><br></pre></td></tr></table></figure><h2 id="html基础"><a href="#html基础" class="headerlink" title="html基础"></a>html基础</h2><h3 id="ol、ul、li"><a href="#ol、ul、li" class="headerlink" title="ol、ul、li"></a>ol、ul、li</h3><p>li标签（全称为list item）是HTML语言中的一个元素标签。属于列表标签。以 li 开始 &#x2F;li 结束，li 标签可用在<strong>有序</strong>列表 (ol) 和<strong>无序</strong>列表 (ul) 中。</p><p>li标签则用的范围<strong>比较少</strong>，通常用在<strong>导航栏、列表栏、图片</strong>显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>有序列表：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>打开冰箱门<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>把大象放进去<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>关上冰箱门<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>无序列表：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>雪碧<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>可乐<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>凉茶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>去除无需列表前的原点</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dl、dt、dd"><a href="#dl、dt、dd" class="headerlink" title="dl、dt、dd"></a>dl、dt、dd</h3><p>只有当你<strong>需要对列表项进行解释</strong>的时候, 你才需要 使用 dl, 否则就没有必要使用dl, 或者说使用dl就不是那么 恰当了，主要是html要求最好见名知意.</p><p>dt（define list title）是用于生成定义列表中各列表项的标题，重复使用可以定义多个列表项的标题。</p><ul><li>dl —— define list——定义列表</li><li>dt—— define list title —— 用于生成定义列表中各列表项的标题，重复使用可以定义多个列表项的标题。用来创建列表中的上层项目。</li><li>dd —— define list define —— 用于生成定义列表各列表项的说明文字段，重复使用可以定义多个说明文字段。dd是对应dt的简短说明或解释。用来创建列表中最下层项目。默认存在两格缩进</li></ul><p>dl 列表中有较为强烈的“描述”、“解释”、“补充”意义。 dt 和 dd 有明显的逻辑关系，dd 从属于 dt，dd 中的内容是对 dt 的“描述”、“解释”、“补充”。另外，dd 之间虽然是平行关系，但是其描述的内容是多角度的，不同于单纯的 li。</p><h3 id="div"><a href="#div" class="headerlink" title="div"></a>div</h3><p>div标签总是从新行开始显示，它包含的元素会自动换行；span标签是行内元素，拥有行内元素的特点。但是可以通过flex改变div的作为块状元素的属性</p><h3 id="span"><a href="#span" class="headerlink" title="span"></a>span</h3><p>span标签元素会和其他标签元素会在一行显示</p><p>使用 span来组合行内元素，以便通过样式来格式化它们。</p><p>span标签通常使用来将文本的一部分或者文档的一部分独立出来，从而对独立出来的内容设置单独的样式。span本身没有任何属性，也没有固定的格式表现，当对它应用样式时，它会产生视觉上的变化。</p><h3 id="href-x3D-”-”与javascript：void（0）的区别"><a href="#href-x3D-”-”与javascript：void（0）的区别" class="headerlink" title="href&#x3D;”#”与javascript：void（0）的区别"></a><strong>href&#x3D;”#”与javascript：void（0）的区别</strong></h3><p>href&#x3D;”#”方法其实也是空连接的意思，但是点击之后会自动跳转到页面的最上面，因为用了这个方法就相当于点击了一个锚记，但是这个锚记又没写ID，所以就默认跳转到页面顶部。从上面的例子也可以看出，当要执行某些处理，但是不整体刷新页面的情况下，可以使用void(0),但是在需要对页面进行refresh的情况下，那就要仔细了。<br>其实我们可以这样用，这句话会进行一次submit操作。那什么情况下用void(0)比较多呢，无刷新，当然是Ajax了，看一下Ajax的web页面的话，一般都会看到有很多的void(0)，所以在使用void(0)之前,最好先想一想,这个页面是否需要整体刷新。<br>说白了，href&#x3D;”#”这种形式会整体刷新页面，而href&#x3D;”javascript:void(0)” 则不会。所以如果是空连接的话，还是推荐javascript:void(0)。</p><p>而且href&#x3D;”javascript:void(0)”最好写在@click&#x3D;”nextChapter(data.chapterInfo.bookId)”<strong>后面</strong>这样就不会导致一直在最底端的情况QAQ</p><h2 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h2><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><p>id 选择器：要选择具有特定 id 的元素，请写一个井号（＃），后跟该元素的 id。</p><p>类选择器：如需选择拥有特定 class 的元素，请写一个句点（.）字符，后面跟类名。</p><p>伪类选择器、伪元素选择器</p><h4 id="CSS-组合器"><a href="#CSS-组合器" class="headerlink" title="CSS 组合器"></a>CSS 组合器</h4><p>后代选择器<br>后代选择器匹配属于指定元素后代的所有元素。</p><p>子选择器<br>子选择器匹配属于指定元素子元素的所有元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-content</span>: center; <span class="comment">/*居中对齐*/</span></span><br><span class="line"><span class="attribute">align-content</span>: space-between; <span class="comment">/*两端对齐*/</span></span><br></pre></td></tr></table></figure><p>nth-child(n) 选择器</p><p>:nth-child(<em>n</em>) 选择器匹配属于其父元素的第 N 个子元素，不论元素的类型</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el-menu-item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">260px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS类"><a href="#CSS类" class="headerlink" title="CSS类"></a>CSS类</h3><p>CSS 伪类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 未访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FF0000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 已访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00FF00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标悬停链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FF00FF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 已选择的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0000FF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>CSS 伪元素：</p><p>::first-line 伪元素<br>::first-line 伪元素用于向文本的首行添加特殊样式。</p><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>当我们在HTML中定义一个元素时，它会自动创建一个盒子，这个盒子包含了这个元素的所有内容（包括文本、图片等）以及一些与元素相关的属性（例如宽度、高度、边框、内边距和外边距）。CSS盒子模型描述了这个盒子是如何构造的。</p><p>在CSS盒子模型中，一个盒子有4个部分：</p><p>1.内容区（Content）：元素的文本内容、图像和其他子元素都在这里。</p><p>2.内边距区（Padding）：这是内容区和边框之间的空间，可以使用padding属性设置。</p><p>3.边框区（Border）：边框围绕着内边距和内容区。可以使用border属性设置。</p><p>4.外边距区（Margin）：这是边框和周围元素之间的空间。可以使用margin属性设置。</p><p>这些部分的宽度和高度会受到相应的属性的影响。例如，元素的宽度&#x3D;左边距+左边框+左内边距+内容宽度+右内边距+右边框+右边距。</p><p>在默认的盒子模型中，盒子的宽度和高度不包括内边距和边框，只包括内容区。但是，我们可以通过CSS中的box-sizing属性来改变这种行为。例如，将box-sizing设置为border-box可以让盒子的宽度和高度包括内边距和边框。</p><p>一般推荐将box-sizing属性设置为border-box</p><h2 id="Vue相关"><a href="#Vue相关" class="headerlink" title="Vue相关"></a>Vue相关</h2><p>element-ui的样式可以通过F12看到类名直接改到喜欢的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el-menu--horizontal</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#79bbff</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>element-ui菜单跳转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;Nav&quot;&gt;</span><br><span class="line">        &lt;el-menu :router=&#x27;true&#x27; class=&quot;el-menu-demo&quot; mode=&quot;horizontal&quot; &gt;</span><br><span class="line">            &lt;el-menu-item index=&quot;/&quot;&gt;首页&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index=&quot;/about&quot; &gt;我的书架&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;!--router=&#x27;true&#x27;必须开启 index=&quot;路由的地址&quot;--&gt;</span><br><span class="line">        &lt;/el-menu&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>el-button的引用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*&lt;el-button type=&quot;primary&quot; round&gt;Primary&lt;/el-button&gt;在写css时实际上应该用类选择器*/</span></span><br><span class="line"><span class="selector-class">.lijizhuce-content</span>&gt;<span class="selector-class">.el-button</span>&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>element-plus el-button图标的添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top-button&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">style</span>=<span class="string">&quot;vertical-align: middle&quot;</span>&gt;</span>/**/</span><br><span class="line">            <span class="tag">&lt;<span class="name">Search</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;vertical-align: middle&quot;</span>&gt;</span> 搜索 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/css-button.png" alt="css-button"></p><p>element-plus el-input图标的添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;input&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入验证码&quot;</span> <span class="attr">clearable</span> <span class="attr">prefix-icon</span>=<span class="string">&quot;Message&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- prefix-icon是在前面的图标，suffix-icon是在后面的图标 --&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/css-input.png" alt="css-input"></p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="小说项目"><a href="#小说项目" class="headerlink" title="小说项目"></a>小说项目</h3><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/css-%E6%8E%92%E7%89%88%E7%BB%83%E4%B9%A0.png" alt="css-排版练习"></p><p>首先是分析html元素首先是外层有一个整体的div并且存在boder,内部排布需要flex布局，且需要分成两排，使用flex-wrap: wrap换行,</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hot-list</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">700px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">350px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#c3dfea</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap; <span class="comment">/*来让元素进行折行排列，使得每行的元素都不超过容器的宽度*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后观察内部可以分为图片以及介绍两大板块包含在一起所以还有一个div，因为两个板块在同一条线上，所以此处的div也需要flex布局,同时考虑到美观层面，将每一个书籍的左侧和上部增加间距，再加上整体的局部增加了内间距刚好可以实现，全部书籍之间存在间隙，书籍与整体盒子之间也有一定的距离</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.itemList</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="图片板块"><a href="#图片板块" class="headerlink" title="图片板块:"></a>图片板块:</h4><p>作为图片外层的div可以与图片的尺寸相同，也可以像下面一样，多出一部分，省去了写magin，而且使用百分比（%）使得整体的布局更加清晰，但是要预留出书本详情的版块</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.items_img</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">45%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">158px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="图片："><a href="#图片：" class="headerlink" title="图片："></a>图片：</h5><p>按照两本书同一行的大小，进行width和height的尝试，这里不能使用百分比（%）的话，则是按照上一层div的大小来进行缩放，所以此处的height的值可以是100%，并无差别</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.items_img</span>&gt;<span class="selector-tag">a</span>&gt;<span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">116px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">158px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="书籍详情板块："><a href="#书籍详情板块：" class="headerlink" title="书籍详情板块："></a>书籍详情板块：</h4><p>确定板块的大小，同时也可以先指定好整体的字所需要的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.items_txt</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">52%</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: small;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="书名："><a href="#书名：" class="headerlink" title="书名："></a>书名：</h5><p>因为<dt>为行类型的标签，所以这里先指定好display为块状放置，以免和作者的名字处于同一个水平线上</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.home-bookName</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">font-size</span>: medium;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h5><p>intro为div，指定盒子的大小后，因为介绍的长度，所以将超出的部分直接隐藏，达到更好看的效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.intro</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适配练习"><a href="#适配练习" class="headerlink" title="适配练习"></a>适配练习</h3><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/%E9%80%82%E9%85%8D%E7%BB%83%E4%B9%A0.png" alt="适配练习"></p><p>该练习是因为在上面的小说项目之后，我发现不同设备无法进行适配，该练习是为了能够适配各种设备，相同的办法应该会经常用到</p><h4 id="HomeView部分："><a href="#HomeView部分：" class="headerlink" title="HomeView部分："></a>HomeView部分：</h4><p>最外层的部分直接用display：flex会导致整个页面随着缩放随意的变动，但是又需要达到整体处于界面水平中心的样式，所以选择在最外层再加一个div把整体包裹进去，再使用margin：0  auto；(使用这个样式必须要有width存在，否则水平居中的效果消失，同时在这个界面中width基本就确定了其他部分的width)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.home-center</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Navbar部分："><a href="#Navbar部分：" class="headerlink" title="Navbar部分："></a>Navbar部分：</h4><p>需要多加两个div，一个div和HomeView部分的思路是一样的固定width以及magin来实现水平居中，再在里面的子元素中使用display：flex来调整样式</p><p>另一个再加一个最外层的div来保证底层的颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Nav的Css样式 */</span></span><br><span class="line"><span class="selector-class">.el-menu-item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Nav</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Nav-center</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#79bbff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Nav-color</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#79bbff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Top部分"><a href="#Top部分" class="headerlink" title="Top部分"></a>Top部分</h4><p>最外层同样思路，内层的top-center要使用width: 100%;和height: 100%;保证与外层的top相同</p><p>其中headr里的min-width: 1100px;需要注意，否则header会随着缩放不断缩小，而里面的top则保持在1100px的width，那background-color就会有部分不一样</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 组件header里的Css样式 */</span></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">1100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.top</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.top-center</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="comment">/*居中对齐*/</span></span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="comment">/*居中对齐*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.input</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">342px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.top-a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.user</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.top-input</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>在最外层加上width: 1100px;和margin: 0 auto;保持水平居中，内层则使用flex布局，外层的width和height多使用具体的数值，内层的width和height多使用百分比，在部分元素因为缩放变样时，min-width可以很好的解决这个问题</p><h2 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h2><p>1、文字垂直居中：使line-height等于该区域的height</p><p>2、在写网页之前一般都需要去除各种的margin,padding防止边框的产生</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;<span class="comment">/*忽略边框的盒装模型*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、导航栏高度铺满网页</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“100vh”是指大小为“100”单位为“vh”的一个相对长度值；“vh”是css中的一个相对长度单位，是相对于视窗的高度，“100vh”就是指元素的高度等于当前浏览器的视窗高度，即浏览器内部的可视区域的高度大小</p><p> min-height 属性设置元素的最小高度。该属性值会对元素的高度设置一个最低限制。因此，元素可以比指定值高，但不能比其矮。不允许指定负值。</p><p>4、裁剪 div 元素中内容的左&#x2F;右边缘 - 如果溢出元素的内容区域的话</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">overflow-x</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、通过动态边长实现缩进导航栏</p><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/image-20221217214444893.png" alt="image-20221217214444893"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;HomeView&#x27;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    collapse() &#123;  // 点击收缩按钮触发</span><br><span class="line">      this.isCollapse = !this.isCollapse</span><br><span class="line">      if (this.isCollapse) &#123;  // 收缩</span><br><span class="line">        this.sideWidth = 64</span><br><span class="line">        this.collapseBtnClass = &#x27;el-icon-s-unfold&#x27;</span><br><span class="line">        this.logoTextShow = false</span><br><span class="line">      &#125; else &#123;   // 展开</span><br><span class="line">        this.sideWidth = 200</span><br><span class="line">        this.collapseBtnClass = &#x27;el-icon-s-fold&#x27;</span><br><span class="line">        this.logoTextShow = true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/image-20221217214451740.png" alt="image-20221217214451740"></p><p>6、将搜索栏input框与按钮button边框分开</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、内边距padding</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">5px</span> <span class="number">15px</span> <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">5px</span> <span class="number">15px</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span>;</span><br></pre></td></tr></table></figure><p>8、居中对齐元素<br>要使块元素（例如 <div> ）水平和垂直方向上都居中对齐，请使用 margin: auto;将某个元素在水平方向上居中对齐：margin: 0 auto;</p><p>9、居中对齐文本<br>如果仅需在元素内居中文本，请使用 text-align: center;</p><p>10、居中对齐图像<br>如需居中图像，请将左右外边距设置为 auto，并将其设置为块元素：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">  <span class="attribute">margin-right</span>: auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>11、整体放大缩小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleX</span>(x);         <span class="comment">/*沿X轴方向缩放*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleY</span>(y);         <span class="comment">/*沿Y轴方向缩放*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(x, y);        <span class="comment">/*沿X轴和Y轴同时缩放*/</span></span><br></pre></td></tr></table></figure><p>12、在遇到利用width无法缩放的情况时(可能是子元素的大小大于父元素)可以使用min-width或者max-width</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el-menu-item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">260px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>13、border</p><p>border（可加方向）: border-width（可加auto（方便居中），只写两个则是先上下&#x2F;再左右距离）  border-style（dotted（点状） solid（实线） double（双线） dashed（虚线）; ）  border-color;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tuijian-list</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">5px</span> solid red;<span class="comment">/*边框的宽度5px,边框的样式实线,边框的颜色红色*/</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>14、段落样式：</p><p>大小：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.footer-content</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: small;<span class="comment">/*也可以是5px、80%*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行高：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.footer-content</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;<span class="comment">/*也可以是90%*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文字居中（不用margin来凑）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.footer</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>项目流程</title>
      <link href="/posts/2a16d212.html"/>
      <url>/posts/2a16d212.html</url>
      
        <content type="html"><![CDATA[<h1 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>在本项目中前端的页面都采用了vue的渐进式开发，依托后端来启动所有的项目，且采用了element-ui所提供的样式，使得页面更加整洁美观</p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>在项目的后端使用maven提供专业化的目录，以及进行项目的打包和快捷的插件管理，整体都使用lombok的注解式开发，再以spring-boot作为项目的主框架，加快项目的开发应用，也更方便对接mysql的数据库</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>而在数据库方面，使用了国人所升级的MybatisPlus，再在controller层实现业务逻辑，通过@RequestMapping来接受页面所发送的ajax请求以及json数据，同时利用DTO将多个字段封装到一个对象里，实现对于数据库基本的增删改查，最后在前端回显所修改的数据，在这整个用户交互的流程中，filter层会保持拦截用户所不该访问的页面，也会使用Redis来进行缓存优化，来达到更好的用户体验</p><h2 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h2><p>而在部署项目上采用腾讯云的云服务器，以及Git仓库来管理历史版本的代码以及团队协作，在Linux系统上进行部署，保证项目的安全性，再通过SSH连接工具就可以实现从本地连接到远程的Linux系统服务器</p><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/default_top_img.jpg" alt="壁纸"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
