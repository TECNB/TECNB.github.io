<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Html-school</title>
      <link href="/posts/34f09ce7.html"/>
      <url>/posts/34f09ce7.html</url>
      
        <content type="html"><![CDATA[<h1 id="Html-school"><a href="#Html-school" class="headerlink" title="Html-school"></a>Html-school</h1><h2 id="学习通"><a href="#学习通" class="headerlink" title="学习通"></a>学习通</h2><h3 id="第一章（html和css基础）"><a href="#第一章（html和css基础）" class="headerlink" title="第一章（html和css基础）"></a>第一章（html和css基础）</h3><p>(单选题)W3C（英文World Wide Web Consortium的缩写），中文译为“万维网联盟”是（  ）。</p><ul><li>A. 国际最著名的标准化组织</li><li>B. 欧洲计算机制造商协会</li><li>C. 中国计算机行业协会</li><li>D. 中国计算机学会</li></ul><p><em>我的答案:</em> A:国际最著名的标准化组织;<em>正确答案:</em> A:国际最著名的标准化组织;</p><p>(单选题)CSS的全称及中文译名分别是（ ）。</p><ul><li>A. Cading Style Sheet和层次样式表</li><li>B. Cascading Style Sheet和层次样式表</li><li>C. Cascading Style Sheet和层叠样式表</li><li>D. Cading Style Sheet和层叠样式表</li></ul><p><em>我的答案:</em> C:Cascading Style Sheet和层叠样式表;<em>正确答案:</em> C:Cascading Style Sheet和层叠样式表;</p><p>(单选题)我们一般所用的工作区布局方式是（ ）。</p><ul><li>A. 经典</li><li>B. 设计器</li><li>C. 流体布局</li><li>D. 编码器</li></ul><p><em>我的答案:</em> C:流体布局;<em>正确答案:</em> C:流体布局;</p><p>(单选题)次浏览器预览网页的快捷键是（ ）。 </p><ul><li>A. F12</li><li>B. Ctrl+F12</li><li>C. F10 </li><li>D. F11</li></ul><p> (多选题)Web标准并不是某一个标准，而是一系列标准的集合，主要包括（ ）。</p><ul><li>A. 结构标准</li><li>B. 表现标准</li><li>C. 行为标准</li><li>D. 制作标准</li></ul><p><em>我的答案:</em> ABC:结构标准; 表现标准; 行为标准;<em>正确答案:</em> ABC</p><p> (多选题)HTML响应式 Web 设计（Responsive Web Design）是一种网络页面设计布局的方法,其作用是（）。</p><ul><li>A. 能够以可变尺寸传递网页</li><li>B. 对于平板是必需的</li><li>C. 对于移动设备是必需的</li><li>D. 对于PC端是必需的</li></ul><p><em>我的答案:</em> ABC:能够以可变尺寸传递网页; 对于平板是必需的; 对于移动设备是必需的;<em>正确答案:</em> ABC:能够以可变尺寸传递网页; 对于平板是必需的; 对于移动设备是必需的;</p><h3 id="第二章（html基础）"><a href="#第二章（html基础）" class="headerlink" title="第二章（html基础）"></a>第二章（html基础）</h3><p> (单选题)以下方式哪个实现将水平线粗细设置为2，宽度设置为500px?</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A. <span class="tag">&lt;<span class="name">hr</span>  <span class="attr">font-size</span>=<span class="string">&quot;2&quot;</span>    <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> /&gt;</span></span><br><span class="line">B. <span class="tag">&lt;<span class="name">hr</span>  <span class="attr">size</span>=<span class="string">&quot;2&quot;</span>    <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> /&gt;</span></span><br><span class="line">C. <span class="tag">&lt;<span class="name">hr</span>  <span class="attr">font-size</span>=<span class="string">&quot;2&quot;</span>    <span class="attr">width</span>=<span class="string">&quot;500%&quot;</span> /&gt;</span></span><br><span class="line">D.<span class="tag">&lt;<span class="name">hr</span>  <span class="attr">size</span>=<span class="string">&quot;2&quot;</span>    <span class="attr">width</span>=<span class="string">&quot;500%&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><em>我的答案:</em> B</p><p>(单选题)如果想要使段落文本加粗倾斜，可以采用以下哪种方式？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- A. <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>一段文本<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">- B. <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>一段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">- C. <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>一段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">- D. <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>一段文本<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>我的答案:</em> D</p><p> (单选题)将某段文本应用font标记设置为微软雅黑，16px，是设置font标记中哪两个属性？（）</p><ul><li>A. face   font-size</li><li>B. font-family   font-size</li><li>C. font-family   size</li><li>D. face   size</li></ul><p><em>正确答案:</em> D</p><p> (单选题)HTML标记分为双标记和单标记，下面哪个选项中所有标记都属于单标记？（）</p><ul><li>A. 标题标记、图像标记、段落标记</li><li>B. 段落标记、图像标记、换行标记</li><li>C. 标题标记、换行标记、段落标记</li><li>D. 图像标记、换行标记、水平线标记</li></ul><p><em>我的答案:</em> D:图像标记、换行标记、水平线标记;</p><h3 id="单选题-以下哪个不是-img-x2F-标记的属性？"><a href="#单选题-以下哪个不是-img-x2F-标记的属性？" class="headerlink" title="(单选题)以下哪个不是 img&#x2F; 标记的属性？"></a>(单选题)以下哪个不是 img&#x2F; 标记的属性？</h3><ul><li>A. width</li><li>B. size</li><li>C. align</li><li>D. border</li></ul><p><em>我的答案:</em> B:size;</p><p>(单选题)(  )不属于元信息标记  meta&#x2F; 的属性。</p><ul><li>A. content</li><li>B. http-equiv</li><li>C. name</li><li>D. url</li></ul><p><em>我的答案:</em> D</p><p> (单选题)以下方式哪个能实现将<strong>段落</strong>设置为居中对齐？（）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- A. &lt; p align=&quot;left&quot;&gt;网页设计学院<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">- B. <span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>网页设计学院<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">- C.  <span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>网页设计学院<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">- D. <span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span>网页设计学院<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>我的答案:</em> C;</p><h3 id="单选题-下列哪些不属于图像标记-img-的属性？（）"><a href="#单选题-下列哪些不属于图像标记-img-的属性？（）" class="headerlink" title="(单选题)下列哪些不属于图像标记 img 的属性？（）"></a>(单选题)下列哪些不属于图像标记 img 的属性？（）</h3><ul><li>A. vspace</li><li>B. hspace</li><li>C. color</li><li>D. border</li></ul><p><em>我的答案:</em> C:color;</p><p>(单选题)文本”挥泪大甩卖，原价 260 ，现价 50 ！“中，“ 260 ”和“ 50“的效果可以用以下哪种方式实现？</p><ul><li>A. <del>260</del> <em>50</em></li><li>B. <del>260</del> <strong>50</strong></li><li>C. <ins>260</ins> <del>50</del> </li><li>D. <del>260</del> <ins>50</ins></li></ul><p><em>我的答案:</em> D;</p><p>(多选题)以下哪个标记能实现文本加下划线效果？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A. <span class="tag">&lt;<span class="name">s</span>&gt;</span><span class="tag">&lt;/<span class="name">s</span>&gt;</span> </span><br><span class="line">B. <span class="tag">&lt;<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line">C. <span class="tag">&lt;<span class="name">ins</span>&gt;</span>&lt;/ins &gt;</span><br><span class="line">D.<span class="tag">&lt;<span class="name">del</span>&gt;</span><span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>我的答案:</em> BC;</p><h3 id="文本格式化标记"><a href="#文本格式化标记" class="headerlink" title="文本格式化标记"></a>文本格式化标记</h3><table><thead><tr><th>语义</th><th>标签</th></tr></thead><tbody><tr><td>加粗</td><td>&lt; strong &gt;&lt; &#x2F;strong &gt;或者&lt; b&gt;&lt; &#x2F;b &gt;</td></tr><tr><td>倾斜</td><td>&lt; em &gt;&lt; &#x2F;em &gt;或者&lt; i &gt;&lt; &#x2F;i &gt;</td></tr><tr><td>删除线</td><td>&lt; del &gt;&lt; &#x2F;del &gt;或者&lt; s &gt;&lt; &#x2F;s &gt;</td></tr><tr><td>下划线</td><td>&lt; ins &gt;&lt; &#x2F;ins &gt;或者&lt; u &gt;&lt; &#x2F;u &gt;</td></tr></tbody></table><p>(多选题)以下哪些属于 meta&#x2F; 标记可以定义的页面参数？</p><ul><li>A. 内容的描述</li><li>B. 网页的刷新时间</li><li>C. 网页的关键字</li><li>D. 作者的姓名</li></ul><p><em>我的答案:</em> ACD:内容的描述; 网页的关键字; 作者的姓名;</p><h3 id="多选题-下面哪些是font标记的常用属性？"><a href="#多选题-下面哪些是font标记的常用属性？" class="headerlink" title="(多选题)下面哪些是font标记的常用属性？"></a>(多选题)下面哪些是font标记的常用属性？</h3><ul><li>A. color</li><li>B. size</li><li>C. align</li><li>D. face</li></ul><p><em>我的答案:</em> ABD:color; size; face;</p><h3 id="多选题-img-x2F-标记中align的属性值有以下哪几个？"><a href="#多选题-img-x2F-标记中align的属性值有以下哪几个？" class="headerlink" title="(多选题) img&#x2F; 标记中align的属性值有以下哪几个？"></a>(多选题) img&#x2F; 标记中align的属性值有以下哪几个？</h3><ul><li>A. top</li><li>B. bottom</li><li>C. middle</li><li>D. center</li><li>E. left</li><li>F. right</li></ul><p><em>我的答案:</em> ABCEF:top; bottom; middle; left; right;</p><h3 id="判断题-font-标记中可以再包含一个-font-标记，这个说法对吗？"><a href="#判断题-font-标记中可以再包含一个-font-标记，这个说法对吗？" class="headerlink" title="(判断题) font 标记中可以再包含一个 font 标记，这个说法对吗？"></a>(判断题) font 标记中可以再包含一个 font 标记，这个说法对吗？</h3><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 对</p><h3 id="【多选题】color属性用于定义文本的颜色，其正确取值有以下哪些方式-（）"><a href="#【多选题】color属性用于定义文本的颜色，其正确取值有以下哪些方式-（）" class="headerlink" title="【多选题】color属性用于定义文本的颜色，其正确取值有以下哪些方式?（）"></a>【多选题】color属性用于定义文本的颜色，其正确取值有以下哪些方式?（）</h3><ul><li><p>A、</p><p>red</p></li><li><p>B、</p><p>#FF0000</p></li><li><p>C、</p><p>rgb(255,0,0) </p></li><li><p>D、</p><p>rgb(100%,0%,0%)</p></li></ul><p>我的答案：ACD？ABC？</p><h2 id="第三章（css基础）"><a href="#第三章（css基础）" class="headerlink" title="第三章（css基础）"></a>第三章（css基础）</h2><p>【单选题】标签指定式选择器又称交集选择器，由两个选择器构成，其中第一个为标记选择器，第二个为class选择器或id选择器，以下合法的标签指定式选择器有（）？</p><ul><li><p>A、</p><p>h1.special </p></li><li><p>B、</p><p>p #one</p></li><li><p>C、</p><p> h1 #one </p></li><li><p>D、</p><p>p .special</p></li></ul><p>我的答案：A</p><h3 id="【单选题】下面（-）属性代表边框是单实线？"><a href="#【单选题】下面（-）属性代表边框是单实线？" class="headerlink" title="【单选题】下面（ ）属性代表边框是单实线？"></a>【单选题】下面（ ）属性代表边框是单实线？</h3><ul><li><p>A、</p><p>solid（单实线）</p></li><li><p>B、</p><p>dashed（虚线）</p></li><li><p>C、</p><p>dotted（点线）</p></li><li><p>D、</p><p>double（双实线）</p></li></ul><p>正确答案： A :solid;我的答案：A</p><h2 id="第四章（css盒模型）"><a href="#第四章（css盒模型）" class="headerlink" title="第四章（css盒模型）"></a>第四章（css盒模型）</h2><h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><p>【单选题】假设p标记盒子的width为210px，height为90px，边框宽度为8像素，设置盒子的内边距padding为15像素，外边距margin为20像素，则盒子的宽度是（）？</p><ul><li><p>A、</p><p>240px</p></li><li><p>B、</p><p>256px</p></li><li><p>C、</p><p>210px</p></li><li><p>D、</p><p>226px</p></li></ul><p>我的答案：B（实际上算出来应该是296px-40px&#x3D;256px,不用加margin）</p><p>【单选题】假设p标记盒子的width为210px，height为90px，边框宽度为8像素，设置盒子的内边距padding为15像素，外边距margin为20像素，则盒子在网页中所占的高度是（）？</p><ul><li><p>A、</p><p>106px</p></li><li><p>B、</p><p>146px</p></li><li><p>C、</p><p>176px</p></li><li><p>D、</p><p>90px</p></li></ul><p>我的答案：C</p><p>【单选题】假设p标记盒子的width为210px，height为90px，边框宽度为8像素，设置盒子的内边距padding为15像素，外边距margin为20像素，则盒子的高度是（）？</p><ul><li><p>A、</p><p>136px </p></li><li><p>B、</p><p>106px</p></li><li><p>C、</p><p>90px</p></li><li><p>D、</p><p>120px</p></li></ul><p>我的答案：A（不用加margin了）</p><p>【单选题】在普通文档流中（没有对元素应用浮动和定位），第一个盒子的下边距为20px，第二个盒子的上外边距为40px，则这两个盒子垂直间距是（  ）。</p><ul><li><p>A、</p><p>60px</p></li><li><p>B、</p><p>20px</p></li><li><p>C、</p><p>40px</p></li><li><p>D、</p><p>其他</p></li></ul><p>我的答案：A?</p><p>【单选题】当两个嵌套关系的块元素，设父元素无边框，上外边距为20px，子元素的上外边距为40px，在默认的情况下，父元素的上外边距为（  ）。</p><ul><li><p>A、</p><p>20px</p></li><li><p>B、</p><p>40px</p></li><li><p>C、</p><p>60px</p></li><li><p>D、</p><p>其他</p></li></ul><p>我的答案：A?</p><p>【单选题】当两个嵌套关系的块元素，设父元素无边框，上外边距为20px，子元素的上外边距为40px，当给父元素加上代码overflow:hidden;后，父元素的上外边距为（  ）。</p><ul><li><p>A、</p><p>20px</p></li><li><p>B、</p><p>40px</p></li><li><p>C、</p><p>60px</p></li><li><p>D、</p><p>其他</p></li></ul><p>我的答案：A</p><p>【多选题】如果希望嵌套块元素垂直外边距不合并，可以通过以下（  ）方法来解决这个问题。</p><ul><li><p>A、</p><p>给父盒子加边框（border）</p></li><li><p>B、</p><p>给父盒子样式加上overflow:hidden代码</p></li><li><p>C、</p><p>无法解决</p></li><li><p>D、</p><p>其他</p></li></ul><p>我的答案：AB</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>【单选题】下面哪一项不是网页中常用的列表（   ）？</p><ul><li><p>A、</p><p>无序列表</p></li><li><p>B、</p><p>有序列表</p></li><li><p>C、</p><p>排序列表</p></li><li><p>D、</p><p>定义列表</p></li></ul><p>我的答案：C</p><h4 id="【单选题】在CSS中，下面哪一项不属于list-style-position属性（-）"><a href="#【单选题】在CSS中，下面哪一项不属于list-style-position属性（-）" class="headerlink" title="【单选题】在CSS中，下面哪一项不属于list-style-position属性（   ）"></a>【单选题】在CSS中，下面哪一项不属于list-style-position属性（   ）</h4><ul><li><p>A、</p><p>用于控制列表项目符号的图像</p></li><li><p>B、</p><p>其取值有inside和outside两种</p></li><li><p>C、</p><p>inside：列表项目符号位于列表文本以内</p></li><li><p>D、</p><p>outside：列表项目符号位于列表文本以外</p></li></ul><p>我的答案：A</p><h4 id="【单选题】下面关于list-style哪一项描述是错误的（-）"><a href="#【单选题】下面关于list-style哪一项描述是错误的（-）" class="headerlink" title="【单选题】下面关于list-style哪一项描述是错误的（   ）"></a>【单选题】下面关于list-style哪一项描述是错误的（   ）</h4><ul><li><p>A、</p><p>list-style是用于综合设置列表样式</p></li><li><p>B、</p><p>其语法格式：list-style:列表项目符号 列表项目符号的位置 列表项目图像</p></li><li><p>C、</p><p>各个样式之间以冒号隔开</p></li><li><p>D、</p><p>不需要的样式可以省略</p></li></ul><p>我的答案：C</p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>【单选题】设置text-decoration属性的删除线的值为（    ）</p><ul><li><p>A、</p><p>underline</p></li><li><p>B、</p><p>overline</p></li><li><p>C、</p><p>line-through</p></li><li><p>D、</p><p>blink</p></li></ul><p>我的答案：C</p><p>【单选题】下列选项中，用于清除超链接默认的下划线的是（    ）</p><ul><li><p>A、</p><p>text-decoration:none </p></li><li><p>B、</p><p>text-decoration: underline </p></li><li><p>C、</p><p>text-decoration:overline </p></li><li><p>D、</p><p> text-decoration:line-through</p></li></ul><p>我的答案：A</p><h3 id="【单选题】下列选项中，属于“target”属性值的是（-）"><a href="#【单选题】下列选项中，属于“target”属性值的是（-）" class="headerlink" title="【单选题】下列选项中，属于“target”属性值的是（    ）"></a>【单选题】下列选项中，属于“target”属性值的是（    ）</h3><ul><li><p>A、</p><p>_double </p></li><li><p>B、</p><p>_self</p></li><li><p>C、</p><p>_new </p></li><li><p>D、</p><p> _black</p></li></ul><p>我的答案：B</p><p>target&#x3D;”view_window”：用于多个链接去同一个新页面中打开；打开一个新页面，所有使用这个属性值的链接在新页面中替换方式显示；<br>target&#x3D;”_blank”：用于每个链接在不同新空白页面中打开，互不影响；<br>target&#x3D;”_self”：用于在当前页（或iframe）展示；<br>target&#x3D;”_parent”：用于在上一级iframe中展示，没有就是当前页面；<br>target&#x3D;”_top”：用于在最外层iframe中展示没有就是当前页面；</p><p>【单选题】有关伪类的说法不正确的是(    )</p><ul><li><p>A、</p><p>并不是真正意义上的类，它的名称是由系统定义的</p></li><li><p>B、</p><p>通常由标记名、类名或id名加“：”构成</p></li><li><p>C、</p><p>在CSS中，通过链接伪类可以实现不同的链接状态</p></li><li><p>D、</p><p>伪类就是以#定义的超链接</p></li></ul><p>我的答案：D</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>【单选题】以下标记中，用于定义一个单元格的是（   ）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- A、 <span class="tag">&lt;<span class="name">caption</span>&gt;</span>…<span class="tag">&lt;/<span class="name">caption</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">- B、<span class="tag">&lt;<span class="name">tr</span>&gt;</span>…<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">- C、<span class="tag">&lt;<span class="name">table</span>&gt;</span>…<span class="tag">&lt;/<span class="name">table</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">- D、<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我的答案：D</p><h4 id="【单选题】使用-table-标记的属性美化表格时，可以通过-控制单元格内容与边框之间的距离"><a href="#【单选题】使用-table-标记的属性美化表格时，可以通过-控制单元格内容与边框之间的距离" class="headerlink" title="【单选题】使用  table 标记的属性美化表格时，可以通过(    )控制单元格内容与边框之间的距离"></a>【单选题】使用  table 标记的属性美化表格时，可以通过(    )控制单元格内容与边框之间的距离</h4><ul><li><p>A、</p><p>cellpadding </p></li><li><p>B、</p><p>cellspacing</p></li><li><p>C、</p><p>padding </p></li><li><p>D、</p><p>margin</p></li></ul><p>我的答案：A</p><h4 id="【单选题】行标记-tr-不具有的属性是（-）"><a href="#【单选题】行标记-tr-不具有的属性是（-）" class="headerlink" title="【单选题】行标记 tr 不具有的属性是（   ）"></a>【单选题】行标记 tr 不具有的属性是（   ）</h4><ul><li><p>A、</p><p>align </p></li><li><p>B、</p><p>bgcolor </p></li><li><p>C、</p><p>background </p></li><li><p>D、</p><p>padding</p></li></ul><p>我的答案：D</p><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><h4 id="【单选题】下列哪项不属于一个完整的表单所包含的信息是（-）"><a href="#【单选题】下列哪项不属于一个完整的表单所包含的信息是（-）" class="headerlink" title="【单选题】下列哪项不属于一个完整的表单所包含的信息是（    ）"></a>【单选题】下列哪项不属于一个完整的表单所包含的信息是（    ）</h4><ul><li><p>A、</p><p>表单控件 </p></li><li><p>B、</p><p>提示信息</p></li><li><p>C、</p><p>表格</p></li><li><p>D、</p><p>表单域</p></li></ul><p>我的答案：C</p><h4 id="【单选题】form与-x2F-form之间的表单控件是由用户自定义的。下列选项中，不属于表单标记form的常用属性的是（-）"><a href="#【单选题】form与-x2F-form之间的表单控件是由用户自定义的。下列选项中，不属于表单标记form的常用属性的是（-）" class="headerlink" title="【单选题】form与&#x2F;form之间的表单控件是由用户自定义的。下列选项中，不属于表单标记form的常用属性的是（   ）"></a>【单选题】form与&#x2F;form之间的表单控件是由用户自定义的。下列选项中，不属于表单标记form的常用属性的是（   ）</h4><ul><li><p>A、</p><p>action</p></li><li><p>B、</p><p>size</p></li><li><p>C、</p><p>method </p></li><li><p>D、</p><p>name</p></li></ul><p>我的答案：B</p><h4 id="【单选题】下列选项中，属于-textarea-标记的必须属性的是"><a href="#【单选题】下列选项中，属于-textarea-标记的必须属性的是" class="headerlink" title="【单选题】下列选项中，属于 textarea 标记的必须属性的是(  )"></a>【单选题】下列选项中，属于 textarea 标记的必须属性的是(  )</h4><ul><li><p>A、</p><p>size</p></li><li><p>B、</p><p>row</p></li><li><p>C、</p><p>value</p></li><li><p>D、</p><p>cols</p></li></ul><p>我的答案：B</p><h2 id="第五章（css页面布局）"><a href="#第五章（css页面布局）" class="headerlink" title="第五章（css页面布局）"></a>第五章（css页面布局）</h2><h3 id="元素浮动"><a href="#元素浮动" class="headerlink" title="元素浮动"></a>元素浮动</h3><h4 id="【单选题】float属性值不包括（-）。"><a href="#【单选题】float属性值不包括（-）。" class="headerlink" title="【单选题】float属性值不包括（  ）。"></a>【单选题】float属性值不包括（  ）。</h4><ul><li><p>A、</p><p>left</p></li><li><p>B、</p><p>right</p></li><li><p>C、</p><p>none</p></li><li><p>D、</p><p>center</p></li></ul><p>我的答案：D</p><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><h4 id="【单选题】在设置子元素定位时，一般需先设置父元素的定位模式为（-），然后不需要设置其边偏移量。"><a href="#【单选题】在设置子元素定位时，一般需先设置父元素的定位模式为（-），然后不需要设置其边偏移量。" class="headerlink" title="【单选题】在设置子元素定位时，一般需先设置父元素的定位模式为（ ），然后不需要设置其边偏移量。"></a>【单选题】在设置子元素定位时，一般需先设置父元素的定位模式为（ ），然后不需要设置其边偏移量。</h4><ul><li><p>A、</p><p>static</p></li><li><p>B、</p><p>relative</p></li><li><p>C、</p><p>absolute</p></li><li><p>D、</p><p>fixed</p></li></ul><p>我的答案：B</p><h4 id="【多选题】绝对定位是将元素依据最近的已经定位（-）的父元素进行定位，若所有父元素都没有定位，则依据body根元素（即浏览器窗口）进行定位。"><a href="#【多选题】绝对定位是将元素依据最近的已经定位（-）的父元素进行定位，若所有父元素都没有定位，则依据body根元素（即浏览器窗口）进行定位。" class="headerlink" title="【多选题】绝对定位是将元素依据最近的已经定位（  ）的父元素进行定位，若所有父元素都没有定位，则依据body根元素（即浏览器窗口）进行定位。"></a>【多选题】绝对定位是将元素依据最近的已经定位（  ）的父元素进行定位，若所有父元素都没有定位，则依据body根元素（即浏览器窗口）进行定位。</h4><ul><li><p>A、</p><p>绝对定位</p></li><li><p>B、</p><p>固定定位</p></li><li><p>C、</p><p>相对定位</p></li><li><p>D、</p><p>静态定位</p></li></ul><p>我的答案：CD</p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="【单选题】当用定义列表dl标记定义新闻模块时，dt标记用于（-）。"><a href="#【单选题】当用定义列表dl标记定义新闻模块时，dt标记用于（-）。" class="headerlink" title="【单选题】当用定义列表dl标记定义新闻模块时，dt标记用于（   ）。"></a>【单选题】当用定义列表dl标记定义新闻模块时，dt标记用于（   ）。</h4><ul><li><p>A、</p><p>标识词条</p></li><li><p>B、</p><p>标识解释</p></li><li><p>C、</p><p>表示列表元素</p></li><li><p>D、</p><p>表示父级元素</p></li></ul><p>我的答案：A:标识词条;</p><h4 id="【单选题】当用定义列表dd标记定义新闻模块时，dt标记用于（-）。"><a href="#【单选题】当用定义列表dd标记定义新闻模块时，dt标记用于（-）。" class="headerlink" title="【单选题】当用定义列表dd标记定义新闻模块时，dt标记用于（   ）。"></a>【单选题】当用定义列表dd标记定义新闻模块时，dt标记用于（   ）。</h4><ul><li><p>A、</p><p>标识词条</p></li><li><p>B、</p><p>标识解释</p></li><li><p>C、</p><p>表示列表元素</p></li><li><p>D、</p><p>表示父级元素</p></li></ul><p>我的答案：B</p><h4 id="【单选题】从电脑科技网主体（content）的效果图中可以看出，分成（-）部分。"><a href="#【单选题】从电脑科技网主体（content）的效果图中可以看出，分成（-）部分。" class="headerlink" title="【单选题】从电脑科技网主体（content）的效果图中可以看出，分成（  ）部分。"></a>【单选题】从电脑科技网主体（content）的效果图中可以看出，分成（  ）部分。</h4><ul><li><p>A、</p><p>上、下两部分</p></li><li><p>B、</p><p>上、中、下三部分</p></li><li><p>C、</p><p>左、右两部分</p></li><li><p>D、</p><p>左、中、右三部分</p></li></ul><p>我的答案：B</p><h4 id="【单选题】请问电脑科技网采用的是（-）方式进行布局。"><a href="#【单选题】请问电脑科技网采用的是（-）方式进行布局。" class="headerlink" title="【单选题】请问电脑科技网采用的是（  ）方式进行布局。"></a>【单选题】请问电脑科技网采用的是（  ）方式进行布局。</h4><ul><li><p>A、</p><p>单列布局</p></li><li><p>B、</p><p>两列布局</p></li><li><p>C、</p><p>三列布局</p></li><li><p>D、</p><p>通栏布局</p></li></ul><p>我的答案：D</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java-school</title>
      <link href="/posts/9e172920.html"/>
      <url>/posts/9e172920.html</url>
      
        <content type="html"><![CDATA[<h1 id="java-school"><a href="#java-school" class="headerlink" title="java-school"></a>java-school</h1><h2 id="课上程序"><a href="#课上程序" class="headerlink" title="课上程序"></a>课上程序</h2><p>1-1000中含有7或者7的倍数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">study</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> mod=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;=<span class="number">1000</span>;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span>i;</span><br><span class="line">            <span class="keyword">while</span>(num!=<span class="number">0</span>)&#123;</span><br><span class="line">                mod = num%<span class="number">10</span>;</span><br><span class="line">                num= num/<span class="number">10</span>;</span><br><span class="line">                <span class="keyword">if</span>(mod==<span class="number">7</span>)&#123;</span><br><span class="line">                    flag=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="number">1</span>||i%<span class="number">7</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断闰年</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">study</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="keyword">if</span>((year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>)||year%<span class="number">400</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(year+<span class="string">&quot;是闰月&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(year+<span class="string">&quot;不是闰月&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从52张卡中抽取4张随机卡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、数组的书写规范</span></span><br><span class="line"><span class="comment">//2、随机数组的方法Math.random()*52)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">study</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//52为开的数组的大小</span></span><br><span class="line">        <span class="type">int</span>[] array1=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">52</span>];</span><br><span class="line">        <span class="type">int</span> j,k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">52</span>;i++)&#123;</span><br><span class="line">            array1[i]=i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] array2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line">        array2[<span class="number">0</span>]=array1[(<span class="type">int</span>)(Math.random()*<span class="number">52</span>)];</span><br><span class="line">        <span class="keyword">while</span> (k&lt;<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="type">int</span> n=array1[(<span class="type">int</span>)(Math.random()*<span class="number">52</span>)];</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(n==array2[j])&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=<span class="number">4</span>)&#123;</span><br><span class="line">                array2[k+<span class="number">1</span>]=n;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> value:array2)&#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>判断回文数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、String输入</span></span><br><span class="line"><span class="comment">//2、比较逐个比较String函数s.charAt(i)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">study</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String str1;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        str1=sc.next();</span><br><span class="line">        <span class="type">boolean</span> flag=isPalindrome(str1);</span><br><span class="line">        System.out.println(flag?<span class="string">&quot;Yes&quot;</span>:<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="type">int</span> count=s.length(),i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;count/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i)!=s.charAt(count-<span class="number">1</span>-i))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==count/<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>判断输入的字母的数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、判断逻辑word&lt;=&#x27;z&#x27;&amp;&amp;word&gt;=&#x27;a&#x27;||word&lt;=&#x27;Z&#x27;&amp;&amp;word&gt;=&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">study</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String str1;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        str1=sc.next();</span><br><span class="line">        <span class="type">int</span> count= countLetters(str1);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">countLetters</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="type">int</span> len=s.length(),i,num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="type">char</span> word=s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(word&lt;=<span class="string">&#x27;z&#x27;</span>&amp;&amp;word&gt;=<span class="string">&#x27;a&#x27;</span>||word&lt;=<span class="string">&#x27;Z&#x27;</span>&amp;&amp;word&gt;=<span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印日历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">study</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      Scanner sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">      System.out.println(<span class="string">&quot;请输入一个年份：（2018）&quot;</span>);</span><br><span class="line">      <span class="type">int</span> year=sc.nextInt();</span><br><span class="line">      LocalDate dates=LocalDate.of(year, Month.JANUARY,<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">while</span>(dates.getYear()==year)&#123;</span><br><span class="line">         String monthName=dates.getMonth().getDisplayName(TextStyle.FULL,Locale.getDefault());</span><br><span class="line">         <span class="type">int</span> daysOfMonth=dates.lengthOfMonth();</span><br><span class="line">         System.out.println(year+<span class="string">&quot;年&quot;</span>+monthName);</span><br><span class="line">         System.out.println( <span class="string">&quot;-------------------------------------&quot;</span>);</span><br><span class="line">         System.out.printf(<span class="string">&quot;%8s%8s%8s%8s%8s%8s%8s%n&quot;</span>,<span class="string">&quot;一&quot;</span>,<span class="string">&quot;二&quot;</span>,<span class="string">&quot;三&quot;</span>,<span class="string">&quot;四&quot;</span>,<span class="string">&quot;五&quot;</span>,<span class="string">&quot;六&quot;</span>,<span class="string">&quot;日&quot;</span>);</span><br><span class="line">         <span class="type">int</span> dayOfWeek=dates.getDayOfWeek().getValue();</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=dayOfWeek;i++)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%4s&quot;</span>,<span class="string">&quot; &quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">1</span>;i&lt;=daysOfMonth;i++)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%9s&quot;</span>,i);</span><br><span class="line">            <span class="keyword">if</span>((dayOfWeek+i-<span class="number">1</span>)%<span class="number">7</span>==<span class="number">0</span>) &#123;</span><br><span class="line">               System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enum类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Traffic</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">TrafficLight</span> &#123;</span><br><span class="line">        RED, GREEN, BLUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行输出结果</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 调用 values()</span></span><br><span class="line">        TrafficLight[] arr = TrafficLight.values();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 迭代枚举</span></span><br><span class="line">        <span class="keyword">for</span> (TrafficLight TR : arr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 查看索引</span></span><br><span class="line">            System.out.println(TR + <span class="string">&quot; at index &quot;</span> + TR.ordinal());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="学习通易错题"><a href="#学习通易错题" class="headerlink" title="学习通易错题"></a>学习通易错题</h2><h3 id="项目一"><a href="#项目一" class="headerlink" title="项目一"></a>项目一</h3><ol start="6"><li>(单选题)安装好JDK后，在其bin目录下有许多.exe可执行文件，其中java.exe命令的作用是以下哪一种（）</li></ol><ul><li>A. Java编译器</li><li>B. Java启动器</li><li>C. Java解释器</li><li>D. Java文档制作工具</li></ul><p><em>我的答案:</em> B:Java启动器;<em>正确答案:</em> C</p><ol start="8"><li>(填空题)环境变量           用来存储Java的编译和运行工具所在的路径，而         环境变量则用来保存Java虚拟机要运行的“.class”文件路径</li></ol><ul><li><p>我的答案：</p><p>(1) JAVA_HOME </p><p>(2) CLASSPATH </p></li><li><p><em>正确答案：</em></p><p>(1) path</p><p>(2) classpath</p></li></ul><ol start="9"><li><p>(填空题)Java的三大体系分别是      ______   、___   、___。</p><p><em>正确答案：</em></p><p>JavaEE;JavaSE;JavaME</p></li><li><p>(判断题)Java语言的源程序不是编译型，而是编译解释型的</p></li></ol><ul><li>A. 对</li><li>B. 错</li></ul><h3 id="项目三"><a href="#项目三" class="headerlink" title="项目三"></a>项目三</h3><ol><li>(填空题)Java中方法的三种调用方式分别是      、    、     。</li></ol><ul><li><p><em>我的答案：</em></p><p>(1) 普通调用方式</p><p>(2) 对象调用方式（当方法是非静态方法时，需要通过对象实例来调用）</p><p>(3) 类调用方式（当方法是静态方法时，可以直接使用类名调用，不需要创建对象实例）</p></li></ul><h3 id="项目四"><a href="#项目四" class="headerlink" title="项目四"></a>项目四</h3><ol start="6"><li>(单选题)Java中的数组存储在( )中。</li></ol><ul><li>A. 栈</li><li>B. 队列</li><li>C. 堆</li><li>D. 链表</li></ul><ol start="8"><li>(填空题)数组复制时,”&#x3D;”将一个数组的___传递给另一个数组。</li></ol><ul><li><p>*我的答案：</p><p>(1) 元素值 </p></li><li><p><em>正确答案：</em></p><p>(1) 引用</p></li></ul><ol start="9"><li>(填空题)JVM将数组存储在___(堆或栈)中。</li></ol><ul><li><p><em>我的答案：**0</em>分</p><p>(1) 堆 </p></li><li><p><em>正确答案：</em></p><p>(1) 栈</p></li></ul><h3 id="项目五"><a href="#项目五" class="headerlink" title="项目五"></a>项目五</h3><ol start="3"><li>(单选题)在以下什么情况下，构造方法会被调用？( )</li></ol><ul><li>A. 类的定义时</li><li>B. 创建对象时</li><li>C. 调用对象方法时</li><li>D. 适用对象的变量时</li></ul><ol start="13"><li>(判断题)声明构造方法时，不能使用private关键字修饰。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><ol start="15"><li>(判断题)方法内部类中不能访问外部类的成员变量。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><h3 id="项目六"><a href="#项目六" class="headerlink" title="项目六"></a>项目六</h3><ol start="4"><li>(填空题)<em><strong>类是所有类的父类,该类中判断两个对象是否相等的方法是</strong></em>,取得对象完整信息的方法是___。（注意大小写）</li></ol><ul><li><p>我的答案：</p><p>(1) Object </p><p>(2) equals </p><p>(3) toString </p></li><li><p><em>正确答案：</em></p><p>(1) Object</p><p>(2) equals( )</p><p>(3) toString( )</p></li></ul><ol start="12"><li>(判断题)构造方法可以有返回值类型的声明。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 错</p><ol start="15"><li>(判断题)一个类不能既是子类又是父类。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><h3 id="项目七"><a href="#项目七" class="headerlink" title="项目七"></a>项目七</h3><ol start="7"><li>(填空题)___是指,一个类中可以有多个具有相同名字和类型的方法,但这些方法的参数必须不同。</li></ol><ul><li><p>我的答案：</p><p>(1) 方法重载 </p></li><li><p><em>正确答案：</em></p><p>(1) 方法重载</p></li></ul><ol start="8"><li>(填空题)再Java语言中多态性体现在由方法重载实现静态多态性和___实现的动态多态性。</li></ol><ul><li><p>我的答案：</p><p>(1) 方法重写 </p></li><li><p><em>正确答案：</em></p><p>(1) 方法重写</p></li></ul><p>抽象类</p><h3 id="项目八"><a href="#项目八" class="headerlink" title="项目八"></a>项目八</h3><ol start="2"><li>(单选题)使用Iterator时,判断是否存在下一个元素可以使用哪一个方法？( )</li></ol><ul><li>A. next( )</li><li>B. hash( )</li><li>C. hasPrevious( )</li><li>D. hasNext( )</li></ul><p><em>我的答案:</em> D:hasNext( );<em>正确答案:</em> D:hasNext( );</p><ol start="3"><li>(单选题)在程序开发中,经常会使用以下哪个类来存储程序中所需的配置？( )</li></ol><ul><li>A. HashMap</li><li>B. TreeSet</li><li>C. Properties</li><li>D. TreeMap</li></ul><p><em>我的答案:</em> C:Properties;<em>正确答案:</em> C</p><ol start="4"><li>(单选题)要想按照集合中保存的元素没有重复且按照一定的顺序排列,可以使用以下哪个集合？( )</li></ol><ul><li>A. LinkedList</li><li>B. ArrayList</li><li>C. hashSet</li><li>D. TreeSet</li></ul><p><em>我的答案:</em> D:TreeSet;<em>正确答案:</em> D:TreeSet;</p><ol start="5"><li>(填空题)JDK中提供了一系列可以存储任意对象的类,统称为___。</li></ol><ul><li><p>我的答案：</p><p>(1) 集合类 </p></li><li><p><em>正确答案：</em></p><p>(1) 集合;集合类</p></li></ul><ol start="6"><li>(填空题)在创建TreeSet对象时,可以传入自定义的比较器,自定义比较器需要实现___接口。</li></ol><ul><li><p>我的答案：</p><p>(1) Comparator </p></li><li><p><em>正确答案：</em></p><p>(1) Comparator</p></li></ul><ol start="7"><li>(填空题)Collection有两个子接口,分别是List和Set,List集合的特点是有序,可重复,Set集合的特点是___。</li></ol><ul><li><p>我的答案：</p><p>(1) 有序、可重复 无序、不可重复 </p></li><li><p><em>正确答案：</em></p><p>(1) 无序存储;无序不重复;元素无序,不可重复;无序不可重复</p></li></ul><ol start="8"><li>(填空题)使用Iterator遍历集合时,首先需要调用___方法判断是否存在下一个元素,若存在下一个元素,则调用___方法取出该元素。</li></ol><ul><li><p>我的答案：</p><p>(1) hasNext()  </p><p>(2) next()  </p></li><li><p><em>正确答案：</em></p><p>(1) hasNext( )</p><p>(2) next( )</p></li></ul><ol start="9"><li>(填空题)集合按照存储接口的不同可分为单列集合和双列集合,单列集合的根接口是___,双列集合的根接口是___。</li></ol><ul><li><p>我的答案：</p><p>(1) Collection  </p><p>(2) Map </p></li><li><p><em>正确答案：</em></p><p>(1) Collection</p><p>(2) Map</p></li></ul><ol start="12"><li>(判断题)集合中不能存放基本数据类型,而只能存放引用数据类型。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><ol start="14"><li>(判断题)使用Iterator迭代集合元素时,可以调用集合对象的方法增删元素。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 错</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Uni-app</title>
      <link href="/posts/2e2abc46.html"/>
      <url>/posts/2e2abc46.html</url>
      
        <content type="html"><![CDATA[<h1 id="Uni-app"><a href="#Uni-app" class="headerlink" title="Uni-app"></a>Uni-app</h1><h2 id="uni-request"><a href="#uni-request" class="headerlink" title="uni.request"></a>uni.request</h2><p>使用中经常出现，赋不上初值的问题，需要在刷新时才能获取到数据，解决方法就是在需要该数据的前一个页面就要加上请求语句，获取到所有的数据（clock的bug QAQ）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">uni.<span class="title function_">request</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://localhost:8181/target/delete&#x27;</span>,</span><br><span class="line"><span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">targetName</span>: state.<span class="property">targetWithTime</span>[index].<span class="property">targetName</span>,</span><br><span class="line"><span class="attr">ifPoints</span>: <span class="number">1</span>,</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="comment">//请求成功后的操作，res为返回的数据</span></span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"><span class="comment">// 从targetWithTime数组中移除已删除的目标数据</span></span><br><span class="line">        <span class="comment">//这里的对state.targetWithTime和user.data.point的操作很关键</span></span><br><span class="line">        <span class="comment">//因为数据库操作成功了，但是前端数据并没有发送改变</span></span><br><span class="line">        <span class="comment">//这时候就需要对响应式数据进行相应的改变，来保证页面的改变</span></span><br><span class="line">state.<span class="property">targetWithTime</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">user.<span class="property">data</span>.<span class="property">point</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">targetPoint</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="uni-showToast"><a href="#uni-showToast" class="headerlink" title="uni.showToast"></a>uni.showToast</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//弹出来的提示信息</span></span><br><span class="line">uni.<span class="title function_">showToast</span>(&#123;</span><br><span class="line"><span class="attr">icon</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line"><span class="attr">title</span>: <span class="string">&#x27;密码错误&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="uni-redirectTo"><a href="#uni-redirectTo" class="headerlink" title="uni.redirectTo"></a>uni.redirectTo</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重定向，在函数中使用比较方便</span></span><br><span class="line">uni.<span class="title function_">redirectTo</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;../../pages/index/Time&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="scroll-view"><a href="#scroll-view" class="headerlink" title="scroll-view"></a>scroll-view</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!--enable-flex为允许设置flex布局--&gt;</span><br><span class="line">    &lt;scroll-view class=&quot;tagMenuList&quot; scroll-x=&quot;true&quot; enable-flex=&quot;true&quot;&gt;</span><br><span class="line">        &lt;view :class=&quot;item.className&quot; v-for=&quot;(item, index) in state.tagWithTime&quot; :key=&quot;index&quot; @click=&quot;classChange(index)&quot;&gt;</span><br><span class="line">            &lt;view class=&quot;tagMenuListDP&quot;&gt;</span><br><span class="line">                &lt;text&gt;&#123;&#123; item.tagName &#125;&#125;&lt;/text&gt;</span><br><span class="line">            &lt;/view&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">    &lt;/scroll-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="swiper"><a href="#swiper" class="headerlink" title="swiper"></a>swiper</h2><p>需要搭配swiper-item作为滑动的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!--easing-function为动画效果--&gt;</span><br><span class="line">    &lt;swiper class=&quot;swiper&quot; autoplay=&quot;true&quot; easing-function=&quot;easeInOutCubic&quot;&gt;</span><br><span class="line">        &lt;swiper-item v-for=&quot;(item, index) in state.storeWithTime&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">            &lt;view class=&quot;StoreDetail&quot;&gt;</span><br><span class="line">                &lt;view class=&quot;StoreDetailI&quot;&gt;</span><br><span class="line">                    &lt;image src=&quot;https://img1.imgtp.com/2023/05/23/d3gU1S46.svg&quot;</span><br><span class="line">                        style=&quot;width: 606rpx;height: 606rpx;position: absolute;&quot; /&gt;</span><br><span class="line">                &lt;/view&gt;</span><br><span class="line">                &lt;view class=&quot;StoreDetailP&quot;&gt;</span><br><span class="line">                    &lt;text&gt;&#123;&#123; item.storeName &#125;&#125;&lt;/text&gt;</span><br><span class="line">                    &lt;text&gt;&#123;&#123; item.storeDescribe &#125;&#125;&lt;/text&gt;</span><br><span class="line">                    &lt;text&gt;&#123;&#123; item.storeHour &#125;&#125;小时&#123;&#123; item.storeMinute &#125;&#125;分钟&lt;/text&gt;</span><br><span class="line">                &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">                &lt;view class=&quot;StoreDetailPrice&quot; @click=&quot;storeWithTimeDelete(index)&quot;&gt;</span><br><span class="line">                    &lt;image src=&quot;@/static/coin.svg&quot; style=&quot;width: 34rpx;height: 34rpx;&quot; /&gt;</span><br><span class="line">                    &lt;text&gt;X&#123;&#123; item.storePoint &#125;&#125;&lt;/text&gt;</span><br><span class="line">                &lt;/view&gt;</span><br><span class="line">            &lt;/view&gt;</span><br><span class="line">        &lt;/swiper-item&gt;</span><br><span class="line">    &lt;/swiper&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="uni-popup"><a href="#uni-popup" class="headerlink" title="uni-popup"></a>uni-popup</h2><p>需要用ref进行整体响应化，并调用其中的方法来控制关闭和控制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;uni-popup ref=&quot;popup&quot; type=&quot;dialog&quot;&gt;</span><br><span class="line">        &lt;!--mode=&quot;base&quot;为对话框加两个按钮的形式--&gt;</span><br><span class="line">        &lt;!--before-close为是否拦截按钮事件，如为true，则不会关闭对话框，关闭需要手动执行 uni-popup 的 close 方法--&gt;</span><br><span class="line">        &lt;uni-popup-dialog type=&quot;error&quot; mode=&quot;base&quot; title=&quot;确定要放弃吗?&quot; content=&quot;本次计时将不会得到任何分数&quot; :duration=&quot;2000&quot; :before-close=&quot;true&quot;</span><br><span class="line">            @close=&quot;close&quot; @confirm=&quot;confirm&quot;&gt;&lt;/uni-popup-dialog&gt;</span><br><span class="line">    &lt;/uni-popup&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    </span><br><span class="line">let popup = ref(null); //记着赋初值，本质是reactive(&#123;value:null&#125;)</span><br><span class="line"></span><br><span class="line">const timeEnd = () =&gt; &#123;</span><br><span class="line">popup.value.open() //记得.value然后调用函数</span><br><span class="line">&#125;</span><br><span class="line">const confirm = () =&gt; &#123;</span><br><span class="line">popup.value.close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const close = () =&gt; &#123;</span><br><span class="line">popup.value.close()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/posts/79666db.html"/>
      <url>/posts/79666db.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>设单链表的结点结构为(data,next)，next为指针域，已知指针px指向单链表中data为x的结点，指针py指向data为y的新结点 , 若将结点y插入结点x之后，则需要执行以下语句:</p><p>X  (2)-&gt; Y (1)-&gt;  Z</p><p>1、首先这是一个插入的方法，而第一步就是把将要插入的y结点的下一个结点变为x原来的下一个结点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py-&gt;next = px-&gt;next;</span><br></pre></td></tr></table></figure><p>2、把x结点的下一个结点变为x结点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">px-&gt;next = py;</span><br></pre></td></tr></table></figure><p>对线性表L&#x3D;（a1…an）</p><p>(1)如L为顺序表，请设计算法将L就地逆置。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXSIZE = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">int</span> data[MAXSIZE];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125; SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将顺序表L就地逆置</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(SqList &amp;L)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        temp = L.data[i];</span><br><span class="line">        L.data[i] = L.data[L.length - i - <span class="number">1</span>];</span><br><span class="line">        L.data[L.length - i - <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqList L = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, <span class="number">6</span>&#125;; <span class="comment">// 初始化顺序表L</span></span><br><span class="line">    <span class="built_in">reverse</span>(L); <span class="comment">// 就地逆置L</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        cout &lt;&lt; L.data[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)若L为带头结点的单链表，设计算法将L就地逆置。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line"></span><br><span class="line">    ListNode* next;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverseList</span><span class="params">(ListNode* L)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ListNode* cur = L-&gt;next;</span><br><span class="line"></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ListNode* next = cur-&gt;next;</span><br><span class="line"></span><br><span class="line">    cur-&gt;next = L-&gt;next;</span><br><span class="line"></span><br><span class="line">    L-&gt;next = cur;</span><br><span class="line"></span><br><span class="line">    cur = next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试编写在带头结点的单链表L中删除（一个）最小值结点的（高效）算法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125; LNode, *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建带头结点的单链表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createList</span><span class="params">(LinkList &amp;L, <span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    L = <span class="keyword">new</span> LNode;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        LNode *p = <span class="keyword">new</span> LNode;</span><br><span class="line">        p-&gt;data = a[i];</span><br><span class="line">        p-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除带头结点的单链表L中最小值结点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deleteMin</span><span class="params">(LinkList &amp;L)</span> </span>&#123;</span><br><span class="line">    LNode *pre = L, *p = L-&gt;next, *minpre = pre, *minp = p;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;data &lt; minp-&gt;data) &#123;</span><br><span class="line">            minp = p;</span><br><span class="line">            minpre = pre;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    minpre-&gt;next = minp-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> minp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[] = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    LinkList L;</span><br><span class="line">    <span class="built_in">createList</span>(L, a, <span class="number">5</span>); <span class="comment">// 创建带头结点的单链表L</span></span><br><span class="line">    <span class="built_in">deleteMin</span>(L); <span class="comment">// 删除L中最小值结点</span></span><br><span class="line">    LNode *p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设有一个带头结点的单链表，其结点的数据值均为正整数，编写完成下列功能的算法：</p><p>(1)找出最小值结点，且输出该数值；</p><p>(2)若该数值是奇数，则将其与直接后继结点的数值交换；</p><p>(3)若该数值是偶数，则将其直接后继结点删除。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line"></span><br><span class="line">    ListNode* next;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swapdataue</span><span class="params">(ListNode* a, ListNode* b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> temp = a-&gt;data;</span><br><span class="line"></span><br><span class="line">    a-&gt;data = b-&gt;data;</span><br><span class="line"></span><br><span class="line">    b-&gt;data = temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deleteNextNode</span><span class="params">(ListNode* node)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ListNode* del = node-&gt;next;</span><br><span class="line"></span><br><span class="line">    node-&gt;next = del-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> del;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operateList</span><span class="params">(ListNode* L)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ListNode* pre = L;</span><br><span class="line"></span><br><span class="line">    ListNode* cur = L-&gt;next;</span><br><span class="line"></span><br><span class="line">    ListNode* min_pre = pre;</span><br><span class="line"></span><br><span class="line">    ListNode* min = cur;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cur-&gt;data &lt; min-&gt;data) &#123;</span><br><span class="line"></span><br><span class="line">        min_pre = pre;</span><br><span class="line"></span><br><span class="line">        min = cur;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pre = cur;</span><br><span class="line"></span><br><span class="line">    cur = cur-&gt;next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;最小值为：&quot;</span> &lt;&lt; min-&gt;data &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (min-&gt;data % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; min-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">swapdataue</span>(min, min-&gt;next);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (min-&gt;data % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; min-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">deleteNextNode</span>(min);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设有两个按元素值非递减次序排列的线性表，均以单链表形式存储。请编写算法将这两个单链表归并为一个按元素值非递增次序排列的单链表，并要求利用原来两个单链表的结点存放归并后的单链表。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义链表结点结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并两个单链表并返回合并后的链表头节点</span></span><br><span class="line"><span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">    <span class="function">ListNode <span class="title">dummy</span><span class="params">(<span class="number">0</span>)</span></span>;  <span class="comment">// 哑结点</span></span><br><span class="line">    ListNode* tail = &amp;dummy;  <span class="comment">// 合并后链表的尾结点</span></span><br><span class="line">    <span class="keyword">while</span> (l1 &amp;&amp; l2) &#123;</span><br><span class="line">        <span class="comment">// 选择两个链表中较小的结点接入合并后的链表尾部</span></span><br><span class="line">        <span class="keyword">if</span> (l1-&gt;val &lt;= l2-&gt;val) &#123;</span><br><span class="line">            tail-&gt;next = l1;</span><br><span class="line">            l1 = l1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tail-&gt;next = l2;</span><br><span class="line">            l2 = l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = tail-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将剩余的链表结点接入合并后的链表尾部</span></span><br><span class="line">    <span class="keyword">if</span> (l1) &#123;</span><br><span class="line">        tail-&gt;next = l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        tail-&gt;next = l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 反转合并后的链表，使其变为非递增次序排列</span></span><br><span class="line">    ListNode* prev = <span class="literal">NULL</span>;</span><br><span class="line">    ListNode* curr = dummy.next;</span><br><span class="line">    <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">        ListNode* next = curr-&gt;next;</span><br><span class="line">        curr-&gt;next = prev;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化两个按元素值非递减次序排列的单链表</span></span><br><span class="line">    ListNode* l1 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">    l1-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">3</span>);</span><br><span class="line">    l1-&gt;next-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">5</span>);</span><br><span class="line">    l1-&gt;next-&gt;next-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">7</span>);</span><br><span class="line">    l1-&gt;next-&gt;next-&gt;next-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">9</span>);</span><br><span class="line">    ListNode* l2 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">2</span>);</span><br><span class="line">    l2-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">4</span>);</span><br><span class="line">    l2-&gt;next-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">6</span>);</span><br><span class="line">    l2-&gt;next-&gt;next-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">8</span>);</span><br><span class="line">    l2-&gt;next-&gt;next-&gt;next-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 归并两个单链表并输出合并后的链表元素</span></span><br><span class="line">    ListNode* merged = <span class="built_in">mergeTwoLists</span>(l1, l2);</span><br><span class="line">    <span class="keyword">while</span> (merged) &#123;</span><br><span class="line">        cout &lt;&lt; merged-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        merged = merged-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ListNode(int x) : val(x), next(NULL) &#123;&#125; 是一个 C++ 类的构造函数。它的作用是创建一个新的 ListNode 对象，并初始化 val 和 next 属性。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//具体地，: val(x), next(NULL) 是 C++ 中的成员初始化列表，用于给对象的成员变量进行初始化。在这里，val 成员变量被初始化为参数 x 的值，而 next 成员变量被初始化为 NULL。然后，在函数体内部，由于该构造函数不需要进行额外的操作，所以函数体为空。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//总之，这行代码的作用是创建一个新的 ListNode 对象，并将它的 val 属性设置为 x，next 属性设置为 NULL</span></span><br></pre></td></tr></table></figure><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><p>利用栈和队列，判断键盘上输入的n个数是否构成回文序列。(算法设计题)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在代码中，输入序列中的元素通过stack和queue两个数据结构依次入栈和入队。然后，使用top()和front()方法依次从栈和队列中取出元素，并比较它们的值是否相等，如果有不相等的，则说明输入序列不是回文序列，返回false。如果比较到栈和队列都为空，说明输入序列是回文序列，返回true。最后，在main()函数中调用is_palindrome()函数，根据其返回值输出结果。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span>  <span class="comment">// 包含栈所在的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span>  <span class="comment">// 包含队列所在的头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断输入的n个数是否构成回文序列</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_palindrome</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s;  <span class="comment">// 定义一个整型栈s</span></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;  <span class="comment">// 定义一个整型队列q</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        cin &gt;&gt; num;  <span class="comment">// 输入第i个数</span></span><br><span class="line">        s.<span class="built_in">push</span>(num);  <span class="comment">// 将第i个数入栈</span></span><br><span class="line">        q.<span class="built_in">push</span>(num);  <span class="comment">// 将第i个数入队</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; !q.<span class="built_in">empty</span>()) &#123;  <span class="comment">// 当栈和队列都不为空时</span></span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">top</span>() != q.<span class="built_in">front</span>()) &#123;  <span class="comment">// 如果栈顶元素和队首元素不相等</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 返回false，输入的数不是回文序列</span></span><br><span class="line">        &#125;</span><br><span class="line">        s.<span class="built_in">pop</span>();  <span class="comment">// 将栈顶元素弹出</span></span><br><span class="line">        q.<span class="built_in">pop</span>();  <span class="comment">// 将队首元素弹出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">// 如果比较完毕栈和队列都为空，则输入的数是回文序列，返回true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter the number of elements: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; n;  <span class="comment">// 输入元素个数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">is_palindrome</span>(n)) &#123;  <span class="comment">// 如果输入的数是回文序列</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The sequence is a palindrome.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 如果输入的数不是回文序列</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The sequence is not a palindrome.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// 程序结束，返回0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查表达式中括号是否匹配</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在代码中，输入的表达式字符串通过stack栈结构进行括号匹配检查。当遇到左括号时，将其入栈；当遇到右括号时，从栈中弹出一个元素并比较其是否匹配。如果不匹配，则表达式中的括号不匹配，返回false；如果栈中元素都已匹配完毕，表明表达式中的括号匹配，返回true。最后，在main()函数中调用is_matching()函数，根据其返回值输出结果。</span></span><br><span class="line"></span><br><span class="line">值得注意的是，代码中默认输入的表达式中只包含括号，如果输入的表达式中包含其他字符，则需要做相应的处理。</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断表达式中的括号是否匹配</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_matching</span><span class="params">(string exp)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; s; <span class="comment">// 声明一个栈s</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; exp.<span class="built_in">length</span>(); i++) &#123; <span class="comment">// 循环遍历表达式中的每个字符</span></span><br><span class="line">        <span class="type">char</span> ch = exp[i]; <span class="comment">// 获取当前字符</span></span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span> || ch == <span class="string">&#x27;&#123;&#x27;</span> || ch == <span class="string">&#x27;[&#x27;</span>) &#123; <span class="comment">// 如果当前字符是左括号，则入栈</span></span><br><span class="line">            s.<span class="built_in">push</span>(ch);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;)&#x27;</span> || ch == <span class="string">&#x27;&#125;&#x27;</span> || ch == <span class="string">&#x27;]&#x27;</span>) &#123; <span class="comment">// 如果当前字符是右括号，则弹出栈顶元素进行匹配</span></span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">empty</span>()) &#123; <span class="comment">// 如果栈为空，则说明右括号没有匹配的左括号，表达式中的括号不匹配，返回false</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">char</span> top_ch = s.<span class="built_in">top</span>(); <span class="comment">// 获取栈顶元素</span></span><br><span class="line">            s.<span class="built_in">pop</span>(); <span class="comment">// 弹出栈顶元素</span></span><br><span class="line">            <span class="keyword">if</span> ((ch == <span class="string">&#x27;)&#x27;</span> &amp;&amp; top_ch != <span class="string">&#x27;(&#x27;</span>) || <span class="comment">// 如果当前字符是右括号，但栈顶元素不是对应的左括号，则表达式中的括号不匹配，返回false</span></span><br><span class="line">                (ch == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; top_ch != <span class="string">&#x27;&#123;&#x27;</span>) || </span><br><span class="line">                (ch == <span class="string">&#x27;]&#x27;</span> &amp;&amp; top_ch != <span class="string">&#x27;[&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="built_in">empty</span>(); <span class="comment">// 如果栈中没有剩余元素，则说明表达式中的括号全部匹配，返回true；否则返回false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string exp;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter an expression: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; exp;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">is_matching</span>(exp)) &#123; <span class="comment">// 调用is_matching()函数判断表达式中的括号是否匹配，并输出结果</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The parentheses in the expression are matched.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The parentheses in the expression are not matched.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用栈的基本操作实现将十进制整数N转换为r（2≤r≤16）进制数，并输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将十进制整数N转换为r进制数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">convert</span><span class="params">(<span class="type">int</span> N, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s; <span class="comment">// 声明一个栈s</span></span><br><span class="line">    <span class="keyword">while</span> (N &gt; <span class="number">0</span>) &#123; <span class="comment">// 循环将N转换为r进制数</span></span><br><span class="line">        <span class="type">int</span> remainder = N % r; <span class="comment">// 计算N除以r的余数</span></span><br><span class="line">        s.<span class="built_in">push</span>(remainder); <span class="comment">// 将余数入栈</span></span><br><span class="line">        N /= r; <span class="comment">// 将N除以r的商作为新的N</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将栈中的元素依次弹出并输出，即为r进制表示的N</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The converted number is: &quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> digit = s.<span class="built_in">top</span>(); <span class="comment">// 获取栈顶元素</span></span><br><span class="line">        s.<span class="built_in">pop</span>(); <span class="comment">// 弹出栈顶元素</span></span><br><span class="line">        <span class="keyword">if</span> (digit &lt; <span class="number">10</span>) &#123; <span class="comment">// 如果是0-9的数字，则直接输出</span></span><br><span class="line">            cout &lt;&lt; digit;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则输出对应的字母</span></span><br><span class="line">            cout &lt;&lt; <span class="built_in">char</span>(digit - <span class="number">10</span> + <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> N, r;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter a decimal integer N: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter a base r (2 &lt;= r &lt;= 16): &quot;</span>;</span><br><span class="line">    cin &gt;&gt; r;</span><br><span class="line">    <span class="built_in">convert</span>(N, r); <span class="comment">// 调用convert()函数进行转换并输出结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="学习通"><a href="#学习通" class="headerlink" title="学习通"></a>学习通</h2><h3 id="第一章-基础概念"><a href="#第一章-基础概念" class="headerlink" title="第一章(基础概念)"></a>第一章(基础概念)<img src="https://gitee.com/TECNB/pic-demo/raw/master/image-20230612193237000.png" alt="image-20230612193237000"></h3><ol><li>(单选题) 以下关于数据的存储结构的叙述中哪一条是正确的（  ）。</li></ol><ul><li>A. 数据的存储结构是逻辑结构在计算机存储器中的实现</li><li>B. 数据的存储结构对数据运算的具体实现没有影响</li><li>C. 数据的存储结构是数据间关系的抽象描述</li><li>D. 数据的存储结构分为线性结构和非线性结构</li></ul><p>（数据的逻辑结构分为线性结构和非线性结构两大类，线性结构包括数组、链表、 栈、队列等; 非线性结构包括树、图等）</p><p><em>我的答案:</em> A:数据的存储结构是逻辑结构在计算机存储器中的实现;<em>正确答案:</em> A:数据的存储结构是逻辑结构在计算机存储器中的实现;</p><p>B. 数据的存储结构对数据运算的具体实现没有影响：这个选项是错误的。数据的存储结构会对数据的运算和操作产生影响。不同的存储结构会影响数据的访问效率、插入和删除操作的复杂度等。</p><p>C. 数据的存储结构是数据间关系的抽象描述：这个选项是不准确的。数据的存储结构描述的是数据在计算机存储器中的组织方式，它并不仅仅是对数据间关系的抽象描述，还包括数据的物理存储方式和访问方式等。</p><p>D. 数据的存储结构分为线性结构和非线性结构：这个选项是不准确的。数据的存储结构可以更细分为线性结构、树形结构、图形结构等多种类型，而非线性结构只是其中的一种。</p><ol start="6"><li>(单选题) 下面说法错误的是（  ）</li></ol><ul><li>A. 在相同的规模n下，复杂度O(n)的算法在时间上总是优于复杂度O(2n)的算法 </li><li>B. 同一个算法，实现语言的级别越高，执行效率就越低</li><li>C. 算法原地工作的含义是指不需要任何额外的辅助空间</li><li>D. 所谓时间复杂度是指最坏情况下估算算法执行时间的一个上界</li></ul><p><em>我的答案:</em> B:同一个算法，实现语言的级别越高，执行效率就越低;<em>正确答案:</em> C:算法原地工作的含义是指不需要任何额外的辅助空间;（和AI有歧义）</p><ol start="10"><li>(填空题) 数据的    在计算机中的表示（映像）称为存储结构，需要考虑数据元素的表示和数据元素间关系的表示。数据的存储结构分为     <em>、</em>     <em>、</em>索引和散列存储结构。</li></ol><ul><li><p>我的答案：</p><p>(1) 存储结构 </p><p>(2) 顺序存储结构 </p><p>(3) 链式存储结构 </p></li><li><p><em>正确答案：</em></p><p>(1) 逻辑结构</p><p>(2) 顺序</p><p>(3) 链式</p></li></ul><p>数据的逻辑结构是指    。</p><ul><li><p>我的答案：</p><p>(1) 逻辑结构在计算机存储器中的实现 </p></li><li><p><em>正确答案：</em></p><p>(1) 数据的组织形式，即数据元素之间逻辑关系的总体</p></li></ul><p>（数据的逻辑结构分为线性结构和非线性结构两大类，线性结构包括数组、链表、 栈、队列等; 非线性结构包括树、图等）</p><ol start="13"><li>(填空题) 一个算法具有5个特性：     ,      ,      ，有零个或多个输入、有一个或多个输出。</li></ol><ul><li><p>我的答案：</p><p>(1) 有穷性 </p><p>(2) 确定性 </p><p>(3) 可行性 </p></li><li><p><em>正确答案：</em></p><p>(1) 有穷性</p><p>(2) 确定性</p><p>(3) 可行性</p></li></ul><p>下面程序段中带下划线的语句的执行次数的数量级是       。i&#x3D;1；while( i&lt;n) i&#x3D;i*2; </p><ul><li><p><em>我的答案：**0</em>分</p><p>(1) O（log₂n） </p></li><li><p><em>正确答案：</em></p><p>(1) O(log2n)</p></li></ul><ol start="17"><li>(填空题) 下面程序段中x++的语句的执行次数的数量级是       。i&#x3D;1；while( i&lt;n) {for (j&#x3D;1;j&lt;&#x3D;n;j++) x++i&#x3D;i*2;}</li></ol><ul><li><p>我的答案：</p><p>(1) O（nlog₂n） </p></li><li><p><em>正确答案：</em></p><p>(1) O(nlog2n)</p></li></ul><ol start="19"><li>(判断题) 算法可以用不同的语言描述，如果用C 语言或C++语言等高级语言来描述，则算法实际上就是程序了。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错<em>正确答案:</em> 对</p><p>数据结构的操作的定义与具体实现有关。</p><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 对<em>正确答案:</em> 错</p><ol start="28"><li>(判断题) 数据项是数据不可分割的最小单位。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 对<em>正确答案:</em> 对</p><h3 id="第二章（线性表）"><a href="#第二章（线性表）" class="headerlink" title="第二章（线性表）"></a>第二章（线性表）</h3><ol start="6"><li>(单选题) 设一个链表最常用的操作是在末尾插入结点和删除尾结点，则选用（  ）最节省时间。</li></ol><ul><li>A. 单链表</li><li>B. 单循环链表</li><li>C. 带尾指针的单循环链表</li><li>D. 带头指针的单循环链表</li></ul><p><em>我的答案:</em> D:带头指针的单循环链表;</p><ol start="9"><li>(单选题) 若长度为n的线性表采用顺序存储结构，在其第i个位置插入一个新元素的算法的时间复杂度为（  ）(1≤i≤n+1)。</li></ol><ul><li>A. O(0)</li><li>B. O(1)</li><li>C. O(n)</li><li>D. O(<img src="https://mooc1.chaoxing.com/ananas/latex/p/576" alt="img">)</li></ul><p><em>我的答案:</em> C</p><ol start="9"><li>(单选题) 若长度为n的线性表采用顺序存储结构，在其第i个位置插入一个新元素的算法的时间复杂度为（  ）(1≤i≤n+1)。</li></ol><ul><li>A. O(0)</li><li>B. O(1)</li><li>C. O(n)</li><li>D. O(<img src="https://mooc1.chaoxing.com/ananas/latex/p/576" alt="img">)</li></ul><p><em>我的答案:</em> C</p><ol start="11"><li>(单选题) 线性表（a1,a2,…,an）以<strong>链接方式</strong>存储时，访问第i位置元素的时间复杂度为（  ）。</li></ol><ul><li>A. O（i）</li><li>B. O（1）</li><li>C. O（n）</li><li>D. O（i-1）</li></ul><p><em>我的答案:</em> C:O（n）;</p><ol start="12"><li>(单选题) 非空的循环单链表head的尾结点p满足（  ）。</li></ol><ul><li>A. p-&gt;next&#x3D;&#x3D;head</li><li>B. p-&gt;next&#x3D;&#x3D;NULL</li><li>C. p&#x3D;&#x3D;NULL</li><li>D. p&#x3D; head</li></ul><p><em>我的答案:</em> A:p-&gt;next&#x3D;&#x3D;head;</p><ol start="13"><li>(单选题) 在单链表指针为p的结点之后插入指针为s的结点，正确的操作是（  ）。</li></ol><ul><li>A. p-&gt;next&#x3D;s;s-&gt;next&#x3D;p-&gt;next;</li><li>B. s-&gt;next&#x3D;p-&gt;next;p-&gt;next&#x3D;s;</li><li>C. p-&gt;next&#x3D;s;p-&gt;next&#x3D;s-&gt;next;</li><li>D. p-&gt;next&#x3D;s-&gt;next;p-&gt;next&#x3D;s;</li></ul><p><em>我的答案:</em> B:s-&gt;next&#x3D;p-&gt;next;p-&gt;next&#x3D;s;；</p><ol start="14"><li>(单选题) 对于一个头指针为head的带头结点的单链表，判定该表为空表的条件是（  ）。</li></ol><ul><li>A. head&#x3D;&#x3D;NULL</li><li>B. head-&gt;next&#x3D;&#x3D;NULL</li><li>C. Head-&gt;next&#x3D;&#x3D;head</li><li>D. head!&#x3D;NULL</li></ul><p><em>我的答案:</em> B:head-&gt;next&#x3D;&#x3D;NULL;</p><ol start="15"><li>(单选题) 完成在非空双向循环链表结点p之后插入s的操作是（  ）。</li></ol><ul><li>A. p-&gt;next&#x3D;s ; s-&gt;prior&#x3D;p; p-&gt;next-&gt;prior&#x3D;s ; s-&gt;next&#x3D;p-&gt;next;</li><li>B. p-&gt;next-&gt;prior&#x3D;s; p-&gt;next&#x3D;s; s-&gt;prior&#x3D;p; s-&gt;next&#x3D;p-&gt;next;</li><li>C. s-&gt;prior&#x3D;p; s-&gt;next&#x3D;p-&gt;next; p-&gt;next&#x3D;s; p-&gt;next-&gt;prior&#x3D;s ;</li><li>D. s-&gt;next&#x3D;p-&gt;next; p-&gt;next-&gt;prior&#x3D;s ; s-&gt;prior&#x3D;p; p-&gt;next&#x3D;s;</li></ul><p><em>我的答案:</em> C:s-&gt;prior&#x3D;p; s-&gt;next&#x3D;p-&gt;next; p-&gt;next&#x3D;s; p-&gt;next-&gt;prior&#x3D;s ;;</p><ol start="16"><li>(单选题) 在双向循环链表中，删除p所指的结点时须修改指针（  ）。</li></ol><ul><li>A. p-&gt;prior-&gt;next&#x3D;p-&gt;next；   p-&gt;next-&gt;prior&#x3D;p-&gt;prior;</li><li>B. p-&gt;prior&#x3D;p-&gt;prior-&gt;prior ；  p-&gt;prior-&gt;next&#x3D;p;</li><li>C. p-&gt;next-&gt;prior&#x3D;p；      p-&gt;next&#x3D;p-&gt;next-&gt;next;</li><li>D. p-&gt;next&#x3D;p-&gt;prior-&gt;prior；   p-&gt;prior&#x3D;p-&gt;next-&gt;next;</li></ul><p><em>我的答案:</em> A:p-&gt;prior-&gt;next&#x3D;p-&gt;next； p-&gt;next-&gt;prior&#x3D;p-&gt;prior;;</p><p>线性表L&#x3D;（a1,a2,…,an）用数组表示，假定删除表中任一元素的概率相同，则删除一个元素平均需要移动元素的个数是   。</p><ul><li><p>我的答案：</p><p>(1) (n-1)&#x2F;2</p></li></ul><ol start="20"><li>(填空题) 在一个长度为n的顺序表中第i个位置（1≤i≤n+1）插入一个元素时，需向后移动         个元素。</li></ol><ul><li><p>我的答案：</p><p>(1) n - i + 1</p></li></ul><h3 id="第三章-1"><a href="#第三章-1" class="headerlink" title="第三章"></a>第三章</h3><p>全是算法</p><h3 id="第四章（栈和队列）"><a href="#第四章（栈和队列）" class="headerlink" title="第四章（栈和队列）"></a>第四章（栈和队列）</h3><ol><li>(单选题)栈和队列的共同点是( )。</li></ol><ul><li>A. 没有共同点</li><li>B. 只允许在端点处插入和删除元素</li><li>C. 都是先进后出</li><li>D. 都是先进先出</li></ul><p><em>我的答案:</em> B:只允许在端点处插入和删除元素;</p><ol start="3"><li>(单选题) 循环队列占用的空间( )。</li></ol><ul><li>A. 必须连续</li><li>B. 不必连续</li><li>C. 不能连续</li><li>D. 可以不连续</li></ul><p>***的答案: A <em>正确答案:</em> A</p><p>4.(单选题) 若用一个大小为6的数组来实现循环队列,且当前front和rear的值分别为3和0,当从队列中删除一个元素,再加入两个元素后,front和rear的值分别为( )。</p><ul><li>A. 5和1</li><li>B. 4和2</li><li>C. 2和4</li><li>D. 1和5</li></ul><p>***的答案: B <em>正确答案:</em> B</p><ol start="8"><li>(单选题) 对于队列操作数据的原则是( )。</li></ol><ul><li>A. 先进先出</li><li>B. 后进先出</li><li>C. 先进后出</li><li>D. 不分顺序</li></ul><p>***的答案: A <em>正确答案:</em> A</p><ol start="13"><li>(单选题) 设链栈中结点的结构:data为数据域,next为指针域,且top是栈顶指针。若想在链栈的栈顶插入一个由指针s所指的结点,则应执行下列( )操作。</li></ol><ul><li>A. s-&gt;next&#x3D;top-&gt;next;top-&gt;next&#x3D;s;</li><li>B. top-&gt;next&#x3D;s;</li><li>C. s-&gt;next&#x3D;top;top&#x3D;top-&gt;next;</li><li>D. s-&gt;next&#x3D;top;top&#x3D;s;</li></ul><p>***的答案: D  <em>正确答案:</em> A</p><ol start="16"><li>(单选题) 队列中的元素个数是( )。</li></ol><ul><li>A. 不变的</li><li>B. 可变的</li><li>C. 任意的</li><li>D. 0</li></ul><p>***的答案: B <em>正确答案:</em> B</p><p>17.(单选题) 循环队列SQ队满的条件是( )。</p><ul><li>A. SQ-&gt;rear&#x3D;&#x3D;SQ-&gt;front</li><li>B. (SQ-&gt;rear+1)%MAXLEN&#x3D;&#x3D;SQ-&gt;front</li><li>C. SQ-&gt;rear&#x3D;&#x3D;O</li><li>D. SQ-&gt;front&#x3D;&#x3D;0</li></ul><p>***的答案: B <em>正确答案:</em> B</p><ol start="18"><li>(填空题) 顺序队列初始化后, front&#x3D;rear&#x3D;___。</li></ol><ul><li><p>***的答案：</p><p>(1) 1</p></li><li><p><em>正确答案：</em></p><p>(1) -1</p></li></ul><ol start="21"><li>(填空题) 在队列中,允许插入的一端称为___。</li></ol><ul><li><p>***的答案：</p><p>(1) 队尾</p></li><li><p><em>正确答案：</em></p><p>(1) 队尾</p></li></ul><ol start="27"><li>(填空题) 在队列中,允许删除的一端称为___。</li></ol><ul><li><p>***的答案：</p><p>(1) 队首</p></li><li><p><em>正确答案：</em></p><p>(1) 队头</p></li></ul><ol start="33"><li>(判断题) 栈和队列都是顺序存储的线性结构。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><p>***的答案:  错  正确答案: 错</p><h3 id="第五章（串和广义表）"><a href="#第五章（串和广义表）" class="headerlink" title="第五章（串和广义表）"></a>第五章（串和广义表）</h3><h4 id="单选题-广义表-a-b-c-d-e-的表尾是-。"><a href="#单选题-广义表-a-b-c-d-e-的表尾是-。" class="headerlink" title="(单选题)广义表(a,b,c,d,e)的表尾是( )。"></a>(单选题)广义表(a,b,c,d,e)的表尾是( )。</h4><ul><li>A. (e)</li><li>B. ( )</li><li>C. (b,c,d,e)</li><li>D. (a,b,c,d,e)</li></ul><p><em>我的答案:</em> C</p><p>(单选题)广义表是线性表的推广,它们之间的区别在千( )。</p><ul><li>A. 能否使用子表</li><li>B. 能否使用原子项</li><li>C. 是否能为空</li><li>D. 表的长度</li></ul><p><em>我的答案:</em> A:能否使用子表;</p><h4 id="单选题-设有一个字符串S-x3D-”abcdefgh”-问该串的最大子串个数为-。"><a href="#单选题-设有一个字符串S-x3D-”abcdefgh”-问该串的最大子串个数为-。" class="headerlink" title="(单选题)设有一个字符串S&#x3D;”abcdefgh”,问该串的最大子串个数为( )。"></a>(单选题)设有一个字符串S&#x3D;”abcdefgh”,问该串的最大子串个数为( )。</h4><p>37&#x3D;(8*9)&#x2F;2+1</p><ul><li>A. 9</li><li>B. 37</li><li>C. 36</li><li>D. 8</li></ul><p><em>我的答案:</em> B:37;</p><p>字串： n（n+1）&#x2F;2 + 1</p><p>非空子串：n（n+1）&#x2F;2</p><p>非空真子串：n（n+1）&#x2F;2 - 1</p><h4 id="单选题-若Strlndex-S-T-表示求T在S中的位置的操作-则对于S-x3D-”Beijing-and-Nanjing”-T-x3D-”jing”-Strlndex-S-T-的结果为-。"><a href="#单选题-若Strlndex-S-T-表示求T在S中的位置的操作-则对于S-x3D-”Beijing-and-Nanjing”-T-x3D-”jing”-Strlndex-S-T-的结果为-。" class="headerlink" title="(单选题)若Strlndex(S,T)表示求T在S中的位置的操作,则对于S&#x3D;”Beijing and Nanjing”,T&#x3D;”jing”,Strlndex(S,T)的结果为( )。"></a>(单选题)若Strlndex(S,T)表示求T在S中的位置的操作,则对于S&#x3D;”Beijing and Nanjing”,T&#x3D;”jing”,Strlndex(S,T)的结果为( )。</h4><ul><li>A. 4</li><li>B. 2</li><li>C. 3</li><li>D. 16</li></ul><p><em>正确答案:</em> A</p><h4 id="填空题-串链接存储的优点是（）-缺点是（）。"><a href="#填空题-串链接存储的优点是（）-缺点是（）。" class="headerlink" title="(填空题)串链接存储的优点是（）,缺点是（）。"></a>(填空题)串链接存储的优点是（）,缺点是（）。</h4><ul><li><p><em>我的答案：</em></p><p>(1) 可以任意地插入和删除子串，不需要移动其他子串</p><p>(2) 存储密度低，每个字符都需要一个指针来指向下一个字符，因此浪费了大量的存储空间</p></li></ul><h4 id="填空题-串顺序存储紧凑格式的缺点是对串的字符处理-。"><a href="#填空题-串顺序存储紧凑格式的缺点是对串的字符处理-。" class="headerlink" title="(填空题)串顺序存储紧凑格式的缺点是对串的字符处理___。"></a>(填空题)串顺序存储紧凑格式的缺点是对串的字符处理___。</h4><ul><li><p><em>我的答案：</em></p><p>(1) 比较困难</p></li></ul><h4 id="填空题-空格串的长度等于-。"><a href="#填空题-空格串的长度等于-。" class="headerlink" title="(填空题)空格串的长度等于___。"></a>(填空题)空格串的长度等于___。</h4><ul><li><p><em>我的答案：</em></p><p>(1) 空格的个数</p></li></ul><h4 id="填空题-在C语言中-以字符-表示串值的终结。"><a href="#填空题-在C语言中-以字符-表示串值的终结。" class="headerlink" title="(填空题)在C语言中,以字符___表示串值的终结。"></a>(填空题)在C语言中,以字符___表示串值的终结。</h4><ul><li><p><em>我的答案：</em></p><p>(1) ’\0’</p></li></ul><p>ConcatStr(S1,S2)直接拼接S1和S2</p><p>SubStr(S1,2,LenStr(S2))选取</p><p>Strlndex(S,T)返回字符串t在字符串s中出现的开始位置或索引。</p><p>(填空题)两个串相等是指两个串长度相等,且对应位置的___。</p><ul><li><p><em>我的答案：</em></p><p>(1) 字符</p></li></ul><h4 id="28-填空题-串顺序存储非紧凑格式的缺点是-。"><a href="#28-填空题-串顺序存储非紧凑格式的缺点是-。" class="headerlink" title="28. (填空题)串顺序存储非紧凑格式的缺点是___。"></a>28. (填空题)串顺序存储非紧凑格式的缺点是___。</h4><ul><li><p><em>我的答案：</em></p><p>(1) 空间利用率低</p></li></ul><h4 id="29-填空题-字符串按存储方式可以分为：顺序存储-链接存储和-。"><a href="#29-填空题-字符串按存储方式可以分为：顺序存储-链接存储和-。" class="headerlink" title="29. (填空题)字符串按存储方式可以分为：顺序存储,链接存储和___。"></a>29. (填空题)字符串按存储方式可以分为：顺序存储,链接存储和___。</h4><ul><li><p><em>我的答案：</em></p><p>(1) 堆分配存储</p></li></ul><h4 id="判断题-在链串中为了提高存储密度-应该增大结点的大小。"><a href="#判断题-在链串中为了提高存储密度-应该增大结点的大小。" class="headerlink" title="(判断题)在链串中为了提高存储密度,应该增大结点的大小。"></a>(判断题)在链串中为了提高存储密度,应该增大结点的大小。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 对</p><h4 id="判断题-串是n个字母的有限序列-n≥0-。"><a href="#判断题-串是n个字母的有限序列-n≥0-。" class="headerlink" title="(判断题)串是n个字母的有限序列(n≥0)。"></a>(判断题)串是n个字母的有限序列(n≥0)。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错</p><h4 id="判断题-广义表不能递归。"><a href="#判断题-广义表不能递归。" class="headerlink" title="(判断题)广义表不能递归。"></a>(判断题)广义表不能递归。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错</p><h3 id="第六章（树）"><a href="#第六章（树）" class="headerlink" title="第六章（树）"></a>第六章（树）</h3><ol><li><strong>(单选题) 在一棵度为3的树中,度为3的结点数为2个,度为2的结点数为1个,度为1的结点数为2个,那么度为0的结点数有( )个。</strong></li></ol><ul><li>A. 4</li><li>B. 5</li><li>C. 6</li><li>D. 7</li></ul><p>我的答案: A 正确答案: C</p><p>（叶子的度数为0；那么设叶子数为x，则此树的总分叉数为1<em>4+2</em>2+3<em>1+4</em>1&#x3D;15；此树的节点个数为16（此处涉及到一个公式;节点 数&#x3D;分叉数+1，由图形便可以观察出来）。又根据题目可以知道顶点数目还可以列出一个式子：4+2+1+1+x便可以得到等 式：4+2+1+1+x&#x3D;16；x&#x3D;8为叶子数。</p><ol start="2"><li>(单选题) 某二又树的后序遍历序列为DABEC,中序遍历序列为DEBAC,则先序遍历序列为( )。(过程写在课本上)</li></ol><ul><li>A. ACBED</li><li>B. DECAB</li><li>C. DEABC</li><li>D. CEDBA</li></ul><ol start="4"><li>(单选题) 已知一棵完全二叉树的结点总数为9个,则最后一层的结点数为( )。</li></ol><ul><li>A. 1</li><li>B. 2</li><li>C. 3</li><li>D. 4</li></ul><p>***的答案: B 正确答案: B</p><ol start="6"><li><strong>(单选题) 假设在一棵二叉树中,双分支结点数为15,单分支结点数为30个,则叶子结点数为( )个。</strong></li></ol><ul><li>A. 15</li><li>B. 16</li><li>C. 17</li><li>D. 47</li></ul><p>***的答案: B <em>正确答案:</em> B</p><p>在数据结构中一般常用的 公式为：二叉树：度为0的节点数&#x3D;度为2的节点数+1（n0&#x3D;15+1&#x3D;16）此公式可由上述计算思想推导）</p><ol start="8"><li>(单选题) 具有35个结点的完全二叉树的深度为( )。</li></ol><ul><li>A. 5</li><li>B. 6</li><li>C. 7</li><li>D. 8</li></ul><p>***的答案: B <em>正确答案:</em> B</p><p>所以节点个树n和树深k的关系为：2^k-1&#x3D;n<br>所以树深：k&#x3D;log_2(n+1)或者⌊log₂n⌋+1 ?</p><ol start="9"><li>(单选题) 用顺序存储的方法将完全二叉树中所有结点逐层存放在数组a[1]~a[n]中,结点a[i]若有左孩子,其左孩子的编号为结点( )。</li></ol><ul><li>A. a[2i+1]</li><li>B. a[2i-1]</li><li>C. a[i&#x2F;2]</li><li>D. a[2i]</li></ul><p>***的答案: D <em>正确答案:</em> D</p><p>因为在完全二叉树中，左孩子的位置是当前结点的位置乘以2。</p><ol start="13"><li>(单选题) 二叉树的先序遍历序列为ABC的不同二叉树有( )种形态。</li></ol><ul><li>A. 3</li><li>B. 4</li><li>C. 5</li><li>D. 6</li></ul><p>***的答案: C <em>正确答案:</em> C</p><p><strong>17. (填空题) 一棵深度为k的满二叉树的结点总数为      ,一棵深度为k的完全二叉树的结点总数的最小值为     ,最大值为      。</strong></p><ul><li><p>***的答案：</p><p>(1)2^k-1  </p><p>(2) 2^(k-1) </p><p>(3) 2^k-1</p></li><li><p><em>正确答案：</em></p><p>(1) 2^k-1</p><p>(2) 2^(k-1)</p><p>(3) 2^k-1</p></li></ul><ol start="18"><li>(填空题) 先序序列和中序序列相同的二叉树为___。</li></ol><ul><li><p>***的答案：</p><p>(1) 没有左孩子</p></li><li><p><em>正确答案：</em></p><p>(1) 单右枝二叉树或孤立结点</p></li></ul><ol start="19"><li>(填空题) 由三个结点构成的二叉树,共有___种不同的结构。</li></ol><ul><li><p>***的答案：</p><p>(1) 5</p></li><li><p><em>正确答案：</em></p><p>(1) 5</p></li></ul><ol start="20"><li>(填空题) 假定一棵树的广义表表示法为A(B(E),C(F(H,I,J),G),D),则该树的度为___,树的深度为___,终端结点的个数为___,单分支结点的个数为___-,双分支的结点个数为___,三分支的结点个数为___,C结点的双亲结点为___,其孩子结点为___和___结点。</li></ol><ul><li><p>***的答案：</p><p>(1) 3</p><p>(2) 4</p><p>(3) 6</p><p>(4) 1</p><p>(5) 1</p><p>(6) 2</p><p>(7) A</p><p>(8) F</p><p>(9) G</p></li><li><p><em>正确答案：</em></p><p>(1) 3</p><p>(2) 4</p><p>(3) 6</p><p>(4) 1</p><p>(5) 1</p><p>(6) 2</p><p>(7) A</p><p>(8) F</p><p>(9) G</p></li></ul><ol start="22"><li>(填空题) 哈夫曼树是指___的二叉树。</li></ol><ul><li><p>***的答案：</p><p>(1) 最优</p></li><li><p><em>正确答案：</em></p><p>(1) 带权路径长度最小</p></li></ul><p><strong>23. (填空题) 设一棵二叉树共有50个叶子结点(终端结点),则有___度为2的结点。</strong></p><ul><li><p>***的答案：</p><p>(1) 49</p></li><li><p><em>正确答案：</em></p><p>(1) 49</p></li></ul><p>在数据结构中一般常用的 公式为：二叉树：度为2的节点数&#x3D;度为0的节点数-1（n0&#x3D;50-1&#x3D;49）此公式可由上述计算思想推导）</p><ol start="24"><li><strong>(填空题) 对于一个具有n个结点的二叉树,当它为一棵      二叉树时,具有最小高度,即为       ,当它为一棵单支树时具有     高度,即为       。</strong></li></ol><ul><li><p>***的答案：</p><p>(1) 完全</p><p>(2) log2n+1 </p><p>(3) n</p><p>(4) 线性表</p></li><li><p><em>正确答案：</em></p><p>(1) 完全</p><p>(2) ⌊log₂n⌋+1</p><p>(3) 最大</p><p>(4) 线性表</p></li></ul><ol start="25"><li>(填空题) 对于二叉树来说,第i层上最多有___个结点。</li></ol><ul><li><p>***的答案：</p><p>(1) 2</p></li><li><p><em>正确答案：</em></p><p>(1) 2^(i-1)</p></li></ul><ol start="26"><li><strong>(填空题) 由带权为3,6,2,5的4个叶子结点构成的一棵哈夫曼树,则带权路径长度为___。</strong></li></ol><ul><li><p>***的答案：</p><p>(1) 31</p></li><li><p><em>正确答案：</em></p><p>(1) 31</p></li></ul><p>构建哈夫曼树：</p><p>1、给其排序，2，3，5，6</p><p>2、找到其中最小的两数，开始画树，2，3</p><p>3、计算两数之和，并将该和加入到待找最小两数的数组里，跟着一起被选</p><p>如果选中的是两个原数组的数，则在旁边重开一个全新的分支</p><p>如果权值与一个原数组的数相同，则选择最小的这两个数，但是计算带权路径长度时不能带上它</p><p>4、算带权路径长度 2* 3+3* 3+6* 1&#x3D;31</p><ol start="27"><li>(填空题) 设F是森林,B是由F转换得到的二叉树,F中有n个非终端结点,B中右指针域为空的结点有___。</li></ol><ul><li><p>***的答案：</p><p>(1) n+1</p></li><li><p><em>正确答案：</em></p><p>(1) n+1</p></li></ul><p>在将森林F转换为二叉树B时，每个非终端节点都会转换为一个二叉树节点。由于B是二叉树，每个节点最多只有两个指针域，即左指针和右指针。在转换过程中，每个非终端节点都会在B中生成一个包含自身的二叉树节点，而这个节点的右指针域为空。</p><ol start="30"><li>(判断题) 由树转换成二叉树,其根结点的右子树一定为空。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><p>***的答案: 对 <em>正确答案:</em> 对</p><ol start="33"><li>(判断题) 树结构中的每个结点最多只有一个直接前驱。</li></ol><ul><li>A. 对</li><li>B. 错</li></ul><p>***的答案: 对 <em>正确答案:</em> 对</p><h3 id="第七章（图）"><a href="#第七章（图）" class="headerlink" title="第七章（图）"></a>第七章（图）</h3><h4 id="单选题-下列说法不正确的是-。"><a href="#单选题-下列说法不正确的是-。" class="headerlink" title="(单选题) 下列说法不正确的是( )。"></a>(单选题) 下列说法不正确的是( )。</h4><ul><li>A. 图的遍历是从给定的源点出发每一个顶点仅被访问一次</li><li>B. 遍历的基本算法有两种：深度优先遍历和广度优先遍历</li><li>C. 图的深度优先遍历不适用于有向图</li><li>D. 图的深度优先遍历是一个递归过程</li></ul><p>我的答案:C<em>正确答案:</em> C</p><h4 id="单选题-一个n个顶点的连通无向图-其边的个数至少为-。"><a href="#单选题-一个n个顶点的连通无向图-其边的个数至少为-。" class="headerlink" title="(单选题) 一个n个顶点的连通无向图,其边的个数至少为( )。"></a>(单选题) 一个n个顶点的连通<strong>无向图</strong>,其边的个数至少为( )。</h4><ul><li>A. n-1</li><li>B. n</li><li>C. n+1</li><li>D. nlog₂n</li></ul><p>我的答案: A<em>正确答案:</em> A</p><h4 id="单选题-要连通具有n个顶点的有向图-至少需要-条边。"><a href="#单选题-要连通具有n个顶点的有向图-至少需要-条边。" class="headerlink" title="(单选题) 要连通具有n个顶点的有向图,至少需要( )条边。"></a>(单选题) 要连通具有n个顶点的<strong>有向图</strong>,至少需要( )条边。</h4><ul><li>A. n-1</li><li>B. n</li><li>C. n+1</li><li>D. 2n</li></ul><p>我的答案: B<em>正确答案:</em> B</p><p>(单选题) 无向图G&#x3D;(V,E),其中：v&#x3D;{a,b,c,d,e,f},E&#x3D;{(a,b),(a,e),(a,c),(b,e),(c,f),(f,d),(e,d)｝,对该图进行深度优先遍历,得到的顶点序列正确的是( )。</p><ul><li>A. a,b,e,c,d,f</li><li>B. a,c,f,e,b,d</li><li>C. a,e,b,c,f,d</li><li>D. a,e,d,f,c,b</li></ul><p>我的答案: D<em>正确答案:</em> D</p><p>原理：</p><p>DFS算法的特点是从根顶点出发， </p><p>​    \1. 访问所到达的顶点v。 </p><p>​    \2. 前往v的未被访问的邻接点。</p><p>​      若v的所有邻接点均被访问过，则回溯到访问历史中v的上一个顶点v’，对其进行第2步，即访问v’除v之外的其他邻接点；这种回溯可以一直到根顶点；若回溯到根顶点后仍有节点未被访问，且不与根顶点邻接，则更换根节点。</p><p>解析：</p><p>A. a, b, e, c, d, f </p><p>  a-&gt;b, 没问题；到b后，b的邻接点中只剩下e未被访问，b-&gt;e没问题 </p><p>  e-&gt;c，不行，e此时仍有未被访问的邻接点d, 且e没有跟c连通，答案错误 </p><p>  B. a, c, f, e, b, d </p><p>  a-&gt;c-&gt;f, 没问题；f-&gt;e，不行，f此时仍有未被访问的邻接点d，且f没有跟e连通，答案错误 </p><p>  C. a, e, b, c, f, d </p><p>  a-&gt;e-&gt;b，没问题；到b后，b的邻接点均被访问，应回溯到e，然后访问e其他未被访问的邻接点（只剩d），且b没有跟c连通，答案错误 </p><p>  D. a, e, d, f, c, b </p><p>  a-&gt;e-&gt;d-&gt;f-&gt;c，没问题；到c后，其两个邻接点a与f均已被访问，按c-&gt;f-&gt;d-&gt;e-&gt;a回溯时候发现，e顶点仍有未被访问的顶点b，于是a-&gt;e-&gt;d-&gt;f-&gt;c-&gt;b</p><h4 id="单选题-用邻接表表示图进行广度优先遍历时-通常采用-来实现算法。"><a href="#单选题-用邻接表表示图进行广度优先遍历时-通常采用-来实现算法。" class="headerlink" title="(单选题) 用邻接表表示图进行广度优先遍历时,通常采用( )来实现算法。"></a>(单选题) 用邻接表表示图进行<strong>广度</strong>优先遍历时,通常采用( )来实现算法。</h4><ul><li>A. 栈</li><li>B. 队列</li><li>C. 树</li><li>D. 图</li></ul><p>我的答案: B<em>正确答案:</em> B</p><h4 id="单选题-用邻接表表示图进行深度优先遍历时-通常采用-来实现算法。"><a href="#单选题-用邻接表表示图进行深度优先遍历时-通常采用-来实现算法。" class="headerlink" title="(单选题) 用邻接表表示图进行深度优先遍历时,通常采用( )来实现算法。"></a>(单选题) 用邻接表表示图进行<strong>深度</strong>优先遍历时,通常采用( )来实现算法。</h4><ul><li>A. 栈</li><li>B. 队列</li><li>C. 树</li><li>D. 图</li></ul><p>我的答案: A<em>正确答案:</em> A</p><p>(单选题) 无向图顶点V的度是关联于该顶点( )的数目。</p><ul><li>A. 顶点</li><li>B. 边</li><li>C. 序号</li><li>D. 下标</li></ul><p>我的的答案:B<em>正确答案:</em> B</p><p>每个顶点所拥有的边的个数叫作<strong>度</strong></p><p>(单选题) 图中有关路径的定义是( )。</p><ul><li>A. 由顶点和相邻顶点序偶构成的边所形成的序列</li><li>B. 由不同顶点所形成的序列</li><li>C. 由不同边所形成的序列</li><li>D. 上述定义都不是</li></ul><p>我的答案: A<em>正确答案:</em> A</p><h4 id="单选题-n个结点的完全有向图含有边的数目-。"><a href="#单选题-n个结点的完全有向图含有边的数目-。" class="headerlink" title="(单选题) n个结点的完全有向图含有边的数目( )。"></a>(单选题) n个结点的完全有向图含有边的数目( )。</h4><ul><li>A. n*n</li><li>B. n(n+1)</li><li>C. n&#x2F;2</li><li>D. n*(n-1)</li></ul><p>我的答案: D<em>正确答案:</em> D</p><h4 id="单选题-设无向图的顶点个数为n-则该图最多有-条边。"><a href="#单选题-设无向图的顶点个数为n-则该图最多有-条边。" class="headerlink" title="(单选题) 设无向图的顶点个数为n,则该图最多有( )条边。"></a>(单选题) 设无向图的顶点个数为n,则该图最多有( )条边。</h4><ul><li>A. n-1</li><li>B. n(n-1)&#x2F;2</li><li>C. n+1</li><li>D. 0</li><li>E. n²</li></ul><p>我的答案: B<em>正确答案:</em> B</p><h4 id="单选题-一个无向图有5个顶点、8条边-则其生成树将要去掉-条边。"><a href="#单选题-一个无向图有5个顶点、8条边-则其生成树将要去掉-条边。" class="headerlink" title="(单选题) 一个无向图有5个顶点、8条边,则其生成树将要去掉( )条边。"></a>(单选题) 一个无向图有5个顶点、8条边,则其生成树将要去掉( )条边。</h4><p>没懂为什么</p><ul><li>A. 3</li><li>B. 4</li><li>C. 5</li><li>D. 6</li></ul><p>我的答案: B<em>正确答案:</em> B</p><h4 id="单选题-任何一个无向连通图的最小生成树-。"><a href="#单选题-任何一个无向连通图的最小生成树-。" class="headerlink" title="(单选题) 任何一个无向连通图的最小生成树( )。"></a>(单选题) 任何一个无向连通图的最小生成树( )。</h4><ul><li>A. 只有一棵</li><li>B. 一棵或多棵</li><li>C. 一定有多棵</li><li>D. 可能不存在</li></ul><p><em>正确答案:</em> A</p><h4 id="多选题-在一个无向图中-所有顶点的度数之和等于所有边数-倍-在一个有向图中-所有顶点的入度之和等千所有顶点出度之和的-倍。"><a href="#多选题-在一个无向图中-所有顶点的度数之和等于所有边数-倍-在一个有向图中-所有顶点的入度之和等千所有顶点出度之和的-倍。" class="headerlink" title="(多选题) 在一个无向图中,所有顶点的度数之和等于所有边数( )倍,在一个有向图中,所有顶点的入度之和等千所有顶点出度之和的( )倍。"></a>(多选题) 在一个无向图中,所有顶点的度数之和等于所有边数( )倍,在一个有向图中,所有顶点的入度之和等千所有顶点出度之和的( )倍。</h4><ul><li>A. 1&#x2F;2</li><li>B. 2</li><li>C. 1</li><li>D. 4</li></ul><p>我的答案: BC<em>正确答案:</em> BC</p><h4 id="多选题-一个有n个结点的图-最少有-个连通分量-最多有-个连通分量。"><a href="#多选题-一个有n个结点的图-最少有-个连通分量-最多有-个连通分量。" class="headerlink" title="(多选题) 一个有n个结点的图,最少有( )个连通分量,最多有( )个连通分量。"></a>(多选题) 一个有n个结点的图,最少有( )个连通分量,最多有( )个连通分量。</h4><ul><li>A. 0</li><li>B. 1</li><li>C. n-1</li><li>D. n</li></ul><p><em>正确答案:</em> BD</p><h4 id="填空题-G是一个非连通无向图-共有28条边-则该图至少有-个顶点。"><a href="#填空题-G是一个非连通无向图-共有28条边-则该图至少有-个顶点。" class="headerlink" title="(填空题) G是一个非连通无向图,共有28条边,则该图至少有___个顶点。"></a>(填空题) G是一个非连通无向图,共有28条边,则该图至少有___个顶点。</h4><p>用到无向图公式n(n-1)&#x2F;2，n为顶点数，而最后因为是非连通图所以还要n+1为9</p><ul><li><p>我的答案：</p><p>(1) 9</p></li><li><p><em>正确答案：</em></p><p>(1) 9</p></li></ul><p>(填空题) 具有10个顶点的无向图,边的总数最多为___。</p><ul><li><p>我的答案：</p><p>(1) 45</p></li><li><p><em>正确答案：</em></p><p>(1) 45</p></li></ul><h4 id="填空题-一个连通图的-是一个极小连通子图。"><a href="#填空题-一个连通图的-是一个极小连通子图。" class="headerlink" title="(填空题) 一个连通图的___是一个极小连通子图。"></a>(填空题) 一个连通图的___是一个极小连通子图。</h4><ul><li><p>我的答案：</p><p>(1) 生成树</p></li><li><p><em>正确答案：</em></p><p>(1) 生成树</p></li></ul><h4 id="填空题-如果含n个顶点的图形形成一个环-则它有-棵生成树。"><a href="#填空题-如果含n个顶点的图形形成一个环-则它有-棵生成树。" class="headerlink" title="(填空题) 如果含n个顶点的图形形成一个环,则它有___棵生成树。"></a>(填空题) 如果含n个顶点的图形形成一个环,则它有___棵生成树。</h4><ul><li><p>我的答案：</p><p>(1) n</p></li><li><p><em>正确答案：</em></p><p>(1) n</p></li></ul><h4 id="填空题-有向图的强连通分量是指-。"><a href="#填空题-有向图的强连通分量是指-。" class="headerlink" title="(填空题) 有向图的强连通分量是指___。"></a>(填空题) 有向图的强连通分量是指___。</h4><ul><li><p>我的答案：</p><p>(1) 有向图的极大强连通子图</p></li><li><p><em>正确答案：</em></p><p>(1) 有向图的极大强连通子图</p></li></ul><h4 id="填空题-在有n个顶点的有向图中-每个顶点的度最大可达-。"><a href="#填空题-在有n个顶点的有向图中-每个顶点的度最大可达-。" class="headerlink" title="(填空题) 在有n个顶点的有向图中,每个顶点的度最大可达___。"></a>(填空题) 在有n个顶点的有向图中,每个顶点的度最大可达___。</h4><p>一个出度一个入度，所以*2</p><ul><li><p>我的答案：</p><p>(1) 2(n-1)</p></li><li><p><em>正确答案：</em></p><p>(1) 2(n-1)</p></li></ul><h4 id="填空题-N个顶点的连通图的生成树含有-条边。"><a href="#填空题-N个顶点的连通图的生成树含有-条边。" class="headerlink" title="(填空题) N个顶点的连通图的生成树含有___条边。"></a>(填空题) N个顶点的连通图的生成树含有___条边。</h4><ul><li><p>我的答案：</p><p>(1) N-1</p></li><li><p><em>正确答案：</em></p><p>(1) N-1</p></li></ul><h4 id="填空题-判断一个无向图是一棵树的条件是-。"><a href="#填空题-判断一个无向图是一棵树的条件是-。" class="headerlink" title="(填空题) 判断一个无向图是一棵树的条件是___。"></a>(填空题) 判断一个无向图是一棵树的条件是___。</h4><ul><li><p>我的答案：</p><p>(1) 有n个顶点,n-1条边的无向连通图</p></li><li><p><em>正确答案：</em></p><p>(1) 有n个顶点,n-1条边的无向连通图</p></li></ul><h4 id="填空题-若用n表示图中顶点数目-则有-条边的无向图成为完全图。"><a href="#填空题-若用n表示图中顶点数目-则有-条边的无向图成为完全图。" class="headerlink" title="(填空题) 若用n表示图中顶点数目,则有___条边的无向图成为完全图。"></a>(填空题) 若用n表示图中顶点数目,则有___条边的无向图成为完全图。</h4><p>注意这里是题目是完全图，一般如果是有向或者连通图就n，无向则为n-1</p><ul><li><p>我的答案：</p><p>(1) n(n-1)&#x2F;2</p></li><li><p><em>正确答案：</em></p><p>(1) n(n-1)&#x2F;2</p></li></ul><h4 id="判断题-有向图不能进行广度优先遍历。"><a href="#判断题-有向图不能进行广度优先遍历。" class="headerlink" title="(判断题) 有向图不能进行广度优先遍历。"></a>(判断题) 有向图不能进行广度优先遍历。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p>我的答案:错<em>正确答案:</em> 错</p><h4 id="判断题-带权图最小生成树是唯一的。"><a href="#判断题-带权图最小生成树是唯一的。" class="headerlink" title="(判断题) 带权图最小生成树是唯一的。"></a>(判断题) 带权图最小生成树是唯一的。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p>我的答案: 错<em>正确答案:</em> 错</p><h4 id="判断题-若以某个顶点开始-对有n个顶点的有向图G进行深度优先遍历-所得的遍历序列唯一-则可以断定其弧数为n-1。"><a href="#判断题-若以某个顶点开始-对有n个顶点的有向图G进行深度优先遍历-所得的遍历序列唯一-则可以断定其弧数为n-1。" class="headerlink" title="(判断题) 若以某个顶点开始,对有n个顶点的有向图G进行深度优先遍历,所得的遍历序列唯一,则可以断定其弧数为n-1。"></a>(判断题) 若以某个顶点开始,对有n个顶点的有向图G进行深度优先遍历,所得的遍历序列唯一,则可以断定其弧数为n-1。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p>我的答案:错<em>正确答案:</em> 错</p><h3 id="第八章（查找）"><a href="#第八章（查找）" class="headerlink" title="第八章（查找）"></a>第八章（查找）</h3><h4 id="单选题-顺序查找法适合于存储结构为-的线性表。"><a href="#单选题-顺序查找法适合于存储结构为-的线性表。" class="headerlink" title="(单选题)顺序查找法适合于存储结构为( )的线性表。"></a>(单选题)顺序查找法适合于存储结构为( )的线性表。</h4><ul><li>A. 散列存储</li><li>B. 顺序存储或是链式存储</li><li>C. 压缩存储</li><li>D. 索引存储</li></ul><p><em>我的答案:</em> B:顺序存储或是链式存储;</p><h4 id="单选题-用折半查找表的元素的速度比用顺序法-。"><a href="#单选题-用折半查找表的元素的速度比用顺序法-。" class="headerlink" title="(单选题)用折半查找表的元素的速度比用顺序法( )。"></a>(单选题)用折半查找表的元素的速度比用顺序法( )。</h4><ul><li>A. 必然快</li><li>B. 必然慢</li><li>C. 相等</li><li>D. 不能确定</li></ul><p><em>我的答案:</em> D:不能确定;</p><h4 id="单选题-当在一个有序的顺序存储表上查找一个数据时-即可用折半查找-也可用顺序查找-但前者比后者的查找速度-。"><a href="#单选题-当在一个有序的顺序存储表上查找一个数据时-即可用折半查找-也可用顺序查找-但前者比后者的查找速度-。" class="headerlink" title="(单选题)当在一个有序的顺序存储表上查找一个数据时,即可用折半查找,也可用顺序查找,但前者比后者的查找速度( )。"></a>(单选题)当在一个有序的顺序存储表上查找一个数据时,即可用折半查找,也可用顺序查找,但前者比后者的查找速度( )。</h4><ul><li>A. 必定快</li><li>B. 不一定</li><li>C. 在大部分情况下要快</li><li>D. 取决于表递增还是递减</li></ul><p><em>我的答案:</em> C:在大部分情况下要快;</p><h4 id="单选题-下面关于哈希-Hash-杂凑-查找的说法正确的是"><a href="#单选题-下面关于哈希-Hash-杂凑-查找的说法正确的是" class="headerlink" title="(单选题)下面关于哈希(Hash,杂凑)查找的说法正确的是( )"></a>(单选题)下面关于哈希(Hash,杂凑)查找的说法正确的是( )</h4><ul><li>A. 哈希函数构造的越复杂越好,因为这样随机性好,冲突小</li><li>B. 除留余数法是所有哈希函数中最好的</li><li>C. 不存在特别好与坏的哈希函数,要视情况而定</li><li>D. 若需在哈希表中删去一个元素,不管用何种方法解决冲突都只要简单的将该元素删去即可</li></ul><p><em>我的答案:</em> C:不存在特别好与坏的哈希函数,要视情况而定;</p><h4 id="单选题-如果要求一个线性表既能较快地查找-又能适应动态变化的要求-可以采用-查找方法。"><a href="#单选题-如果要求一个线性表既能较快地查找-又能适应动态变化的要求-可以采用-查找方法。" class="headerlink" title="(单选题)如果要求一个线性表既能较快地查找,又能适应动态变化的要求,可以采用( )查找方法。"></a>(单选题)如果要求一个线性表既能较快地查找,又能适应动态变化的要求,可以采用( )查找方法。</h4><ul><li>A. 分块</li><li>B. 顺序</li><li>C. 折半</li><li>D. 散列</li></ul><p><em>我的答案:</em> A</p><h4 id="填空题-在分块查找方法中-首先查找-然后再查找相应的-。"><a href="#填空题-在分块查找方法中-首先查找-然后再查找相应的-。" class="headerlink" title="(填空题)在分块查找方法中,首先查找(),然后再查找相应的___ 。"></a>(填空题)在分块查找方法中,首先查找(),然后再查找相应的___ 。</h4><ul><li><p><em>我的答案：</em></p><p>(1) 索引</p><p>(2) 块</p></li></ul><h4 id="填空题-在分块查找方法中-表中每块内的元素可以-块与块之间必须按-存放。"><a href="#填空题-在分块查找方法中-表中每块内的元素可以-块与块之间必须按-存放。" class="headerlink" title="(填空题)在分块查找方法中,表中每块内的元素可以(),块与块之间必须按___存放。"></a>(填空题)在分块查找方法中,表中每块内的元素可以(),块与块之间必须按___存放。</h4><ul><li><p><em>我的答案：</em></p><p>(1) 任意存放</p><p>(2) 关键字有序</p></li></ul><h4 id="填空题-顺序查找、折半查找、分块查找都属于-查找。"><a href="#填空题-顺序查找、折半查找、分块查找都属于-查找。" class="headerlink" title="(填空题)顺序查找、折半查找、分块查找都属于___查找。"></a>(填空题)顺序查找、折半查找、分块查找都属于___查找。</h4><ul><li><p><em>我的答案：</em></p><p>(1) 静态</p></li></ul><h4 id="填空题-在线性表的哈希存储中-装填因子ɑ又称为装填系数-若用m表示哈希表的长度-n表示线性表中的元素的个数-则ɑ等于-。"><a href="#填空题-在线性表的哈希存储中-装填因子ɑ又称为装填系数-若用m表示哈希表的长度-n表示线性表中的元素的个数-则ɑ等于-。" class="headerlink" title="(填空题)在线性表的哈希存储中,装填因子ɑ又称为装填系数,若用m表示哈希表的长度,n表示线性表中的元素的个数,则ɑ等于___。"></a>(填空题)在线性表的哈希存储中,装填因子ɑ又称为装填系数,若用m表示哈希表的长度,n表示线性表中的元素的个数,则ɑ等于___。</h4><ul><li><p><em>我的答案：</em></p><p>(1) n&#x2F;m</p></li></ul><h4 id="判断题-在二叉排序树中-根结点的值都小于孩子结点的值。"><a href="#判断题-在二叉排序树中-根结点的值都小于孩子结点的值。" class="headerlink" title="(判断题)在二叉排序树中,根结点的值都小于孩子结点的值。"></a>(判断题)在二叉排序树中,根结点的值都小于孩子结点的值。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错</p><h4 id="判断题-直接插入排序时-关键字的比较次数与记录的初始排列无关。"><a href="#判断题-直接插入排序时-关键字的比较次数与记录的初始排列无关。" class="headerlink" title="(判断题)直接插入排序时,关键字的比较次数与记录的初始排列无关。"></a>(判断题)直接插入排序时,关键字的比较次数与记录的初始排列无关。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 对</p><h4 id="判断题-排序要求数据一定要按顺序方式存储。"><a href="#判断题-排序要求数据一定要按顺序方式存储。" class="headerlink" title="(判断题)排序要求数据一定要按顺序方式存储。"></a>(判断题)排序要求数据一定要按顺序方式存储。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 错</p><h4 id="判断题-对千两棵具有相同关键字但形状不同的二叉排序树-按中序遍历它们得到的序列的顺序是一样的。"><a href="#判断题-对千两棵具有相同关键字但形状不同的二叉排序树-按中序遍历它们得到的序列的顺序是一样的。" class="headerlink" title="(判断题)对千两棵具有相同关键字但形状不同的二叉排序树,按中序遍历它们得到的序列的顺序是一样的。"></a>(判断题)对千两棵具有相同关键字但形状不同的二叉排序树,按中序遍历它们得到的序列的顺序是一样的。</h4><ul><li>A. 对</li><li>B. 错</li></ul><p><em>我的答案:</em> 对</p><h4 id="单选题-二叉排序树的查找效率与二叉树的-1-有关，在-2-时其查找效率最低。"><a href="#单选题-二叉排序树的查找效率与二叉树的-1-有关，在-2-时其查找效率最低。" class="headerlink" title="(单选题)二叉排序树的查找效率与二叉树的 (1) 有关，在 (2) 时其查找效率最低。"></a>(单选题)二叉排序树的查找效率与二叉树的 (1) 有关，在 (2) 时其查找效率最低。</h4><p>(1) (单选题) 1</p><ul><li>A. 高度</li><li>B. 结点的多少</li><li>C. 树型</li><li>D. 结点的位置</li></ul><p><em>我的答案:</em> C</p><p>(2) (单选题) 2</p><ul><li>A. 结点太多</li><li>B. 完全二叉树</li><li>C. 呈单枝树</li><li>D. 结点太复杂。</li></ul><p><em>我的答案:</em> C</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++算法</title>
      <link href="/posts/6e93dd78.html"/>
      <url>/posts/6e93dd78.html</url>
      
        <content type="html"><![CDATA[<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="高精度算法"><a href="#高精度算法" class="headerlink" title="高精度算法"></a>高精度算法</h2><h3 id="高精度-高精度"><a href="#高精度-高精度" class="headerlink" title="高精度+高精度"></a>高精度+高精度</h3><p>1、建立两个整型数组、设立初值、设定长度（给定数字的情况下，直接用length，不是给定的话，在if（x）里也会对长度进行自增，直接设定为1也可以）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">200</span>],b[<span class="number">200</span>];  </span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="comment">//给定数字</span></span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">int</span> lenb = num2.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//多个数字，或者未给定</span></span><br><span class="line"><span class="type">int</span> lena = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> lenb = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>2、输入高精度数（根据题目要求来进行,有时还需要先去除前导零（倒序））</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//去除前导零</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num1[lena<span class="number">-1</span>-i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、核心代码，将两者相加（那就是题目要求有多个高精度数相加），或者使用另一个数组c来接收结果,还是看题目要求怎么加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//x为进位</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">max</span>(lena, lenb);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">c[i] = a[i]+b[i] + x;</span><br><span class="line">x = c[i] / <span class="number">10</span>;</span><br><span class="line">c[i] = c[i] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">c[len] = x;</span><br><span class="line">    <span class="comment">//这里的x = x / 10;可以不加，因为如果是加法的话，是不会存在加到最高位时，x超过两位数的情况</span></span><br><span class="line">    x = x / <span class="number">10</span>;</span><br><span class="line">len++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、去除前导0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (c[len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; len - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//倒序输出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num1;</span><br><span class="line">string num2 ;</span><br><span class="line"><span class="type">int</span> a[<span class="number">200</span>],b[<span class="number">200</span>],c[<span class="number">200</span>];</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line"><span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in">sizeof</span>(c));</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//为什么倒序取该数组 </span></span><br><span class="line"><span class="comment">//因为num前面会有0出现，这样才能从a[0]开始取各个位置与b相加</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num1[lena<span class="number">-1</span>-i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="type">int</span> lenb = num2.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//为什么倒序取该数组 </span></span><br><span class="line"><span class="comment">//因为num前面会有0出现，这样才能从a[0]开始取各个位置与b相加</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lenb; i++) &#123;</span><br><span class="line">b[i] = num2[lenb - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">max</span>(lena, lenb);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//高精度+高精度核心代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">c[i] = a[i]+b[i] + x;</span><br><span class="line">x = c[i] / <span class="number">10</span>;</span><br><span class="line">c[i] = c[i] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断最高位</span></span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">c[len] = x;</span><br><span class="line">len++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (c[len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; len - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1173：阶乘和（估计考）"><a href="#1173：阶乘和（估计考）" class="headerlink" title="1173：阶乘和（估计考）"></a>1173：阶乘和（估计考）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chen</span><span class="params">(<span class="type">int</span> b[], <span class="type">int</span>&amp; lenb, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lenb; i++) &#123;</span><br><span class="line">b[i] = b[i] * n + x;</span><br><span class="line">x = b[i] / <span class="number">10</span>;</span><br><span class="line">b[i] = b[i] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">b[lenb] = x % <span class="number">10</span>;</span><br><span class="line">x = x / <span class="number">10</span>;</span><br><span class="line">lenb++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">jia</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span>&amp; lena, <span class="type">int</span> b[], <span class="type">int</span> lenb)</span> </span>&#123;</span><br><span class="line">lena = <span class="built_in">max</span>(lena, lenb);</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = a[i] +b[i] + x;</span><br><span class="line">x = a[i] / <span class="number">10</span>;</span><br><span class="line">a[i] = a[i] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x) &#123;</span><br><span class="line">a[lena] = x;</span><br><span class="line">lena++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10000</span>];</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> lena = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> b[<span class="number">10000</span>];</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line">b[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> lenb = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;=n; i++) &#123;</span><br><span class="line"><span class="built_in">chen</span>(b, lenb, i);</span><br><span class="line"><span class="built_in">jia</span>(a, lena, b,lenb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (a[lena - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lena - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">lena--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lena - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="高精度-低精度"><a href="#高精度-低精度" class="headerlink" title="高精度+低精度"></a>高精度+低精度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num = <span class="string">&quot;00000000000011111111112321321312312312321&quot;</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">1234</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="type">int</span> lena = num.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//为什么倒序取该数组 </span></span><br><span class="line"><span class="comment">//因为num前面会有0出现，这样才能从a[0]开始取各个位置与b相加</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num[lena<span class="number">-1</span>-i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">a[<span class="number">0</span>] = a[<span class="number">0</span>] + b;</span><br><span class="line"></span><br><span class="line"><span class="comment">//做进位，以及把各个位置相加，流程结束会得到num与b相加的结果，只对低精度部分进行变化</span></span><br><span class="line"><span class="comment">//更高位，直接逆序输出即可</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = a[i] + x;</span><br><span class="line">x = a[i] / <span class="number">10</span>;</span><br><span class="line">a[i] = a[i] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为了意外的情况，高精度的位数没有低精度的位数高，比如1（高精度）+10000（低精度）</span></span><br><span class="line"><span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">a[lena] = x % <span class="number">10</span>;</span><br><span class="line">x = x / <span class="number">10</span>;</span><br><span class="line">lena++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (a[lena - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lena - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">lena--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lena - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="高精度-低精度-1"><a href="#高精度-低精度-1" class="headerlink" title="高精度-低精度"></a>高精度-低精度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num1 = <span class="string">&quot;11111111111111111111111112&quot;</span>;</span><br><span class="line"><span class="type">int</span> num2 = <span class="number">112</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">200</span>], b[<span class="number">200</span>], c[<span class="number">200</span>];</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//倒序取得数组a</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num1[lena - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一位减去低精度数后，后续的位数就只需要减去所借的x</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">a[<span class="number">0</span>] = a[<span class="number">0</span>] - num2 - x;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">////以下是高精度-低精度数乘法的核心代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line"><span class="comment">//该位数减去所借的x</span></span><br><span class="line">a[i] = a[i] - x;</span><br><span class="line"><span class="comment">//上面已经把所借的x减去，所以x要归零</span></span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//借位，如果不够减，就需要多借一位</span></span><br><span class="line"><span class="keyword">while</span> (a[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">x++;</span><br><span class="line"><span class="comment">//该位得到所借得的10</span></span><br><span class="line">a[i] = a[i] + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (a[lena - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lena - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">lena--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lena - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="高精度-高精度-1"><a href="#高精度-高精度-1" class="headerlink" title="高精度-高精度"></a>高精度-高精度</h3><p>1、建立两个整型数组、设立初值、设定长度（给定数字的情况下，直接用length，不是给定的话，在if（x）里也会对长度进行自增，直接设定为1也可以）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">200</span>],b[<span class="number">200</span>];  </span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="comment">//给定数字</span></span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">int</span> lenb = num2.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//多个数字，或者未给定</span></span><br><span class="line"><span class="type">int</span> lena = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> lenb = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>2、输入高精度数（根据题目要求来进行,有时还需要先去除前导零（倒序））</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//去除前导零</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num1[lena<span class="number">-1</span>-i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、核心代码，将两者相加（那就是题目要求有多个高精度数相加），或者使用另一个数组c来接收结果,还是看题目要求怎么加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//x为进位</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">max</span>(lena, lenb);</span><br><span class="line"><span class="comment">//当第一次减去的值为负数时，则需要减去进位，比如第二位要还第一位的向它借的1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">c[i] = a[i] - b[i] - x;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//以下借位的步骤，每次循环如果a[i]还是小于0，则需要继续往前一位借1</span></span><br><span class="line"><span class="keyword">while</span> (c[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">x++;</span><br><span class="line">c[i] = c[i] + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、去除前导0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (c[len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; len - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//倒序输出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num1;</span><br><span class="line">string num2;</span><br><span class="line"><span class="type">int</span> a[<span class="number">200</span>], b[<span class="number">200</span>], c[<span class="number">201</span>];</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in">sizeof</span>(c));</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//倒序取得数组a</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num1[lena - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//倒序取得数组b</span></span><br><span class="line"><span class="type">int</span> lenb = num2.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lenb; i++) &#123;</span><br><span class="line">b[i] = num2[lenb - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先取得第一次所减去的值</span></span><br><span class="line"><span class="comment">//a[0]=2,减去num2之后就是-1，要进行借位</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//len=等于lena与lenb之主的最大值</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">max</span>(lena, lenb);</span><br><span class="line"><span class="comment">//当第一次减去的值为负数时，则需要减去进位，比如第二位要还第一位的向它借的1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">c[i] = a[i] - b[i] - x;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//以下借位的步骤，每次循环如果a[i]还是小于0，则需要继续往前一位借1</span></span><br><span class="line"><span class="keyword">while</span> (c[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">x++;</span><br><span class="line">c[i] = c[i] + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (c[len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; len - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//倒序输出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="高精度-低精度-2"><a href="#高精度-低精度-2" class="headerlink" title="高精度*低精度"></a>高精度*低精度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num = <span class="string">&quot;00000000000011111111112321321312312312321&quot;</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="type">int</span> lena = num.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//倒序取数组a</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num[lena - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下是高精度*低精度数乘法的核心代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = a[i] * b + x;</span><br><span class="line">x = a[i] / <span class="number">10</span>;</span><br><span class="line">a[i] = a[i] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一定要用while，因为可能a[i]的位数大于一位，比如200，那就得一直进位</span></span><br><span class="line"><span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">a[lena] = x % <span class="number">10</span>;</span><br><span class="line">x = x / <span class="number">10</span>;</span><br><span class="line">lena++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (a[lena - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lena - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">lena--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lena - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1170：计算2的N次方-估计考"><a href="#1170：计算2的N次方-估计考" class="headerlink" title="1170：计算2的N次方(估计考)"></a>1170：计算2的N次方(估计考)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; b;</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="type">int</span> lena = num.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//倒序取数组a</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num[lena - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> s = <span class="number">0</span>; s &lt; b; s++) &#123;</span><br><span class="line"><span class="comment">//以下是高精度*低精度数乘法的核心代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = a[i] * <span class="number">2</span> + x;</span><br><span class="line">x = a[i] / <span class="number">10</span>;</span><br><span class="line">a[i] = a[i] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一定要用while，因为可能a[i]的位数大于一位，比如200，那就得一直进位</span></span><br><span class="line"><span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">a[lena] = x % <span class="number">10</span>;</span><br><span class="line">x = x / <span class="number">10</span>;</span><br><span class="line">lena++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (a[lena - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lena - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">lena--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lena - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求10000以内n的阶乘（考过）"><a href="#求10000以内n的阶乘（考过）" class="headerlink" title="求10000以内n的阶乘（考过）"></a>求10000以内n的阶乘（考过）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化数组,数组要开的足够大</span></span><br><span class="line">    <span class="type">int</span> num[<span class="number">100000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    num[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">1</span>; <span class="comment">// len 表示当前数组中存储的数的位数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算阶乘</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> carry = <span class="number">0</span>; <span class="comment">// 进位标志</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="type">int</span> temp = num[j] * i + carry; <span class="comment">// 当前位乘以i并加上进位</span></span><br><span class="line">            num[j] = temp % <span class="number">10</span>; <span class="comment">// 更新当前位的值</span></span><br><span class="line">            carry = temp / <span class="number">10</span>; <span class="comment">// 计算进位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理剩余进位，进位没有处理完，就继续处理+1</span></span><br><span class="line">        <span class="keyword">while</span> (carry) &#123;</span><br><span class="line">            <span class="comment">//此处增加了num的长度len</span></span><br><span class="line">            num[len++] = carry % <span class="number">10</span>;</span><br><span class="line">            carry /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从高位向低位输出数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        cout &lt;&lt; num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度-高精度-不考"><a href="#高精度-高精度-不考" class="headerlink" title="高精度*高精度(不考)"></a>高精度*高精度(不考)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num1;</span><br><span class="line">string num2;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>], b[<span class="number">100</span>], c[<span class="number">400</span>];</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line"><span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in">sizeof</span>(c));</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//倒序取数组a</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num1[lena - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="type">int</span> lenb = num2.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//倒序取数组b</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lenb; i++) &#123;</span><br><span class="line">b[i] = num2[lenb - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len = lena + lenb;</span><br><span class="line"><span class="comment">//以下是高精度*高精度数乘法的核心代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line"><span class="comment">//每一趟，x都要清零</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; lenb; j++) &#123;</span><br><span class="line"><span class="comment">//每一个得到的数都来自于多趟数字相加</span></span><br><span class="line">c[i + j] = c[i + j] + a[i] * b[j] + x;</span><br><span class="line"><span class="comment">//x为下一个数字的进位</span></span><br><span class="line">x = c[i + j] / <span class="number">10</span>;</span><br><span class="line"><span class="comment">//此处的c[i + j]为该位的输出</span></span><br><span class="line">c[i + j] = c[i + j] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第i趟结束时，进位存在本趟的最高位</span></span><br><span class="line">c[i + lenb] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="comment">//lena - 1 &gt; 0是为了在最后一位等于0时，保留这个0</span></span><br><span class="line"><span class="keyword">while</span> (c[len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; len - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="高精度-x2F-单精度"><a href="#高精度-x2F-单精度" class="headerlink" title="高精度&#x2F;单精度"></a>高精度&#x2F;单精度</h3><p>1、建立两个整型数组、设立初值、设定长度（给定数字的情况下，直接用length，不是给定的话，在if（x）里也会对长度进行自增，直接设定为1也可以）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">200</span>],b[<span class="number">200</span>];  </span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="comment">//给定数字</span></span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">int</span> lenb = num2.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//多个数字，或者未给定</span></span><br><span class="line"><span class="type">int</span> lena = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> lenb = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>2、输入高精度数（根据题目要求来进行,有时还需要先去除前导零（倒序））</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//除法的高精度是唯一不需要倒序取的算法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、核心代码，将两者相加（那就是题目要求有多个高精度数相加），或者使用另一个数组c来接收结果,还是看题目要求怎么加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//t为新的被除数，c[i]为商的每一位，x为余数</span></span><br><span class="line"><span class="comment">//比如我们130除以13，第一次循环a[0]为0*10+1=1，c[0]=1/13=0,x=1%13=0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">t = x * <span class="number">10</span> + a[i];</span><br><span class="line">c[i] = t / b;</span><br><span class="line">x = t % b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、去除前导0+输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面的代码作用为将前导0删除</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="comment">//首先使用一个for循环遍历结果数组c，如果当前位不为0或者之前已经输出过一位数字（flag为1），则输出该位数字，并将flag设置为1，表示最高位已经输出。</span></span><br><span class="line"><span class="keyword">if</span> (c[i] != <span class="number">0</span> || flag == <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num ;</span><br><span class="line"><span class="type">int</span> b = <span class="number">13</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>],c[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="type">int</span> lena = num.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//除法的高精度是唯一不需要倒序取的算法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in">sizeof</span>(c));</span><br><span class="line"><span class="type">int</span> len = lena;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//t为新的被除数，c[i]为商的每一位，x为余数</span></span><br><span class="line">    <span class="comment">//比如我们130除以13，第一次循环a[0]为0*10+1=1，c[0]=1/13=0,x=1%13=0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">t = x * <span class="number">10</span> + a[i];</span><br><span class="line">c[i] = t / b;</span><br><span class="line">x = t % b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面的代码作用为将前导0删除</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="comment">//首先使用一个for循环遍历结果数组c，如果当前位不为0或者之前已经输出过一位数字（flag为1），则输出该位数字，并将flag设置为1，表示最高位已经输出。</span></span><br><span class="line"><span class="keyword">if</span> (c[i] != <span class="number">0</span> || flag == <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//最后需要判断flag的值，如果为0，说明结果为0，需要输出一个0。否则就已经将结果输出完毕了，直接结束程序即可。</span></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; x;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1171：大整数的因子-估计考，可能性最大"><a href="#1171：大整数的因子-估计考，可能性最大" class="headerlink" title="1171：大整数的因子(估计考，可能性最大)"></a>1171：大整数的因子(估计考，可能性最大)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string a;</span><br><span class="line"><span class="type">int</span> c[<span class="number">31</span>],len,t,x,flag;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line">len = a.<span class="built_in">size</span>();</span><br><span class="line"><span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in">sizeof</span>(c));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">c[i] = a[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> s = <span class="number">2</span>; s &lt;= <span class="number">9</span>; s++) &#123;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"></span><br><span class="line">t = x * <span class="number">10</span> + c[i];</span><br><span class="line">x = t % s;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; s &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;none&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度-x2F-高精度（不考）"><a href="#高精度-x2F-高精度（不考）" class="headerlink" title="高精度&#x2F;高精度（不考）"></a>高精度&#x2F;高精度（不考）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果余数d比除数b大，则返回true</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">big</span><span class="params">(<span class="type">int</span> d[], <span class="type">int</span> lend, <span class="type">int</span> b[], <span class="type">int</span> lenb)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//下面是lenb、lend相等的情况</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = lend - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">////这里的条件很关键，d[lend - 1]!=0这个条件如果不加，就会出现d数组取值=&#123;0,0&#125;，但是lend为2大于lenb为1，返回了ture，而不断减去b，导致错误（QAQ这个条件卡了三个半小时）</span></span><br><span class="line"><span class="keyword">if</span> (lend &gt; lenb&amp;&amp;d[lend - <span class="number">1</span>]!=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (lend &lt; lenb) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (d[i] &gt; b[i]) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (d[i] &lt; b[i]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//重复循环</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//每一位相等的情况下，则返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将余数d-除数b，执行减法后，d的长度将改变，必须通过引用(&amp;)传递出来</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">jianfa</span><span class="params">(<span class="type">int</span> d[], <span class="type">int</span>&amp; lend, <span class="type">int</span> b[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//x是借位，初始第0位是没有借位的</span></span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//这里是正序的因为减法从原本数字的最低位开始，而数组是逆序存放数字的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lend; i++) &#123;</span><br><span class="line">        d[i] = d[i] - b[i] - x;</span><br><span class="line">        <span class="keyword">if</span> (d[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            d[i] += <span class="number">10</span>;</span><br><span class="line">            x = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改余数d的长度</span></span><br><span class="line">    <span class="keyword">while</span> (d[lend - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lend - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        lend--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string num1;</span><br><span class="line">string num2;</span><br><span class="line"><span class="comment">//a数组是被除数，b数组是除数，c数组是商，d数组是余数</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">300</span>], b[<span class="number">300</span>], c[<span class="number">300</span>],d[<span class="number">300</span>];</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line"><span class="type">int</span> lena = num1.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">int</span> lenb = num2.<span class="built_in">length</span>();</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in">sizeof</span>(c));</span><br><span class="line"><span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line"><span class="comment">//倒序取数组a</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</span><br><span class="line">a[i] = num1[lena - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//倒序取数组b</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lenb; i++) &#123;</span><br><span class="line">b[i] = num2[lenb - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//余数长度为0</span></span><br><span class="line"><span class="type">int</span> lend = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//从被除数的最高位开始</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lena - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="comment">//1.将余数全部位数向右移动一位,因为一次循环后，相当于有一位已经完成了除法，所以有余数的话，向后退一位，而先前的那一位，后面会塞下新的a[i]，相当于把余数放大10倍（等同于高精度除单精度中的x*10步骤）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = lend - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">d[j + <span class="number">1</span>] = d[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.获得余数的新第0位</span></span><br><span class="line">d[<span class="number">0</span>] = a[i];</span><br><span class="line"><span class="comment">//3.余数的位数多加一位，因为上面最前面多加了一位</span></span><br><span class="line">lend++;</span><br><span class="line"><span class="comment">//4.将余数d和除数b相减，每减一次，则第i位商+1</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">big</span>(d, lend, b, lenb)) &#123;</span><br><span class="line"><span class="built_in">jianfa</span>(d, lend, b);</span><br><span class="line">c[i]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//商c的长度不超过被除数a的长度</span></span><br><span class="line"><span class="type">int</span> lenc = lena;</span><br><span class="line"><span class="comment">//去除前导0</span></span><br><span class="line"><span class="keyword">while</span> (c[lenc - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lenc - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">lenc--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (d[lend - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; lend - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">lend--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lenc - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lend - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; d[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>核心代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡算法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//j从0开始，但是要小于n-i-1，是因为无序区元素个数为n-i，而一共要比较n-i-1次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="comment">//此处为小于，所以为递增</span></span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j], a[j + <span class="number">1</span>]);  </span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//全程无交换，则说明本来就是有序的，不需要浪费时间进行循环，直接跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//冒泡算法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j], a[j + <span class="number">1</span>]);  </span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//全程无交换，则说明本来就是有序的，不需要浪费时间进行循环，直接跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>] ;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt;  a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bubble_sort</span>(a,n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(a,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="整数奇偶排序（考过）"><a href="#整数奇偶排序（考过）" class="headerlink" title="整数奇偶排序（考过）"></a>整数奇偶排序（考过）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j], a[j + <span class="number">1</span>]);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//全程无交换，跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort2</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j], a[j + <span class="number">1</span>]);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//全程无交换，跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>], b[<span class="number">10</span>], c[<span class="number">10</span>], cnt = <span class="number">0</span>, cntc = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            b[cnt++] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            c[cntc++] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bubble_sort</span>(b, cnt);</span><br><span class="line">    <span class="built_in">bubble_sort2</span>(c, cntc);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(b, cnt);</span><br><span class="line">    <span class="built_in">print</span>(c, cntc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="奇数单增序列"><a href="#奇数单增序列" class="headerlink" title="奇数单增序列"></a>奇数单增序列</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//为了题目格式要求，对输出函数做一点改变</span></span><br><span class="line">    cout &lt;&lt; a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j], a[j + <span class="number">1</span>]);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//全程无交换，跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">500</span>], b[<span class="number">500</span>], cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            b[cnt++] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bubble_sort</span>(b, cnt);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(b, cnt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>核心代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertsort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注意这个循环范围，因为第一个无序区的元素下标为1，而最后一个下标为n-1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//t为需要排序的数组a的元素</span></span><br><span class="line">        <span class="type">int</span> t = a[i];</span><br><span class="line">        <span class="comment">//t找位置的过程，在过程中数组t前面的元素位置往后撤</span></span><br><span class="line">        <span class="comment">//此处大于，所以为递增</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; a[j] &gt; t) &#123;</span><br><span class="line">            a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//t通过不断前移找到正确的位置</span></span><br><span class="line">        <span class="comment">//而a[j+1]要么是第一个位置，j=-1时,a[j+1]=a[0]</span></span><br><span class="line">        <span class="comment">//要么此时a[j]&lt;t了，排序就已经按照递增来排序了</span></span><br><span class="line">        a[j + <span class="number">1</span>] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt;  a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertsort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//t为需要排序的数组a的元素</span></span><br><span class="line">        <span class="type">int</span> t = a[i];</span><br><span class="line">        <span class="comment">//t找位置的过程，在过程中数组t前面的元素位置往后撤</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; a[j] &gt; t) &#123;</span><br><span class="line">            a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//t找到正确的位置</span></span><br><span class="line">        a[j + <span class="number">1</span>] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">500</span>], b[<span class="number">500</span>], cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">insertsort</span>(a, n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(a, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求逆序对（模拟考过）"><a href="#求逆序对（模拟考过）" class="headerlink" title="求逆序对（模拟考过）"></a>求逆序对（模拟考过）</h4><p>不会，直接过</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Max = <span class="number">1e6</span> + <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> a[Max] = &#123;&#125;; <span class="comment">// 存储输入序列的数组</span></span><br><span class="line"><span class="type">int</span> b[Max]; <span class="comment">// 存储归并排序过程中的临时数组</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> num = <span class="number">0</span>; <span class="comment">// 用于存储逆序对的数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序中的归并操作，将两个已排序的数组合并成一个有序的数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> mid, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = l; <span class="comment">// 左半部分数组的下标</span></span><br><span class="line">    <span class="type">int</span> j = mid + <span class="number">1</span>; <span class="comment">// 右半部分数组的下标</span></span><br><span class="line">    <span class="type">int</span> k = l; <span class="comment">// 临时数组的下标</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123; <span class="comment">// 比较左右两部分数组中的元素，合并为一个有序的数组</span></span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; a[j]) &#123; <span class="comment">// 如果左边元素大于右边元素，说明存在逆序对</span></span><br><span class="line">            b[k++] = a[j++]; <span class="comment">// 将右边元素存储在临时数组中</span></span><br><span class="line">            num += mid - i + <span class="number">1</span>; <span class="comment">// 统计逆序对数量，注意这里的统计方式</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// 如果左边元素小于等于右边元素，不需要统计逆序对</span></span><br><span class="line">            b[k++] = a[i++]; <span class="comment">// 将左边元素存储在临时数组中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123; <span class="comment">// 如果左半部分数组有剩余元素，将其存储在临时数组中</span></span><br><span class="line">        b[k++] = a[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) &#123; <span class="comment">// 如果右半部分数组有剩余元素，将其存储在临时数组中</span></span><br><span class="line">        b[k++] = a[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = l; i &lt;= r; i++) &#123; <span class="comment">// 将归并排序过程中得到的有序数组覆盖原始数组</span></span><br><span class="line">        a[i] = b[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序，对序列进行排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> mid;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; r) &#123; <span class="comment">// 递归终止条件，当左右下标相等时表示已经排好序</span></span><br><span class="line">        mid = l + ((r - l) /<span class="number">2</span>); <span class="comment">// 计算中间位置，避免溢出</span></span><br><span class="line">        <span class="built_in">mergeSort</span>(l, mid); <span class="comment">// 对左半部分数组进行归并排序</span></span><br><span class="line">        <span class="built_in">mergeSort</span>(mid + <span class="number">1</span>, r); <span class="comment">// 对右半部分数组进行归并排序</span></span><br><span class="line">        <span class="built_in">merge</span>(l, mid, r); <span class="comment">// 归并操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n; <span class="comment">// 输入序列长度</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">// 输入序列</span></span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mergeSort</span>(<span class="number">0</span>, n - <span class="number">1</span>); <span class="comment">// 对序列进行归并排序</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; num ; <span class="comment">// 输出逆序对数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序-结构体-考"><a href="#快速排序-结构体-考" class="headerlink" title="快速排序+结构体(考)"></a>快速排序+结构体(考)</h3><h4 id="1176：谁考了第k名"><a href="#1176：谁考了第k名" class="headerlink" title="1176：谁考了第k名"></a><strong>1176：谁考了第k名</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">float</span> score;</span><br><span class="line">&#125;s[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照分数由小到大排序</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(student a,student b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果前面学生的分数大于后面学生的分数，则不交换</span></span><br><span class="line">    <span class="keyword">if</span> (a.score &gt; b.score) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//也可以这么写，理解为前面的始终大于后面的</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Student a, Student b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.grade &gt; b.grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; s[i].id &gt;&gt; s[i].score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(s,s+n,cmp);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; s[k<span class="number">-1</span>].id &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s[k<span class="number">-1</span>].score;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1178：成绩排序"><a href="#1178：成绩排序" class="headerlink" title="1178：成绩排序"></a><strong>1178：成绩排序</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> &#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">float</span> score;</span><br><span class="line">&#125;s[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照分数由小到大排序</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(student a,student b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果前面学生的分数大于后面学生的分数，则是正确的排序方法（true），则不交换</span></span><br><span class="line">    <span class="keyword">if</span> (a.score &gt; b.score) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果前面学生的分数等于后面学生的分数，则比较名字的大小</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.score == b.score) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.name &lt; b.name) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.score &lt; b.score) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; s[i].name &gt;&gt; s[i].score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(s,s+n,cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; s[i].name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s[i].score &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1182：合影效果"><a href="#1182：合影效果" class="headerlink" title="1182：合影效果"></a>1182：合影效果</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、cmp结构体的优化写法：直接返回：return a.height &lt; b.height;</span></span><br><span class="line"><span class="comment">//2、string类型的字符可以直接通过：a.gender == &quot;male&quot;进行比较</span></span><br><span class="line"><span class="comment">//3、流操作符 fixed，它表示浮点输出应该以固定点或小数点表示法显示，当它与 setprecision 操作符一起使用时，它将指定浮点数字的小数点后要显示的位数：cout&lt;&lt;fixed &lt;&lt; setprecision(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个结构体表示每个人的信息</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    string gender; <span class="comment">// 性别</span></span><br><span class="line">    <span class="type">double</span> height; <span class="comment">// 身高</span></span><br><span class="line">&#125;people[<span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序规则：男生从矮到高，女生从高到矮</span></span><br><span class="line"><span class="comment">// 这里的a和b就比较像左边和右边的关系了，实际上a和b根据题目还可以引申为先后之类的关系</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> Person&amp; a, <span class="type">const</span> Person&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.gender == <span class="string">&quot;male&quot;</span> &amp;&amp; b.gender == <span class="string">&quot;male&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.height &lt; b.height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.gender == <span class="string">&quot;female&quot;</span> &amp;&amp; b.gender == <span class="string">&quot;female&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.height &gt; b.height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.gender == <span class="string">&quot;male&quot;</span> &amp;&amp; b.gender == <span class="string">&quot;female&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 男生在左边，女生在右边</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个数组存储每个人的信息</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; people[i].gender &gt;&gt; people[i].height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    <span class="built_in">sort</span>(people, people + n, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出每个人的身高</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; people[i].height &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1183：病人排队"><a href="#1183：病人排队" class="headerlink" title="1183：病人排队"></a>1183：病人排队</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、如果在cmp函数中没有覆盖所有的情况，就会导致报错：无效的比较器</span></span><br><span class="line"><span class="comment">//2、可以用过order变量记录前后顺序，避免了用string类型的id来进行前后顺序比较</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个结构体表示每个人的信息</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    string id;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span> order; <span class="comment">// 记录每个人的登记顺序，这个变量是因为id为string类型，可能存在英文，不能用id大小来比较前后顺序</span></span><br><span class="line">&#125;people[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序规则：</span></span><br><span class="line"><span class="comment">// 1、老年人（年龄 &gt;= 60岁）比非老年人优先看病。</span></span><br><span class="line"><span class="comment">// 2、老年人按年龄从大到小的顺序看病，年龄相同的按登记的先后顺序排序。</span></span><br><span class="line"><span class="comment">// 3、非老年人按登记的先后顺序看病。</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> Person&amp; a, <span class="type">const</span> Person&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、</span></span><br><span class="line">    <span class="keyword">if</span> (a.age &gt;= <span class="number">60</span> &amp;&amp; b.age &lt; <span class="number">60</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.age &lt; <span class="number">60</span> &amp;&amp; b.age &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2、</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.age &gt;= <span class="number">60</span> &amp;&amp; b.age &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.age == b.age) &#123;</span><br><span class="line">            <span class="keyword">return</span> a.order &lt; b.order;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a.age &gt; b.age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3、</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a.order &lt; b.order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个数组存储每个人的信息</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; people[i].id &gt;&gt; people[i].age;</span><br><span class="line">        people[i].order = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    <span class="built_in">sort</span>(people, people + n, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出每个人的ID</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; people[i].id &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分数线划定"><a href="#分数线划定" class="headerlink" title="分数线划定"></a>分数线划定</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span><span class="comment">//建立结构体</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> name, mark;<span class="comment">//name为编号、mark为成绩</span></span><br><span class="line">&#125;pp[<span class="number">5005</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span><span class="comment">//建立结构体a和b;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.mark == b.mark)<span class="comment">//如果成绩相同</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.name &lt; b.name;<span class="comment">//编号小的靠前</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.mark &gt; b.mark;<span class="comment">//否则成绩高的靠前</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, need, sum = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; pp[i].name &gt;&gt; pp[i].mark;<span class="comment">//输入编号和成绩</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(pp, pp + n, cmp);</span><br><span class="line">    need = m * <span class="number">1.5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; pp[need - <span class="number">1</span>].mark &lt;= pp[i].mark; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; pp[need - <span class="number">1</span>].mark &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; sum &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; pp[i].name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; pp[i].mark &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递推"><a href="#递推" class="headerlink" title="递推"></a>递推</h2><p>做递推的关键在于找到递推式</p><h3 id="1190：上台阶"><a href="#1190：上台阶" class="headerlink" title="1190：上台阶"></a>1190：上台阶</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、使用大数组来进行递推（推荐递推变量）</span></span><br><span class="line"><span class="comment">//2、输入时碰到0则停止：while (cin &gt;&gt; n &amp;&amp; n != 0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">72</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">zlt</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//走第0级有1种方法</span></span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//走第1级有1种方法</span></span><br><span class="line">    a[<span class="number">1</span>] = a[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//走第2级有2种方法</span></span><br><span class="line">    a[<span class="number">2</span>] = a[<span class="number">1</span>]+a[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//走第3级有4种方法</span></span><br><span class="line">    a[<span class="number">3</span>] = a[<span class="number">2</span>]+a[<span class="number">1</span>]+a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">4</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        a[i] = a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>] + a[i - <span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="comment">//输入到0停止</span></span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n &amp;&amp; n != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="built_in">zlt</span>(n);</span><br><span class="line">        cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1661-递推求斐波那契数列（高精度，感觉不可能结合考）"><a href="#1661-递推求斐波那契数列（高精度，感觉不可能结合考）" class="headerlink" title="1661: 递推求斐波那契数列（高精度，感觉不可能结合考）"></a>1661: 递推求斐波那契数列（高精度，感觉不可能结合考）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、数组作为递推变量的使用方法</span></span><br><span class="line"><span class="comment">//2、将一个数组赋值给另一个数组的方法，用于：memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="comment">//3、复习一遍高精度加高精度</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">10010</span>;  <span class="comment">// 数组的大小</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[MAXN], b[MAXN], c[MAXN];  <span class="comment">// 数组，用于存储斐波那契数列中的三个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加法函数，将数组 a 和 b 相加，结果存储在数组 c 中</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> c[])</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> carry = <span class="number">0</span>;  <span class="comment">// 进位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXN; i++) &#123;</span><br><span class="line">        c[i] = a[i] + b[i] + carry;  <span class="comment">// 计算 c[i]，等于 a[i] + b[i] + 进位</span></span><br><span class="line">        carry = c[i] / <span class="number">10</span>;  <span class="comment">// 计算进位，即 c[i] 除以 10 的商</span></span><br><span class="line">        c[i] %= <span class="number">10</span>;  <span class="comment">// 取个位数，即 c[i] 除以 10 的余数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算斐波那契数列的第 n 项</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fbnq</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化，将数组 a 和 b 的所有元素都赋值为 0，数组 c 的第一个元素赋值为 1</span></span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in">sizeof</span>(c));</span><br><span class="line">    a[<span class="number">0</span>] = b[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从第三项开始计算，依次计算出第 3 到第 n 项</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">add</span>(a, b, c);  <span class="comment">// 计算下一个数，将 a 和 b 相加，结果存储在数组 c 中</span></span><br><span class="line">        <span class="built_in">memcpy</span>(a, b, <span class="built_in">sizeof</span>(b));  <span class="comment">// 用 b 更新 a，将数组 b 的所有元素复制到数组 a 中</span></span><br><span class="line">        <span class="built_in">memcpy</span>(b, c, <span class="built_in">sizeof</span>(c));  <span class="comment">// 用 c 更新 b，将数组 c 的所有元素复制到数组 b 中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果，逆序输出数组 c 中的元素，即为斐波那契数列的第 n 项</span></span><br><span class="line">    <span class="type">int</span> pos = MAXN - <span class="number">1</span>;  <span class="comment">// pos 初始值为数组的最后一个元素的下标</span></span><br><span class="line">    <span class="keyword">while</span> (pos &gt; <span class="number">0</span> &amp;&amp; c[pos] == <span class="number">0</span>) pos--;  <span class="comment">// 找到最高位，即从后往前第一个非零元素的下标</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = pos; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        cout &lt;&lt; c[i];  <span class="comment">// 逆序输出数组 c 中的元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">fbnq</span>(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1196：踩方格"><a href="#1196：踩方格" class="headerlink" title="1196：踩方格"></a>1196：踩方格</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这种走方位的题目，当然也可以用递归或者深搜来做</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//找规律做法：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">21</span>];</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">    a[<span class="number">2</span>] = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//找规律</span></span><br><span class="line">        a[i] = <span class="number">2</span> * a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; a[n] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正常递推做法：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f[<span class="number">21</span>];</span><br><span class="line"><span class="type">int</span> l[<span class="number">21</span>], r[<span class="number">21</span>], u[<span class="number">21</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    l[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    r[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    u[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//最后一步向左走的走法</span></span><br><span class="line">        l[i] = l[i - <span class="number">1</span>] + u[i - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//最后一步向右的走法</span></span><br><span class="line">        r[i] = r[i - <span class="number">1</span>] + u[i - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//最后一步向上走的走法</span></span><br><span class="line">        u[i] = l[i - <span class="number">1</span>] + u[i - <span class="number">1</span>]+r[i - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//总的走法</span></span><br><span class="line">        f[i] = l[i ] + u[i]+ r[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[n];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1314：过河卒（模拟考过）"><a href="#1314：过河卒（模拟考过）" class="headerlink" title="1314：过河卒（模拟考过）"></a>1314：过河卒（模拟考过）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、先找到递推式（dp[i][j]=dp[i-1][j]+dp[i][j-1]），再找到递推式的多种初始值（边界初始化），最后再找需要排除的条件（马的控制点）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[<span class="number">21</span>][<span class="number">21</span>]=&#123;<span class="number">0</span>&#125;,g[<span class="number">21</span>][<span class="number">21</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m,x,y,i,j;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; x &gt;&gt; y;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;<span class="comment">//初始化出发点 </span></span><br><span class="line">g[x][y]=<span class="number">1</span>;<span class="comment">//标注卒</span></span><br><span class="line"><span class="comment">//判断卒可走的点是否越界 并标注不能走的马的控制点</span></span><br><span class="line"><span class="keyword">if</span>(x<span class="number">-2</span>&gt;=<span class="number">0</span>&amp;&amp;y<span class="number">-1</span>&gt;=<span class="number">0</span>)g[x<span class="number">-2</span>][y<span class="number">-1</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(x<span class="number">-1</span>&gt;=<span class="number">0</span>&amp;&amp;y<span class="number">-2</span>&gt;=<span class="number">0</span>)g[x<span class="number">-1</span>][y<span class="number">-2</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(x+<span class="number">1</span>&lt;=n&amp;&amp;y<span class="number">-2</span>&gt;=<span class="number">0</span>)g[x+<span class="number">1</span>][y<span class="number">-2</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(x+<span class="number">2</span>&lt;=n&amp;&amp;y<span class="number">-1</span>&gt;=<span class="number">0</span>)g[x+<span class="number">2</span>][y<span class="number">-1</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(x+<span class="number">2</span>&lt;=n&amp;&amp;y+<span class="number">1</span>&lt;=m)g[x+<span class="number">2</span>][y+<span class="number">1</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(x+<span class="number">1</span>&lt;=n&amp;&amp;y+<span class="number">2</span>&lt;=m)g[x+<span class="number">1</span>][y+<span class="number">2</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(x<span class="number">-1</span>&gt;=<span class="number">0</span>&amp;&amp;y+<span class="number">2</span>&lt;=m)g[x<span class="number">-1</span>][y+<span class="number">2</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(x<span class="number">-2</span>&gt;=<span class="number">0</span>&amp;&amp;y+<span class="number">1</span>&lt;=m)g[x<span class="number">-2</span>][y+<span class="number">1</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="comment">//初始化边界，按照边界走就只有一种走法，所以初始化为1</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(g[i][<span class="number">0</span>]==<span class="number">0</span>) dp[i][<span class="number">0</span>]=dp[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="keyword">if</span>(g[<span class="number">0</span>][i]==<span class="number">0</span>) dp[<span class="number">0</span>][i]=dp[<span class="number">0</span>][i<span class="number">-1</span>];</span><br><span class="line"><span class="comment">//递推公式</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(g[i][j]==<span class="number">1</span>)dp[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(g[i][j]==<span class="number">0</span>)dp[i][j]=dp[i<span class="number">-1</span>][j]+dp[i][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; dp[n][m];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//老师的方法，但是疑惑的是我必须用!in(c)才能正确，但是老师是in(c)正确，不过就逻辑上来讲也应该是in(c)，但是找不到我不同的原因</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> b[<span class="number">100</span>][<span class="number">100</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从马点前进的距离方位</span></span><br><span class="line"><span class="type">int</span> dir[<span class="number">8</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">-2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-2</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-2</span>&#125;,&#123;<span class="number">1</span>,<span class="number">-2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">-1</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">in</span><span class="params">(point p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p.x &gt;= <span class="number">0</span> &amp;&amp; p.x &lt;= n &amp;&amp; p.y &gt;= <span class="number">0</span> &amp;&amp; p.y &lt;= m) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">horse</span><span class="params">(point c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">in</span>(c)) &#123;</span><br><span class="line">b[c.x][c.y] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">point t;</span><br><span class="line">t.x = c.x + dir[i][<span class="number">0</span>];</span><br><span class="line">t.y = c.y + dir[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">in</span>(t)) &#123;</span><br><span class="line">b[t.x][t.y] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m, x, y;</span><br><span class="line">point p;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; p.x &gt;&gt; p.y;</span><br><span class="line"></span><br><span class="line"><span class="built_in">horse</span>(p);</span><br><span class="line"></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//初始化出发点 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化边界，按照边界走就只有一种走法，所以初始化为1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!b[i][<span class="number">0</span>]) &#123;</span><br><span class="line">dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!b[<span class="number">0</span>][j]) &#123;</span><br><span class="line">dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dp[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递推公式</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!b[i][j]) &#123;</span><br><span class="line">                <span class="comment">//到达位置 (i, j) 的方案数量等于到达其上方位置 (i - 1, j) 的方案数量与到达其左方位置 (i, j - 1) 的方案数量之和。</span></span><br><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dp[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; dp[n][m];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1194：移动路线-考过"><a href="#1194：移动路线-考过" class="headerlink" title="1194：移动路线(考过)"></a>1194：移动路线(考过)</h3><p>上面过河卒题目的没有条件的简单版本</p><p>注意这个循环的起始点，我一开始做的时候没有考虑我决定以dp1,1为起点，导致双重循环起点都写为了1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m, n,dp[<span class="number">21</span>][<span class="number">21</span>];</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="comment">//起点的初始条件别忘了</span></span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++) &#123;</span><br><span class="line">        dp[i][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        dp[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[n][m];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1191：流感传染-模拟考过"><a href="#1191：流感传染-模拟考过" class="headerlink" title="1191：流感传染(模拟考过)"></a>1191：流感传染(模拟考过)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,count=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> num[<span class="number">101</span>][<span class="number">101</span>],b[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            cin &gt;&gt;num[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            b[i][j]= num[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(count &lt; m<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (num[i][j] == <span class="string">&#x27;@&#x27;</span> ) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j + <span class="number">1</span> &lt; n &amp;&amp; num[i][j+<span class="number">1</span>] != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                        <span class="comment">//引入第二个数组储存结果，防止一直感染下去</span></span><br><span class="line">                        b[i][j + <span class="number">1</span>] = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (j - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; num[i][j<span class="number">-1</span>] != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                        b[i][j - <span class="number">1</span>] = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (i + <span class="number">1</span> &lt; n &amp;&amp; num[i+<span class="number">1</span>][j] != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                        b[i + <span class="number">1</span>][j] = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (i - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; num[i<span class="number">-1</span>][j] != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                        b[i - <span class="number">1</span>][j] = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                num[i][j] = b[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num[i][j] == <span class="string">&#x27;@&#x27;</span>) &#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; sum;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一种新的变量类型：节点node类型 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//data是节点的数据域 </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//lchild是节点的左指针（可以理解为左绳子） </span></span><br><span class="line"></span><br><span class="line">node* lchild;</span><br><span class="line"></span><br><span class="line"><span class="comment">//rchild是节点的左指针（可以理解为右绳子） </span></span><br><span class="line"></span><br><span class="line">node* rchild;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//创建一个节点变量 </span></span><br><span class="line"></span><br><span class="line"><span class="function">node* <span class="title">createNode</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从内存系统申请一个匿名node对象，并用绳子p牵着这个匿名node对象 </span></span><br><span class="line"></span><br><span class="line">node* p = <span class="keyword">new</span> node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绳子p所牵对象的data域赋值 </span></span><br><span class="line"></span><br><span class="line">p-&gt;data = v;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绳子p所牵对象的lchild域为NULL，表示不牵其他匿名node对象 </span></span><br><span class="line"></span><br><span class="line">p-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绳子p所牵对象的rchild域为NULL，表示不牵其他匿名node对象 </span></span><br><span class="line"></span><br><span class="line">p-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义二叉树的根节点 </span></span><br><span class="line"></span><br><span class="line">node* root = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成第1个node内存单元，并用绳子root牵着第1个node内存单元 </span></span><br><span class="line"></span><br><span class="line">root = <span class="built_in">createNode</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成第2个node内存单元，并用绳子l牵着第2个node内存单元</span></span><br><span class="line"></span><br><span class="line">node* l = <span class="built_in">createNode</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成第3个node内存单元，并用绳子r牵着第3个node内存单元 </span></span><br><span class="line"></span><br><span class="line">node* r = <span class="built_in">createNode</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将根节点变量root的左节点绳子牵向绳子l所牵的内存单元，即两根绳子都牵着第2个node内存单元 </span></span><br><span class="line"></span><br><span class="line">root-&gt;lchild = l;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将根节点变量root的右节点绳子牵向绳子r所牵的内存单元，即两根绳子都牵着第3个node内存单元 </span></span><br><span class="line"></span><br><span class="line">root-&gt;rchild = r;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成第4个node内存单元，并用绳子l重新牵着第4个node内存单元，注意：绳子l不再牵着第2个node内存单元 </span></span><br><span class="line"></span><br><span class="line">l = <span class="built_in">createNode</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成第5个node内存单元，并用绳子r重新牵着第5个node内存单元，注意：绳子r不再牵着第3个node内存单元 </span></span><br><span class="line"></span><br><span class="line">r = <span class="built_in">createNode</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将根节点变量root的左节点的左节点绳子牵向绳子l所牵的内存单元，即两根绳子都牵着第4个node内存单元 </span></span><br><span class="line"></span><br><span class="line">root-&gt;lchild-&gt;lchild = l;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将根节点变量root的左节点的右节点绳子牵向绳子r所牵的内存单元，即两根绳子都牵着第5个node内存单元 </span></span><br><span class="line"></span><br><span class="line">root-&gt;lchild-&gt;rchild = r;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成第6个node内存单元，并用绳子l重新牵着第6个node内存单元，注意：绳子l不再牵着第4个node内存单元 </span></span><br><span class="line"></span><br><span class="line">l = <span class="built_in">createNode</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成第7个node内存单元，并用绳子r重新牵着第7个node内存单元，注意：绳子r不再牵着第5个node内存单元 </span></span><br><span class="line"></span><br><span class="line">r = <span class="built_in">createNode</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将根节点变量root的右节点的左节点绳子牵向绳子l所牵的内存单元，即两根绳子都牵着第6个node内存单元 </span></span><br><span class="line"></span><br><span class="line">root-&gt;rchild-&gt;lchild = l;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将根节点变量root的右节点的右节点绳子牵向绳子r所牵的内存单元，即两根绳子都牵着第7个node内存单元 </span></span><br><span class="line"></span><br><span class="line">root-&gt;rchild-&gt;rchild = r;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1316：数的计数（模拟考过）"><a href="#1316：数的计数（模拟考过）" class="headerlink" title="1316：数的计数（模拟考过）"></a>1316：数的计数（模拟考过）</h3><p>此题的关键是通过数组ans节约了时间和空间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//csdn写法</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n)</span> <span class="comment">//统计m所扩展出的数据个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">ans++;      <span class="comment">//每出现一个原数，累加器加 1;</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n / <span class="number">2</span>; i++)  <span class="comment">//左边添加不超过原数一半的自然数，作为新原数,终止条件为i=1</span></span><br><span class="line"><span class="built_in">dfs</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">dfs</span>(n);</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//老师写法</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//此处是防止超时的如果计算过，则直接返回结果 ans[n]，节约了时间和空间</span></span><br><span class="line"><span class="keyword">if</span> (ans[n]) &#123;</span><br><span class="line"><span class="keyword">return</span> ans[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根节点自己是一个数</span></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="comment">//剪枝(超过前一个自然数一半的情况)</span></span><br><span class="line"><span class="keyword">if</span> (i &gt; n / <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//叶子结点</span></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非叶子结点</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> j = <span class="built_in">dfs</span>(i);</span><br><span class="line">cnt += j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用于保存已计算的数的拆分数量，节约了时间和空间</span></span><br><span class="line">ans[n] = cnt;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> cnt = <span class="built_in">dfs</span>(n);</span><br><span class="line">cout &lt;&lt; cnt;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1200：分解因数-模拟考过"><a href="#1200：分解因数-模拟考过" class="headerlink" title="1200：分解因数(模拟考过)"></a>1200：分解因数(模拟考过)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面的写法在模拟给的数据中会出现内存超限</span></span><br><span class="line"><span class="comment">//叶子写在for循环外面</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//叶子结点,分解方式ans+1，直接返回，不再执行</span></span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = s; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="comment">//非叶子结点(通过dfs(n / i, i)进行递归)</span></span><br><span class="line"><span class="keyword">if</span> (n%i==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">dfs</span>(n / i, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//剪枝(n%i!=0的情况)</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="built_in">dfs</span>(m, <span class="number">2</span>);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1204：爬楼梯-考过"><a href="#1204：爬楼梯-考过" class="headerlink" title="1204：爬楼梯(考过)"></a>1204：爬楼梯(考过)</h3><p>想复杂了，这类题还是找规律</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> n)</span>   <span class="comment">//递归算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">f</span>(n - <span class="number">1</span>) + <span class="built_in">f</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">f</span>(n) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1199：全排列-模拟考过"><a href="#1199：全排列-模拟考过" class="headerlink" title="1199：全排列(模拟考过)"></a>1199：全排列(模拟考过)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> b[<span class="number">1001</span>];<span class="comment">//标记 </span></span><br><span class="line"><span class="type">char</span> s[<span class="number">1001</span>], as[<span class="number">1001</span>]; <span class="comment">//s存储原字符串 as存储排序方案 </span></span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!b[s[j]]) &#123;<span class="comment">//判断是否用过 </span></span><br><span class="line">b[s[j]] = <span class="number">1</span>;</span><br><span class="line">as[i] = s[j];</span><br><span class="line"><span class="keyword">if</span> (i == len - <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; as&lt;&lt;endl;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">dfs</span>(i + <span class="number">1</span>);<span class="comment">//否则取下一个长度 </span></span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">//实际上下面的这行代码只有在i == len - 1后才会运行，因为不满足长度时，会一直进行dfs的递归</span></span><br><span class="line">b[s[j]] = <span class="number">0</span>;<span class="comment">//标记取消 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">len = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>);<span class="comment">//从长度0开始搜索 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h2><h3 id="归并排序（递归）"><a href="#归并排序（递归）" class="headerlink" title="归并排序（递归）"></a>归并排序（递归）</h3><p>这个原题目找不到了，看的不是很懂</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> tmp[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> L1, <span class="type">int</span> R1, <span class="type">int</span> L2, <span class="type">int</span> R2)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> i = L1;</span><br><span class="line"><span class="type">int</span> j = L2;</span><br><span class="line"><span class="type">int</span> k = L1;</span><br><span class="line"><span class="keyword">while</span> (i&lt;=R1&amp;&amp;j&lt;=R2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;=a[j])&#123;</span><br><span class="line">tmp[k++] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">tmp[k++] = a[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//男生多</span></span><br><span class="line"><span class="keyword">while</span> (i&lt;=R1)</span><br><span class="line">&#123;</span><br><span class="line">tmp[k++] = a[i++];</span><br><span class="line">&#125;<span class="keyword">while</span> (j &lt;= R2)</span><br><span class="line">&#123;</span><br><span class="line">tmp[k++] = a[i++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = L1; i &lt;= R2; i++) &#123;</span><br><span class="line">a[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergesort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">mergesort</span>(l, m);</span><br><span class="line"><span class="built_in">mergesort</span>(m+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">merge</span>(l, m, m + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;排序前:&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>();</span><br><span class="line"><span class="built_in">mergesort</span>(<span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;排序后:&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求逆序对（模拟考过）-1"><a href="#求逆序对（模拟考过）-1" class="headerlink" title="求逆序对（模拟考过）"></a>求逆序对（模拟考过）</h4><p>不会，直接过</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Max = <span class="number">1e6</span> + <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> a[Max] = &#123;&#125;; <span class="comment">// 存储输入序列的数组</span></span><br><span class="line"><span class="type">int</span> b[Max]; <span class="comment">// 存储归并排序过程中的临时数组</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> num = <span class="number">0</span>; <span class="comment">// 用于存储逆序对的数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序中的归并操作，将两个已排序的数组合并成一个有序的数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> mid, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = l; <span class="comment">// 左半部分数组的下标</span></span><br><span class="line">    <span class="type">int</span> j = mid + <span class="number">1</span>; <span class="comment">// 右半部分数组的下标</span></span><br><span class="line">    <span class="type">int</span> k = l; <span class="comment">// 临时数组的下标</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123; <span class="comment">// 比较左右两部分数组中的元素，合并为一个有序的数组</span></span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; a[j]) &#123; <span class="comment">// 如果左边元素大于右边元素，说明存在逆序对</span></span><br><span class="line">            b[k++] = a[j++]; <span class="comment">// 将右边元素存储在临时数组中</span></span><br><span class="line">            num += mid - i + <span class="number">1</span>; <span class="comment">// 统计逆序对数量，注意这里的统计方式</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// 如果左边元素小于等于右边元素，不需要统计逆序对</span></span><br><span class="line">            b[k++] = a[i++]; <span class="comment">// 将左边元素存储在临时数组中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123; <span class="comment">// 如果左半部分数组有剩余元素，将其存储在临时数组中</span></span><br><span class="line">        b[k++] = a[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) &#123; <span class="comment">// 如果右半部分数组有剩余元素，将其存储在临时数组中</span></span><br><span class="line">        b[k++] = a[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = l; i &lt;= r; i++) &#123; <span class="comment">// 将归并排序过程中得到的有序数组覆盖原始数组</span></span><br><span class="line">        a[i] = b[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序，对序列进行排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> mid;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; r) &#123; <span class="comment">// 递归终止条件，当左右下标相等时表示已经排好序</span></span><br><span class="line">        mid = l + ((r - l) /<span class="number">2</span>); <span class="comment">// 计算中间位置，避免溢出</span></span><br><span class="line">        <span class="built_in">mergeSort</span>(l, mid); <span class="comment">// 对左半部分数组进行归并排序</span></span><br><span class="line">        <span class="built_in">mergeSort</span>(mid + <span class="number">1</span>, r); <span class="comment">// 对右半部分数组进行归并排序</span></span><br><span class="line">        <span class="built_in">merge</span>(l, mid, r); <span class="comment">// 归并操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n; <span class="comment">// 输入序列长度</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">// 输入序列</span></span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mergeSort</span>(<span class="number">0</span>, n - <span class="number">1</span>); <span class="comment">// 对序列进行归并排序</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; num ; <span class="comment">// 输出逆序对数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并查找（就是回溯算法）"><a href="#归并查找（就是回溯算法）" class="headerlink" title="归并查找（就是回溯算法）"></a>归并查找（就是回溯算法）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;dfs(&quot;</span> &lt;&lt; l &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; r &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (l &gt; r) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (a[m] &lt; k) &#123;</span><br><span class="line"><span class="built_in">dfs</span>(m + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[m] &gt; k) &#123;</span><br><span class="line"><span class="built_in">dfs</span>(l, m - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[m] == k) &#123;</span><br><span class="line">cout &lt;&lt; m;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h2><h3 id="1213：八皇后问题"><a href="#1213：八皇后问题" class="headerlink" title="1213：八皇后问题"></a>1213：八皇后问题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面是四皇后</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> hx[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> sx[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> zxx[<span class="number">7</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> fxx[<span class="number">7</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> maze[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No.&quot;</span> &lt;&lt; cnt++ &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">cout &lt;&lt; maze[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;行放置皇后&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!hx[i] &amp;&amp; !sx[j] &amp;&amp; zxx[i + j] &amp;&amp; !fxx[i - j + <span class="number">3</span>]) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; 第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;行，第(&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;列位置&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;)放置皇后&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">maze[i][j] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line"><span class="built_in">print</span>();</span><br><span class="line">maze[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">hx[i] = <span class="number">1</span>;</span><br><span class="line">sx[j] = <span class="number">1</span>;</span><br><span class="line">zxx[i+j] = <span class="number">1</span>;</span><br><span class="line">fxx[i-j+<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">maze[i][j] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(i+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">hx[i] = <span class="number">0</span>;</span><br><span class="line">sx[j] = <span class="number">0</span>;</span><br><span class="line">zxx[i + j] = <span class="number">0</span>;</span><br><span class="line">fxx[i - j + <span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">maze[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; 第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;行，第(&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;列位置&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;)剪枝，不能放置皇后&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;行全部4列位置已经遍历&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1215：迷宫"><a href="#1215：迷宫" class="headerlink" title="1215：迷宫"></a>1215：迷宫</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CSDN:</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m, n1, m1, n2, m2, d = <span class="number">0</span>;<span class="comment">//n行m列 </span></span><br><span class="line"><span class="type">char</span> a[<span class="number">100</span>][<span class="number">100</span>];<span class="comment">//保存二维数组</span></span><br><span class="line"><span class="type">int</span> e[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125; &#125;;<span class="comment">//分别表示上下左右</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x == n2 &amp;&amp; y == m2)</span><br><span class="line">&#123;</span><br><span class="line">d = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)<span class="comment">//循环判断上下左右 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x1 = x + e[i][<span class="number">0</span>];<span class="comment">//计算下一个点的坐标 </span></span><br><span class="line"><span class="type">int</span> y1 = y + e[i][<span class="number">1</span>];<span class="comment">//计算下一个点的坐标 </span></span><br><span class="line"><span class="keyword">if</span> (x1 &gt;= <span class="number">0</span> &amp;&amp; y1 &gt;= <span class="number">0</span> &amp;&amp; x1 &lt; n &amp;&amp; y1 &lt; n &amp;&amp; a[x1][y1] != <span class="string">&#x27;#&#x27;</span>)<span class="comment">//判断边界，判断是否访问过，判断是否可以通过 </span></span><br><span class="line">&#123;</span><br><span class="line">a[x1][y1] = <span class="string">&#x27;#&#x27;</span>;<span class="comment">//走过就标记为不能走 </span></span><br><span class="line"><span class="built_in">fun</span>(x1, y1);<span class="comment">//进入下一个点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; n1 &gt;&gt; m1 &gt;&gt; n2 &gt;&gt; m2;</span><br><span class="line">d = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (a[n1][m1] == <span class="string">&#x27;#&#x27;</span> || a[n2][m2] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fun</span>(n1, m1);</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">1</span>)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//老师的dfs：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> a[<span class="number">101</span>][<span class="number">101</span>];<span class="comment">//保存二维数组</span></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125; &#125;;<span class="comment">//分别表示上下左右</span></span><br><span class="line"><span class="type">bool</span> vis[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x; </span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line">point a1;</span><br><span class="line">point a2;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">in</span><span class="params">(point k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (k.x &lt; n &amp;&amp; k.x &gt;= <span class="number">0</span> &amp;&amp; k.y &lt; n &amp;&amp; k.y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(point k)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)<span class="comment">//循环判断上下左右 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//终止条件，剪枝,防止超时</span></span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">point t;</span><br><span class="line">t.x = k.x + dir[i][<span class="number">0</span>];<span class="comment">//计算下一个点的坐标 </span></span><br><span class="line">t.y = k.y + dir[i][<span class="number">1</span>];<span class="comment">//计算下一个点的坐标 </span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">in</span>(t)&amp;&amp;!vis[t.x][t.y]&amp;&amp;a[t.x][t.y]==<span class="string">&#x27;.&#x27;</span>)&#123;<span class="comment">//判断边界，判断是否访问过，判断是否可以通过 </span></span><br><span class="line">vis[t.x][t.y] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (t.x == a2.x &amp;&amp; t.y == a2.y) &#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">dfs</span>(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t;i++)&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">cin &gt;&gt; a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; a1.x &gt;&gt; a1.y &gt;&gt; a2.x &gt;&gt; a2.y;</span><br><span class="line"></span><br><span class="line">flag=<span class="literal">false</span>;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a[a1.x][a1.y] == <span class="string">&#x27;#&#x27;</span> || a[a2.x][a2.y] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">dfs</span>(a1);</span><br><span class="line"><span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据老师改的bfs：</span></span><br><span class="line"><span class="comment">//bfs:</span></span><br><span class="line"><span class="comment">//1、建立队列queue&lt;point&gt; q;</span></span><br><span class="line"><span class="comment">//2、队尾插入传入元素q.push(k);</span></span><br><span class="line"><span class="comment">//3、队列不为空while (!q.empty())</span></span><br><span class="line"><span class="comment">//4、队首元素传入point k = q.front();</span></span><br><span class="line"><span class="comment">//5、队尾插入新的元素q.push(t);（相当于dfs的dfs（t））</span></span><br><span class="line"><span class="comment">//6、队首元素删除q.pop();（放在while层的下一级与for同级）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> a[<span class="number">101</span>][<span class="number">101</span>];<span class="comment">//保存二维数组</span></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125; &#125;;<span class="comment">//分别表示上下左右</span></span><br><span class="line"><span class="type">bool</span> vis[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line">point a1;</span><br><span class="line">point a2;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">in</span><span class="params">(point k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (k.x &lt; n &amp;&amp; k.x &gt;= <span class="number">0</span> &amp;&amp; k.y &lt; n &amp;&amp; k.y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(point k)</span> </span>&#123;</span><br><span class="line">queue&lt;point&gt;q;</span><br><span class="line">q.<span class="built_in">push</span>(k);</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">point k = q.<span class="built_in">front</span>();</span><br><span class="line"><span class="comment">//循环判断上下左右</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line"><span class="comment">//终止条件，剪枝,防止超时</span></span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">point t;</span><br><span class="line">t.x = k.x + dir[i][<span class="number">0</span>];<span class="comment">//计算下一个点的坐标 </span></span><br><span class="line">t.y = k.y + dir[i][<span class="number">1</span>];<span class="comment">//计算下一个点的坐标 </span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">in</span>(t) &amp;&amp; !vis[t.x][t.y] &amp;&amp; a[t.x][t.y] == <span class="string">&#x27;.&#x27;</span>) &#123;<span class="comment">//判断边界，判断是否访问过，判断是否可以通过 </span></span><br><span class="line">vis[t.x][t.y] = <span class="literal">true</span>;</span><br><span class="line">q.<span class="built_in">push</span>(t);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (t.x == a2.x &amp;&amp; t.y == a2.y) &#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; t; i++) &#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">cin &gt;&gt; a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; a1.x &gt;&gt; a1.y &gt;&gt; a2.x &gt;&gt; a2.y;</span><br><span class="line"></span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a[a1.x][a1.y] == <span class="string">&#x27;#&#x27;</span> || a[a2.x][a2.y] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">bfs</span>(a1);</span><br><span class="line"><span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1216：红与黑"><a href="#1216：红与黑" class="headerlink" title="1216：红与黑"></a><strong>1216：红与黑</strong></h3><p>下面有深搜法和广搜法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自己写的dfs：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a[<span class="number">21</span>][<span class="number">21</span>];<span class="comment">//保存二维数组</span></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125; &#125;;<span class="comment">//分别表示上下左右</span></span><br><span class="line"><span class="type">bool</span> vis[<span class="number">21</span>][<span class="number">21</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="type">int</span> x; </span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">point a1;</span><br><span class="line">point a2;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否在棋盘的界内</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">in</span><span class="params">(point k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (k.x &lt; y &amp;&amp; k.x &gt;= <span class="number">0</span> &amp;&amp; k.y &lt; x &amp;&amp; k.y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(point k)</span></span>&#123;</span><br><span class="line"><span class="comment">//循环判断上下左右 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">point t;</span><br><span class="line">t.x = k.x + dir[i][<span class="number">0</span>];<span class="comment">//计算下一个点的x坐标 </span></span><br><span class="line">t.y = k.y + dir[i][<span class="number">1</span>];<span class="comment">//计算下一个点的y坐标 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断边界，判断是否访问过，判断是否可以通过 </span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">in</span>(t)&amp;&amp;!vis[t.x][t.y]&amp;&amp;a[t.x][t.y]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line"><span class="comment">//走过的就不能再走一遍了，所以数组标记true</span></span><br><span class="line">vis[t.x][t.y] = <span class="literal">true</span>;</span><br><span class="line">num++;</span><br><span class="line"><span class="built_in">dfs</span>(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外层的while循环是因为可能存在多组数据，需要持续输出</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cin &gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="comment">//当在一行中读入的是两个零时，表示输入结束，这里的return 0来跳出while循环</span></span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//循环输入棋盘的具体情况，这里注意i&lt;y而不是i&lt;x，原因是i指代的应该是列数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; y; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; x; j++) &#123;</span><br><span class="line">cin &gt;&gt; a[i][j];</span><br><span class="line"><span class="comment">//遇到&#x27;@&#x27;，记录出现的位置，进行深度搜索</span></span><br><span class="line"><span class="keyword">if</span> (a[i][j] == <span class="string">&#x27;@&#x27;</span>) &#123;</span><br><span class="line">a1.x = i;</span><br><span class="line">a1.y = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意重置vis语句的位置，因为后续还可能有新一组的输入</span></span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="comment">//这里是因为题目中要求：记数时包括初始位置的瓷砖</span></span><br><span class="line">num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(a1);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; num&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自己改的bfs：</span></span><br><span class="line"><span class="comment">//bfs:</span></span><br><span class="line"><span class="comment">//1、建立队列queue&lt;point&gt; q;</span></span><br><span class="line"><span class="comment">//2、队尾插入传入元素q.push(k);</span></span><br><span class="line"><span class="comment">//3、队列不为空while (!q.empty())</span></span><br><span class="line"><span class="comment">//4、队首元素传入point k = q.front();</span></span><br><span class="line"><span class="comment">//5、队尾插入新的元素q.push(t);（相当于dfs的dfs（t））</span></span><br><span class="line"><span class="comment">//6、队首元素删除q.pop();（放在while层的下一级与for同级）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a[<span class="number">21</span>][<span class="number">21</span>];<span class="comment">//保存二维数组</span></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125; &#125;;<span class="comment">//分别表示上下左右</span></span><br><span class="line"><span class="type">bool</span> vis[<span class="number">21</span>][<span class="number">21</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span> &#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">point a1;</span><br><span class="line">point a2;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否在棋盘的界内</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">in</span><span class="params">(point k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (k.x &lt; y &amp;&amp; k.x &gt;= <span class="number">0</span> &amp;&amp; k.y &lt; x &amp;&amp; k.y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(point k)</span> </span>&#123;</span><br><span class="line">queue&lt;point&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(k);</span><br><span class="line"><span class="comment">//循环判断上下左右 </span></span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">point k = q.<span class="built_in">front</span>();</span><br><span class="line">point t;</span><br><span class="line">t.x = k.x + dir[i][<span class="number">0</span>];<span class="comment">//计算下一个点的x坐标 </span></span><br><span class="line">t.y = k.y + dir[i][<span class="number">1</span>];<span class="comment">//计算下一个点的y坐标 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断边界，判断是否访问过，判断是否可以通过 </span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">in</span>(t) &amp;&amp; !vis[t.x][t.y] &amp;&amp; a[t.x][t.y] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">//走过的就不能再走一遍了，所以数组标记true</span></span><br><span class="line">vis[t.x][t.y] = <span class="literal">true</span>;</span><br><span class="line">num++;</span><br><span class="line">q.<span class="built_in">push</span>(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外层的while循环是因为可能存在多组数据，需要持续输出</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="comment">//当在一行中读入的是两个零时，表示输入结束，这里的return 0来跳出while循环</span></span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//循环输入棋盘的具体情况，这里注意i&lt;y而不是i&lt;x，原因是i指代的应该是列数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; y; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; x; j++) &#123;</span><br><span class="line">cin &gt;&gt; a[i][j];</span><br><span class="line"><span class="comment">//遇到&#x27;@&#x27;，记录出现的位置，进行广度搜索</span></span><br><span class="line"><span class="keyword">if</span> (a[i][j] == <span class="string">&#x27;@&#x27;</span>) &#123;</span><br><span class="line">a1.x = i;</span><br><span class="line">a1.y = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意重置vis语句的位置，因为后续还可能有新一组的输入</span></span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="comment">//这里是因为题目中要求：记数时包括初始位置的瓷砖</span></span><br><span class="line">num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bfs</span>(a1);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1219：马走日（考过）"><a href="#1219：马走日（考过）" class="headerlink" title="1219：马走日（考过）"></a>1219：马走日（考过）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dir[<span class="number">8</span>][<span class="number">2</span>]=&#123; &#123;<span class="number">2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">-2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-2</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-2</span>&#125;,&#123;<span class="number">1</span>,<span class="number">-2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">-1</span>&#125; &#125;;</span><br><span class="line"><span class="type">int</span> n, m,sum=<span class="number">0</span>,visit[<span class="number">11</span>][<span class="number">11</span>],flag,step=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">horse</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x; </span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">in</span><span class="params">(horse h3)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (h3.x &gt;= <span class="number">0</span> &amp;&amp; h3.x &lt; n &amp;&amp; h3.y &gt;= <span class="number">0</span> &amp;&amp; h3.y &lt; m) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(horse h2,<span class="type">int</span> step)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (step==n*m) &#123;</span><br><span class="line">        sum++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        horse t;</span><br><span class="line">        t.x = h2.x + dir[i][<span class="number">0</span>];</span><br><span class="line">        t.y = h2.y + dir[i][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">in</span>(t)&amp;&amp;visit[t.x][t.y]==<span class="number">0</span>) &#123;</span><br><span class="line">            visit[t.x][t.y] = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(t,step+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//这里的visit[t.x][t.y] = 0;很关键，不然整个棋盘只能走一次,这点与1216:红与黑不同,红与黑是给定了起点和终点，只需要走一次</span></span><br><span class="line">            visit[t.x][t.y] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    horse h1;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> s = <span class="number">0</span>; s &lt; T; s++) &#123;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(visit, <span class="number">0</span>, <span class="built_in">sizeof</span>(visit));</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m &gt;&gt; h1.x &gt;&gt; h1.y;</span><br><span class="line"></span><br><span class="line">        visit[h1.x][h1.y] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(h1,<span class="number">1</span>);</span><br><span class="line">        cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1217：棋盘问题（模拟考过）"><a href="#1217：棋盘问题（模拟考过）" class="headerlink" title="1217：棋盘问题（模拟考过）"></a>1217：棋盘问题（模拟考过）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关键在于结束条件的构建，以及循环初值的设立</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line"><span class="type">int</span> n, k,sum=<span class="number">0</span>,vis[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (y==k) &#123;</span><br><span class="line">        sum++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i][j] == <span class="string">&#x27;#&#x27;</span> &amp;&amp; vis[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                vis[j] = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(i + <span class="number">1</span>, y + <span class="number">1</span>);</span><br><span class="line">                vis[j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n &gt;&gt; k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">-1</span> &amp;&amp; k == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    cin &gt;&gt; a[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            cout &lt;&lt; sum &lt;&lt; endl;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="1267：【例9-11】01背包问题"><a href="#1267：【例9-11】01背包问题" class="headerlink" title="1267：【例9.11】01背包问题"></a>1267：【例9.11】01背包问题</h3><p>记住下面的图，物品为i行，重量为j列</p><p>关键步：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; ++j)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span> (j &gt;= w[i])</span><br><span class="line">              <span class="comment">//当前物品能够装进背包的情况下，还需要比较装上该物品后，和上一次i-1行对应的最优解的价值大小，如果更大，则更新新的更大的价值，反之维持上一步的最优解</span></span><br><span class="line">               dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - w[i]] + c[i]);</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">               <span class="comment">//当前物品不能够装进背包的情况下，维持上一步的最优解</span></span><br><span class="line">               dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//未优化版本：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;----</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 35</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 250</span></span><br><span class="line"><span class="type">int</span> dp[N][M], w[N], c[N];<span class="comment">//dp[i][j]:在前i个物品中选择物品放入大小为j的背包能获得的最大价值 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        cin &gt;&gt; w[i] &gt;&gt; c[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= w[i])</span><br><span class="line">                <span class="comment">//当前物品能够装进背包的情况下，还需要比较装上该物品后，和上一次i-1行对应的最优解的价值大小，如果更大，则更新新的更大的价值，反之维持上一步的最优解</span></span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - w[i]] + c[i]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">//当前物品不能够装进背包的情况下，维持上一步的最优解</span></span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//最后答案就在所有循环结束后的最后一个数组里</span></span><br><span class="line">    cout &lt;&lt; dp[n][m];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(58).png" alt="屏幕截图(58)"></p><h3 id="最长连续字段和"><a href="#最长连续字段和" class="headerlink" title="最长连续字段和"></a>最长连续字段和</h3><p>关键步：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> maxsum = <span class="number">-1000</span>;</span><br><span class="line">dp[<span class="number">0</span>] = w[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="comment">//如果上一个dp是正数，就直接加上当前的w，不管w是不是负数</span></span><br><span class="line"><span class="keyword">if</span> (dp[i - <span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">dp[i] = dp[i - <span class="number">1</span>] + w[i];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//如果上一个dp是负数，就直接抛弃上一个dp，从这个dp开始重新计算</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dp[i] = w[i];</span><br><span class="line">&#125;</span><br><span class="line">maxsum = <span class="built_in">max</span>(maxsum, dp[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dp[<span class="number">101</span>],w[<span class="number">101</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> maxsum = <span class="number">-1000</span>;</span><br><span class="line">dp[<span class="number">0</span>] = w[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="comment">//如果上一个dp是正数，就直接加上当前的w，不管w是不是负数</span></span><br><span class="line"><span class="keyword">if</span> (dp[i - <span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">dp[i] = dp[i - <span class="number">1</span>] + w[i];</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//如果上一个dp是负数，就直接抛弃上一个dp，从这个dp开始重新计算</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dp[i] = w[i];</span><br><span class="line">&#125;</span><br><span class="line">maxsum = <span class="built_in">max</span>(maxsum, dp[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> maxsum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt;  n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; w[i];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="type">int</span> sumup=<span class="built_in">sum</span>();</span><br><span class="line">cout &lt;&lt; sumup;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长上升子序列-模拟考过"><a href="#最长上升子序列-模拟考过" class="headerlink" title="最长上升子序列(模拟考过)"></a>最长上升子序列(模拟考过)</h3><p>关键步：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意下面j终点是i</span></span><br><span class="line"><span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//枚举子序列的终点</span></span><br><span class="line">&#123;</span><br><span class="line">    dp[i] = <span class="number">1</span>;<span class="comment">// 初始化为1，长度最短为自身9</span></span><br><span class="line">    <span class="comment">//注意下面j终点是i</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++)<span class="comment">//从头向终点检查每一个元素</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; a[j])</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>);  <span class="comment">// 状态转移方程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="built_in">max</span>(ans, dp[i]);  <span class="comment">// 比较每一个dp[i],最大值为答案</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">10001</span>], dp[<span class="number">10001</span>];</span><br><span class="line"><span class="comment">// a数组为数据，dp[i]表示以a[i]结尾的最长递增子序列长度</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LIS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//枚举子序列的终点</span></span><br><span class="line">    &#123;</span><br><span class="line">        dp[i] = <span class="number">1</span>;<span class="comment">// 初始化为1，长度最短为自身9</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++)<span class="comment">//从头向终点检查每一个元素</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[j])</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>);  <span class="comment">// 状态转移方程</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, dp[i]);  <span class="comment">// 比较每一个dp[i],最大值为答案</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">         cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">LIS</span>();</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(64).png" alt="屏幕截图(64)"></p><h3 id="最长公共子串"><a href="#最长公共子串" class="headerlink" title="最长公共子串"></a>最长公共子串</h3><p>关键步：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= lena; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= lenb; j++)&#123;</span><br><span class="line">        <span class="comment">//如果相等，则将表格斜上角的数据dp[i - 1][j - 1]+1</span></span><br><span class="line">        <span class="keyword">if</span> (a[i - <span class="number">1</span>] == b[j - <span class="number">1</span>]) &#123;</span><br><span class="line">            dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果不相等，则选择表格左边dp[i][j - 1]和上边dp[i - 1][j]最大的dp数据放入dp[i][j]</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a[<span class="number">201</span>], b[<span class="number">201</span>];</span><br><span class="line"><span class="type">int</span> dp[<span class="number">201</span>][<span class="number">201</span>], lena, lenb,i,j;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lcs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= lena; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= lenb; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果相等，则将表格斜上角的数据dp[i - 1][j - 1]+1</span></span><br><span class="line">            <span class="keyword">if</span> (a[i - <span class="number">1</span>] == b[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果不相等，则选择表格左边dp[i][j - 1]和上边dp[i - 1][j]最大的dp数据放入dp[i][j]</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; a)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; b;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">        lena = <span class="built_in">strlen</span>(a);</span><br><span class="line">        lenb = <span class="built_in">strlen</span>(b);</span><br><span class="line">        <span class="built_in">lcs</span>();</span><br><span class="line">        cout &lt;&lt; dp[lena][lenb] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1296：开餐馆"><a href="#1296：开餐馆" class="headerlink" title="1296：开餐馆"></a>1296：开餐馆</h3><p>关键步</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">cin &gt;&gt; w[i];   <span class="comment">// n 个地点位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; c[i]; <span class="comment">// n个地点的餐馆利润</span></span><br><span class="line">dp[i] = c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// j为逆序，防止部分数据被冲掉（不清楚原因）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (w[i] - w[j] &gt; k)</span><br><span class="line">&#123;  <span class="comment">// 餐馆之间的距离必须大于k</span></span><br><span class="line">dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + c[i]); <span class="comment">// dp[i]表示前i个地点开餐馆的最大利润</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里的排序是为了找到利益的最大值</span></span><br><span class="line"><span class="comment">// 也可以使用for循环加max函数来求最大值</span></span><br><span class="line"><span class="built_in">sort</span>(dp + <span class="number">1</span>, dp + n + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> w[<span class="number">1001</span>], c[<span class="number">1001</span>], dp[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin &gt;&gt; t;<span class="comment">//测试数据组数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> s=<span class="number">1</span>;s&lt;=t;s++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k; <span class="comment">//输入总数n和距离限制K</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">cin &gt;&gt; w[i];   <span class="comment">// n 个地点位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">cin &gt;&gt; c[i];<span class="comment">// n个地点的餐馆利润</span></span><br><span class="line">dp[i] = c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="comment">//j为逆序，防止部分数据被冲掉（不清楚原因）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (w[i] - w[j] &gt; k) &#123;<span class="comment">//餐馆之间的距离必须大于k</span></span><br><span class="line">dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + c[i]);<span class="comment">//dp[i]表示前i个地点开餐馆的最大利润</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//这里的排序是为了找到利益的最大值</span></span><br><span class="line">        <span class="comment">//也可以使用for循环加max函数来求最大值</span></span><br><span class="line"><span class="built_in">sort</span>(dp + <span class="number">1</span>, dp + n + <span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; dp[n] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1293：买书"><a href="#1293：买书" class="headerlink" title="1293：买书"></a>1293：买书</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此方法省略步骤较多</span></span><br><span class="line"><span class="comment">//还没认真看</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span>  dp[<span class="number">1001</span>], c[<span class="number">5</span>] = &#123; <span class="number">0</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">100</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//初始条件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = c[i]; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (dp[j-c[i]]) &#123;</span><br><span class="line">dp[j] = dp[j] + dp[j - c[i]];  <span class="comment">//状态转移方程</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">cout &lt;&lt; dp[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1259：【例9-3】求最长不下降序列（模拟考过"><a href="#1259：【例9-3】求最长不下降序列（模拟考过" class="headerlink" title="1259：【例9.3】求最长不下降序列（模拟考过)"></a>1259：【例9.3】求最长不下降序列（模拟考过)</h3><p>这个比较有意思的是最长不下降序列的输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (dp[i] == ans)</span><br><span class="line">&#123;</span><br><span class="line">b[cnt] = a[i];</span><br><span class="line">cnt++;</span><br><span class="line">ans--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = cnt - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; b[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,ans=<span class="number">1</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">201</span>],dp[<span class="number">201</span>],b[<span class="number">201</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt;= a[j]) &#123;</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;max=&quot;</span>&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] == ans) &#123;</span><br><span class="line">            b[cnt] = a[i];</span><br><span class="line">            cnt++;</span><br><span class="line">            ans--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = cnt - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; b[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1284：摘花生"><a href="#1284：摘花生" class="headerlink" title="1284：摘花生"></a>1284：摘花生</h3><p>关键在于这个dp的改变,从上一步推演而来，就是左边和上面</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j] ,dp[i][j<span class="number">-1</span>])+M[i][j];</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> T,R,C,M[<span class="number">101</span>][<span class="number">101</span>],dp[<span class="number">101</span>][<span class="number">101</span>], res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> s = <span class="number">0</span>; s &lt; T; s++) &#123;</span><br><span class="line">        cin &gt;&gt; R &gt;&gt; C;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;=R; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= C; j++) &#123;</span><br><span class="line">                cin &gt;&gt; M[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= R; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= C; j++) &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j] ,dp[i][j<span class="number">-1</span>])+M[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; dp[R][C] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1258：【例9-2】数字金字塔"><a href="#1258：【例9-2】数字金字塔" class="headerlink" title="1258：【例9.2】数字金字塔"></a>1258：【例9.2】数字金字塔</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此做法为自上而下</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="type">int</span> dp[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//输入数塔</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++)&#123;</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">1</span>][<span class="number">1</span>] = a[<span class="number">1</span>][<span class="number">1</span>];<span class="comment">//粘贴过来</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) + a[i][j];</span><br><span class="line"><span class="comment">//cout &lt;&lt; dp[i][j]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">//状态转移方程：比较这一层dp的正上方与最上方右边一个哪个大</span></span><br><span class="line"><span class="comment">//大的与正下方a相加，作为dp正下方的值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> maxv = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">maxv = <span class="built_in">max</span>(maxv, dp[n][i]);<span class="comment">//比较最后一行结果值</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; maxv;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java爬虫</title>
      <link href="/posts/ade80941.html"/>
      <url>/posts/ade80941.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java爬虫"><a href="#Java爬虫" class="headerlink" title="Java爬虫"></a>Java爬虫</h1><h2 id="实现目标："><a href="#实现目标：" class="headerlink" title="实现目标："></a>实现目标：</h2><p>1、要求爬到该站点的所有小说，（且具有定时去查看小说更新的功能）<br>2、爬到的内容要求包含简介、作者名称、封面图片、小说名称、具体小说章节、最新更新章节、完结状态<br>3、上述要求内容还必须存到数据库中<br>4、小说内容应该以怎么样的形式存到数据库中</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>1、框架：seimicrawler、jsoup、WebMagic（决定采用jsoup）</p><p>2、采用selenium这类谷歌测试工具来爬取动态加载的网页</p><h2 id="python思路"><a href="#python思路" class="headerlink" title="python思路"></a>python思路</h2><p>先摆上python的<strong>静态</strong>爬虫提供相似思路(使用Xpath的方法找到标签)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;https://www.zwwx.com/book/67/67510/&#x27;</span></span><br><span class="line"><span class="comment"># header</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/&#x27;</span></span><br><span class="line">                         <span class="string">&#x27;537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/&#x27;</span></span><br><span class="line">                         <span class="string">&#x27;537.36 Edg/103.0.1264.49&#x27;</span>&#125;    <span class="comment"># 伪装headers</span></span><br><span class="line">response = requests.get(url=url, headers=headers)</span><br><span class="line">response.encoding = response.apparent_encoding  <span class="comment"># 转中文码(自动分析解码)</span></span><br><span class="line"><span class="comment"># re的正则表达式的方法</span></span><br><span class="line"><span class="comment"># print(response.text)</span></span><br><span class="line">href = re.findall(<span class="string">&#x27;&lt;dd&gt;&lt;a href=&quot;(.*?)&quot;&gt;.*?&lt;/a&gt;&lt;/dd&gt;&#x27;</span>, response.text)    <span class="comment"># 需要的用（.*?）代替，不需要的用.*?代替</span></span><br><span class="line">name = re.findall(<span class="string">&#x27;&lt;dt&gt;(.*?)&lt;/dt&gt;&#x27;</span>, response.text)[<span class="number">0</span>]   <span class="comment"># 同上,而[i] i代表第几个数据，从第0个开始</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> href:</span><br><span class="line">    index_url = <span class="string">&#x27;https://www.zwwx.com&#x27;</span> + index  <span class="comment"># 循环有点意思，实际上变量index就是href中的每一个链接</span></span><br><span class="line">    res = requests.get(url=index_url, headers=headers)</span><br><span class="line">    res.encoding = res.apparent_encoding</span><br><span class="line">    <span class="comment"># 有标签时用css和xpath(无法直接提取字符串数据，需要加.text),无标签用re正则(无需加.text)</span></span><br><span class="line">    selector = parsel.Selector(res.text)</span><br><span class="line">    title = selector.css(<span class="string">&#x27;.bookname &gt; h1::text&#x27;</span>).get()</span><br><span class="line">    <span class="comment"># 复杂版：#wrapper &gt; div.content_read &gt; div &gt; div.bookname &gt; h1::text</span></span><br><span class="line">    <span class="comment"># h1::text是提取标签内的文本,.get获取内容</span></span><br><span class="line">    content_list = selector.css(<span class="string">&#x27;#content::text&#x27;</span>).getall()</span><br><span class="line">    content = <span class="string">&#x27;\n&#x27;</span>.join(content_list)     <span class="comment"># 列表转为字符串</span></span><br><span class="line">    <span class="comment"># .get()是取一个 .getall()是提取全部！！！！！！！！！！提取出来是列表，而非字符串</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;novel\\<span class="subst">&#123;name&#125;</span>.txt&#x27;</span>, mode=<span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:  <span class="comment"># as f是将这个文件命名为f</span></span><br><span class="line">        <span class="comment"># 配置文件 文件路径 名字 保存方式（mode w写入数据(会覆盖) a追加保存 ） 编码格式</span></span><br><span class="line">        <span class="comment"># open()需要末尾加上f.close,而with open()则会自动关闭不需要加f.close</span></span><br><span class="line">        f.write(title)  <span class="comment"># 写入f文件中</span></span><br><span class="line">        f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.write(content)</span><br><span class="line">        f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;正在保存：&#x27;</span>, title)   <span class="comment"># 直接文字需双引号，变量不用，用 , 连接</span></span><br></pre></td></tr></table></figure><p><strong>动态</strong>爬虫</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">opt = Options()</span><br><span class="line">opt.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">opt.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">driver = Chrome(options=opt)</span><br><span class="line">url = <span class="string">&#x27;https://www.maofly.com/manga/6996/451102.html&#x27;</span></span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3</span>)  <span class="comment"># 这是为了让网页能够完全加载出来</span></span><br><span class="line"></span><br><span class="line">driver.get(url=url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10000</span>):</span><br><span class="line">    result = es.alert_is_present()(driver)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result:</span><br><span class="line">        <span class="built_in">print</span>(result.text)</span><br><span class="line">        result.accept()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;没有警告窗&#x27;</span>)</span><br><span class="line">        res = driver.page_source</span><br><span class="line">        selector = parsel.Selector(res)</span><br><span class="line">        <span class="comment"># //*[@id=&quot;all&quot;]/div/div[2]/div[1]/img</span></span><br><span class="line">        img_url = selector.xpath(<span class="string">&#x27;//*[@id=&quot;all&quot;]/div/div[2]/div[1]/img/@src&#x27;</span>).get()</span><br><span class="line">        pic_title = selector.xpath(<span class="string">&#x27;/html/body/div/h2/text()&#x27;</span>).get()</span><br><span class="line">        pic_name = selector.xpath(<span class="string">&#x27;/html/body/div/h1/a/text()&#x27;</span>).get()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;img\\&#x27;</span> + pic_name):  <span class="comment"># 如果该路径下没有这个文件夹，那就创建这个文件夹</span></span><br><span class="line">            os.mkdir(<span class="string">&#x27;img\\&#x27;</span> + pic_name)</span><br><span class="line">        img = requests.get(url=img_url).content</span><br><span class="line">        name = pic_title, i     <span class="comment"># 不能用pic_title + i</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;正在保存:&#x27;</span>, name, img_url)  <span class="comment"># 直接文字需双引号，变量不用，用 , 连接</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;img\\<span class="subst">&#123;pic_name&#125;</span>\\<span class="subst">&#123;name&#125;</span>.jpg&#x27;</span>, mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:  <span class="comment"># as f是将这个文件命名为f,变量需要加进&#123; &#125;\\内，定值直接输入\\</span></span><br><span class="line">            <span class="comment"># 配置文件 文件路径 名字 保存方式（mode w写入数据(会覆盖) a追加保存 ） 编码格式</span></span><br><span class="line">            <span class="comment"># open()需要末尾加上f.close,而with open()则会自动关闭不需要加f.close</span></span><br><span class="line">            f.write(img)  <span class="comment"># 写入f文件中</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;保存完成:&#x27;</span>, name)  <span class="comment"># 直接文字需双引号，变量不用，用 , 连接</span></span><br><span class="line"></span><br><span class="line">        button = driver.find_element(By.XPATH, <span class="string">&#x27;/html/body/div/div[2]/nav/div/a[4]&#x27;</span>)</span><br><span class="line">        button.click()</span><br></pre></td></tr></table></figure><p>在爬取数据方面我觉得在看完狂神的视频后问题不大，最大的问题是数据库写入的实现，以及不定期爬取更新资源的实现（可以等网站测试做完再说）</p><h2 id="Jsoup"><a href="#Jsoup" class="headerlink" title="Jsoup"></a>Jsoup</h2><h3 id="爬取小说地址具体代码"><a href="#爬取小说地址具体代码" class="headerlink" title="爬取小说地址具体代码"></a>爬取小说地址具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getBookUrl1</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ArrayList&lt;String&gt; bookUrlList1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//count用于计数完成了多少BookUrl的获取</span></span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//一共有5页</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=max;i++)&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlEver</span> <span class="operator">=</span> <span class="string">&quot;https://www.9biqu.com/class/1/&quot;</span>+i+<span class="string">&quot;.html&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(urlEver)</span><br><span class="line">                    .userAgent(ua)</span><br><span class="line">                    .proxy(currentProxy)</span><br><span class="line">                    .timeout(<span class="number">1000000000</span>)</span><br><span class="line">                    .get();</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            <span class="type">Elements</span> <span class="variable">NameUrlList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#newscontent &gt; div.update-list &gt; div &gt; div &gt; ul&gt;li&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Element el : NameUrlList)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">BookUrlPart</span> <span class="operator">=</span> el.select(<span class="string">&quot;span.s2 &gt; a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">BookUrl</span> <span class="operator">=</span><span class="string">&quot;https://www.9biqu.com&quot;</span>+ BookUrlPart;</span><br><span class="line">                bookUrlList1.add(BookUrl);</span><br><span class="line">                count++;</span><br><span class="line">                System.out.println(<span class="string">&quot;玄幻小说地址采集完成&quot;</span>+count+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            i--;</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说地址时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;玄幻小说已经全部采集完成&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bookUrlList1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="爬取小说信息具体代码"><a href="#爬取小说信息具体代码" class="headerlink" title="爬取小说信息具体代码"></a>爬取小说信息具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;BookInfo&gt; <span class="title function_">listBookDetails</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    BUrl1 = getBookUrl1();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt; BUrl1.size();i++)&#123;</span><br><span class="line">        String urlEverBook=BUrl1.get(i);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            count++;</span><br><span class="line">            <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(urlEverBook)</span><br><span class="line">                    .userAgent(ua)</span><br><span class="line">                    <span class="comment">// 将代理服务器对象传递给Jsoup</span></span><br><span class="line">                    .proxy(currentProxy)</span><br><span class="line">                    .timeout(<span class="number">1000000000</span>)</span><br><span class="line">                    .get();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">bookName</span> <span class="operator">=</span> document.select(<span class="string">&quot;#info &gt; h1&quot;</span>).text();</span><br><span class="line">            <span class="type">String</span> <span class="variable">authorName</span> <span class="operator">=</span> document.select(<span class="string">&quot;#info &gt; p:nth-child(2) &gt; a&quot;</span>).text();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">picUrl</span> <span class="operator">=</span> <span class="string">&quot;https://www.9biqu.com&quot;</span> + document.select(<span class="string">&quot;#fmimg &gt; img&quot;</span>).attr(<span class="string">&quot;src&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">lastChapterName</span> <span class="operator">=</span> document.select(<span class="string">&quot;#info &gt; p:nth-child(5) &gt; a&quot;</span>).text();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(authorName.equals(<span class="string">&quot;小说免费阅读&quot;</span>))&#123;</span><br><span class="line">                authorName=<span class="string">&quot;Tec&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">bookIntro</span> <span class="operator">=</span> document.select(<span class="string">&quot;#intro&quot;</span>).text();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本书名:&quot;</span>+bookName);</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本作者名:&quot;</span>+authorName);</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本介绍:&quot;</span>+bookIntro);</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本图片链接:&quot;</span>+picUrl);</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本最新章名:&quot;</span>+lastChapterName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            QueryWrapper&lt;BookInfo&gt;BookInfoNameQueryWrapper =<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">            BookInfoNameQueryWrapper.eq(<span class="string">&quot;book_name&quot;</span>, bookName);</span><br><span class="line">            <span class="type">BookInfo</span> <span class="variable">bookInfo</span> <span class="operator">=</span> bookInfoMapper.selectOne(BookInfoNameQueryWrapper);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(bookInfo==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">BookInfo</span> <span class="variable">bookInfo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookInfo</span>();</span><br><span class="line">                bookInfo1.setWorkDirection(<span class="number">0</span>);</span><br><span class="line">                bookInfo1.setCategoryId(<span class="number">1L</span>);</span><br><span class="line">                bookInfo1.setCategoryName(<span class="string">&quot;玄幻奇幻&quot;</span>);</span><br><span class="line">                bookInfo1.setPicUrl(picUrl);</span><br><span class="line">                bookInfo1.setBookName(bookName);</span><br><span class="line">                bookInfo1.setAuthorId(<span class="number">0L</span>);</span><br><span class="line">                bookInfo1.setAuthorName(authorName);</span><br><span class="line">                bookInfo1.setBookDesc(bookIntro);</span><br><span class="line">                bookInfo1.setScore(<span class="number">6</span>);</span><br><span class="line">                bookInfo1.setBookStatus(<span class="number">0</span>);</span><br><span class="line">                bookInfo1.setVisitCount(<span class="number">100L</span>);</span><br><span class="line">                <span class="comment">//bookInfo1.setWordCount();</span></span><br><span class="line">                bookInfo1.setCommentCount(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">//bookInfo1.setLastChapterId();</span></span><br><span class="line">                bookInfo1.setLastChapterName(lastChapterName);</span><br><span class="line">                bookInfo1.setLastChapterUpdateTime(LocalDateTime.now());</span><br><span class="line">                bookInfo1.setCreateTime(LocalDateTime.now());</span><br><span class="line">                bookInfo1.setUpdateTime(LocalDateTime.now());</span><br><span class="line">                bookInfo1.setIsVip(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                bookInfoMapper.insert(bookInfo1);</span><br><span class="line">                System.out.println(<span class="string">&quot;数据表bookInfo数据存入成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;在数据表bookInfo中书名为&quot;</span>+bookName+<span class="string">&quot;的小说在数据库中已经存在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说信息时，IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说信息时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="爬取小说章节内容具体代码"><a href="#爬取小说章节内容具体代码" class="headerlink" title="爬取小说章节内容具体代码"></a>爬取小说章节内容具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getBookContent</span><span class="params">(String BookContentUrl)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">bookContent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (bookContent == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(BookContentUrl)</span><br><span class="line">                    .userAgent(ua)</span><br><span class="line">                    .proxy(currentProxy)</span><br><span class="line">                    .timeout(<span class="number">1000000000</span>)</span><br><span class="line">                    .get();</span><br><span class="line">            Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">            <span class="type">Elements</span> <span class="variable">bookContentList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#content &gt; *:not(p:first-child)&quot;</span>);</span><br><span class="line"></span><br><span class="line">            bookContent = bookContentList.toString();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (SocketException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bookContent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**统记中文字数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countChineseCharacters</span><span class="params">(String bookContent)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (bookContent == <span class="literal">null</span> || bookContent.trim().isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    String[] words = bookContent.trim().split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : word.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isChineseCharacter(c)) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**判断是否是中文</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isChineseCharacter</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">    Character.<span class="type">UnicodeScript</span> <span class="variable">script</span> <span class="operator">=</span> Character.UnicodeScript.of(c);</span><br><span class="line">    <span class="keyword">return</span> script == Character.UnicodeScript.HAN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="爬取小说章节具体代码"><a href="#爬取小说章节具体代码" class="headerlink" title="爬取小说章节具体代码"></a>爬取小说章节具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;BookInfo&gt; <span class="title function_">listBookContent</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">countChapter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    BUrl1 = getBookUrl1();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt; BUrl1.size();i++)&#123;</span><br><span class="line">        String urlEverBook=BUrl1.get(i);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(urlEverBook)</span><br><span class="line">                    .userAgent(ua)</span><br><span class="line">                    <span class="comment">// 将代理服务器对象传递给Jsoup</span></span><br><span class="line">                    .proxy(currentProxy)</span><br><span class="line">                    .timeout(<span class="number">1000000000</span>)</span><br><span class="line">                    .get();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">bookName</span> <span class="operator">=</span> document.select(<span class="string">&quot;#info &gt; h1&quot;</span>).text();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//以下代码是取得每本书的每个章节名以及链接还有章节内容</span></span><br><span class="line">            String bookChapterName;</span><br><span class="line">            String bookChapterUrlPart;</span><br><span class="line">            String bookChapterUrl;</span><br><span class="line"></span><br><span class="line">            String bookContent;</span><br><span class="line"></span><br><span class="line">            Long bookId= <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">Elements</span> <span class="variable">bookChapter</span> <span class="operator">=</span> document.select(<span class="string">&quot;#list &gt; dl &gt; dd:gt(13)&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span>(Element el:bookChapter)&#123;</span><br><span class="line">                countChapter++;</span><br><span class="line">                bookChapterName = el.select(<span class="string">&quot;a&quot;</span>).text();</span><br><span class="line">                bookChapterUrlPart = el.select(<span class="string">&quot;a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">                bookChapterUrl = <span class="string">&quot;https://www.9biqu.com&quot;</span>+ bookChapterUrlPart;</span><br><span class="line">                bookContent = getBookContent(bookChapterUrl);</span><br><span class="line">                <span class="type">int</span> <span class="variable">chineseCharCount</span> <span class="operator">=</span> countChineseCharacters(bookContent);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本的第&quot;</span>+countChapter+<span class="string">&quot;章名&quot;</span>+bookChapterName);</span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本的第&quot;</span>+countChapter+<span class="string">&quot;章链接:&quot;</span>+bookChapterUrl);</span><br><span class="line">                <span class="comment">//System.out.println(&quot;第&quot;+count+&quot;本的第&quot;+countChapter+&quot;章内容:&quot;+bookContent);</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//查找是否有该小说的存在</span></span><br><span class="line">                QueryWrapper&lt;BookInfo&gt;BookInfoNameQueryWrapper =<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">                BookInfoNameQueryWrapper.eq(<span class="string">&quot;book_name&quot;</span>, bookName);</span><br><span class="line">                <span class="type">BookInfo</span> <span class="variable">bookInfoText</span> <span class="operator">=</span> bookInfoMapper.selectOne(BookInfoNameQueryWrapper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="type">BookInfo</span> <span class="variable">bookInfoId</span> <span class="operator">=</span> bookInfoMapper.selectOne(BookInfoNameQueryWrapper);</span><br><span class="line">                bookId = bookInfoId.getId();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//查找是否有重复章节内容的存在</span></span><br><span class="line">                QueryWrapper&lt;BookChapter&gt;BookChapterTextQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">                BookChapterTextQueryWrapper.eq(<span class="string">&quot;chapter_name&quot;</span>,bookChapterName);</span><br><span class="line">                BookChapterTextQueryWrapper.eq(<span class="string">&quot;book_id&quot;</span>,bookId);</span><br><span class="line">                <span class="type">BookChapter</span> <span class="variable">bookChapterText</span> <span class="operator">=</span> bookChapterMapper.selectOne(BookChapterTextQueryWrapper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 如果不存在相同的章节名字，则插入书籍信息</span></span><br><span class="line">                <span class="keyword">if</span>(bookInfoText != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (bookChapterText == <span class="literal">null</span> ) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        <span class="comment">//将数据存入bookChapter</span></span><br><span class="line">                        <span class="type">BookChapter</span> <span class="variable">bookChapter1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookChapter</span>();</span><br><span class="line">                        bookChapter1.setBookId(bookId);</span><br><span class="line">                        bookChapter1.setChapterNum(countChapter);</span><br><span class="line">                        bookChapter1.setChapterName(bookChapterName);</span><br><span class="line">                        bookChapter1.setWordCount(chineseCharCount);</span><br><span class="line">                        bookChapter1.setIsVip(<span class="number">0</span>);</span><br><span class="line">                        bookChapter1.setCreateTime(LocalDateTime.now());</span><br><span class="line">                        bookChapter1.setUpdateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">                        bookChapterMapper.insert(bookChapter1);</span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">&quot;数据表bookChapter数据存入成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 如果已经存在相同的书籍信息，则直接使用已存在的书籍信息的id</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;在数据表bookChapter中章节名为&quot;</span>+bookChapterName+<span class="string">&quot;的小说&quot;</span>+bookName+<span class="string">&quot;在数据库中已经存在&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;在数据表bookChapter中书名为&quot;</span>+bookName+<span class="string">&quot;的小说在数据库中不存在&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="type">Long</span> <span class="variable">chapterId</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 查询是否存在该章节和该书名</span></span><br><span class="line">                QueryWrapper&lt;BookChapter&gt; bookChapterQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">                bookChapterQueryWrapper.eq(<span class="string">&quot;book_id&quot;</span>, bookId);</span><br><span class="line">                bookChapterQueryWrapper.eq(<span class="string">&quot;chapter_name&quot;</span>, bookChapterName);</span><br><span class="line">                <span class="type">BookChapter</span> <span class="variable">bookChapterText2</span> <span class="operator">=</span> bookChapterMapper.selectOne(bookChapterQueryWrapper);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果章节存在，则获取其 ID</span></span><br><span class="line">                <span class="keyword">if</span> ( bookChapterText2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                    chapterId = bookChapterText2.getId();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                QueryWrapper&lt;BookContent&gt;BookContentQueryWrapper =<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">                BookContentQueryWrapper.eq(<span class="string">&quot;chapter_id&quot;</span>,chapterId);</span><br><span class="line">                <span class="type">BookContent</span> <span class="variable">bookContentText</span> <span class="operator">=</span> bookContentMapper.selectOne(BookContentQueryWrapper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果不存在相同的章节内容，则插入书籍信息</span></span><br><span class="line">                <span class="keyword">if</span> (bookContentText==<span class="literal">null</span> &amp;&amp; bookInfoText !=<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">BookContent</span> <span class="variable">bookContent1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookContent</span>();</span><br><span class="line">                    bookContent1.setChapterId(chapterId);</span><br><span class="line">                    bookContent1.setContent(bookContent);</span><br><span class="line">                    bookContent1.setCreateTime(LocalDateTime.now());</span><br><span class="line">                    bookContent1.setUpdateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">                    bookContentMapper.insert(bookContent1);</span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">&quot;数据表bookContent数据存入成功&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果已经存在相同的书籍信息，则直接使用已存在的书籍信息的id</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;在数据表bookContent中书名为&quot;</span>+bookName+<span class="string">&quot;的小说在数据库中已经存在&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说章节时，IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说章节时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h3><h4 id="解析html的两种方式"><a href="#解析html的两种方式" class="headerlink" title="解析html的两种方式"></a>解析html的两种方式</h4><p>1、Jsoup.parse</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Document document= Jsoup.parse(<span class="keyword">new</span> <span class="title class_">URL</span>(urlEver), <span class="number">300000</span>);</span><br></pre></td></tr></table></figure><p>2、Jsoup.connect</p><p>userAgent更换访问头</p><p>proxy更换IP</p><p>timeout防止超时异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(urlEverBook)</span><br><span class="line">        .userAgent(ua)</span><br><span class="line">        .proxy(currentProxy)</span><br><span class="line">        .timeout(<span class="number">1000000000</span>)</span><br><span class="line">        .get();</span><br></pre></td></tr></table></figure><h4 id="获取元素的方式"><a href="#获取元素的方式" class="headerlink" title="获取元素的方式"></a>获取元素的方式</h4><h5 id="DOM解析"><a href="#DOM解析" class="headerlink" title="DOM解析"></a>DOM解析</h5><p>.getElementsByTag(“h1”)——标签名</p><p>getElementById(“intro”)——id名</p><p>.text()获取文字</p><p>.attr(“href”)获取元素的某个属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">bookName</span> <span class="operator">=</span> document.getElementsByTag(<span class="string">&quot;h1&quot;</span>).get(<span class="number">0</span>).text();</span><br><span class="line"><span class="type">String</span> <span class="variable">src</span> <span class="operator">=</span> el.getElementsByTag(<span class="string">&quot;a&quot;</span>).eq(<span class="number">0</span>).attr(<span class="string">&quot;href&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h5><p>.select（”#info &gt; h1”）——selector地址</p><p>.text()获取文字</p><p>.attr(“href”)获取元素的某个属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取单条数据：</span></span><br><span class="line"><span class="type">String</span> <span class="variable">bookName</span> <span class="operator">=</span> document.select(<span class="string">&quot;#info &gt; h1&quot;</span>).text();</span><br><span class="line"></span><br><span class="line"><span class="comment">//取多条数据：</span></span><br><span class="line"><span class="comment">//注意这个select取得的位置一定要看清楚</span></span><br><span class="line"><span class="comment">//select(&quot;span.s2 &gt; a&quot;)</span></span><br><span class="line"><span class="type">Elements</span> <span class="variable">NameUrlList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#newscontent &gt; div.update-list &gt; div &gt; div &gt; ul&gt;li&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Element el : NameUrlList)&#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">BookUrlPart</span> <span class="operator">=</span> el.select(<span class="string">&quot;span.s2 &gt; a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">BookUrl</span> <span class="operator">=</span><span class="string">&quot;https://www.9biqu.com&quot;</span>+ BookUrlPart;</span><br><span class="line">      bookUrlList1.add(BookUrl);</span><br><span class="line">      count++;</span><br><span class="line">      System.out.println(<span class="string">&quot;小说地址采集完成&quot;</span>+count+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照条件取多条数据：</span></span><br><span class="line"><span class="comment">//从第13个数据开始取</span></span><br><span class="line"><span class="comment">//#list &gt; dl &gt; dd:gt(13)</span></span><br><span class="line"><span class="type">Elements</span> <span class="variable">bookChapter</span> <span class="operator">=</span> document.select(<span class="string">&quot;#list &gt; dl &gt; dd:gt(13)&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(Element el:bookChapter)&#123;</span><br><span class="line">     countChapter++;</span><br><span class="line">     bookChapterName = el.select(<span class="string">&quot;a&quot;</span>).text();</span><br><span class="line">     bookChapterUrlPart = el.select(<span class="string">&quot;a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">     bookChapterUrl = <span class="string">&quot;https://www.9biqu.com&quot;</span>+ bookChapterUrlPart;</span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本的第&quot;</span>+countChapter+<span class="string">&quot;章名&quot;</span>+bookChapterName);</span><br><span class="line">     System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;本的第&quot;</span>+countChapter+<span class="string">&quot;章链接&quot;</span>+bookChapterUrl);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     chapterNameList.add(bookChapterName);</span><br><span class="line">     chapterUrlList.add(bookChapterUrl);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//选择除了第一个以外的所有数据：</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getBookContent</span><span class="params">(String BookContentUrl)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">     String bookContent;</span><br><span class="line">     <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(BookContentUrl)</span><br><span class="line">             .userAgent(ua)</span><br><span class="line">             .proxy(proxy)</span><br><span class="line">             .get();</span><br><span class="line">     Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">    <span class="comment">//#content &gt; *:not(p:first-child)</span></span><br><span class="line">     <span class="comment">//选择id为content的元素下除第一个p元素外的所有元素</span></span><br><span class="line">     <span class="type">Elements</span> <span class="variable">bookContentList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#content &gt; *:not(p:first-child)&quot;</span>);</span><br><span class="line"> <span class="comment">//toString()</span></span><br><span class="line">     <span class="comment">//将Elements对象转化为String对象</span></span><br><span class="line">     bookContent = bookContentList.toString();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> bookContent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Jsoup的选择器"><a href="#Jsoup的选择器" class="headerlink" title="Jsoup的选择器"></a>Jsoup的选择器</h4><h5 id="伪选择器selectors"><a href="#伪选择器selectors" class="headerlink" title="伪选择器selectors"></a>伪选择器selectors</h5><p>:lt(n): 查找哪些元素的同级索引值（它的位置在DOM树中是相对于它的父节点）小于n，比如：td:lt(3) 表示小于三列的元素</p><p>:gt(n):查找哪些元素的同级索引值大于n，比如： div p:gt(2)表示哪些div中有包含2个以上的p元素</p><p>:eq(n): 查找哪些元素的同级索引值与n相等，比如：form input:eq(1)表示包含一个input标签的Form元素</p><p>:has(seletor): 查找匹配选择器包含元素的元素，比如：div:has(p)表示哪些div包含了p元素</p><p>:not(selector): 查找与选择器不匹配的元素，比如： div:not(.logo) 表示不包含 class&#x3D;logo 元素的所有 div 列表</p><p>:contains(text): 查找包含给定文本的元素，搜索不区分大不写，比如： p:contains(jsoup)</p><p>:containsOwn(text): 查找直接包含给定文本的元素</p><p>:matches(regex): 查找哪些元素的文本匹配指定的正则表达式，比如：div:matches((?i)login)</p><p>:matchesOwn(regex): 查找自身包含文本匹配指定正则表达式的元素</p><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>使用try、catch来进行异常处理，一般在第一次出现异常后，根据异常提示，来进行进一步操作，比如输出信息或者线程休眠（这里注意try是否在循环语句里，可以通过类似**i–**的方法来保证循环的正常进行）</p><p>也可以在try语句中主动抛出异常，这里如果bookContentList&#x3D;&#x3D;null直接存入数据库中，会有空指针的异常。所以提前报错到catch语句里，再一次获取bookContentList</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(BookContentUrl)</span><br><span class="line">                .userAgent(ua)</span><br><span class="line">                .proxy(currentProxy)</span><br><span class="line">                .timeout(<span class="number">1000000000</span>)</span><br><span class="line">                .get();</span><br><span class="line">        Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        <span class="type">Elements</span> <span class="variable">bookContentList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#content &gt; *:not(p:first-child)&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(bookContentList!=<span class="literal">null</span>)&#123;</span><br><span class="line">            bookContent = bookContentList.toString();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SocketException</span>(<span class="string">&quot;获取书籍内容失败，将再次尝试获取&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (SocketException e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="IP代理池的创建"><a href="#IP代理池的创建" class="headerlink" title="IP代理池的创建"></a>IP代理池的创建</h4><p>先创建一个List存放IP以及端口以及定义currentProxyIndex存放位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Proxy&gt; proxies = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Proxy</span>(Proxy.Type.HTTP, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;139.200.74.178&quot;</span>, <span class="number">4283</span>)),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Proxy</span>(Proxy.Type.HTTP, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;60.169.245.20&quot;</span>, <span class="number">4215</span>)),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Proxy</span>(Proxy.Type.HTTP, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;183.147.27.251&quot;</span>, <span class="number">4231</span>))</span><br><span class="line">    );</span><br><span class="line"><span class="type">int</span> <span class="variable">currentProxyIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>从List中获取到一个IP以及地址，赋值给currentProxy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br></pre></td></tr></table></figure><p>然后使用proxy方法使用连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(urlEverBook)</span><br><span class="line">                        .proxy(currentProxy)</span><br><span class="line">                        .get();</span><br></pre></td></tr></table></figure><p>最后是根据情况来更换IP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;在爬取小说信息时，IP地址被禁止，将更换IP...&quot;</span>);</span><br><span class="line">    <span class="comment">//下面是换IP的逻辑计算</span></span><br><span class="line">    currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="存入数据库时需要的处理"><a href="#存入数据库时需要的处理" class="headerlink" title="存入数据库时需要的处理"></a>存入数据库时需要的处理</h4><h5 id="防止重复数据"><a href="#防止重复数据" class="headerlink" title="防止重复数据"></a>防止重复数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先通过QueryWrapper来约束条件</span></span><br><span class="line">QueryWrapper&lt;BookInfo&gt;BookInfoNameQueryWrapper =<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">      BookInfoNameQueryWrapper.eq(<span class="string">&quot;book_name&quot;</span>, bookName);</span><br><span class="line">      <span class="type">BookInfo</span> <span class="variable">bookInfo</span> <span class="operator">=</span> bookInfoMapper.selectOne(BookInfoNameQueryWrapper);</span><br><span class="line"><span class="comment">//通过selectOne后为空，可以判断不存在该数据，则存入数据库</span></span><br><span class="line">      <span class="keyword">if</span>(bookInfo==<span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="type">BookInfo</span> <span class="variable">bookInfo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookInfo</span>();</span><br><span class="line">      bookInfo1.setBookName(bookName);</span><br><span class="line"><span class="comment">//·········</span></span><br><span class="line">          </span><br><span class="line">      bookInfoMapper.insert(bookInfo1);</span><br><span class="line">      System.out.println(<span class="string">&quot;数据表bookInfo数据存入成功&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;在数据表bookInfo中书名为&quot;</span>+bookName+<span class="string">&quot;的小说在数据库中已经存在&quot;</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h5 id="获取其他表的数据存入另一张表"><a href="#获取其他表的数据存入另一张表" class="headerlink" title="获取其他表的数据存入另一张表"></a>获取其他表的数据存入另一张表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先通过QueryWrapper来约束条件</span></span><br><span class="line">QueryWrapper&lt;BookInfo&gt;BookInfoNameQueryWrapper =<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">      BookInfoNameQueryWrapper.eq(<span class="string">&quot;book_name&quot;</span>, bookName);</span><br><span class="line">      <span class="type">BookInfo</span> <span class="variable">bookInfoId</span> <span class="operator">=</span> bookInfoMapper.selectOne(BookInfoNameQueryWrapper);</span><br><span class="line"><span class="comment">//获取到这个ID（这是一个自增的数据，所以需要在其其他数据存入之后，再进行getId来获取）</span></span><br><span class="line">      bookId = bookInfoId.getId();</span><br><span class="line"><span class="comment">//存入数据到另外一张数据表book_capter中</span></span><br><span class="line"><span class="type">BookChapter</span> <span class="variable">bookChapter1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookChapter</span>();</span><br><span class="line">      bookChapter1.setBookId(bookId);</span><br><span class="line">bookChapterMapper.insert(bookChapter1);</span><br></pre></td></tr></table></figure><h5 id="防止数据为空"><a href="#防止数据为空" class="headerlink" title="防止数据为空"></a>防止数据为空</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">bookContent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//如果数据bookContent一直为空，则一直进行try的语句</span></span><br><span class="line">      <span class="keyword">while</span> (bookContent == <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">Proxy</span> <span class="variable">currentProxy</span> <span class="operator">=</span> proxies.get(currentProxyIndex);</span><br><span class="line">      <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(BookContentUrl)</span><br><span class="line">      .userAgent(ua)</span><br><span class="line">      .proxy(currentProxy)</span><br><span class="line">      .timeout(<span class="number">1000000000</span>)</span><br><span class="line">      .get();</span><br><span class="line">      Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">      <span class="type">Elements</span> <span class="variable">bookContentList</span> <span class="operator">=</span> document.select(<span class="string">&quot;#content &gt; *:not(p:first-child)&quot;</span>);</span><br><span class="line"></span><br><span class="line">      bookContent = bookContentList.toString();</span><br><span class="line"></span><br><span class="line">      &#125;<span class="keyword">catch</span> (SocketException e)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址被禁止，等待10秒钟...&quot;</span>);</span><br><span class="line">      Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">      currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">      &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;在爬取小说章节内容时，IP地址失效，将更换IP...&quot;</span>);</span><br><span class="line">      Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">      currentProxyIndex = (currentProxyIndex + <span class="number">1</span>) % proxies.size();</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> bookContent;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/posts/9ea13874.html"/>
      <url>/posts/9ea13874.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="SpringBoot项目建立"><a href="#SpringBoot项目建立" class="headerlink" title="SpringBoot项目建立"></a>SpringBoot项目建立</h2><p>新建项目，勾选依赖项,如：</p><p>Developer Tools中的Lombok(通过注释简化java开发)</p><p>Web中的Spring Web（相当于SpringMVC）</p><p>SQL中的Mybatis Framework(Mybatis的框架)和MySQL Driver（MySQL的驱动）</p><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/image-20221221201317655.png" alt="image-20221221201317655"></p><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>通过Navicat创造新的MySQL数据库，并设计表格的名称，类型，以便于后端拿数据</p><h2 id="SpringBoot各级设计"><a href="#SpringBoot各级设计" class="headerlink" title="SpringBoot各级设计"></a>SpringBoot各级设计</h2><h3 id="配置类编写"><a href="#配置类编写" class="headerlink" title="配置类编写"></a>配置类编写</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#--------------------------通用配置-------------------------</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 应用名</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">novel</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="string">---</span> <span class="comment">#---------------------数据库配置---------------------------</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/novel?useUnicode=true&amp;characterEncoding=utf-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">Tec@258011</span></span><br><span class="line"><span class="string">---</span> <span class="comment">#---------------------自定义配置----------------------------</span></span><br><span class="line"><span class="attr">novel:</span></span><br><span class="line">  <span class="comment"># 跨域配置</span></span><br><span class="line">  <span class="attr">cors:</span></span><br><span class="line">    <span class="comment"># 允许跨域的域名</span></span><br><span class="line">    <span class="attr">allow-origins:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http://localhost:1024</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http://localhost:8888</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http://localhost:8080</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">---</span> <span class="comment">#配置mapper xml文件的路径（找不到xml的问题，最后是用config层的MybatisPlusConfig的相关配置来解决的）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="string">mapUnderscoreToCamelCase=true:</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># JSON 序列化时，将所有 Number 类型的属性都转为 String 类型返回，避免前端数据精度丢失的问题。(Long类型最多17位，超过的部分会变成相同数量的0，卡了一个下午加一个过了考试周的晚上QAQ，问题一开始在前端收到的id与数据库不一致，然后发现F12中的预览和响应不同，而响应是对的)</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">generator:</span></span><br><span class="line">      <span class="attr">write_numbers_as_strings:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="Dao层编写"><a href="#Dao层编写" class="headerlink" title="Dao层编写"></a>Dao层编写</h3><p>数据访问对象，负责封装对数据库的CRUD操作，与数据库进行交互，一般是mapper写接口，xml文件写sql语句的形式。</p><p>包括<strong>entity层（实体层）</strong>编写以及<strong>Mapper层</strong>编写</p><h4 id="entity层（实体层）"><a href="#entity层（实体层）" class="headerlink" title="entity层（实体层）"></a>entity层（实体层）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@TableName：如果数据库的表名是home_book，但是实体类的名字不同，那么就需要借助TableName去做绑定  implements Serializable：一个对象序列化的接口，一个类只有实现了Serializable接口，它的对象才是可序列化的。因此如果要序列化某些类的对象，这些类就必须实现Serializable接口。而实际上，Serializable是一个空接口，没有什么具体内容，它的目的只是简单的标识一个类的对象可以被序列化。</span></span><br><span class="line"><span class="meta">@TableName(&quot;home_book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeBook</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"><span class="comment">//@TableId：主键专属比如数据中的表中的字段是id，但是实体类是userId，那么就需要在userId上打上这个注解，用法：设置主键映射 value映射主键字段的名字</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long bookId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mapper层"><a href="#Mapper层" class="headerlink" title="Mapper层"></a>Mapper层</h4><p>不要忘了在启动类下@MapperScan(“com.tec.vuepractice.dao.mapper”)，这样在包扫描的时候就不会漏掉mapper层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//extends BaseMapper&lt;HomeBook&gt;是mybaits-plus的组件，用来进行基础的增删改查</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HomeBookMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;HomeBook&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service层编写-Impl-实现层"><a href="#Service层编写-Impl-实现层" class="headerlink" title="Service层编写+Impl(实现层)"></a>Service层编写+Impl(实现层)</h3><p>更加关注业务逻辑，是业务处理层，将manager组合过的操作和业务逻辑组合在一起，再封装成业务操作。</p><h4 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HomeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询首页小说推荐列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 首页小说推荐列表的 rest 响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RestResp&lt;List&lt;HomeBookRespDto&gt;&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="serviceImpl层"><a href="#serviceImpl层" class="headerlink" title="serviceImpl层"></a>serviceImpl层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="comment">//implements:一个类通过关键字implements声明自己使用一个或者多个接口。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">HomeService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeBookCacheManager homeBookCacheManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RestResp&lt;List&lt;HomeBookRespDto&gt;&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RestResp.ok(homeBookCacheManager.listHomeBooks());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller层编写"><a href="#Controller层编写" class="headerlink" title="Controller层编写"></a>Controller层编写</h3><p>主要负责接受前台的数据和请求，并且在底层处理完之后把结果返回回去，一般不能写业务逻辑在这一层，因为第一造成了不可复用，第二以后的维护困难，第三这一层没有上层，如果给用户返回了奇怪的错误信息将会非常丑陋。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RestController：作用等同于@Controller + @ResponseBody</span></span><br><span class="line"><span class="comment">//@Controller：在一个类上添加@Controller注解，表明了这个类是一个控制器类</span></span><br><span class="line"><span class="comment">//@RestController：用其实是将java对象转为json格式的数据</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="comment">//@RequestMapping：映射URL</span></span><br><span class="line"><span class="meta">@RequestMapping(ApiRouterConsts.API_FRONT_HOME_URL_PREFIX)</span><span class="comment">//（/home）</span></span><br><span class="line"><span class="comment">//在springboot项目中，controller或service层中需要注入多个mapper接口或者另外的service接口，这时候代码中就会有多个@AutoWired注解，使得代码看起来非常的混乱。</span></span><br><span class="line"><span class="comment">//@RequiredArgsConstructor写在类上面可以代替@AutoWired注解，需要注意的是：在注入的时候需要用final定义，或者使用@notnull注解</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeController</span> &#123;</span><br><span class="line"><span class="comment">//注入service</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeService homeService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首页小说推荐查询接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;books&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RestResp&lt;List&lt;HomeBookRespDto&gt;&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> homeService.listHomeBooks();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//@PathVariable(&quot;chapterId&quot;）（卡了3.1一整晚加上3.2早上一小时QAQ）</span></span><br><span class="line"><span class="comment">//@PathVariable 映射 URL 绑定的占位符</span></span><br><span class="line"><span class="comment">//通过 @PathVariable 可以将 URL 中占位符参数绑定到控制器处理方法的入参中:URL 中的 &#123;xxx&#125; 占位符可以通过</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;content/&#123;chapterId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RestResp&lt;BookContentAboutRespDto&gt;  <span class="title function_">getBookContentAbout</span><span class="params">(<span class="meta">@PathVariable(&quot;chapterId&quot;)</span> Long chapterId)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;查询方法调用之前，参数id=&#123;&#125;&quot;</span>, chapterId);</span><br><span class="line">        <span class="keyword">return</span> bookService.getBookContentAbout(chapterId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Dto层编写"><a href="#Dto层编写" class="headerlink" title="Dto层编写"></a>Dto层编写</h3><p>传输对象，一般是把数据库表封装成对象，表的各个字段就是该对象的各个变量</p><p>包括<strong>req层</strong>(Http 请求数据封装)<strong>resp层</strong>（Http 响应数据封装）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小说信息 响应DTO</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiongxiaoyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/5/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@Data:@Data ： 注在类上，提供类的get、set、equals、hashCode、canEqual、toString方法</span></span><br><span class="line"><span class="comment">//@AllArgsConstructor ： 注在类上，提供类的全参构造</span></span><br><span class="line"><span class="comment">//@NoArgsConstructor ： 注在类上，提供类的无参构造</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookInfoRespDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Schema:Swagger3的注解，用于输出api文档，此处提供了描述</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;小说ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类别ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;类别ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类别名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;类别名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小说封面地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;小说封面地址&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String picUrl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小说名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;小说名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作家id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;作家id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long authorId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作家名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;作家名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String authorName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 书籍描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;书籍描述&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bookDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 书籍状态;0-连载中 1-已完结</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;书籍状态;0-连载中 1-已完结&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer bookStatus;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;点击量&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long visitCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总字数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;总字数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer wordCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 评论数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;评论数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer commentCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首章节ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;首章节ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long firstChapterId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新章节ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;最新章节ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long lastChapterId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新章节名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;最新章节名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lastChapterName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新章节更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;最新章节更新时间&quot;)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="manager层编写"><a href="#manager层编写" class="headerlink" title="manager层编写"></a>manager层编写</h3><p>负责将Dao层中的数据库操作组合复用，主要是一些缓存方案，中间件的处理，以及对第三方平台封装的层。</p><h4 id="cache层编写"><a href="#cache层编写" class="headerlink" title="cache层编写"></a>cache层编写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeBookCacheManager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeBookMapper homeBookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookInfoMapper bookInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询首页小说推荐，并放入缓存中（此处没有采用缓存策略）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;HomeBookRespDto&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 从首页小说推荐表中查询出需要推荐的小说</span></span><br><span class="line">        QueryWrapper&lt;HomeBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//orderByAsc：按照DatabaseConsts.CommonColumnEnum.SORT.getName()排序</span></span><br><span class="line">        queryWrapper.orderByAsc(DatabaseConsts.CommonColumnEnum.SORT.getName());</span><br><span class="line">        List&lt;HomeBook&gt; homeBooks = homeBookMapper.selectList(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取推荐小说ID列表</span></span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(homeBooks)) &#123;</span><br><span class="line">            List&lt;Long&gt; bookIds = homeBooks.stream()</span><br><span class="line">                    .map(HomeBook::getBookId)</span><br><span class="line">                    .toList();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据小说ID列表查询相关的小说信息列表</span></span><br><span class="line">            QueryWrapper&lt;BookInfo&gt; bookInfoQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">            bookInfoQueryWrapper.in(DatabaseConsts.CommonColumnEnum.ID.getName(), bookIds);</span><br><span class="line">            List&lt;BookInfo&gt; bookInfos = bookInfoMapper.selectList(bookInfoQueryWrapper);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 组装 HomeBookRespDto 列表数据并返回</span></span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(bookInfos)) &#123;</span><br><span class="line">                Map&lt;Long, BookInfo&gt; bookInfoMap = bookInfos.stream()</span><br><span class="line">                        .collect(Collectors.toMap(BookInfo::getId, Function.identity()));</span><br><span class="line">                <span class="keyword">return</span> homeBooks.stream().map(v -&gt; &#123;</span><br><span class="line">                    <span class="type">BookInfo</span> <span class="variable">bookInfo</span> <span class="operator">=</span> bookInfoMap.get(v.getBookId());</span><br><span class="line">                    <span class="type">HomeBookRespDto</span> <span class="variable">bookRespDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HomeBookRespDto</span>();</span><br><span class="line">                    bookRespDto.setType(v.getType());</span><br><span class="line">                    bookRespDto.setBookId(v.getBookId());</span><br><span class="line">                    bookRespDto.setBookName(bookInfo.getBookName());</span><br><span class="line">                    bookRespDto.setPicUrl(bookInfo.getPicUrl());</span><br><span class="line">                    bookRespDto.setAuthorName(bookInfo.getAuthorName());</span><br><span class="line">                    bookRespDto.setBookDesc(bookInfo.getBookDesc());</span><br><span class="line">                    <span class="keyword">return</span> bookRespDto;</span><br><span class="line">                &#125;).toList();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一般的业务的写法"><a href="#一般的业务的写法" class="headerlink" title="一般的业务的写法"></a>一般的业务的写法</h4><p>（自己写的，对以后的业务编写挺有参考意义的，感动QAQ）</p><p>上面的manager层编写业务的写法主要是在<strong>使用缓存</strong>时使用</p><p>一般在写业务逻辑的时候还是在service层下的<strong>Impl层</strong>比较常用，下面是该业务的常规写法</p><h5 id="mapper层"><a href="#mapper层" class="headerlink" title="mapper层"></a>mapper层</h5><p>先准备好需要的mapper接口</p><h6 id="HomeBookMapper"><a href="#HomeBookMapper" class="headerlink" title="HomeBookMapper"></a>HomeBookMapper</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HomeBookMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;HomeBook&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="BookInfoMapper"><a href="#BookInfoMapper" class="headerlink" title="BookInfoMapper"></a>BookInfoMapper</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookInfoMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;BookInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="service层-1"><a href="#service层-1" class="headerlink" title="service层"></a>service层</h5><p>然后在service层下定义好方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HomeService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;HomeBook&gt; &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;HomeBookRespDto&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="impl层"><a href="#impl层" class="headerlink" title="impl层"></a>impl层</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;HomeBookMapper, HomeBook&gt; <span class="keyword">implements</span> <span class="title class_">HomeService</span> &#123;</span><br><span class="line">    <span class="comment">//@Autowired可能会导致找不到Mapper的bean（常见错误），而使用@Resource则会按照名字来搜素，可以解决找不到Mapper的bean的问题</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeBookMapper homeBookMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookInfoMapper bookInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;HomeBookRespDto&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 从首页小说推荐表中查询出需要推荐的小说</span></span><br><span class="line">        QueryWrapper&lt;HomeBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// orderByAsc（实现递增排序）</span></span><br><span class="line">        <span class="comment">// orderByDesc（实现递减排序）</span></span><br><span class="line">        queryWrapper.orderByAsc(DatabaseConsts.CommonColumnEnum.SORT.getName());</span><br><span class="line">        <span class="comment">//selectlist:根据 entity 条件，查询全部记录</span></span><br><span class="line">        <span class="comment">//selectOne:根据 entity 条件，查询一条记录</span></span><br><span class="line">        List&lt;HomeBook&gt; homeBooks = homeBookMapper.selectList(queryWrapper);</span><br><span class="line"><span class="comment">//CollectionUtils.isEmpty(list): false</span></span><br><span class="line">        <span class="comment">//CollectionUtils.isNotEmpty(list): true</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//这段代码的功能是将一个名为homeBooks的集合中的HomeBook对象的bookId属性取出来，并将它们组成一个Long类型的List集合bookIds。</span></span><br><span class="line">        <span class="comment">//代码的执行过程如下：</span></span><br><span class="line"><span class="comment">//1、判断homeBooks集合是否为空，使用了CollectionUtils.isEmpty()方法来判断，该方法是Spring框架提供的一个工具类方法，用于判断集合是否为空。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、如果homeBooks集合不为空，则使用Java 8中的Stream流对集合进行处理，调用map()方法将HomeBook对象中的bookId属性取出来，然后使用toList()方法将结果转换为List集合。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、最终得到一个名为bookIds的List集合，其中包含了homeBooks集合中所有HomeBook对象的bookId属性值。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取推荐小说ID列表</span></span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(homeBooks)) &#123;</span><br><span class="line">            List&lt;Long&gt; bookIds = homeBooks.stream()</span><br><span class="line">                    .map(HomeBook::getBookId)</span><br><span class="line">                    .toList();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//这段代码的功能是根据给定的bookIds列表，从数据库中查询对应的BookInfo记录，并将查询结果存储在一个名为bookInfos的List集合中。</span></span><br><span class="line"><span class="comment">//代码的执行过程如下：</span></span><br><span class="line"><span class="comment">//1、创建一个QueryWrapper对象bookInfoQueryWrapper，该对象是MyBatis-Plus框架提供的一个查询条件构造器，可以通过该对象构建查询条件。</span></span><br><span class="line"><span class="comment">//2、调用QueryWrapper对象的in()方法，该方法用于构建一个in查询条件，查询的是数据库中名为ID的列，该列的值必须包含在bookIds列表中。</span></span><br><span class="line"><span class="comment">//3、创建一个名为bookInfos的List集合，用于存储查询结果。</span></span><br><span class="line"><span class="comment">//4、调用bookInfoMapper对象的selectList()方法，该方法用于执行查询操作，查询符合指定条件的BookInfo记录，并将查询结果存储在bookInfos集合中。</span></span><br><span class="line"><span class="comment">//5、最终得到一个名为bookInfos的List集合，其中包含了数据库中所有ID值在bookIds列表中的BookInfo记录。</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 根据小说ID列表查询相关的小说信息列表</span></span><br><span class="line">            QueryWrapper&lt;BookInfo&gt; bookInfoQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">            bookInfoQueryWrapper.in(DatabaseConsts.CommonColumnEnum.ID.getName(), bookIds);</span><br><span class="line">            List&lt;BookInfo&gt; bookInfos = bookInfoMapper.selectList(bookInfoQueryWrapper);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//这段代码的功能是将查询出来的BookInfo记录与给定的HomeBook集合进行关联，并将结果组成一个名为bookRespDto的List集合返回。</span></span><br><span class="line"><span class="comment">//代码的执行过程如下：</span></span><br><span class="line"><span class="comment">//1、判断查询结果bookInfos是否为空，如果为空，则直接返回一个空的List集合。</span></span><br><span class="line"><span class="comment">//2、如果bookInfos不为空，则将查询结果转换为一个Map集合bookInfoMap，以BookInfo记录的id作为key，BookInfo对象本身作为value，使用Java 8中的Stream流对查询结果进行处理，调用collect()方法和toMap()方法实现转换。</span></span><br><span class="line"><span class="comment">//3、使用Java 8中的Stream流和Lambda表达式对给定的HomeBook集合进行处理，调用map()方法将每个HomeBook对象映射为一个HomeBookRespDto对象，其中的属性值从关联的BookInfo对象中获取。</span></span><br><span class="line"><span class="comment">//4、使用Map集合bookInfoMap中的get()方法获取每个HomeBook对象关联的BookInfo对象，然后将获取到的属性值设置到HomeBookRespDto对象中，最终得到一个名为bookRespDto的List集合。</span></span><br><span class="line"><span class="comment">//5、返回名为bookRespDto的List集合，其中包含了与HomeBook集合关联的BookInfo记录的属性信息。</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 组装 HomeBookRespDto 列表数据并返回</span></span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(bookInfos)) &#123;</span><br><span class="line">                Map&lt;Long, BookInfo&gt; bookInfoMap = bookInfos.stream()</span><br><span class="line">                        .collect(Collectors.toMap(BookInfo::getId, Function.identity()));</span><br><span class="line">                <span class="keyword">return</span> homeBooks.stream().map(v -&gt; &#123;</span><br><span class="line">                    <span class="type">BookInfo</span> <span class="variable">bookInfo</span> <span class="operator">=</span> bookInfoMap.get(v.getBookId());</span><br><span class="line">                    <span class="type">HomeBookRespDto</span> <span class="variable">bookRespDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HomeBookRespDto</span>();</span><br><span class="line">                    bookRespDto.setType(v.getType());</span><br><span class="line">                    bookRespDto.setBookId(v.getBookId());</span><br><span class="line">                    bookRespDto.setBookName(bookInfo.getBookName());</span><br><span class="line">                    bookRespDto.setPicUrl(bookInfo.getPicUrl());</span><br><span class="line">                    bookRespDto.setAuthorName(bookInfo.getAuthorName());</span><br><span class="line">                    bookRespDto.setBookDesc(bookInfo.getBookDesc());</span><br><span class="line">                    <span class="keyword">return</span> bookRespDto;</span><br><span class="line">                &#125;).toList();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="衍生QueryWrapper的知识点"><a href="#衍生QueryWrapper的知识点" class="headerlink" title="衍生QueryWrapper的知识点"></a>衍生QueryWrapper的知识点</h6><p>orderByAsc：实现递增排序</p><p>orderByDesc：实现递减排序</p><h6 id="衍生BaseMapper接口CRUD的知识点"><a href="#衍生BaseMapper接口CRUD的知识点" class="headerlink" title="衍生BaseMapper接口CRUD的知识点"></a>衍生BaseMapper接口CRUD的知识点</h6><p>引入：extends<code> </code>BaseMapper<UserBean></p><p>selectlist:根据 entity 条件，查询全部记录<br>selectOne:根据 entity 条件，查询一条记录</p><h6 id="衍生Service接口CRUD"><a href="#衍生Service接口CRUD" class="headerlink" title="衍生Service接口CRUD"></a>衍生Service接口CRUD</h6><p>引入implements<code> </code>IService<T>（T：实体层）</p><h6 id="衍生的工具类"><a href="#衍生的工具类" class="headerlink" title="衍生的工具类"></a>衍生的工具类</h6><p>CollectionUtils.isEmpty(list): false</p><p>CollectionUtils.isNotEmpty(list): true</p><p>上面的!CollectionUtils.isEmpty(bookInfos)其实相当于第二种，也同时是第一种判断为flase后相反（！）为true</p><h6 id="衍生的final的作用"><a href="#衍生的final的作用" class="headerlink" title="衍生的final的作用"></a>衍生的final的作用</h6><p>在这里将 HomeBookMapper 声明为 final 主要是出于两个原因：<br>    1、线程安全：当我们将一个对象声明为 final 时，它的引用就不能再指向其他对象，也就是说这个对象是不可变的，这可以避免多线程访问时发生冲突。在Spring中，@Autowired 自动注入的属性默认是可变的，将其声明为 final 可以使其不可变，从而提高线程安全性。<br>    2、提高可读性：使用 final 关键字来声明变量，可以让人们更加明确地知道这个变量不会被修改，也可以让编译器进行更多的优化，提高代码的性能。此外，通过将类中的属性声明为 final，可以让读者更容易地看出这个属性是类的“特征”，不会在运行过程中被修改。<br>    总的来说，将 HomeBookMapper 声明为 final 可以提高代码的可读性和线程安全性。</p><h6 id="衍生的stream的知识点："><a href="#衍生的stream的知识点：" class="headerlink" title="衍生的stream的知识点："></a>衍生的stream的知识点：</h6><pre><code> .stream是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。 .stream.map(方法)：其中的方法获取了小说ID，而map是一种键值对存储结构，用于存储一组不重复的键和对应的值，例如此处的ID键和它所对应的值</code></pre><p>​.toList():将数组转化为List</p><h6 id="衍生的Lambda表达式的知识点："><a href="#衍生的Lambda表达式的知识点：" class="headerlink" title="衍生的Lambda表达式的知识点："></a>衍生的Lambda表达式的知识点：</h6><p>Lambda表达式：（方法参数） -&gt;{方法实现}<br>            （单个参数可以省略括号）</p><pre><code>  lambda遍历List集合          集合的遍历，采用lambda表达式会更简洁：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 8之前：</span></span><br><span class="line"><span class="type">List</span> <span class="variable">features</span> <span class="operator">=</span> Arrays.asList(<span class="string">&quot;Lambdas&quot;</span>, <span class="string">&quot;Default Method&quot;</span>, <span class="string">&quot;Stream API&quot;</span>, <span class="string">&quot;Date and Time API&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String feature : features) &#123;</span><br><span class="line">System.out.println(feature);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java 8之后：</span></span><br><span class="line"><span class="type">List</span> <span class="variable">features</span> <span class="operator">=</span> Arrays.asList(<span class="string">&quot;Lambdas&quot;</span>, <span class="string">&quot;Default Method&quot;</span>, <span class="string">&quot;Stream API&quot;</span>, <span class="string">&quot;Date and Time API&quot;</span>);</span><br><span class="line">features.forEach(n -&gt; System.out.println(n));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Java 8的方法引用更方便，方法引用由::双冒号操作符标示，</span></span><br><span class="line">features.forEach(System.out::println);</span><br><span class="line"><span class="comment">//方法引用是使用两个冒号::这个操作符号。</span></span><br></pre></td></tr></table></figure><h6 id="衍生的toMap-BookInfo-getId-Function-identity-解释："><a href="#衍生的toMap-BookInfo-getId-Function-identity-解释：" class="headerlink" title="衍生的toMap(BookInfo::getId, Function.identity())解释："></a>衍生的toMap(BookInfo::getId, Function.identity())解释：</h6><p>​            Function.identity() 是一个静态方法，它返回一个函数，这个函数接收一个参数并返回其自身。也就是说，它返回一个标识函数，将输入对象直接返回，不做任何处理。<br>​在这个例子中，Function.identity() 方法用作 toMap() 方法的第二个参数。toMap() 方法期望一个将键映射到值的函数，所以使用 Function.identity() 将对象自身作为键的映射值。因此，对于一个 BookInfo 对象 bookInfo，bookInfo.getId() 作为键，bookInfo 自身作为值。<br>​简而言之，这里使用 Function.identity() 是为了将 BookInfo 对象本身作为值，方便后续从 Map 中获取对象并使用其属性。</p><p>stream流（List<Long> bookIds &#x3D; homeBooks.stream()）\</p><p>在 Java8 之前，我们通常是通过 for 循环或者 Iterator 迭代来重新排序合并数据，又或者通过重新定义 Collections.sorts 的 Comparator 方法来实现，这两种方式对于大数据量系统来说，效率并不是很理想。Stream 的<strong>聚合操作</strong>与数据库 SQL 的聚合操作 sorted、filter、map 等类似。我们在应用层就可以高效地实现类似数据库 SQL 的 聚合操作了，而在数据操作方面，Stream 不仅可以通过串行的方式实现数据操作，还可以<strong>通过并行的方式处理大批量数据，提高数据 的处理效率</strong></p><h6 id="总结的方法："><a href="#总结的方法：" class="headerlink" title="总结的方法："></a>总结的方法：</h6><p>1、List类型的数据库查找方法</p><p>主要是return部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;BookInfoRespDto&gt; <span class="title function_">listHomeCategory</span><span class="params">()</span> &#123;</span><br><span class="line">        QueryWrapper&lt;BookInfo&gt;CategoryQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> bookInfoMapper.selectList(CategoryQueryWrapper).stream()</span><br><span class="line">                .map(v -&gt; BookInfoRespDto.builder()</span><br><span class="line">                        .id(v.getId())</span><br><span class="line">                        .categoryId(v.getCategoryId())</span><br><span class="line">                        .categoryName(v.getCategoryName())</span><br><span class="line">                        .bookDesc(v.getBookDesc())</span><br><span class="line">                        .bookName(v.getBookName())</span><br><span class="line">                        .build()).toList();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2、Dto类型的数据库查找方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BookChapterRespDto <span class="title function_">getChapter</span><span class="params">(Long chapterId)</span>&#123;</span><br><span class="line">        QueryWrapper&lt;BookChapter&gt;chapterQueryWrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        chapterQueryWrapper.eq(<span class="string">&quot;id&quot;</span>, chapterId);</span><br><span class="line">        <span class="type">BookChapter</span> <span class="variable">bookChapter</span> <span class="operator">=</span> bookChapterMapper.selectOne(chapterQueryWrapper);</span><br><span class="line">        <span class="keyword">return</span> BookChapterRespDto.builder()</span><br><span class="line">            <span class="comment">//.BookChapterRespDto的属性(bookChapter的get方法)，这样就把筛选过的数据存入Dto中</span></span><br><span class="line">                .id(chapterId)</span><br><span class="line">                .bookId(bookChapter.getBookId())</span><br><span class="line">                .chapterNum(bookChapter.getChapterNum())</span><br><span class="line">                .chapterName(bookChapter.getChapterName())</span><br><span class="line">                .chapterWordCount(bookChapter.getWordCount())</span><br><span class="line">                .chapterUpdateTime(bookChapter.getUpdateTime())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(ApiRouterConsts.API_FRONT_HOME_URL_PREFIX)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//final的作用：同impl层</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeBookMapper homeBookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookInfoMapper bookInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeService homeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;books&quot;)</span></span><br><span class="line">    <span class="comment">//因为前端axios作检验的时候要看code，所以这里必须要用通用返回类RestResp&lt;T&gt;</span></span><br><span class="line">    <span class="keyword">public</span> RestResp&lt;List&lt;HomeBookRespDto&gt;&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//这里使用了通用返回类RestResp的方法RestResp&lt;T&gt;（T data）</span></span><br><span class="line">        <span class="keyword">return</span> RestResp.ok(homeService.listHomeBooks());</span><br><span class="line">        <span class="comment">//直接这么写会报错，刚好点击报错，就可以直接帮你在service层写出这个方法，算小技巧吧，同样，直接这么在service层创建也会报错，同样的方式，会帮你在serviceIpl层创建好方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="core层编写"><a href="#core层编写" class="headerlink" title="core层编写"></a>core层编写</h3><h4 id="config层"><a href="#config层" class="headerlink" title="config层"></a>config层</h4><h5 id="MybatisPlusConfig"><a href="#MybatisPlusConfig" class="headerlink" title="MybatisPlusConfig"></a><strong>MybatisPlusConfig</strong></h5><p>卡了我两个下午QAQ</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 兼容 mybatis-plus 3.5.1</span></span><br><span class="line"><span class="comment"> * mybatis-plus 的 MybatisSqlSessionFactoryBean 中使用到了这个异常</span></span><br><span class="line"><span class="comment"> * Spring 6 开始移除了该异常</span></span><br><span class="line"><span class="comment"> *mybatis puls的坑：使用mybatis-plus时不能使用自带的SqlSessionFactory，要使用</span></span><br><span class="line"><span class="comment"> *MybatisSqlSessionFactory，在配置类中加入如下配置（springboot）</span></span><br><span class="line"><span class="comment"> *啊啊啊啊啊啊啊卡我两个下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(&quot;db1SqlSessionFactory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">db1SqlSessionFactory</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使用 mybatis plus 配置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">MybatisSqlSessionFactoryBean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisSqlSessionFactoryBean</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;dataSourceLyz&quot;</span>+dataSource.toString());</span><br><span class="line">        b1.setDataSource(dataSource);</span><br><span class="line">        b1.setMapperLocations(<span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>().getResources(<span class="string">&quot;classpath:mapper/*.xml&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> b1.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CorsProperties"><a href="#CorsProperties" class="headerlink" title="CorsProperties"></a>CorsProperties</h5><p>解决跨域问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;novel.cors&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">CorsProperties</span><span class="params">(List&lt;String&gt; allowOrigins)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CorsConfig"><a href="#CorsConfig" class="headerlink" title="CorsConfig"></a>CorsConfig</h5><p>解决跨域问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(CorsProperties.class)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CorsProperties corsProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">// 允许的域,不要写*，否则cookie就无法使用了</span></span><br><span class="line">        <span class="keyword">for</span> (String allowOrigin : corsProperties.allowOrigins()) &#123;</span><br><span class="line">            config.addAllowedOrigin(allowOrigin);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 允许的头信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 允许的请求方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 是否允许携带Cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">configurationSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        <span class="comment">// 添加映射路径，拦截一切请求</span></span><br><span class="line">        configurationSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(configurationSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="common层"><a href="#common层" class="headerlink" title="common层"></a>common层</h3><h4 id="comstant层（通用常量层）"><a href="#comstant层（通用常量层）" class="headerlink" title="comstant层（通用常量层）"></a>comstant层（通用常量层）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="comment">//提供类的全参构造，减少了@Autowired的书写</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="comment">//enum:通常用于常量类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ErrorCodeEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正确执行后的返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    OK(<span class="string">&quot;00000&quot;</span>, <span class="string">&quot;一切 ok&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一级宏观错误码，用户端错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_ERROR(<span class="string">&quot;A0001&quot;</span>, <span class="string">&quot;用户端错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二级宏观错误码，用户注册错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REGISTER_ERROR(<span class="string">&quot;A0100&quot;</span>, <span class="string">&quot;用户注册错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户未同意隐私协议</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_NO_AGREE_PRIVATE_ERROR(<span class="string">&quot;A0101&quot;</span>, <span class="string">&quot;用户未同意隐私协议&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册国家或地区受限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REGISTER_AREA_LIMIT_ERROR(<span class="string">&quot;A0102&quot;</span>, <span class="string">&quot;注册国家或地区受限&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户验证码错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_VERIFY_CODE_ERROR(<span class="string">&quot;A0240&quot;</span>, <span class="string">&quot;用户验证码错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名已存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_NAME_EXIST(<span class="string">&quot;A0111&quot;</span>, <span class="string">&quot;用户名已存在&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户账号不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_ACCOUNT_NOT_EXIST(<span class="string">&quot;A0201&quot;</span>, <span class="string">&quot;用户账号不存在&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户密码错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_PASSWORD_ERROR(<span class="string">&quot;A0210&quot;</span>, <span class="string">&quot;用户密码错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二级宏观错误码，用户请求参数错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REQUEST_PARAM_ERROR(<span class="string">&quot;A0400&quot;</span>, <span class="string">&quot;用户请求参数错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录已过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_LOGIN_EXPIRED(<span class="string">&quot;A0230&quot;</span>, <span class="string">&quot;用户登录已过期&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问未授权</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_UN_AUTH(<span class="string">&quot;A0301&quot;</span>, <span class="string">&quot;访问未授权&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户请求服务异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REQ_EXCEPTION(<span class="string">&quot;A0500&quot;</span>, <span class="string">&quot;用户请求服务异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求超出限制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REQ_MANY(<span class="string">&quot;A0501&quot;</span>, <span class="string">&quot;请求超出限制&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户评论异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_COMMENT(<span class="string">&quot;A2000&quot;</span>, <span class="string">&quot;用户评论异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户评论异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_COMMENTED(<span class="string">&quot;A2001&quot;</span>, <span class="string">&quot;用户已发表评论&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作家发布异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AUTHOR_PUBLISH(<span class="string">&quot;A3000&quot;</span>, <span class="string">&quot;作家发布异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小说名已存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AUTHOR_BOOK_NAME_EXIST(<span class="string">&quot;A3001&quot;</span>, <span class="string">&quot;小说名已存在&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户上传文件异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_UPLOAD_FILE_ERROR(<span class="string">&quot;A0700&quot;</span>, <span class="string">&quot;用户上传文件异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户上传文件类型不匹配</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_UPLOAD_FILE_TYPE_NOT_MATCH(<span class="string">&quot;A0701&quot;</span>, <span class="string">&quot;用户上传文件类型不匹配&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一级宏观错误码，系统执行出错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SYSTEM_ERROR(<span class="string">&quot;B0001&quot;</span>, <span class="string">&quot;系统执行出错&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二级宏观错误码，系统执行超时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SYSTEM_TIMEOUT_ERROR(<span class="string">&quot;B0100&quot;</span>, <span class="string">&quot;系统执行超时&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一级宏观错误码，调用第三方服务出错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    THIRD_SERVICE_ERROR(<span class="string">&quot;C0001&quot;</span>, <span class="string">&quot;调用第三方服务出错&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一级宏观错误码，中间件服务出错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MIDDLEWARE_SERVICE_ERROR(<span class="string">&quot;C0100&quot;</span>, <span class="string">&quot;中间件服务出错&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中文描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="resp层"><a href="#resp层" class="headerlink" title="resp层"></a>resp层</h4><p>Http Rest 响应工具及数据格式封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestResp</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;错误码，00000-没有错误&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;响应消息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;响应数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = ErrorCodeEnum.OK.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = ErrorCodeEnum.OK.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">(ErrorCodeEnum errorCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = errorCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = errorCode.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理成功,无数据返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理成功，有数据返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RestResp&lt;T&gt; <span class="title function_">ok</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">fail</span><span class="params">(ErrorCodeEnum errorCode)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(errorCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(ErrorCodeEnum.SYSTEM_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(<span class="built_in">this</span>.code, ErrorCodeEnum.OK.getCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="req层"><a href="#req层" class="headerlink" title="req层"></a>req层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestResp</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ErrorCodeEnum为常量层下的类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = ErrorCodeEnum.OK.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = ErrorCodeEnum.OK.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">(ErrorCodeEnum errorCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = errorCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = errorCode.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理成功,无数据返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理成功，有数据返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RestResp&lt;T&gt; <span class="title function_">ok</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">fail</span><span class="params">(ErrorCodeEnum errorCode)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(errorCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(ErrorCodeEnum.SYSTEM_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(<span class="built_in">this</span>.code, ErrorCodeEnum.OK.getCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//mapper包扫描</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.tec.vuepractice.dao.mapper&quot;)</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VuePracticeApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(VuePracticeApplication.class, args);</span><br><span class="line">        log.info(<span class="string">&quot;项目启动成功！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/posts/f8e09374.html"/>
      <url>/posts/f8e09374.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="Vuecil脚手架安装"><a href="#Vuecil脚手架安装" class="headerlink" title="Vuecil脚手架安装"></a>Vuecil脚手架安装</h3><p>依次安装Node.js、Vue、Vuecli</p><p>安装脚手架</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install -g <span class="variable">@vue</span>/cli</span><br></pre></td></tr></table></figure><p>检查版本</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vue</span> --version</span><br></pre></td></tr></table></figure><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vue</span> create hello-world</span><br></pre></td></tr></table></figure><h3 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vue</span> ui</span><br></pre></td></tr></table></figure><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/image-20221216142020026.png" alt="image-20221216142020026"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── node_modules </span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico: 页签图标</span><br><span class="line">│   └── index.html: 主页面</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets: 存放静态资源</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   │── component: 存放组件</span><br><span class="line">│   │   └── HelloWorld.vue</span><br><span class="line">│   │── App.vue: 汇总所有组件</span><br><span class="line">│   │── main.js: 入口文件</span><br><span class="line">├── .gitignore: git版本管制忽略的配置</span><br><span class="line">├── babel.config.js: babel的配置文件</span><br><span class="line">├── package.json: 应用包配置文件 </span><br><span class="line">├── README.md: 应用描述文件</span><br><span class="line">├── package-lock.json：包版本控制文件</span><br></pre></td></tr></table></figure><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>Vue为只有一个index.html作为单页面，会用路由实现多页面的跳转，路由则将路径和页面进行映射</p><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(53).png" alt="屏幕截图(53)"></p><p>路由：router包下面写index.js文件并附上path和name(<strong>注意！！！path: ‘&#x2F;‘也就代表了网页的第一个页面是什么</strong>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomeView</span> <span class="keyword">from</span> <span class="string">&#x27;../views/HomeView.vue&#x27;</span><span class="comment">/* 1、引入AboutView.vue，一般不使用这种 */</span> </span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeView</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">    <span class="comment">// route level code-splitting</span></span><br><span class="line">    <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">    <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="comment">/* 2、引入AboutView.vue，一般建议使用这种 */</span> <span class="string">&#x27;../views/AboutView.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>路由在组件中的使用：<router-link to></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;router-link :to=&quot;&#123; name: &#x27;home&#x27; &#125;&quot;&gt;首页&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">  &lt;router-link :to=&quot;&#123; name: &#x27;bookclass&#x27; &#125;&quot;&gt; 全部作品 &lt;/router-link&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;router-link :to=&quot;&#123; name: &#x27;bookRank&#x27; &#125;&quot;&gt;排行榜&lt;/router-link&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>当你点击 <code>&lt;router-link&gt;</code> 时， <code>router.push</code> 方法会在内部调用，所以说，点击<code>&lt;router-link :to=&quot;...&quot;&gt;</code> 等同于调用 <code>router.push(...)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 字符串</span><br><span class="line">router.push(&#x27;home&#x27;)</span><br><span class="line"> </span><br><span class="line">// 对象</span><br><span class="line">this.$router.push(&#123;path: &#x27;/login?url=&#x27; + this.$route.path&#125;);</span><br><span class="line"> </span><br><span class="line">// 命名的路由</span><br><span class="line">router.push(&#123; name: &#x27;user&#x27;, params: &#123; userId: 123 &#125;&#125;)</span><br></pre></td></tr></table></figure><p>路由在父组件App.vue的<router-view></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default  &#123;</span><br><span class="line">  name:  &#x27;App&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在views包下写主要页面，再在如Home.vue里引入components(当然组件自己也可以引用自己)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">    &lt;Top /&gt;</span><br><span class="line">    &lt;Navbar /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>引用组件时要记得注册组件,并引入文件位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import Navbar from &quot;@/components/common/Navbar&quot;;</span><br><span class="line">import Top from &quot;@/components/common/Top&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Header&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Navbar,</span><br><span class="line">    Top,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Css的引入"><a href="#Css的引入" class="headerlink" title="Css的引入"></a>Css的引入</h3><p>在assets包（静态资源管理包）下建立css包并命名global.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后在main.js中引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/assets/css/global.css&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>Axios 是一个基于 <em><a href="https://javascript.info/promise-basics">promise</a></em> 网络请求库,这不是一种新技术，本质上还是对原生XMLHttpRequest的封装,用来实现Ajax(异步网络请求。Ajax能够让页面无刷新的请求数据，由来是浏览器页面在向服务器请求数据时，因为返回的是整个页面的数据，页面都会强制刷新一下，这对于用户来讲并不是很友好。并且我们只是需要修改页面的部分数据，但是从服务器端发送的却是整个页面的数据，十分消耗网络资源。而我们只是需要修改页面的部分数据，也希望不刷新页面，因此异步网络请求就应运而生。)</p><p>安装</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install axios</span><br></pre></td></tr></table></figure><p>最基础需要写比较长的配置来使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">&lt;!-- 方法一 --&gt;   </span><br><span class="line">axios(&#123;</span><br><span class="line">            method:&quot;get&quot;,</span><br><span class="line">            url:&quot;https://www.baidu.com&quot;，</span><br><span class="line">            data:user_id=7</span><br><span class="line">        &#125;).then(res =&gt; &#123;</span><br><span class="line">            console.log(res.data);</span><br><span class="line">        &#125;)</span><br><span class="line">&lt;!-- 方法二 --&gt; </span><br><span class="line">axios.get(&quot;https://www.baidu.com&quot;).then(res =&gt; &#123;</span><br><span class="line">            this.obj= res.data[0];</span><br><span class="line">            console.log(res.data);</span><br><span class="line">        &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/axios-1.png" alt="axios-1"></p><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/axios-2.png" alt="axios-2"></p><p>也可以全局注册后使用（这里不展开）</p><p>但是一般在请求数量增多时会需要来进行封装axios来简化开发</p><p>在utils下创建request.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken, removeToken, removeNickName, setToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API_URL</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">10000</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">withCredentials</span> = <span class="literal">true</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>[<span class="string">&#x27;X-Requested-With&#x27;</span>] = <span class="string">&#x27;XMLHttpRequest&#x27;</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="title function_">getToken</span>()</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> res.<span class="property">data</span> !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;服务端异常！&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> != <span class="string">&quot;00000&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">message</span>) &#123;</span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">message</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 登录已过期</span></span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> == <span class="string">&#x27;A0230&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 移除 token </span></span><br><span class="line">            <span class="title function_">removeToken</span>();</span><br><span class="line">            <span class="title function_">removeNickName</span>();</span><br><span class="line">            router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;网络异常！&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure><p>在main.js中注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;./util/axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(store)</span><br><span class="line">   .<span class="title function_">use</span>(router)</span><br><span class="line">   .<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$axios</span> = axios;</span><br></pre></td></tr></table></figure><p>封装api在api包下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;../utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">listHomeBooks</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">get</span>(<span class="string">&#x27;/front/home/books&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//动态传入用$&#123;bookId&#125;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getBookById</span>(<span class="params">bookId</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">get</span>(<span class="string">`/front/book/<span class="subst">$&#123;bookId&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在vue的生命周期函数里调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">&lt;!--导入--&gt;    </span><br><span class="line">import &#123; reactive, toRefs, onMounted &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useRouter, useRoute &#125; from &quot;vue-router&quot;;</span><br><span class="line">import &#123; listHomeBooks &#125; from &quot;@/api/home&quot;;</span><br><span class="line">&lt;!--注册组件--&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;home&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Header,</span><br><span class="line">    LatestNews,</span><br><span class="line">    FriendLink,</span><br><span class="line">    BookVisitRank,</span><br><span class="line">    BookNewestRank,</span><br><span class="line">    BookUpdateRank,</span><br><span class="line">    Footer,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">&lt;!--route是一个跳转的路由对象，每一个路由都会有一个route对象，是一个局部的对象，可以获取对应的name,path,params,query等：--&gt;</span><br><span class="line">    const route = useRoute();</span><br><span class="line">&lt;!--router是VueRouter的一个对象，通过Vue.use(VueRouter)和VueRouter构造函数得到一个router的实例对象，这个对象中是一个全局的对象，包含了所有的路由包含了许多关键的对象和属性。例如history对象$router.push(&#123;path:’/path’&#125;); 本质是向history栈中添加一个路由，在我们看来是 切换路由，但本质是在添加一个history记录--&gt;</span><br><span class="line">    const router = useRouter();</span><br><span class="line">&lt;!--reactive（）函数接收一个普通对象，返回一个响应式的数据对象。访问： state.参数名--&gt;</span><br><span class="line">    const state = reactive(&#123;</span><br><span class="line">      // 轮播图</span><br><span class="line">      sliderContent: [],</span><br><span class="line">      // 顶部栏</span><br><span class="line">      topBooks1: [],</span><br><span class="line">      //本周强推</span><br><span class="line">      weekcommend: [],</span><br><span class="line">      // 热门推荐</span><br><span class="line">      hotRecommend: [],</span><br><span class="line">      // 精品推荐</span><br><span class="line">      goodRecommend: [],</span><br><span class="line">      imgBaseUrl: process.env.VUE_APP_BASE_IMG_URL,</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;!--生命周期函数--&gt;</span><br><span class="line">    onMounted(async () =&gt; &#123;</span><br><span class="line">      const loadingInstance = ElLoading.service(&#123;</span><br><span class="line">        target: &quot;#topBooks2&quot;,</span><br><span class="line">        text: &quot;加载中。。。&quot;,</span><br><span class="line">      &#125;);</span><br><span class="line">&lt;!--等待listHomeBooks()方法传来数据给data--&gt;</span><br><span class="line">      const &#123; data &#125; = await listHomeBooks();</span><br><span class="line"></span><br><span class="line">&lt;!--可能book和v-for的item相似，属于别名，这段的意思就是从--&gt;</span><br><span class="line">      await data.forEach((book) =&gt; &#123;</span><br><span class="line">        if (book.type == 0) &#123;</span><br><span class="line">          // 轮播图</span><br><span class="line">          state.sliderContent[state.sliderContent.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 1) &#123;</span><br><span class="line">          // 顶部栏</span><br><span class="line">          state.topBooks1[state.topBooks1.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 2) &#123;</span><br><span class="line">          //本周强推</span><br><span class="line">          state.weekcommend[state.weekcommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 3) &#123;</span><br><span class="line">          //热门推荐</span><br><span class="line">          state.hotRecommend[state.hotRecommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 4) &#123;</span><br><span class="line">          //精品推荐</span><br><span class="line">          state.goodRecommend[state.goodRecommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">        </span><br><span class="line">&lt;!--push就是在浏览器的历史记录中追加一个新的记录，你可以通过window.history看到这个记录。而replace则是将当前的路由记录替换掉，替换后你如果回退，会发现上一个路由地址已经消失了。此处是点击链接后触发的方法，将跳转到小说的详情页--&gt;</span><br><span class="line">    const bookDetail = (bookId) =&gt; &#123;</span><br><span class="line">      router.push(&#123; path: `/book/$&#123;bookId&#125;` &#125;);</span><br><span class="line">    &#125;；</span><br><span class="line">&lt;!--toRefs将一个响应式对象，转换为普通对象，并且将其中的属性转换为 Ref 对象，与reactive搭配使用，reactive将数据变成响应式数据，当数据发生变化时state也会自动更新--&gt;        </span><br><span class="line">    return &#123;</span><br><span class="line">      ...toRefs(state),</span><br><span class="line">      bookDetail,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue3与Vue2的不同"><a href="#Vue3与Vue2的不同" class="headerlink" title="Vue3与Vue2的不同"></a>Vue3与Vue2的不同</h2><h3 id="Vite脚手架的安装"><a href="#Vite脚手架的安装" class="headerlink" title="Vite脚手架的安装"></a>Vite脚手架的安装</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line"><span class="attribute">npm</span> init vite-app vue3_test-vite</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line">cd vue3_test-vite</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="分析文件目录"><a href="#分析文件目录" class="headerlink" title="分析文件目录"></a>分析文件目录</h3><h4 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h4><p>Vue2项目的main.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  render: h =&gt; h(App),</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><p>我们再来看看Vue3项目中的main.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">createApp(App).mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><p>分析一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 引入的不再是Vue构造函数了，引入的是一个名为createApp的工厂函数</span><br><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">// 创建应用实例对象——app(类似于之前Vue2中的vm，但app比vm更“轻”)</span><br><span class="line">const app = createApp(App)</span><br><span class="line">console.log(app)</span><br><span class="line">// 挂载</span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><h4 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h4><p>我们再来看看组件</p><p>在<code>template</code>标签里可以没有根标签了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- Vue3组件中的模板结构可以没有根标签 --&gt;</span><br><span class="line">&lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot;&gt;</span><br><span class="line">&lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="setup函数"><a href="#setup函数" class="headerlink" title="setup函数"></a>setup函数</h3><p>代替了Vue2的data（）以及method</p><h2 id="vue基础"><a href="#vue基础" class="headerlink" title="vue基础"></a>vue基础</h2><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p><strong>一、ref函数的引入</strong></p><p>　　import { ref } from ‘vue’</p><p><strong>二、什么是 ref</strong></p><p>​1、ref 和 reactive 一样都是实现响应式数据的方法</p><p>​2、由于 reactive 必须传递一个对象，所以导致我们再企业开发中，如果我们只想让某个变量实现响应式的时候非常麻烦，所以 Vue3 就提供了 ref 方法，实现对简单值的监听</p><p><strong>三、ref 的本质</strong></p><p>​<strong>const input &#x3D; ref(‘’)</strong></p><p>　　ref 底层的本质还是 reactive 系统会自动根据我们给 ref 传入的值将他转换成 ref(xx) —— reactive({value: xx})</p><p><strong>四、ref 注意点</strong></p><p>　1、在 VUE 的模板中使用 ref 的值不需要通过 value 获取 （Vue 会通过自动给 ref 的值加上 .value）</p><p>　2、在 js 中使用 ref 的值必须使用 .value 获取’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;uni-popup ref=&quot;popup&quot; type=&quot;dialog&quot;&gt;</span><br><span class="line">        &lt;!--mode=&quot;base&quot;为对话框加两个按钮的形式--&gt;</span><br><span class="line">        &lt;uni-popup-dialog mode=&quot;base&quot; title=&quot;确定要放弃吗?&quot; content=&quot;本次计时将不会得到任何分数&quot; :duration=&quot;2000&quot; :before-close=&quot;true&quot;</span><br><span class="line">            @close=&quot;close&quot; @confirm=&quot;confirm&quot;&gt;&lt;/uni-popup-dialog&gt;</span><br><span class="line">    &lt;/uni-popup&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    </span><br><span class="line">let popup = ref(null); //记着赋初值，本质是reactive(&#123;value:null&#125;)</span><br><span class="line"></span><br><span class="line">const timeEnd = () =&gt; &#123;</span><br><span class="line">popup.value.open() //记得.value然后调用函数</span><br><span class="line">&#125;</span><br><span class="line">const confirm = () =&gt; &#123;</span><br><span class="line">popup.value.close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const close = () =&gt; &#123;</span><br><span class="line">popup.value.close()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p><strong>在v-for中使用字符串</strong></p><p>string：data中的源数据字符串，</p><p>str：data数据string字符串的每一个，</p><p>index：string字符串索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 这里表示被vue控制的区域 --&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;(str, index) in string&quot;&gt;</span><br><span class="line">            &#123;&#123; index &#125;&#125;---&#123;&#123; str &#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#app&#x27;, // 控制id为app的元素</span><br><span class="line">        data: &#123;</span><br><span class="line">            // 存放所需要的数据</span><br><span class="line">            string: &#x27;abcdefgh&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/v-for.png"></p><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;sliderContent&quot;&gt;</span><br><span class="line">          &lt;dl class=&quot;scBigImg&quot; id=&quot;carouseBig&quot;&gt;</span><br><span class="line">            &lt;dd v-for=&quot;(item, index) in sliderContent&quot; :key=&quot;index&quot; :class=&quot;&#123; on: index == 0 &#125;&quot;&gt;</span><br><span class="line">                &lt;!-- 点击触发bookDetail函数，传入sliderContent.bookid,并在最后使用push来跳转到小说的详情页 --&gt;</span><br><span class="line">              &lt;a href=&quot;javascript:void(0)&quot; @click=&quot;bookDetail(item.bookId)&quot;&gt;</span><br><span class="line">                &lt;img :src=&quot;`$&#123;imgBaseUrl&#125;` + `$&#123;item.picUrl&#125;`&quot; :alt=&quot;item.bookName&quot;</span><br><span class="line">                  onerror=&quot;this.src=&#x27;default.gif&#x27;;this.onerror=null&quot; /&gt;</span><br><span class="line">              &lt;/a&gt;</span><br><span class="line">            &lt;/dd&gt;</span><br><span class="line">          &lt;/dl&gt;</span><br><span class="line">    &lt;/div&gt;    </span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>其中</p><p>sliderContent：data中的源数据数组（会从数据库中获得），</p><p>item：data数据list数组的别名，</p><p>index：list数组索引,即为数据数字的多少</p><h3 id="函数传入数据："><a href="#函数传入数据：" class="headerlink" title="函数传入数据："></a>函数传入数据：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//targetNoTimeDelete(index)来传入数据index,方便下面接收</span><br><span class="line">&lt;view class=&quot;targetMenuDetailD&quot; v-for=&quot;(item, index) in state.targetNoTime&quot; :key=&quot;index&quot;</span><br><span class="line">@click=&quot;targetNoTimeDelete(index)&quot;&gt;</span><br><span class="line">&lt;text&gt;&#123;&#123;item.targetName&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;view class=&quot;targetMenuDetailDI&quot;&gt;</span><br><span class="line">&lt;img src=&quot;@\static\coin.svg&quot; style=&quot;width: 34rpx;height:34rpx;&quot;&gt;</span><br><span class="line">&lt;text&gt;X&#123;&#123;item.targetPoint&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;text&gt;任意时间&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    //记忆一下书写方式</span><br><span class="line">const targetNoTimeDelete = (index) =&gt; &#123;</span><br><span class="line">uni.request(&#123;</span><br><span class="line">url: &#x27;http://localhost:8181/target/delete&#x27;,</span><br><span class="line">method: &quot;POST&quot;,</span><br><span class="line">data: &#123;</span><br><span class="line">targetName: state.targetWithTime[index].targetName,</span><br><span class="line">ifPoints: 1,</span><br><span class="line">&#125;,</span><br><span class="line">success: (res) =&gt; &#123;</span><br><span class="line">console.log(res)</span><br><span class="line">// 从targetWithTime数组中移除已删除的目标数据</span><br><span class="line">state.targetWithTime.splice(index, 1);</span><br><span class="line">user.data.point = res.data.data.targetPoint</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="route-params-categoryId的用法"><a href="#route-params-categoryId的用法" class="headerlink" title="route.params.categoryId的用法"></a>route.params.categoryId的用法</h3><p>route.params.url参数</p><p>url参数来自于:categoryId(要求与该变量完全一致，卡了半小时QAQ)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/:categoryId&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;bookcategory&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/BookCategory&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>正式使用：</p><p>在onMounted生命周期函数里，就用变量来接，之后要记得放进带参数的变量里，还是要求id参数一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive, toRefs, onMounted &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useRouter, useRoute &#125; from &quot;vue-router&quot;;</span><br><span class="line">import &#123; listHomeCategoryId &#125; from &quot;@/api/home&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;home&quot;,</span><br><span class="line">    setup() &#123;</span><br><span class="line">        const route = useRoute();</span><br><span class="line">        const router = useRouter();</span><br><span class="line">        const state = reactive(&#123;</span><br><span class="line">            // 分类推荐</span><br><span class="line">            catagorycommendId: [],</span><br><span class="line">        &#125;);</span><br><span class="line">        onMounted(async () =&gt; &#123;</span><br><span class="line">            const categoryId = route.params.categoryId-2;</span><br><span class="line">            dataCategoryId(categoryId);</span><br><span class="line">        &#125;);</span><br><span class="line">        const dataCategoryId = async (categoryId) =&gt; &#123;</span><br><span class="line">            const &#123; data &#125; = await listHomeCategoryId(categoryId);</span><br><span class="line">            await data.forEach((book) =&gt; &#123;</span><br><span class="line">                &#123;</span><br><span class="line">                    //历史推荐</span><br><span class="line">                    state.catagorycommendId[state.catagorycommendId.length] = book;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        return &#123;</span><br><span class="line">            ...toRefs(state),</span><br><span class="line">            dataCategoryId,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>组件是.vue的单文件组件，实现代码复用，以及理顺css以及js之间的关系，可以用script setup这样就可以在引入之后自动注册组件</p><h3 id="选项式api"><a href="#选项式api" class="headerlink" title="选项式api"></a>选项式api</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    //js对象</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;targetMenu&quot;,</span><br><span class="line">        //实例对象的属性</span><br><span class="line">data() &#123;</span><br><span class="line">            //返回出去的才是响应式数据</span><br><span class="line">return &#123;</span><br><span class="line">showFocusAfter: true,</span><br><span class="line">showTargetAfter: false,</span><br><span class="line">showTargetBefore: true,</span><br><span class="line">showFocusBefore: false,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">        //实例对象的方法</span><br><span class="line">methods() &#123;</span><br><span class="line">const menuItems = this.$route.meta.menuItems || []</span><br><span class="line">if (menuItems.includes(&#x27;target&#x27;)) &#123;</span><br><span class="line">this.showFocusAfter = false;</span><br><span class="line">this.showTargetBefore = false;</span><br><span class="line">this.showTargetAfter = true;</span><br><span class="line">this.showFocusBefore = true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="组合式api"><a href="#组合式api" class="headerlink" title="组合式api"></a>组合式api</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">//使用setup,可以直接写变量，但是只是普通变量，需要通过const state = reactive(&#123;hotRecommend: [], &#125;);来变成响应式变量，也可以用ref（），可以接收任何值，不止于此对象，把数据转化为&#123;value：0&#125;</span><br><span class="line">import &#123; reactive, toRefs, onMounted &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useRouter, useRoute &#125; from &quot;vue-router&quot;;</span><br><span class="line">import Header from &#x27;@/components/Header&#x27;;</span><br><span class="line">import Footer from &#x27;@/components/Footer&#x27;;</span><br><span class="line">import &#123; listHomeBooks, listHomeCategory,listHomeCategory2,listHomeCategory3,listHomeCategory4 &#125; from &quot;@/api/home&quot;;</span><br><span class="line">import &#123; getBookById, &#125; from &quot;@/api/book&quot;;</span><br><span class="line">import &#123; SetUp &#125; from &#x27;@element-plus/icons-vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;home&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Header,</span><br><span class="line">    Footer,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const route = useRoute();</span><br><span class="line">    const router = useRouter();</span><br><span class="line">    const state = reactive(&#123;</span><br><span class="line">      // 热门推荐</span><br><span class="line">      hotRecommend: [],</span><br><span class="line">      // 精品推荐</span><br><span class="line">      goodRecommend: [],</span><br><span class="line">      // 分类推荐</span><br><span class="line">      catagorycommend: [],</span><br><span class="line">      catagorycommend2: [],</span><br><span class="line">      catagorycommend3: [],</span><br><span class="line">      catagorycommend4: [],</span><br><span class="line">      imgBaseUrl: process.env.VUE_APP_BASE_IMG_URL,</span><br><span class="line">    &#125;);</span><br><span class="line">    onMounted(async () =&gt; &#123;</span><br><span class="line">      const &#123; data &#125; = await listHomeBooks();</span><br><span class="line">      await data.forEach((book) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        if (book.type == 3) &#123;</span><br><span class="line">          //热门推荐</span><br><span class="line">          state.hotRecommend[state.hotRecommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 4) &#123;</span><br><span class="line">          //精品推荐</span><br><span class="line">          state.goodRecommend[state.goodRecommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      dataCategory();</span><br><span class="line">      dataCategory2();</span><br><span class="line">      dataCategory3();</span><br><span class="line">      dataCategory4();</span><br><span class="line">    &#125;);</span><br><span class="line">    const bookDetail = (bookId) =&gt; &#123;</span><br><span class="line">      router.push(&#123; path: `/book/$&#123;bookId&#125;` &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    const dataCategory = async () =&gt; &#123;</span><br><span class="line">      const &#123; data &#125; = await listHomeCategory();</span><br><span class="line">      await data.forEach((book) =&gt; &#123;</span><br><span class="line">        if (book.categoryName == &quot;历史军事&quot;) &#123;</span><br><span class="line">          //历史推荐</span><br><span class="line">          state.catagorycommend[state.catagorycommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    const dataCategory2 = async () =&gt; &#123;</span><br><span class="line">      const &#123; data &#125; = await listHomeCategory2();</span><br><span class="line">      await data.forEach((book) =&gt; &#123;</span><br><span class="line">        if (book.categoryName == &quot;科幻灵异&quot;) &#123;</span><br><span class="line">          //历史推荐</span><br><span class="line">          state.catagorycommend2[state.catagorycommend2.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    const dataCategory3 = async () =&gt; &#123;</span><br><span class="line">      const &#123; data &#125; = await listHomeCategory3();</span><br><span class="line">      await data.forEach((book) =&gt; &#123;</span><br><span class="line">        if (book.categoryName == &quot;都市言情&quot;) &#123;</span><br><span class="line">          //历史推荐</span><br><span class="line">          state.catagorycommend3[state.catagorycommend3.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    const dataCategory4 = async () =&gt; &#123;</span><br><span class="line">      const &#123; data &#125; = await listHomeCategory4();</span><br><span class="line">      await data.forEach((book) =&gt; &#123;</span><br><span class="line">        if (book.categoryName == &quot;玄幻奇幻&quot;) &#123;</span><br><span class="line">          //历史推荐</span><br><span class="line">          state.catagorycommend4[state.catagorycommend4.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      ...toRefs(state),</span><br><span class="line">      bookDetail,</span><br><span class="line">      dataCategory,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>当需要在属性内使用动态数据的时候则需要使用v-bind，标签内则可以直接使用双大括号，可简写为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;img v-bind:src=&quot;imgPath&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">//简写</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;img :src=&quot;imgPath&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="style-scoped"><a href="#style-scoped" class="headerlink" title="style scoped"></a>style scoped</h3><p>这样设置会成为局部样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.menu &#123;</span><br><span class="line">width: 200px;</span><br><span class="line">margin-left: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.menuButton &#123;</span><br><span class="line">margin-top: 50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="style-module"><a href="#style-module" class="headerlink" title="style module"></a>style module</h3><p>css 变成模块，通过：class&#x3D;”$style.box1”使用</p><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>v-on:click简写为@click</p><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>双向绑定</p><p>此处还采用了pinia集中管理状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;LoginInput&quot;&gt;</span><br><span class="line">&lt;text&gt;你的邮箱&lt;/text&gt;</span><br><span class="line">&lt;input v-model=&quot;user.data.userEmail&quot; name=&quot;txtEmail&quot; type=&quot;text&quot;                  id=&quot;txtPassword&quot; placeholder=&quot;请输入邮箱&quot;</span><br><span class="line">class=&quot;LoginInputIn&quot;&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;view class=&quot;LoginP&quot;&gt;</span><br><span class="line">&lt;text&gt;登陆&lt;/text&gt;</span><br><span class="line">&lt;text&gt;将使用&#123;&#123;user.data.userEmail&#125;&#125;登陆&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;</span><br><span class="line">useUserStore</span><br><span class="line">&#125; from &quot;../../store/user&quot;;</span><br><span class="line">const user = useUserStore()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><h3 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h3><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute,useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">HomeR</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">router.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="attr">path</span>: <span class="string">`/Login`</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Route"><a href="#Route" class="headerlink" title="Route"></a>Route</h3><h4 id="引入-1"><a href="#引入-1" class="headerlink" title="引入"></a>引入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute,useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line"><span class="keyword">const</span> id = route.<span class="property">params</span>.<span class="property">id</span>;</span><br></pre></td></tr></table></figure><h3 id="params"><a href="#params" class="headerlink" title="params"></a>params</h3><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>在组合式api和setup语法糖中需要按下面的方式进行定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">navbarTo: &#123;</span><br><span class="line">type: String,</span><br><span class="line">required: true</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="组件传参"><a href="#组件传参" class="headerlink" title="组件传参"></a>组件传参</h3><p>1、组件内定义props</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">navbarTo: &#123;</span><br><span class="line">type: String,</span><br><span class="line">required: true</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2、在需要使用组件的部分进行数据双向绑定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Navbar :navbarTo=&quot;&#x27;/menu/2&#x27;&quot;&gt;&lt;/Navbar&gt;</span><br></pre></td></tr></table></figure><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><p>1、定义参数：router-link :to&#x3D;“params”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;#&quot;&gt;</span><br><span class="line">router-link :to=&quot;props.navbarTo&quot;&gt; </span><br><span class="line">    &lt;img src=&quot;@\assets\Filter.png&quot; alt=&quot;#&quot;&gt;</span><br><span class="line">    &lt;/router-link&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>2、接收参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>();</span><br><span class="line"><span class="keyword">const</span> id = route.<span class="property">params</span>.<span class="property">id</span>;</span><br></pre></td></tr></table></figure><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>1、在需要控制出现与否的标签上加上v-if(注意不需要双向绑定 ：，但是要加上state.)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;FocusAfter v-if=&quot;state.showFocusAfter&quot;&gt;&lt;/FocusAfter&gt;</span><br><span class="line">&lt;TargetBefore v-if=&quot;state.showTargetBefore&quot;&gt;&lt;/TargetBefore&gt;</span><br><span class="line">&lt;FocusBefore v-if=&quot;state.showFocusBefore&quot;&gt;&lt;/FocusBefore&gt;</span><br><span class="line">&lt;TargetAfter v-if=&quot;state.showTargetAfter&quot;&gt;&lt;/TargetAfter&gt;</span><br></pre></td></tr></table></figure><p>2、通过响应式的数据，更改标签出现与否</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>();</span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line"><span class="attr">showFocusAfter</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">showTargetBefore</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">showFocusBefore</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">showTargetAfter</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> id = route.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line"><span class="keyword">if</span> (id == <span class="number">2</span>) &#123;</span><br><span class="line">state.<span class="property">showFocusAfter</span> = <span class="literal">false</span>;</span><br><span class="line">state.<span class="property">showTargetBefore</span> = <span class="literal">false</span>;</span><br><span class="line">state.<span class="property">showFocusBefore</span> = <span class="literal">true</span>;</span><br><span class="line">state.<span class="property">showTargetAfter</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>用于父组件和子组件的数据传递（但是只能用于父组件和子组件）</p><p>父组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;provide&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="attr">provide</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;这是祖先组件提供的消息&#x27;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;inject&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="attr">provide</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;这是祖先组件提供的消息&#x27;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="pinia"><a href="#pinia" class="headerlink" title="pinia"></a>pinia</h3><p>在面对多组件内传参的情况下，可以使用集中的状态管理pinia对应vue2的vuex</p><p>1、创建store文件夹下的js文件进行后续定义</p><p>2、定义状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">defineStore</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;user&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">userEmail</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">userName</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">userPassword</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">userCode</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;),</span><br><span class="line"><span class="attr">actions</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3、在所需要该状态的组件内进行引用和使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">useUserStore</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;../../store/user&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;&#125;)</span><br><span class="line"><span class="keyword">const</span> user = <span class="title function_">useUserStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">data</span>.<span class="property">userEmail</span>)</span><br></pre></td></tr></table></figure><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;view class=&quot;timerWork&quot;&gt;</span></span><br><span class="line"><span class="comment">//&lt;!-- 计时 --&gt;</span></span><br><span class="line"><span class="comment">//&lt;text&gt;&#123;&#123; formattedTime &#125;&#125;&lt;/text&gt;</span></span><br><span class="line"><span class="comment">//&lt;/view&gt;</span></span><br><span class="line"><span class="comment">// 获取格式化后的时间</span></span><br><span class="line"><span class="keyword">const</span> formattedTime = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">state.<span class="property">hours</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(state.<span class="property">remainingTime</span> / <span class="number">3600</span>);</span><br><span class="line">state.<span class="property">minutes</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>((state.<span class="property">remainingTime</span> % <span class="number">3600</span>) / <span class="number">60</span>);</span><br><span class="line">state.<span class="property">seconds</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(state.<span class="property">remainingTime</span> % <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;formatTime(state.hours)&#125;</span>:<span class="subst">$&#123;formatTime(state.minutes)&#125;</span>:<span class="subst">$&#123;formatTime(state.seconds)&#125;</span>`</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="js基础"><a href="#js基础" class="headerlink" title="js基础"></a>js基础</h2><h3 id="时间类函数"><a href="#时间类函数" class="headerlink" title="时间类函数"></a>时间类函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//今天的时间</span></span><br><span class="line"><span class="keyword">let</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="keyword">let</span> myDate = time.<span class="title function_">getDate</span>()</span><br><span class="line"><span class="keyword">let</span> dayNum = time.<span class="title function_">getDay</span>()</span><br><span class="line"><span class="keyword">let</span> myMonth = time.<span class="title function_">getMonth</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化一个date对象</span></span><br><span class="line"><span class="keyword">const</span> selectedDate = <span class="keyword">new</span> <span class="title class_">Date</span>(time.<span class="title function_">getFullYear</span>(), state.<span class="property">dayList</span>[<span class="number">0</span>].<span class="property">month</span>, <span class="number">1</span>);</span><br><span class="line">time = <span class="keyword">new</span> <span class="title class_">Date</span>(selectedDate); <span class="comment">// 创建新的日期对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//时间自增</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">time.<span class="title function_">setDate</span>(time.<span class="title function_">getDate</span>() + <span class="number">1</span>)</span><br><span class="line">state.<span class="property">dayList</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="string">&#x27;day&#x27;</span>: time.<span class="title function_">getDate</span>(),</span><br><span class="line"><span class="string">&#x27;month&#x27;</span>: time.<span class="title function_">getMonth</span>(),</span><br><span class="line"><span class="string">&#x27;week&#x27;</span>: weeks[time.<span class="title function_">getDay</span>()],</span><br><span class="line"><span class="string">&#x27;className&#x27;</span>: <span class="string">&#x27;Num&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置时间</span></span><br><span class="line">time.<span class="title function_">setDate</span>(time.<span class="title function_">getDate</span>() + <span class="number">1</span>)</span><br><span class="line">time.<span class="title function_">setDate</span>(state.<span class="property">dayList</span>[index].<span class="property">day</span>)</span><br><span class="line">time.<span class="title function_">setMonth</span>(state.<span class="property">dayList</span>[index].<span class="property">month</span>)</span><br><span class="line"><span class="comment">//时间差计算</span></span><br><span class="line"><span class="keyword">let</span> currentTime = <span class="keyword">new</span> <span class="title class_">Date</span>(target.<span class="property">data</span>.<span class="property">currentTime</span>)</span><br><span class="line"><span class="keyword">let</span> timeDiff = item.<span class="title function_">getTime</span>() - currentTime.<span class="title function_">getTime</span>()</span><br><span class="line"><span class="keyword">let</span> dayDiff = <span class="title class_">Math</span>.<span class="title function_">floor</span>(timeDiff / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>))</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line"><span class="attr">dayList</span>: []</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line">target.<span class="property">data</span>.<span class="property">deadlineDate</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> currentTime = <span class="keyword">new</span> <span class="title class_">Date</span>(target.<span class="property">data</span>.<span class="property">currentTime</span>)</span><br><span class="line"><span class="keyword">let</span> timeDiff = item.<span class="title function_">getTime</span>() - currentTime.<span class="title function_">getTime</span>()</span><br><span class="line"><span class="keyword">let</span> dayDiff = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(timeDiff / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//增加元素</span></span><br><span class="line">state.<span class="property">dayList</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="string">&#x27;day&#x27;</span>: time.<span class="title function_">getDate</span>(),</span><br><span class="line"><span class="string">&#x27;month&#x27;</span>: time.<span class="title function_">getMonth</span>(),</span><br><span class="line"><span class="string">&#x27;week&#x27;</span>: weeks[time.<span class="title function_">getDay</span>()],</span><br><span class="line"><span class="string">&#x27;className&#x27;</span>: <span class="string">&#x27;Num&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//去除元素</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">targetNoTimeDelete</span> = (<span class="params">index</span>) =&gt; &#123;</span><br><span class="line"><span class="comment">// 从targetWithTime数组中移除已删除的目标数据</span></span><br><span class="line">    <span class="comment">//第index个元素开始，删除1个</span></span><br><span class="line">state.<span class="property">targetWithTime</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拼接为“20：02”</span></span><br><span class="line"><span class="keyword">const</span> hours = item.<span class="title function_">getHours</span>();</span><br><span class="line"><span class="keyword">const</span> minutes = item.<span class="title function_">getMinutes</span>();</span><br><span class="line"><span class="keyword">const</span> timeString = <span class="string">`<span class="subst">$&#123;hours&#125;</span>:<span class="subst">$&#123;minutes.toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拼接为“5.30”</span></span><br><span class="line"><span class="keyword">const</span> month = item.<span class="title function_">getMonth</span>() + <span class="number">1</span>; <span class="comment">// 当前月份</span></span><br><span class="line"><span class="keyword">const</span> date = item.<span class="title function_">getDate</span>(); <span class="comment">// 当前日期</span></span><br><span class="line">dayDiff = <span class="string">`<span class="subst">$&#123;month&#125;</span>.<span class="subst">$&#123;date&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><h3 id="math函数"><a href="#math函数" class="headerlink" title="math函数"></a>math函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Math.floor() 函数总是返回小于等于一个给定数字的最大整数。</span></span><br><span class="line"><span class="keyword">let</span> dayDiff = <span class="title class_">Math</span>.<span class="title function_">floor</span>(timeDiff / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>))</span><br><span class="line"><span class="comment">//Math.ceil() 函数总是四舍五入并返回大于等于给定数字的最小整数。</span></span><br><span class="line"><span class="keyword">let</span> dayDiff = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(timeDiff / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>))</span><br><span class="line"><span class="comment">//Math.trunc() 方法会将数字的小数部分去掉，只保留整数部分。</span></span><br><span class="line"><span class="keyword">let</span> dayDiff = <span class="title class_">Math</span>.<span class="title function_">trunc</span>(timeDiff / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>))</span><br></pre></td></tr></table></figure><h3 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">7</span>)); <span class="comment">// 输出 &quot;world!&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(-<span class="number">6</span>)); <span class="comment">// 输出 &quot;world!&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">7</span>, <span class="number">5</span>)); <span class="comment">// 输出 &quot;world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;text class=&quot;UserProgressDC&quot;&gt;比起上&#123;&#123;state.UserTimeP.substr(-2)&#125;&#125;&lt;/text&gt;</span></span><br></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="数组刷新重复输入问题"><a href="#数组刷新重复输入问题" class="headerlink" title="数组刷新重复输入问题"></a>数组刷新重复输入问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关键在于在函数里给数组赋初值为空，这样每次刷新都会清空数组，方便放入下一组数据</span></span><br><span class="line"><span class="title function_">onMounted</span>(</span><br><span class="line">uni.<span class="title function_">request</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://localhost:8181/target/get&#x27;</span>,</span><br><span class="line"><span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line"><span class="attr">data</span>: user.<span class="property">data</span>.<span class="property">userEmail</span>,</span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//数组赋初值为空</span></span><br><span class="line">target.<span class="property">data</span>.<span class="property">deadlineDate</span> = []</span><br><span class="line">                </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">status</span> == <span class="number">0</span>) &#123;</span><br><span class="line">state.<span class="property">targetNoTime</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="string">&#x27;targetName&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetName</span>,</span><br><span class="line"><span class="string">&#x27;targetDescribe&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetDescribe</span>,</span><br><span class="line"><span class="string">&#x27;targetPoint&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetPoint</span>,</span><br><span class="line"><span class="string">&#x27;deadline&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">deadline</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">status</span> == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> deadline = <span class="keyword">new</span> <span class="title class_">Date</span>(res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">deadline</span>)</span><br><span class="line"><span class="keyword">if</span> (!target.<span class="property">data</span>.<span class="property">deadlineDate</span>.<span class="title function_">includes</span>(deadline)) &#123;</span><br><span class="line">target.<span class="property">data</span>.<span class="property">deadlineDate</span>.<span class="title function_">push</span>(deadline);</span><br><span class="line">&#125;</span><br><span class="line">state.<span class="property">targetWithTime</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="string">&#x27;targetName&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetName</span>,</span><br><span class="line"><span class="string">&#x27;targetDescribe&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetDescribe</span>,</span><br><span class="line"><span class="string">&#x27;targetPoint&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetPoint</span>,</span><br><span class="line"><span class="string">&#x27;deadline&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">deadline</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">status</span> == <span class="number">2</span>) &#123;</span><br><span class="line">state.<span class="property">targetCompleted</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="string">&#x27;targetName&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetName</span>,</span><br><span class="line"><span class="string">&#x27;targetDescribe&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetDescribe</span>,</span><br><span class="line"><span class="string">&#x27;targetPoint&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetPoint</span>,</span><br><span class="line"><span class="string">&#x27;deadline&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">deadline</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">status</span> == <span class="number">3</span>) &#123;</span><br><span class="line">state.<span class="property">targetExpire</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="string">&#x27;targetName&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetName</span>,</span><br><span class="line"><span class="string">&#x27;targetDescribe&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetDescribe</span>,</span><br><span class="line"><span class="string">&#x27;targetPoint&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">targetPoint</span>,</span><br><span class="line"><span class="string">&#x27;deadline&#x27;</span>: res.<span class="property">data</span>.<span class="property">data</span>[i].<span class="property">deadline</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="后端交互完前端页面不更新问题"><a href="#后端交互完前端页面不更新问题" class="headerlink" title="后端交互完前端页面不更新问题"></a>后端交互完前端页面不更新问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关键在于，响应式的数据没有更新，所以界面就没有更新</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">targetNoTimeDelete</span> = (<span class="params">index</span>) =&gt; &#123;</span><br><span class="line">uni.<span class="title function_">request</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://localhost:8181/target/delete&#x27;</span>,</span><br><span class="line"><span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">targetName</span>: state.<span class="property">targetWithTime</span>[index].<span class="property">targetName</span>,</span><br><span class="line"><span class="attr">ifPoints</span>: <span class="number">1</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"><span class="comment">// 从targetWithTime数组中移除已删除的目标数据</span></span><br><span class="line">        <span class="comment">//这里的对state.targetWithTime和user.data.point的操作很关键</span></span><br><span class="line">        <span class="comment">//因为数据库操作成功了，但是前端数据并没有发送改变</span></span><br><span class="line">        <span class="comment">//这时候就需要对响应式数据进行相应的改变，来保证页面的改变</span></span><br><span class="line">state.<span class="property">targetWithTime</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">user.<span class="property">data</span>.<span class="property">point</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">targetPoint</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于点击转换样式的练习"><a href="#关于点击转换样式的练习" class="headerlink" title="关于点击转换样式的练习"></a>关于点击转换样式的练习</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//关键在于通过数组的方式，使得每个v-for生成的元素都有它独立的className：state.dayList[index].className</span><br><span class="line">//这样就可以通过改变特定的className，来达成效果</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class=&quot;tagetDay&quot;&gt;</span><br><span class="line">&lt;scroll-view class=&quot;scroll-view&quot; scroll-x=&quot;true&quot; enable-flex=&quot;true&quot;&gt;</span><br><span class="line">&lt;view class=&quot;Mon&quot; v-for=&quot;(item, index) in state.dayList&quot; :key=&quot;index&quot; @click=&quot;classChange(index)&quot;&gt;</span><br><span class="line">&lt;text&gt;&#123;&#123;item.week&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;view :class=&quot;item.className&quot;&gt;</span><br><span class="line">&lt;text class=&quot;Num&quot;&gt;&#123;&#123;item.day&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/scroll-view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const state = reactive(&#123;</span><br><span class="line">dayList: []</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">state.dayList.push(&#123;</span><br><span class="line">&#x27;className&#x27;: &#x27;NumCenter&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">for (let i = 0; i &lt; 30; i++) &#123;</span><br><span class="line">time.setDate(time.getDate() + 1)</span><br><span class="line">state.dayList.push(&#123;</span><br><span class="line">&#x27;className&#x27;: &#x27;Num&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const classChange = (index) =&gt; &#123;</span><br><span class="line">state.dayList.forEach((item) =&gt; &#123;</span><br><span class="line">item.className = &quot;Num&quot;; // 先将所有日期的 className 属性设置为 Num</span><br><span class="line">&#125;);</span><br><span class="line">state.dayList[index].className = &quot;NumCenter&quot;; // 将点击的日期的 className 属性设置为 NumCenter</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="前端获取不到初值的原因"><a href="#前端获取不到初值的原因" class="headerlink" title="前端获取不到初值的原因"></a>前端获取不到初值的原因</h3><p>使用中经常出现，赋不上初值的问题，需要在刷新时才能获取到数据，在通过打印后发现，网络请求返回前，初值已经赋上，解决方法就是在需要该数据的前一个页面就要加上请求语句，获取到所有的数据（clock的bug QAQ）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const home = () =&gt; &#123;</span><br><span class="line">uni.request(&#123;</span><br><span class="line">url: &#x27;http://localhost:8181/user/home&#x27;,</span><br><span class="line">method: &quot;POST&quot;,</span><br><span class="line">data: user.data.userEmail,</span><br><span class="line">success: (res) =&gt; &#123;</span><br><span class="line">if (res.data.code != null) &#123;</span><br><span class="line">uni.redirectTo(&#123;</span><br><span class="line">url: &#x27;../../pages/Login/Login&#x27;</span><br><span class="line">&#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">uni.redirectTo(&#123;</span><br><span class="line">url: &#x27;../../pages/Sign/Sign&#x27;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">        //后续需要的tag数据</span><br><span class="line">uni.request(&#123;</span><br><span class="line">url: &#x27;http://localhost:8181/tag/get&#x27;,</span><br><span class="line">method: &quot;POST&quot;,</span><br><span class="line">data: user.data.userEmail,</span><br><span class="line">success: (res) =&gt; &#123;</span><br><span class="line">console.log(res)</span><br><span class="line">tag.data.tagName = res.data.data[0].tagName</span><br><span class="line">tag.data.tagDescribe = res.data.data[0].tagDescribe</span><br><span class="line">tag.data.tagPoint = res.data.data[0].tagPoint</span><br><span class="line">tag.data.tagHour = res.data.data[0].tagHour</span><br><span class="line">tag.data.tagMinute = res.data.data[0].tagMinute</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">        //此处的time.data.remainingTime其实还是零，原因就是上面所说的，所以在下一个页面有相同的语句，获取到time.data.remainingTime的初值，此处因为在需要数据的页面前有两个页面才能完成需求，不知道有没有其他办法来优化</span><br><span class="line">time.data.remainingTime = (tag.data.tagHour * 3600) + (tag.data.tagMinute * 60) + tag.data.tagSecond</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/posts/ee69e452.html"/>
      <url>/posts/ee69e452.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h2><p>开启 Flexbox 布局：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: flex;</span><br></pre></td></tr></table></figure><p>主轴（水平轴）对齐方式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">justify-content</span>: flex-start;<span class="comment">/*默认*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: center;<span class="comment">/*居中对齐*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: space-between;<span class="comment">/*两端对齐*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: flex-end <span class="comment">/*靠右对齐*/</span></span><br></pre></td></tr></table></figure><p>交叉轴（竖轴）对称方式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-items</span>: stretch; <span class="comment">/*默认,自动把子元素拉伸成容器的高度*/</span></span><br><span class="line"><span class="attribute">align-items</span>: flex-start; <span class="comment">/*靠上对齐，在交叉轴开始的最上方，可以看到子元素不再占满容器高度：*/</span></span><br><span class="line"><span class="attribute">align-items</span>: center; <span class="comment">/*居中对齐*/</span></span><br><span class="line"><span class="attribute">align-items</span>: flex-end; <span class="comment">/*靠下对齐：*/</span></span><br></pre></td></tr></table></figure><p>空间占比：</p><p>子元素可以通过设置<code>flex</code>属性来调整空间的占比，例如让 <code>flex2</code> 在水平方向上占据其他子元素的 2 倍大小，可以设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex1</span>,</span><br><span class="line"><span class="selector-class">.flex3</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex2</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收缩(当它们的宽度超过 flex 容器之后，该如何进行收缩)：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*flex-grow*/</span></span><br><span class="line"><span class="selector-class">.flex2</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;<span class="comment">/*其它的元素保持默认的宽度（即内容的宽度，flex-basis 为 auto)，那么 .flex2 就会自动增长并占据整个剩余空间*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*flex-shrink*/</span></span><br><span class="line"><span class="selector-class">.flex1</span>,</span><br><span class="line"><span class="selector-class">.flex3</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex2</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">2</span>;</span><br><span class="line">&#125;<span class="comment">/*通过 flex-shrink 来设置一个数值，数值越大，收缩程度也越大，比如flex-shrink: 2的元素会比flex-shrink:1收缩的值大 2 倍：*/</span></span><br></pre></td></tr></table></figure><p>flex属性:</p><p>说完<code>flex-grow</code>、<code>flex-shrink</code> 和 <code>flex-basis</code> 之后，再来看一下这个 <code>flex</code> 属性，它其实是前边三个属性的缩写，默认值是 <code>0 1 auto</code>，即不增长，但收缩，收缩比例为 1，flex-basis 为 auto，即取自用户定义的宽度或内容的宽度。</p><p>换行：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-wrap</span>: nowrap; <span class="comment">/*默认，不换行*/</span></span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap; <span class="comment">/*来让元素进行折行排列，使得每行的元素都不超过容器的宽度*/</span></span><br></pre></td></tr></table></figure><p>开启换行后，控制各行布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-content</span>: center; <span class="comment">/*居中对齐*/</span></span><br><span class="line"><span class="attribute">align-content</span>: space-between; <span class="comment">/*两端对齐*/</span></span><br></pre></td></tr></table></figure><h2 id="html基础"><a href="#html基础" class="headerlink" title="html基础"></a>html基础</h2><h3 id="ol、ul、li"><a href="#ol、ul、li" class="headerlink" title="ol、ul、li"></a>ol、ul、li</h3><p>li标签（全称为list item）是HTML语言中的一个元素标签。属于列表标签。以 li 开始 &#x2F;li 结束，li 标签可用在<strong>有序</strong>列表 (ol) 和<strong>无序</strong>列表 (ul) 中。</p><p>li标签则用的范围<strong>比较少</strong>，通常用在<strong>导航栏、列表栏、图片</strong>显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>有序列表：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>打开冰箱门<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>把大象放进去<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>关上冰箱门<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>无序列表：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>雪碧<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>可乐<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>凉茶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>去除无需列表前的原点</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dl、dt、dd"><a href="#dl、dt、dd" class="headerlink" title="dl、dt、dd"></a>dl、dt、dd</h3><p>只有当你<strong>需要对列表项进行解释</strong>的时候, 你才需要 使用 dl, 否则就没有必要使用dl, 或者说使用dl就不是那么 恰当了，主要是html要求最好见名知意.</p><p>dt（define list title）是用于生成定义列表中各列表项的标题，重复使用可以定义多个列表项的标题。</p><ul><li>dl —— define list——定义列表</li><li>dt—— define list title —— 用于生成定义列表中各列表项的标题，重复使用可以定义多个列表项的标题。用来创建列表中的上层项目。</li><li>dd —— define list define —— 用于生成定义列表各列表项的说明文字段，重复使用可以定义多个说明文字段。dd是对应dt的简短说明或解释。用来创建列表中最下层项目。默认存在两格缩进</li></ul><p>dl 列表中有较为强烈的“描述”、“解释”、“补充”意义。 dt 和 dd 有明显的逻辑关系，dd 从属于 dt，dd 中的内容是对 dt 的“描述”、“解释”、“补充”。另外，dd 之间虽然是平行关系，但是其描述的内容是多角度的，不同于单纯的 li。</p><h3 id="div"><a href="#div" class="headerlink" title="div"></a>div</h3><p>div标签总是从新行开始显示，它包含的元素会自动换行；span标签是行内元素，拥有行内元素的特点。但是可以通过flex改变div的作为块状元素的属性</p><h3 id="span"><a href="#span" class="headerlink" title="span"></a>span</h3><p>span标签元素会和其他标签元素会在一行显示</p><p>使用 span来组合行内元素，以便通过样式来格式化它们。</p><p>span标签通常使用来将文本的一部分或者文档的一部分独立出来，从而对独立出来的内容设置单独的样式。span本身没有任何属性，也没有固定的格式表现，当对它应用样式时，它会产生视觉上的变化。</p><h3 id="href-x3D-”-”与javascript：void（0）的区别"><a href="#href-x3D-”-”与javascript：void（0）的区别" class="headerlink" title="href&#x3D;”#”与javascript：void（0）的区别"></a><strong>href&#x3D;”#”与javascript：void（0）的区别</strong></h3><p>href&#x3D;”#”方法其实也是空连接的意思，但是点击之后会自动跳转到页面的最上面，因为用了这个方法就相当于点击了一个锚记，但是这个锚记又没写ID，所以就默认跳转到页面顶部。从上面的例子也可以看出，当要执行某些处理，但是不整体刷新页面的情况下，可以使用void(0),但是在需要对页面进行refresh的情况下，那就要仔细了。<br>其实我们可以这样用，这句话会进行一次submit操作。那什么情况下用void(0)比较多呢，无刷新，当然是Ajax了，看一下Ajax的web页面的话，一般都会看到有很多的void(0)，所以在使用void(0)之前,最好先想一想,这个页面是否需要整体刷新。<br>说白了，href&#x3D;”#”这种形式会整体刷新页面，而href&#x3D;”javascript:void(0)” 则不会。所以如果是空连接的话，还是推荐javascript:void(0)。</p><p>而且href&#x3D;”javascript:void(0)”最好写在@click&#x3D;”nextChapter(data.chapterInfo.bookId)”<strong>后面</strong>这样就不会导致一直在最底端的情况QAQ</p><h2 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h2><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><p>id 选择器：要选择具有特定 id 的元素，请写一个井号（＃），后跟该元素的 id。</p><p>类选择器：如需选择拥有特定 class 的元素，请写一个句点（.）字符，后面跟类名。</p><p>伪类选择器、伪元素选择器</p><h4 id="CSS-组合器"><a href="#CSS-组合器" class="headerlink" title="CSS 组合器"></a>CSS 组合器</h4><p>后代选择器<br>后代选择器匹配属于指定元素后代的所有元素。</p><p>子选择器<br>子选择器匹配属于指定元素子元素的所有元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-content</span>: center; <span class="comment">/*居中对齐*/</span></span><br><span class="line"><span class="attribute">align-content</span>: space-between; <span class="comment">/*两端对齐*/</span></span><br></pre></td></tr></table></figure><p>nth-child(n) 选择器</p><p>:nth-child(<em>n</em>) 选择器匹配属于其父元素的第 N 个子元素，不论元素的类型</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el-menu-item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">260px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS类"><a href="#CSS类" class="headerlink" title="CSS类"></a>CSS类</h3><p>CSS 伪类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 未访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FF0000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 已访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00FF00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标悬停链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FF00FF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 已选择的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0000FF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>CSS 伪元素：</p><p>::first-line 伪元素<br>::first-line 伪元素用于向文本的首行添加特殊样式。</p><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>当我们在HTML中定义一个元素时，它会自动创建一个盒子，这个盒子包含了这个元素的所有内容（包括文本、图片等）以及一些与元素相关的属性（例如宽度、高度、边框、内边距和外边距）。CSS盒子模型描述了这个盒子是如何构造的。</p><p>在CSS盒子模型中，一个盒子有4个部分：</p><p>1.内容区（Content）：元素的文本内容、图像和其他子元素都在这里。</p><p>2.内边距区（Padding）：这是内容区和边框之间的空间，可以使用padding属性设置。</p><p>3.边框区（Border）：边框围绕着内边距和内容区。可以使用border属性设置。</p><p>4.外边距区（Margin）：这是边框和周围元素之间的空间。可以使用margin属性设置。</p><p>这些部分的宽度和高度会受到相应的属性的影响。例如，元素的宽度&#x3D;左边距+左边框+左内边距+内容宽度+右内边距+右边框+右边距。</p><p>在默认的盒子模型中，盒子的宽度和高度不包括内边距和边框，只包括内容区。但是，我们可以通过CSS中的box-sizing属性来改变这种行为。例如，将box-sizing设置为border-box可以让盒子的宽度和高度包括内边距和边框。</p><p>一般推荐将box-sizing属性设置为border-box</p><h2 id="Vue相关"><a href="#Vue相关" class="headerlink" title="Vue相关"></a>Vue相关</h2><p>element-ui的样式可以通过F12看到类名直接改到喜欢的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el-menu--horizontal</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#79bbff</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>element-ui菜单跳转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;Nav&quot;&gt;</span><br><span class="line">        &lt;el-menu :router=&#x27;true&#x27; class=&quot;el-menu-demo&quot; mode=&quot;horizontal&quot; &gt;</span><br><span class="line">            &lt;el-menu-item index=&quot;/&quot;&gt;首页&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index=&quot;/about&quot; &gt;我的书架&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;!--router=&#x27;true&#x27;必须开启 index=&quot;路由的地址&quot;--&gt;</span><br><span class="line">        &lt;/el-menu&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>el-button的引用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*&lt;el-button type=&quot;primary&quot; round&gt;Primary&lt;/el-button&gt;在写css时实际上应该用类选择器*/</span></span><br><span class="line"><span class="selector-class">.lijizhuce-content</span>&gt;<span class="selector-class">.el-button</span>&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>element-plus el-button图标的添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top-button&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">style</span>=<span class="string">&quot;vertical-align: middle&quot;</span>&gt;</span>/**/</span><br><span class="line">            <span class="tag">&lt;<span class="name">Search</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;vertical-align: middle&quot;</span>&gt;</span> 搜索 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/css-button.png" alt="css-button"></p><p>element-plus el-input图标的添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;input&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入验证码&quot;</span> <span class="attr">clearable</span> <span class="attr">prefix-icon</span>=<span class="string">&quot;Message&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- prefix-icon是在前面的图标，suffix-icon是在后面的图标 --&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/css-input.png" alt="css-input"></p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="小说项目"><a href="#小说项目" class="headerlink" title="小说项目"></a>小说项目</h3><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/css-%E6%8E%92%E7%89%88%E7%BB%83%E4%B9%A0.png" alt="css-排版练习"></p><p>首先是分析html元素首先是外层有一个整体的div并且存在boder,内部排布需要flex布局，且需要分成两排，使用flex-wrap: wrap换行,</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hot-list</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">700px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">350px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#c3dfea</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap; <span class="comment">/*来让元素进行折行排列，使得每行的元素都不超过容器的宽度*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后观察内部可以分为图片以及介绍两大板块包含在一起所以还有一个div，因为两个板块在同一条线上，所以此处的div也需要flex布局,同时考虑到美观层面，将每一个书籍的左侧和上部增加间距，再加上整体的局部增加了内间距刚好可以实现，全部书籍之间存在间隙，书籍与整体盒子之间也有一定的距离</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.itemList</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="图片板块"><a href="#图片板块" class="headerlink" title="图片板块:"></a>图片板块:</h4><p>作为图片外层的div可以与图片的尺寸相同，也可以像下面一样，多出一部分，省去了写magin，而且使用百分比（%）使得整体的布局更加清晰，但是要预留出书本详情的版块</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.items_img</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">45%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">158px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="图片："><a href="#图片：" class="headerlink" title="图片："></a>图片：</h5><p>按照两本书同一行的大小，进行width和height的尝试，这里不能使用百分比（%）的话，则是按照上一层div的大小来进行缩放，所以此处的height的值可以是100%，并无差别</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.items_img</span>&gt;<span class="selector-tag">a</span>&gt;<span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">116px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">158px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="书籍详情板块："><a href="#书籍详情板块：" class="headerlink" title="书籍详情板块："></a>书籍详情板块：</h4><p>确定板块的大小，同时也可以先指定好整体的字所需要的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.items_txt</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">52%</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: small;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="书名："><a href="#书名：" class="headerlink" title="书名："></a>书名：</h5><p>因为<dt>为行类型的标签，所以这里先指定好display为块状放置，以免和作者的名字处于同一个水平线上</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.home-bookName</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">font-size</span>: medium;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h5><p>intro为div，指定盒子的大小后，因为介绍的长度，所以将超出的部分直接隐藏，达到更好看的效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.intro</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适配练习"><a href="#适配练习" class="headerlink" title="适配练习"></a>适配练习</h3><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/%E9%80%82%E9%85%8D%E7%BB%83%E4%B9%A0.png" alt="适配练习"></p><p>该练习是因为在上面的小说项目之后，我发现不同设备无法进行适配，该练习是为了能够适配各种设备，相同的办法应该会经常用到</p><h4 id="HomeView部分："><a href="#HomeView部分：" class="headerlink" title="HomeView部分："></a>HomeView部分：</h4><p>最外层的部分直接用display：flex会导致整个页面随着缩放随意的变动，但是又需要达到整体处于界面水平中心的样式，所以选择在最外层再加一个div把整体包裹进去，再使用margin：0  auto；(使用这个样式必须要有width存在，否则水平居中的效果消失，同时在这个界面中width基本就确定了其他部分的width)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.home-center</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Navbar部分："><a href="#Navbar部分：" class="headerlink" title="Navbar部分："></a>Navbar部分：</h4><p>需要多加两个div，一个div和HomeView部分的思路是一样的固定width以及magin来实现水平居中，再在里面的子元素中使用display：flex来调整样式</p><p>另一个再加一个最外层的div来保证底层的颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Nav的Css样式 */</span></span><br><span class="line"><span class="selector-class">.el-menu-item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Nav</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Nav-center</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#79bbff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Nav-color</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#79bbff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Top部分"><a href="#Top部分" class="headerlink" title="Top部分"></a>Top部分</h4><p>最外层同样思路，内层的top-center要使用width: 100%;和height: 100%;保证与外层的top相同</p><p>其中headr里的min-width: 1100px;需要注意，否则header会随着缩放不断缩小，而里面的top则保持在1100px的width，那background-color就会有部分不一样</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 组件header里的Css样式 */</span></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">1100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.top</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.top-center</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="comment">/*居中对齐*/</span></span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="comment">/*居中对齐*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.input</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">342px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.top-a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.user</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.top-input</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>在最外层加上width: 1100px;和margin: 0 auto;保持水平居中，内层则使用flex布局，外层的width和height多使用具体的数值，内层的width和height多使用百分比，在部分元素因为缩放变样时，min-width可以很好的解决这个问题</p><h2 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h2><p>1、文字垂直居中：使line-height等于该区域的height</p><p>2、在写网页之前一般都需要去除各种的margin,padding防止边框的产生</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;<span class="comment">/*忽略边框的盒装模型*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、导航栏高度铺满网页</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“100vh”是指大小为“100”单位为“vh”的一个相对长度值；“vh”是css中的一个相对长度单位，是相对于视窗的高度，“100vh”就是指元素的高度等于当前浏览器的视窗高度，即浏览器内部的可视区域的高度大小</p><p> min-height 属性设置元素的最小高度。该属性值会对元素的高度设置一个最低限制。因此，元素可以比指定值高，但不能比其矮。不允许指定负值。</p><p>4、裁剪 div 元素中内容的左&#x2F;右边缘 - 如果溢出元素的内容区域的话</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">overflow-x</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、通过动态边长实现缩进导航栏</p><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/image-20221217214444893.png" alt="image-20221217214444893"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;HomeView&#x27;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    collapse() &#123;  // 点击收缩按钮触发</span><br><span class="line">      this.isCollapse = !this.isCollapse</span><br><span class="line">      if (this.isCollapse) &#123;  // 收缩</span><br><span class="line">        this.sideWidth = 64</span><br><span class="line">        this.collapseBtnClass = &#x27;el-icon-s-unfold&#x27;</span><br><span class="line">        this.logoTextShow = false</span><br><span class="line">      &#125; else &#123;   // 展开</span><br><span class="line">        this.sideWidth = 200</span><br><span class="line">        this.collapseBtnClass = &#x27;el-icon-s-fold&#x27;</span><br><span class="line">        this.logoTextShow = true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/image-20221217214451740.png" alt="image-20221217214451740"></p><p>6、将搜索栏input框与按钮button边框分开</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、内边距padding</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">5px</span> <span class="number">15px</span> <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">5px</span> <span class="number">15px</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span>;</span><br></pre></td></tr></table></figure><p>8、居中对齐元素<br>要使块元素（例如 <div> ）水平和垂直方向上都居中对齐，请使用 margin: auto;将某个元素在水平方向上居中对齐：margin: 0 auto;</p><p>9、居中对齐文本<br>如果仅需在元素内居中文本，请使用 text-align: center;</p><p>10、居中对齐图像<br>如需居中图像，请将左右外边距设置为 auto，并将其设置为块元素：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">  <span class="attribute">margin-right</span>: auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>11、整体放大缩小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleX</span>(x);         <span class="comment">/*沿X轴方向缩放*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleY</span>(y);         <span class="comment">/*沿Y轴方向缩放*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(x, y);        <span class="comment">/*沿X轴和Y轴同时缩放*/</span></span><br></pre></td></tr></table></figure><p>12、在遇到利用width无法缩放的情况时(可能是子元素的大小大于父元素)可以使用min-width或者max-width</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el-menu-item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">260px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>13、border</p><p>border（可加方向）: border-width（可加auto（方便居中），只写两个则是先上下&#x2F;再左右距离）  border-style（dotted（点状） solid（实线） double（双线） dashed（虚线）; ）  border-color;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tuijian-list</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">5px</span> solid red;<span class="comment">/*边框的宽度5px,边框的样式实线,边框的颜色红色*/</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>14、段落样式：</p><p>大小：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.footer-content</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: small;<span class="comment">/*也可以是5px、80%*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行高：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.footer-content</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;<span class="comment">/*也可以是90%*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文字居中（不用margin来凑）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.footer</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>项目流程</title>
      <link href="/posts/2a16d212.html"/>
      <url>/posts/2a16d212.html</url>
      
        <content type="html"><![CDATA[<h1 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>在本项目中前端的页面都采用了vue的渐进式开发，依托后端来启动所有的项目，且采用了element-ui所提供的样式，使得页面更加整洁美观</p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>在项目的后端使用maven提供专业化的目录，以及进行项目的打包和快捷的插件管理，整体都使用lombok的注解式开发，再以spring-boot作为项目的主框架，加快项目的开发应用，也更方便对接mysql的数据库</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>而在数据库方面，使用了国人所升级的MybatisPlus，再在controller层实现业务逻辑，通过@RequestMapping来接受页面所发送的ajax请求以及json数据，同时利用DTO将多个字段封装到一个对象里，实现对于数据库基本的增删改查，最后在前端回显所修改的数据，在这整个用户交互的流程中，filter层会保持拦截用户所不该访问的页面，也会使用Redis来进行缓存优化，来达到更好的用户体验</p><h2 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h2><p>而在部署项目上采用腾讯云的云服务器，以及Git仓库来管理历史版本的代码以及团队协作，在Linux系统上进行部署，保证项目的安全性，再通过SSH连接工具就可以实现从本地连接到远程的Linux系统服务器</p><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/default_top_img.jpg" alt="壁纸"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
