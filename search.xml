<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue</title>
      <link href="/posts/f8e09374.html"/>
      <url>/posts/f8e09374.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="Vuecil脚手架安装"><a href="#Vuecil脚手架安装" class="headerlink" title="Vuecil脚手架安装"></a>Vuecil脚手架安装</h2><p>依次安装Node.js、Vue、Vuecli</p><p>安装脚手架</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install -g <span class="variable">@vue</span>/cli</span><br></pre></td></tr></table></figure><p>检查版本</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vue</span> --version</span><br></pre></td></tr></table></figure><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vue</span> create hello-world</span><br></pre></td></tr></table></figure><h2 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vue</span> ui</span><br></pre></td></tr></table></figure><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/image-20221216142020026.png" alt="image-20221216142020026"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── node_modules </span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico: 页签图标</span><br><span class="line">│   └── index.html: 主页面</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets: 存放静态资源</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   │── component: 存放组件</span><br><span class="line">│   │   └── HelloWorld.vue</span><br><span class="line">│   │── App.vue: 汇总所有组件</span><br><span class="line">│   │── main.js: 入口文件</span><br><span class="line">├── .gitignore: git版本管制忽略的配置</span><br><span class="line">├── babel.config.js: babel的配置文件</span><br><span class="line">├── package.json: 应用包配置文件 </span><br><span class="line">├── README.md: 应用描述文件</span><br><span class="line">├── package-lock.json：包版本控制文件</span><br></pre></td></tr></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>组件是.vue的单文件组件，实现代码复用，以及理顺css以及js之间的关系</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>Vue为只有一个index.html作为单页面，会用路由实现多页面的跳转，路由则将路径和页面进行映射</p><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(53).png" alt="屏幕截图(53)"></p><p>路由：router包下面写index.js文件并附上path和name(<strong>注意！！！path: ‘&#x2F;‘也就代表了网页的第一个页面是什么</strong>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomeView</span> <span class="keyword">from</span> <span class="string">&#x27;../views/HomeView.vue&#x27;</span><span class="comment">/* 1、引入AboutView.vue，一般不使用这种 */</span> </span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeView</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">    <span class="comment">// route level code-splitting</span></span><br><span class="line">    <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">    <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="comment">/* 2、引入AboutView.vue，一般建议使用这种 */</span> <span class="string">&#x27;../views/AboutView.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>路由在组件中的使用：<router-link to></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;router-link :to=&quot;&#123; name: &#x27;home&#x27; &#125;&quot;&gt;首页&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">  &lt;router-link :to=&quot;&#123; name: &#x27;bookclass&#x27; &#125;&quot;&gt; 全部作品 &lt;/router-link&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;router-link :to=&quot;&#123; name: &#x27;bookRank&#x27; &#125;&quot;&gt;排行榜&lt;/router-link&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>当你点击 <code>&lt;router-link&gt;</code> 时， <code>router.push</code> 方法会在内部调用，所以说，点击<code>&lt;router-link :to=&quot;...&quot;&gt;</code> 等同于调用 <code>router.push(...)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 字符串</span><br><span class="line">router.push(&#x27;home&#x27;)</span><br><span class="line"> </span><br><span class="line">// 对象</span><br><span class="line">this.$router.push(&#123;path: &#x27;/login?url=&#x27; + this.$route.path&#125;);</span><br><span class="line"> </span><br><span class="line">// 命名的路由</span><br><span class="line">router.push(&#123; name: &#x27;user&#x27;, params: &#123; userId: 123 &#125;&#125;)</span><br></pre></td></tr></table></figure><p>路由在父组件App.vue的<router-view></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default  &#123;</span><br><span class="line">  name:  &#x27;App&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在views包下写主要页面，再在如Home.vue里引入components(当然组件自己也可以引用自己)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">    &lt;Top /&gt;</span><br><span class="line">    &lt;Navbar /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>引用组件时要记得注册组件,并引入文件位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import Navbar from &quot;@/components/common/Navbar&quot;;</span><br><span class="line">import Top from &quot;@/components/common/Top&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Header&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Navbar,</span><br><span class="line">    Top,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Css的引入"><a href="#Css的引入" class="headerlink" title="Css的引入"></a>Css的引入</h2><p>在assets包（静态资源管理包）下建立css包并命名global.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后在main.js中引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/assets/css/global.css&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="Vue3与Vue2的不同"><a href="#Vue3与Vue2的不同" class="headerlink" title="Vue3与Vue2的不同"></a>Vue3与Vue2的不同</h2><h3 id="Vite脚手架的安装"><a href="#Vite脚手架的安装" class="headerlink" title="Vite脚手架的安装"></a>Vite脚手架的安装</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line"><span class="attribute">npm</span> init vite-app vue3_test-vite</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line">cd vue3_test-vite</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="分析文件目录"><a href="#分析文件目录" class="headerlink" title="分析文件目录"></a>分析文件目录</h3><h4 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h4><p>Vue2项目的main.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  render: h =&gt; h(App),</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><p>我们再来看看Vue3项目中的main.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">createApp(App).mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><p>分析一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 引入的不再是Vue构造函数了，引入的是一个名为createApp的工厂函数</span><br><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">// 创建应用实例对象——app(类似于之前Vue2中的vm，但app比vm更“轻”)</span><br><span class="line">const app = createApp(App)</span><br><span class="line">console.log(app)</span><br><span class="line">// 挂载</span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><h4 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h4><p>我们再来看看组件</p><p>在<code>template</code>标签里可以没有根标签了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- Vue3组件中的模板结构可以没有根标签 --&gt;</span><br><span class="line">&lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot;&gt;</span><br><span class="line">&lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="setup函数"><a href="#setup函数" class="headerlink" title="setup函数"></a>setup函数</h3><p>代替了Vue2的data（）以及method</p><h2 id="import-ref-from-‘vue’"><a href="#import-ref-from-‘vue’" class="headerlink" title="import { ref } from ‘vue’"></a>import { ref } from ‘vue’</h2><h3 id="一、ref函数的引入"><a href="#一、ref函数的引入" class="headerlink" title="一、ref函数的引入"></a><strong>一、ref函数的引入</strong></h3><p>　　import { ref } from ‘vue’</p><h3 id="二、什么是-ref"><a href="#二、什么是-ref" class="headerlink" title="二、什么是 ref"></a><strong>二、什么是 ref</strong></h3><p>​1、ref 和 reactive 一样都是实现响应式数据的方法</p><p>​2、由于 reactive 必须传递一个对象，所以导致我们再企业开发中，如果我们只想让某个变量实现响应式的时候非常麻烦，所以 Vue3 就提供了 ref 方法，实现对简单值的监听</p><h3 id="三、ref-的本质"><a href="#三、ref-的本质" class="headerlink" title="三、ref 的本质"></a><strong>三、ref 的本质</strong></h3><p>​<strong>const input &#x3D; ref(‘’)</strong></p><p>　　ref 底层的本质还是 reactive 系统会自动根据我们给 ref 传入的值将他转换成 ref(xx) —— reactive({value: xx})</p><h3 id="四、ref-注意点"><a href="#四、ref-注意点" class="headerlink" title="四、ref 注意点"></a><strong>四、ref 注意点</strong></h3><p>　1、在 VUE 的模板中使用 ref 的值不需要通过 value 获取 （Vue 会通过自动给 ref 的值加上 .value）</p><p>　2、在 js 中使用 ref 的值必须使用 .value 获取</p><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><p><strong>在v-for中使用字符串</strong></p><p>string：data中的源数据字符串，</p><p>str：data数据string字符串的每一个，</p><p>index：string字符串索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 这里表示被vue控制的区域 --&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;(str, index) in string&quot;&gt;</span><br><span class="line">            &#123;&#123; index &#125;&#125;---&#123;&#123; str &#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#app&#x27;, // 控制id为app的元素</span><br><span class="line">        data: &#123;</span><br><span class="line">            // 存放所需要的数据</span><br><span class="line">            string: &#x27;abcdefgh&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/v-for.png"></p><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;sliderContent&quot;&gt;</span><br><span class="line">          &lt;dl class=&quot;scBigImg&quot; id=&quot;carouseBig&quot;&gt;</span><br><span class="line">            &lt;dd v-for=&quot;(item, index) in sliderContent&quot; :key=&quot;index&quot; :class=&quot;&#123; on: index == 0 &#125;&quot;&gt;</span><br><span class="line">                &lt;!-- 点击触发bookDetail函数，传入sliderContent.bookid,并在最后使用push来跳转到小说的详情页 --&gt;</span><br><span class="line">              &lt;a href=&quot;javascript:void(0)&quot; @click=&quot;bookDetail(item.bookId)&quot;&gt;</span><br><span class="line">                &lt;img :src=&quot;`$&#123;imgBaseUrl&#125;` + `$&#123;item.picUrl&#125;`&quot; :alt=&quot;item.bookName&quot;</span><br><span class="line">                  onerror=&quot;this.src=&#x27;default.gif&#x27;;this.onerror=null&quot; /&gt;</span><br><span class="line">              &lt;/a&gt;</span><br><span class="line">            &lt;/dd&gt;</span><br><span class="line">          &lt;/dl&gt;</span><br><span class="line">    &lt;/div&gt;    </span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>其中</p><p>sliderContent：data中的源数据数组（会从数据库中获得），</p><p>item：data数据list数组的别名，</p><p>index：list数组索引,即为数据数字的多少</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/posts/78cea6d8.html"/>
      <url>/posts/78cea6d8.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>1、文字垂直居中：使line-height等于该区域的height</p><p>2、在写网页之前一般都需要去除各种的margin,padding防止边框的产生</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;<span class="comment">/*忽略边框的盒装模型*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、导航栏高度铺满网页</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“100vh”是指大小为“100”单位为“vh”的一个相对长度值；“vh”是css中的一个相对长度单位，是相对于视窗的高度，“100vh”就是指元素的高度等于当前浏览器的视窗高度，即浏览器内部的可视区域的高度大小</p><p> min-height 属性设置元素的最小高度。该属性值会对元素的高度设置一个最低限制。因此，元素可以比指定值高，但不能比其矮。不允许指定负值。</p><p>4、裁剪 div 元素中内容的左&#x2F;右边缘 - 如果溢出元素的内容区域的话</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">overflow-x</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、通过动态边长实现缩进导航栏</p><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/image-20221217214444893.png" alt="image-20221217214444893"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;HomeView&#x27;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    collapse() &#123;  // 点击收缩按钮触发</span><br><span class="line">      this.isCollapse = !this.isCollapse</span><br><span class="line">      if (this.isCollapse) &#123;  // 收缩</span><br><span class="line">        this.sideWidth = 64</span><br><span class="line">        this.collapseBtnClass = &#x27;el-icon-s-unfold&#x27;</span><br><span class="line">        this.logoTextShow = false</span><br><span class="line">      &#125; else &#123;   // 展开</span><br><span class="line">        this.sideWidth = 200</span><br><span class="line">        this.collapseBtnClass = &#x27;el-icon-s-fold&#x27;</span><br><span class="line">        this.logoTextShow = true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/image-20221217214451740.png" alt="image-20221217214451740"></p><p>5、将搜索栏input框与按钮button边框分开</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、内边距padding</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">5px</span> <span class="number">15px</span> <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">5px</span> <span class="number">15px</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span>;</span><br></pre></td></tr></table></figure><p>7、id 选择器：要选择具有特定 id 的元素，请写一个井号（＃），后跟该元素的 id。</p><p>类选择器：如需选择拥有特定 class 的元素，请写一个句点（.）字符，后面跟类名。</p><p>伪类选择器、伪元素选择器</p><p>8、div标签总是从新行开始显示，它包含的元素会自动换行；span标签是行内元素，拥有行内元素的特点。span标签元素会和其他标签元素会在一行显示</p><p>但是可以通过flex改变div的作为块状元素的属性</p><p>9、居中对齐元素<br>要使块元素（例如 <div> ）水平居中，请使用 margin: auto;。</p><p>居中对齐文本<br>如果仅需在元素内居中文本，请使用 text-align: center;</p><p>居中对齐图像<br>如需居中图像，请将左右外边距设置为 auto，并将其设置为块元素：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">  <span class="attribute">margin-right</span>: auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>10、CSS 伪类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 未访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FF0000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 已访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00FF00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标悬停链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FF00FF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 已选择的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0000FF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>CSS 伪元素：</p><p>::first-line 伪元素<br>::first-line 伪元素用于向文本的首行添加特殊样式。</p><p>11、CSS 组合器</p><p>后代选择器<br>后代选择器匹配属于指定元素后代的所有元素。</p><p>子选择器<br>子选择器匹配属于指定元素子元素的所有元素。</p><p>12、<strong>flex布局</strong></p><p>开启 Flexbox 布局：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: flex;</span><br></pre></td></tr></table></figure><p>主轴（水平轴）对齐方式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">justify-content</span>: flex-start;<span class="comment">/*默认*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: center;<span class="comment">/*居中对齐*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: space-between;、; <span class="comment">/*两端对齐*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: flex-end <span class="comment">/*靠右对齐*/</span></span><br></pre></td></tr></table></figure><p>交叉轴（竖轴）对称方式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-items</span>: stretch; <span class="comment">/*默认,自动把子元素拉伸成容器的高度*/</span></span><br><span class="line"><span class="attribute">align-items</span>: flex-start; <span class="comment">/*靠上对齐，在交叉轴开始的最上方，可以看到子元素不再占满容器高度：*/</span></span><br><span class="line"><span class="attribute">align-items</span>: center; <span class="comment">/*居中对齐*/</span></span><br><span class="line"><span class="attribute">align-items</span>: flex-end; <span class="comment">/*靠下对齐：*/</span></span><br></pre></td></tr></table></figure><p>空间占比：</p><p>子元素可以通过设置<code>flex</code>属性来调整空间的占比，例如让 <code>flex2</code> 在水平方向上占据其他子元素的 2 倍大小，可以设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex1</span>,</span><br><span class="line"><span class="selector-class">.flex3</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex2</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收缩(当它们的宽度超过 flex 容器之后，该如何进行收缩)：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*flex-grow*/</span></span><br><span class="line"><span class="selector-class">.flex2</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;<span class="comment">/*其它的元素保持默认的宽度（即内容的宽度，flex-basis 为 auto)，那么 .flex2 就会自动增长并占据整个剩余空间*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*flex-shrink*/</span></span><br><span class="line"><span class="selector-class">.flex1</span>,</span><br><span class="line"><span class="selector-class">.flex3</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex2</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">2</span>;</span><br><span class="line">&#125;<span class="comment">/*通过 flex-shrink 来设置一个数值，数值越大，收缩程度也越大，比如flex-shrink: 2的元素会比flex-shrink:1收缩的值大 2 倍：*/</span></span><br></pre></td></tr></table></figure><p>flex:</p><p>说完<code>flex-grow</code>、<code>flex-shrink</code> 和 <code>flex-basis</code> 之后，再来看一下这个 <code>flex</code> 属性，它其实是前边三个属性的缩写，默认值是 <code>0 1 auto</code>，即不增长，但收缩，收缩比例为 1，flex-basis 为 auto，即取自用户定义的宽度或内容的宽度。</p><p>换行：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-wrap</span>: nowrap; <span class="comment">/*默认，不换行*/</span></span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap; <span class="comment">/*来让元素进行折行排列，使得每行的元素都不超过容器的宽度*/</span></span><br></pre></td></tr></table></figure><p>开启换行后，控制各行布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-content</span>: center; <span class="comment">/*居中对齐*/</span></span><br><span class="line"><span class="attribute">align-content</span>: space-between; <span class="comment">/*两端对齐*/</span></span><br></pre></td></tr></table></figure><p>13、<ol><ul><li></p><li>标签（全称为list item）是HTML语言中的一个元素标签。属于列表标签。以<li>开始</li>结束，<li> 标签可用在**有序**列表 (<ol>) 和**无序**列表 (<ul>) 中。<li>标签则用的范围**比较少**，通常用在**导航栏、列表栏、图片**显示。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>有序列表：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>打开冰箱门<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>把大象放进去<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>关上冰箱门<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>无序列表：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>雪碧<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>可乐<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>凉茶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>去除无需列表前的原点</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>14、<dl>、<dt>、<dd></p><p>只有当你<strong>需要对列表项进行解释</strong>的时候, 你才需要 使用 dl, 否则就没有必要使用dl, 或者说使用dl就不是那么 恰当了，主要是html要求最好见名知意.</p><p>dt（define list title）是用于生成定义列表中各列表项的标题，重复使用可以定义多个列表项的标题。</p><ul><li>dl —— define list——定义列表</li><li>dt—— define list title —— 用于生成定义列表中各列表项的标题，重复使用可以定义多个列表项的标题。用来创建列表中的上层项目。</li><li>dd —— define list define —— 用于生成定义列表各列表项的说明文字段，重复使用可以定义多个说明文字段。dd是对应dt的简短说明或解释。用来创建列表中最下层项目。默认存在两格缩进</li></ul><p>dl 列表中有较为强烈的“描述”、“解释”、“补充”意义。 dt 和 dd 有明显的逻辑关系，dd 从属于 dt，dd 中的内容是对 dt 的“描述”、“解释”、“补充”。另外，dd 之间虽然是平行关系，但是其描述的内容是多角度的，不同于单纯的 li。</p><p>15、整体放大缩小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleX</span>(x);         <span class="comment">/*沿X轴方向缩放*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleY</span>(y);         <span class="comment">/*沿Y轴方向缩放*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(x, y);        <span class="comment">/*沿X轴和Y轴同时缩放*/</span></span><br></pre></td></tr></table></figure><p>16、在遇到利用width无法缩放的情况时(可能是子元素的大小大于父元素)可以使用min-width或者max-width</p><p>17、nth-child(n) 选择器</p><p>:nth-child(<em>n</em>) 选择器匹配属于其父元素的第 N 个子元素，不论元素的类型</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el-menu-item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">260px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>18、element-ui的样式可以通过F12看到类名直接改到喜欢的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el-menu--horizontal</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#79bbff</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>19、element-ui菜单跳转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;Nav&quot;&gt;</span><br><span class="line">        &lt;el-menu :router=&#x27;true&#x27; class=&quot;el-menu-demo&quot; mode=&quot;horizontal&quot; &gt;</span><br><span class="line">            &lt;el-menu-item index=&quot;/&quot;&gt;首页&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index=&quot;/about&quot; &gt;我的书架&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;!--router=&#x27;true&#x27;必须开启 index=&quot;路由的地址&quot;--&gt;</span><br><span class="line">        &lt;/el-menu&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>20、border</p><p>border（可加方向）: border-width（可加auto（方便居中），只写两个则是先上下&#x2F;再左右距离）  border-style（dotted（点状） solid（实线） double（双线） dashed（虚线）; ）  border-color;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tuijian-list</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">5px</span> solid red;<span class="comment">/*边框的宽度5px,边框的样式实线,边框的颜色红色*/</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>21、<strong>href&#x3D;”#”与javascript：void（0）的区别</strong></p><p>href&#x3D;”#”方法其实也是空连接的意思，但是点击之后会自动跳转到页面的最上面，因为用了这个方法就相当于点击了一个锚记，但是这个锚记又没写ID，所以就默认跳转到页面顶部。从上面的例子也可以看出，当要执行某些处理，但是不整体刷新页面的情况下，可以使用void(0),但是在需要对页面进行refresh的情况下，那就要仔细了。<br>其实我们可以这样用，这句话会进行一次submit操作。那什么情况下用void(0)比较多呢，无刷新，当然是Ajax了，看一下Ajax的web页面的话，一般都会看到有很多的void(0)，所以在使用void(0)之前,最好先想一想,这个页面是否需要整体刷新。<br>说白了，href&#x3D;”#”这种形式会整体刷新页面，而href&#x3D;”javascript:void(0)” 则不会。所以如果是空连接的话，还是推荐javascript:void(0)。</p><p>22、段落样式：</p><p>大小：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.footer-content</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: small;<span class="comment">/*也可以是5px、80%*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行高：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.footer-content</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;<span class="comment">/*也可以是90%*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文字居中（不用margin来凑）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.footer</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>23、<el-button type="primary" round>Primary</el-button>在写css时实际上应该用类选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.lijizhuce-content</span>&gt;<span class="selector-class">.el-button</span>&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>24、<span></p><p>使用 <span> 来组合行内元素，以便通过样式来格式化它们。</p><p>span标签通常使用来将文本的一部分或者文档的一部分独立出来，从而对独立出来的内容设置单独的样式。span本身没有任何属性，也没有固定的格式表现，当对它应用样式时，它会产生视觉上的变化。</p><p>25、element-plus el-button图标的添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top-button&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">style</span>=<span class="string">&quot;vertical-align: middle&quot;</span>&gt;</span>/**/</span><br><span class="line">            <span class="tag">&lt;<span class="name">Search</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;vertical-align: middle&quot;</span>&gt;</span> 搜索 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/css-button.png" alt="css-button"></p><p>26、element-plus el-input图标的添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;input&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入验证码&quot;</span> <span class="attr">clearable</span> <span class="attr">prefix-icon</span>=<span class="string">&quot;Message&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- prefix-icon是在前面的图标，suffix-icon是在后面的图标 --&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/css-input.png" alt="css-input"></p><p>27、较复杂排版练习<img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/css-%E6%8E%92%E7%89%88%E7%BB%83%E4%B9%A0.png" alt="css-排版练习"></p><p>首先是分析html元素首先是外层有一个整体的div并且存在boder,内部排布需要flex布局，且需要分成两排，使用flex-wrap: wrap换行,</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hot-list</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">700px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">350px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#c3dfea</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap; <span class="comment">/*来让元素进行折行排列，使得每行的元素都不超过容器的宽度*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后观察内部可以分为图片以及介绍两大板块包含在一起所以还有一个div，因为两个板块在同一条线上，所以此处的div也需要flex布局,同时考虑到美观层面，将每一个书籍的左侧和上部增加间距，再加上整体的局部增加了内间距刚好可以实现，全部书籍之间存在间隙，书籍与整体盒子之间也有一定的距离</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.itemList</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图片板块:</p><p>作为图片外层的div可以与图片的尺寸相同，也可以像下面一样，多出一部分，省去了写magin，而且使用百分比（%）使得整体的布局更加清晰，但是要预留出书本详情的版块</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.items_img</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">45%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">158px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图片：</p><p>按照两本书同一行的大小，进行width和height的尝试，这里不能使用百分比（%）的话，则是按照上一层div的大小来进行缩放，所以此处的height的值可以是100%，并无差别</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.items_img</span>&gt;<span class="selector-tag">a</span>&gt;<span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">116px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">158px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>书籍详情板块：</p><p>确定板块的大小，同时也可以先指定好整体的字所需要的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.items_txt</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">52%</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: small;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>书名：</p><p>因为<dt>为行类型的标签，所以这里先指定好display为块状放置，以免和作者的名字处于同一个水平线上</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.home-bookName</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">font-size</span>: medium;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>介绍：</p><p>intro为div，指定盒子的大小后，因为介绍的长度，所以将超出的部分直接隐藏，达到更好看的效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.intro</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot与Vue</title>
      <link href="/posts/9ea13874.html"/>
      <url>/posts/9ea13874.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot与Vue"><a href="#SpringBoot与Vue" class="headerlink" title="SpringBoot与Vue"></a>SpringBoot与Vue</h1><h2 id="SpringBoot项目建立"><a href="#SpringBoot项目建立" class="headerlink" title="SpringBoot项目建立"></a>SpringBoot项目建立</h2><p>1、新建项目，勾选依赖项,如：</p><p>Developer Tools中的Lombok(通过注释简化java开发)</p><p>Web中的Spring Web（相当于SpringMVC）</p><p>SQL中的Mybatis Framework(Mybatis的框架)和MySQL Driver（MySQL的驱动）</p><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/image-20221221201317655.png" alt="image-20221221201317655"></p><h2 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h2><p>resources下的application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db</span> <span class="comment">#?servierTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>通过Navicat创造新的MySQL数据库，并设计表格的名称，类型，以便于后端拿数据</p><h2 id="SpringBoot各级设计"><a href="#SpringBoot各级设计" class="headerlink" title="SpringBoot各级设计"></a>SpringBoot各级设计</h2><h3 id="Dao层编写"><a href="#Dao层编写" class="headerlink" title="Dao层编写"></a>Dao层编写</h3><p>数据访问对象，负责封装对数据库的CRUD操作，与数据库进行交互，一般是mapper写接口，xml文件写sql语句的形式。</p><p>包括<strong>entity层（实体层）</strong>编写以及<strong>Mapper层</strong>编写</p><h4 id="entity层（实体层）"><a href="#entity层（实体层）" class="headerlink" title="entity层（实体层）"></a>entity层（实体层）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@TableName：如果数据库的表名是home_book，但是实体类的名字不同，那么就需要借助TableName去做绑定  implements Serializable：一个对象序列化的接口，一个类只有实现了Serializable接口，它的对象才是可序列化的。因此如果要序列化某些类的对象，这些类就必须实现Serializable接口。而实际上，Serializable是一个空接口，没有什么具体内容，它的目的只是简单的标识一个类的对象可以被序列化。</span></span><br><span class="line"><span class="meta">@TableName(&quot;home_book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeBook</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"><span class="comment">//@TableId：主键专属比如数据中的表中的字段是id，但是实体类是userId，那么就需要在userId上打上这个注解，用法：设置主键映射 value映射主键字段的名字</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long bookId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mapper层"><a href="#Mapper层" class="headerlink" title="Mapper层"></a>Mapper层</h4><p>不要忘了在启动类下@MapperScan(“com.tec.vuepractice.dao.mapper”)，这样在包扫描的时候就不会漏掉mapper层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//extends BaseMapper&lt;HomeBook&gt;是mybaits-plus的组件，用来进行基础的增删改查</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HomeBookMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;HomeBook&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service层编写-Impl-实现层"><a href="#Service层编写-Impl-实现层" class="headerlink" title="Service层编写+Impl(实现层)"></a>Service层编写+Impl(实现层)</h3><p>更加关注业务逻辑，是业务处理层，将manager组合过的操作和业务逻辑组合在一起，再封装成业务操作。</p><h4 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HomeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询首页小说推荐列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 首页小说推荐列表的 rest 响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RestResp&lt;List&lt;HomeBookRespDto&gt;&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="serviceImpl层"><a href="#serviceImpl层" class="headerlink" title="serviceImpl层"></a>serviceImpl层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="comment">//implements:一个类通过关键字implements声明自己使用一个或者多个接口。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">HomeService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeBookCacheManager homeBookCacheManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RestResp&lt;List&lt;HomeBookRespDto&gt;&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RestResp.ok(homeBookCacheManager.listHomeBooks());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Control层编写"><a href="#Control层编写" class="headerlink" title="Control层编写"></a>Control层编写</h3><p>主要负责接受前台的数据和请求，并且在底层处理完之后把结果返回回去，一般不能写业务逻辑在这一层，因为第一造成了不可复用，第二以后的维护困难，第三这一层没有上层，如果给用户返回了奇怪的错误信息将会非常丑陋。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RestController：作用等同于@Controller + @ResponseBody</span></span><br><span class="line"><span class="comment">//@Controller：在一个类上添加@Controller注解，表明了这个类是一个控制器类</span></span><br><span class="line"><span class="comment">//@RestController：用其实是将java对象转为json格式的数据</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="comment">//@RequestMapping：映射URL</span></span><br><span class="line"><span class="meta">@RequestMapping(ApiRouterConsts.API_FRONT_HOME_URL_PREFIX)</span><span class="comment">//（/home）</span></span><br><span class="line"><span class="comment">//在springboot项目中，controller或service层中需要注入多个mapper接口或者另外的service接口，这时候代码中就会有多个@AutoWired注解，使得代码看起来非常的混乱。</span></span><br><span class="line"><span class="comment">//@RequiredArgsConstructor写在类上面可以代替@AutoWired注解，需要注意的是：在注入的时候需要用final定义，或者使用@notnull注解</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeController</span> &#123;</span><br><span class="line"><span class="comment">//注入service</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeService homeService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首页小说推荐查询接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;books&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RestResp&lt;List&lt;HomeBookRespDto&gt;&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> homeService.listHomeBooks();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Dto层编写"><a href="#Dto层编写" class="headerlink" title="Dto层编写"></a>Dto层编写</h3><p>传输对象，一般是把数据库表封装成对象，表的各个字段就是该对象的各个变量</p><p>包括<strong>req层</strong>(Http 请求数据封装)<strong>resp层</strong>（Http 响应数据封装）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小说信息 响应DTO</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiongxiaoyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/5/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@Data:@Data ： 注在类上，提供类的get、set、equals、hashCode、canEqual、toString方法</span></span><br><span class="line"><span class="comment">//@AllArgsConstructor ： 注在类上，提供类的全参构造</span></span><br><span class="line"><span class="comment">//@NoArgsConstructor ： 注在类上，提供类的无参构造</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookInfoRespDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Schema:Swagger3的注解，用于输出api文档，此处提供了描述</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;小说ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类别ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;类别ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类别名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;类别名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小说封面地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;小说封面地址&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String picUrl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小说名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;小说名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作家id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;作家id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long authorId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作家名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;作家名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String authorName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 书籍描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;书籍描述&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bookDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 书籍状态;0-连载中 1-已完结</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;书籍状态;0-连载中 1-已完结&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer bookStatus;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;点击量&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long visitCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总字数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;总字数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer wordCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 评论数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;评论数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer commentCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首章节ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;首章节ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long firstChapterId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新章节ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;最新章节ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long lastChapterId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新章节名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;最新章节名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lastChapterName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新章节更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;最新章节更新时间&quot;)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="manager层编写"><a href="#manager层编写" class="headerlink" title="manager层编写"></a>manager层编写</h3><p>负责将Dao层中的数据库操作组合复用，主要是一些缓存方案，中间件的处理，以及对第三方平台封装的层。</p><h4 id="cache层编写"><a href="#cache层编写" class="headerlink" title="cache层编写"></a>cache层编写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeBookCacheManager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeBookMapper homeBookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookInfoMapper bookInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询首页小说推荐，并放入缓存中（此处没有采用缓存策略）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;HomeBookRespDto&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 从首页小说推荐表中查询出需要推荐的小说</span></span><br><span class="line">        QueryWrapper&lt;HomeBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//orderByAsc：按照DatabaseConsts.CommonColumnEnum.SORT.getName()排序</span></span><br><span class="line">        queryWrapper.orderByAsc(DatabaseConsts.CommonColumnEnum.SORT.getName());</span><br><span class="line">        List&lt;HomeBook&gt; homeBooks = homeBookMapper.selectList(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取推荐小说ID列表</span></span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(homeBooks)) &#123;</span><br><span class="line">            List&lt;Long&gt; bookIds = homeBooks.stream()</span><br><span class="line">                    .map(HomeBook::getBookId)</span><br><span class="line">                    .toList();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据小说ID列表查询相关的小说信息列表</span></span><br><span class="line">            QueryWrapper&lt;BookInfo&gt; bookInfoQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">            bookInfoQueryWrapper.in(DatabaseConsts.CommonColumnEnum.ID.getName(), bookIds);</span><br><span class="line">            List&lt;BookInfo&gt; bookInfos = bookInfoMapper.selectList(bookInfoQueryWrapper);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 组装 HomeBookRespDto 列表数据并返回</span></span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(bookInfos)) &#123;</span><br><span class="line">                Map&lt;Long, BookInfo&gt; bookInfoMap = bookInfos.stream()</span><br><span class="line">                        .collect(Collectors.toMap(BookInfo::getId, Function.identity()));</span><br><span class="line">                <span class="keyword">return</span> homeBooks.stream().map(v -&gt; &#123;</span><br><span class="line">                    <span class="type">BookInfo</span> <span class="variable">bookInfo</span> <span class="operator">=</span> bookInfoMap.get(v.getBookId());</span><br><span class="line">                    <span class="type">HomeBookRespDto</span> <span class="variable">bookRespDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HomeBookRespDto</span>();</span><br><span class="line">                    bookRespDto.setType(v.getType());</span><br><span class="line">                    bookRespDto.setBookId(v.getBookId());</span><br><span class="line">                    bookRespDto.setBookName(bookInfo.getBookName());</span><br><span class="line">                    bookRespDto.setPicUrl(bookInfo.getPicUrl());</span><br><span class="line">                    bookRespDto.setAuthorName(bookInfo.getAuthorName());</span><br><span class="line">                    bookRespDto.setBookDesc(bookInfo.getBookDesc());</span><br><span class="line">                    <span class="keyword">return</span> bookRespDto;</span><br><span class="line">                &#125;).toList();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一般的业务的写法"><a href="#一般的业务的写法" class="headerlink" title="一般的业务的写法"></a>一般的业务的写法</h4><p>（自己写的，对以后的业务编写挺有参考意义的，感动QAQ）</p><p>上面的manager层编写业务的写法主要是在<strong>使用缓存</strong>时使用</p><p>一般在写业务逻辑的时候还是在service层下的<strong>Impl层</strong>比较常用，下面是该业务的常规写法</p><h5 id="mapper层"><a href="#mapper层" class="headerlink" title="mapper层"></a>mapper层</h5><p>先准备好需要的mapper接口</p><h6 id="HomeBookMapper"><a href="#HomeBookMapper" class="headerlink" title="HomeBookMapper"></a>HomeBookMapper</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HomeBookMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;HomeBook&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="BookInfoMapper"><a href="#BookInfoMapper" class="headerlink" title="BookInfoMapper"></a>BookInfoMapper</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookInfoMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;BookInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="service层-1"><a href="#service层-1" class="headerlink" title="service层"></a>service层</h5><p>然后在service层下定义好方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HomeService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;HomeBook&gt; &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;HomeBookRespDto&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="impl层（？？？？？？）"><a href="#impl层（？？？？？？）" class="headerlink" title="impl层（？？？？？？）"></a>impl层（？？？？？？）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;HomeBookMapper, HomeBook&gt; <span class="keyword">implements</span> <span class="title class_">HomeService</span> &#123;</span><br><span class="line">    <span class="comment">//@Autowired可能会导致找不到Mapper的bean（常见错误），而使用@Resource则会按照名字来搜素，可以解决找不到Mapper的bean的问题</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="comment">//为什么这里不用加final？？？？？？</span></span><br><span class="line">    <span class="keyword">private</span> HomeBookMapper homeBookMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BookInfoMapper bookInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;HomeBookRespDto&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 从首页小说推荐表中查询出需要推荐的小说</span></span><br><span class="line">        QueryWrapper&lt;HomeBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// orderByAsc（实现递增排序）</span></span><br><span class="line">        <span class="comment">// orderByDesc（实现递减排序）</span></span><br><span class="line">        queryWrapper.orderByAsc(DatabaseConsts.CommonColumnEnum.SORT.getName());</span><br><span class="line">        <span class="comment">//selectlist:根据 entity 条件，查询全部记录</span></span><br><span class="line">        <span class="comment">//selectOne:根据 entity 条件，查询一条记录</span></span><br><span class="line">        List&lt;HomeBook&gt; homeBooks = homeBookMapper.selectList(queryWrapper);</span><br><span class="line"><span class="comment">//CollectionUtils.isEmpty(list): false</span></span><br><span class="line">        <span class="comment">//CollectionUtils.isNotEmpty(list): true</span></span><br><span class="line">        <span class="comment">// 获取推荐小说ID列表</span></span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(homeBooks)) &#123;</span><br><span class="line">            List&lt;Long&gt; bookIds = homeBooks.stream()</span><br><span class="line">                    .map(HomeBook::getBookId)</span><br><span class="line">                    .toList();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据小说ID列表查询相关的小说信息列表</span></span><br><span class="line">            QueryWrapper&lt;BookInfo&gt; bookInfoQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">            bookInfoQueryWrapper.in(DatabaseConsts.CommonColumnEnum.ID.getName(), bookIds);</span><br><span class="line">            List&lt;BookInfo&gt; bookInfos = bookInfoMapper.selectList(bookInfoQueryWrapper);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 组装 HomeBookRespDto 列表数据并返回</span></span><br><span class="line">            <span class="comment">//怎么写的？？？？？？？？</span></span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(bookInfos)) &#123;</span><br><span class="line">                Map&lt;Long, BookInfo&gt; bookInfoMap = bookInfos.stream()</span><br><span class="line">                        .collect(Collectors.toMap(BookInfo::getId, Function.identity()));</span><br><span class="line">                <span class="keyword">return</span> homeBooks.stream().map(v -&gt; &#123;</span><br><span class="line">                    <span class="type">BookInfo</span> <span class="variable">bookInfo</span> <span class="operator">=</span> bookInfoMap.get(v.getBookId());</span><br><span class="line">                    <span class="type">HomeBookRespDto</span> <span class="variable">bookRespDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HomeBookRespDto</span>();</span><br><span class="line">                    bookRespDto.setType(v.getType());</span><br><span class="line">                    bookRespDto.setBookId(v.getBookId());</span><br><span class="line">                    bookRespDto.setBookName(bookInfo.getBookName());</span><br><span class="line">                    bookRespDto.setPicUrl(bookInfo.getPicUrl());</span><br><span class="line">                    bookRespDto.setAuthorName(bookInfo.getAuthorName());</span><br><span class="line">                    bookRespDto.setBookDesc(bookInfo.getBookDesc());</span><br><span class="line">                    <span class="keyword">return</span> bookRespDto;</span><br><span class="line">                &#125;).toList();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//怎么写的？？？？？？？</span></span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="衍生QueryWrapper的知识点"><a href="#衍生QueryWrapper的知识点" class="headerlink" title="衍生QueryWrapper的知识点"></a>衍生QueryWrapper的知识点</h6><p>orderByAsc：实现递增排序</p><p>orderByDesc：实现递减排序</p><h6 id="衍生BaseMapper接口CRUD的知识点"><a href="#衍生BaseMapper接口CRUD的知识点" class="headerlink" title="衍生BaseMapper接口CRUD的知识点"></a>衍生BaseMapper接口CRUD的知识点</h6><p>引入：extends<code> </code>BaseMapper<UserBean></p><p>selectlist:根据 entity 条件，查询全部记录<br>selectOne:根据 entity 条件，查询一条记录</p><h6 id="衍生Service接口CRUD"><a href="#衍生Service接口CRUD" class="headerlink" title="衍生Service接口CRUD"></a>衍生Service接口CRUD</h6><p>引入implements<code> </code>IService<T>（T：实体层）</p><h6 id="衍生的工具类"><a href="#衍生的工具类" class="headerlink" title="衍生的工具类"></a>衍生的工具类</h6><p>CollectionUtils.isEmpty(list): false</p><p>CollectionUtils.isNotEmpty(list): true</p><p>上面的!CollectionUtils.isEmpty(bookInfos)其实相当于第二种，也同时是第一种判断为flase后相反（！）为true</p><p>stream流（List<Long> bookIds &#x3D; homeBooks.stream()）\</p><p>在 Java8 之前，我们通常是通过 for 循环或者 Iterator 迭代来重新排序合并数据，又或者通过重新定义 Collections.sorts 的 Comparator 方法来实现，这两种方式对于大数据量系统来说，效率并不是很理想。Stream 的<strong>聚合操作</strong>与数据库 SQL 的聚合操作 sorted、filter、map 等类似。我们在应用层就可以高效地实现类似数据库 SQL 的 聚合操作了，而在数据操作方面，Stream 不仅可以通过串行的方式实现数据操作，还可以<strong>通过并行的方式处理大批量数据，提高数据 的处理效率</strong></p><h5 id="controller层（重点关注，完全理解并能自己发挥？？？？？？？）"><a href="#controller层（重点关注，完全理解并能自己发挥？？？？？？？）" class="headerlink" title="controller层（重点关注，完全理解并能自己发挥？？？？？？？）"></a>controller层（重点关注，完全理解并能自己发挥？？？？？？？）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(ApiRouterConsts.API_FRONT_HOME_URL_PREFIX)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为什么是final？？？？？？？</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeBookMapper homeBookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookInfoMapper bookInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeService homeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;books&quot;)</span></span><br><span class="line">    <span class="comment">//因为前端axios作检验的时候要看code，所以这里必须要用通用返回类RestResp&lt;T&gt;</span></span><br><span class="line">    <span class="keyword">public</span> RestResp&lt;List&lt;HomeBookRespDto&gt;&gt; <span class="title function_">listHomeBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//这里使用了通用返回类RestResp的方法RestResp&lt;T&gt;（T data）</span></span><br><span class="line">        <span class="keyword">return</span> RestResp.ok(homeService.listHomeBooks());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="core层编写"><a href="#core层编写" class="headerlink" title="core层编写"></a>core层编写</h3><h4 id="config层"><a href="#config层" class="headerlink" title="config层"></a>config层</h4><h5 id="MybatisPlusConfig-卡了我两个下午QAQ"><a href="#MybatisPlusConfig-卡了我两个下午QAQ" class="headerlink" title="MybatisPlusConfig(卡了我两个下午QAQ)"></a><strong><u>MybatisPlusConfig</u></strong>(卡了我两个下午QAQ)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 兼容 mybatis-plus 3.5.1</span></span><br><span class="line"><span class="comment"> * mybatis-plus 的 MybatisSqlSessionFactoryBean 中使用到了这个异常</span></span><br><span class="line"><span class="comment"> * Spring 6 开始移除了该异常</span></span><br><span class="line"><span class="comment"> *mybatis puls的坑：使用mybatis-plus时不能使用自带的SqlSessionFactory，要使用</span></span><br><span class="line"><span class="comment"> *MybatisSqlSessionFactory，在配置类中加入如下配置（springboot）</span></span><br><span class="line"><span class="comment"> *啊啊啊啊啊啊啊卡我两个下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(&quot;db1SqlSessionFactory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">db1SqlSessionFactory</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使用 mybatis plus 配置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">MybatisSqlSessionFactoryBean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisSqlSessionFactoryBean</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;dataSourceLyz&quot;</span>+dataSource.toString());</span><br><span class="line">        b1.setDataSource(dataSource);</span><br><span class="line">        b1.setMapperLocations(<span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>().getResources(<span class="string">&quot;classpath:mapper/*.xml&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> b1.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CorsProperties"><a href="#CorsProperties" class="headerlink" title="CorsProperties"></a>CorsProperties</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;novel.cors&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">CorsProperties</span><span class="params">(List&lt;String&gt; allowOrigins)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CorsConfig"><a href="#CorsConfig" class="headerlink" title="CorsConfig"></a>CorsConfig</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(CorsProperties.class)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CorsProperties corsProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">// 允许的域,不要写*，否则cookie就无法使用了</span></span><br><span class="line">        <span class="keyword">for</span> (String allowOrigin : corsProperties.allowOrigins()) &#123;</span><br><span class="line">            config.addAllowedOrigin(allowOrigin);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 允许的头信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 允许的请求方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 是否允许携带Cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">configurationSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        <span class="comment">// 添加映射路径，拦截一切请求</span></span><br><span class="line">        configurationSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(configurationSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="common层"><a href="#common层" class="headerlink" title="common层"></a>common层</h3><h4 id="comstant层（通用常量层）"><a href="#comstant层（通用常量层）" class="headerlink" title="comstant层（通用常量层）"></a>comstant层（通用常量层）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="comment">//提供类的全参构造，减少了@Autowired的书写</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="comment">//enum:通常用于常量类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ErrorCodeEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正确执行后的返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    OK(<span class="string">&quot;00000&quot;</span>, <span class="string">&quot;一切 ok&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一级宏观错误码，用户端错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_ERROR(<span class="string">&quot;A0001&quot;</span>, <span class="string">&quot;用户端错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二级宏观错误码，用户注册错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REGISTER_ERROR(<span class="string">&quot;A0100&quot;</span>, <span class="string">&quot;用户注册错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户未同意隐私协议</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_NO_AGREE_PRIVATE_ERROR(<span class="string">&quot;A0101&quot;</span>, <span class="string">&quot;用户未同意隐私协议&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册国家或地区受限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REGISTER_AREA_LIMIT_ERROR(<span class="string">&quot;A0102&quot;</span>, <span class="string">&quot;注册国家或地区受限&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户验证码错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_VERIFY_CODE_ERROR(<span class="string">&quot;A0240&quot;</span>, <span class="string">&quot;用户验证码错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名已存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_NAME_EXIST(<span class="string">&quot;A0111&quot;</span>, <span class="string">&quot;用户名已存在&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户账号不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_ACCOUNT_NOT_EXIST(<span class="string">&quot;A0201&quot;</span>, <span class="string">&quot;用户账号不存在&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户密码错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_PASSWORD_ERROR(<span class="string">&quot;A0210&quot;</span>, <span class="string">&quot;用户密码错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二级宏观错误码，用户请求参数错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REQUEST_PARAM_ERROR(<span class="string">&quot;A0400&quot;</span>, <span class="string">&quot;用户请求参数错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录已过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_LOGIN_EXPIRED(<span class="string">&quot;A0230&quot;</span>, <span class="string">&quot;用户登录已过期&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问未授权</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_UN_AUTH(<span class="string">&quot;A0301&quot;</span>, <span class="string">&quot;访问未授权&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户请求服务异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REQ_EXCEPTION(<span class="string">&quot;A0500&quot;</span>, <span class="string">&quot;用户请求服务异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求超出限制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_REQ_MANY(<span class="string">&quot;A0501&quot;</span>, <span class="string">&quot;请求超出限制&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户评论异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_COMMENT(<span class="string">&quot;A2000&quot;</span>, <span class="string">&quot;用户评论异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户评论异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_COMMENTED(<span class="string">&quot;A2001&quot;</span>, <span class="string">&quot;用户已发表评论&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作家发布异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AUTHOR_PUBLISH(<span class="string">&quot;A3000&quot;</span>, <span class="string">&quot;作家发布异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小说名已存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AUTHOR_BOOK_NAME_EXIST(<span class="string">&quot;A3001&quot;</span>, <span class="string">&quot;小说名已存在&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户上传文件异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_UPLOAD_FILE_ERROR(<span class="string">&quot;A0700&quot;</span>, <span class="string">&quot;用户上传文件异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户上传文件类型不匹配</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER_UPLOAD_FILE_TYPE_NOT_MATCH(<span class="string">&quot;A0701&quot;</span>, <span class="string">&quot;用户上传文件类型不匹配&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一级宏观错误码，系统执行出错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SYSTEM_ERROR(<span class="string">&quot;B0001&quot;</span>, <span class="string">&quot;系统执行出错&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二级宏观错误码，系统执行超时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SYSTEM_TIMEOUT_ERROR(<span class="string">&quot;B0100&quot;</span>, <span class="string">&quot;系统执行超时&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一级宏观错误码，调用第三方服务出错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    THIRD_SERVICE_ERROR(<span class="string">&quot;C0001&quot;</span>, <span class="string">&quot;调用第三方服务出错&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一级宏观错误码，中间件服务出错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MIDDLEWARE_SERVICE_ERROR(<span class="string">&quot;C0100&quot;</span>, <span class="string">&quot;中间件服务出错&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中文描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="resp层"><a href="#resp层" class="headerlink" title="resp层"></a>resp层</h4><p>Http Rest 响应工具及数据格式封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestResp</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;错误码，00000-没有错误&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;响应消息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;响应数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = ErrorCodeEnum.OK.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = ErrorCodeEnum.OK.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">(ErrorCodeEnum errorCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = errorCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = errorCode.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理成功,无数据返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理成功，有数据返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RestResp&lt;T&gt; <span class="title function_">ok</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">fail</span><span class="params">(ErrorCodeEnum errorCode)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(errorCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(ErrorCodeEnum.SYSTEM_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(<span class="built_in">this</span>.code, ErrorCodeEnum.OK.getCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="req层"><a href="#req层" class="headerlink" title="req层"></a>req层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestResp</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ErrorCodeEnum为常量层下的类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = ErrorCodeEnum.OK.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = ErrorCodeEnum.OK.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">(ErrorCodeEnum errorCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = errorCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = errorCode.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RestResp</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理成功,无数据返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理成功，有数据返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RestResp&lt;T&gt; <span class="title function_">ok</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">fail</span><span class="params">(ErrorCodeEnum errorCode)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(errorCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestResp&lt;Void&gt; <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestResp</span>&lt;&gt;(ErrorCodeEnum.SYSTEM_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(<span class="built_in">this</span>.code, ErrorCodeEnum.OK.getCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//mapper包扫描</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.tec.vuepractice.dao.mapper&quot;)</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VuePracticeApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(VuePracticeApplication.class, args);</span><br><span class="line">        log.info(<span class="string">&quot;项目启动成功！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vue的数据传递"><a href="#Vue的数据传递" class="headerlink" title="Vue的数据传递"></a>Vue的数据传递</h2><h3 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h3><p>在Springboot项目里加上这个配置文件<code>CorsConfig.java</code>，重启之后即可实现跨域访问，前端无需再配置跨域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前跨域请求最大有效时长。这里默认1天</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">MAX_AGE</span> <span class="operator">=</span> <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">corsConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">&quot;http://localhost:80&quot;</span>); <span class="comment">// 1 设置访问源地址</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>); <span class="comment">// 2 设置访问源请求头</span></span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>); <span class="comment">// 3 设置访问源请求方法</span></span><br><span class="line">        corsConfiguration.setMaxAge(MAX_AGE);</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, corsConfiguration); <span class="comment">// 4 对接口配置跨域设置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="原Vue文件调整"><a href="#原Vue文件调整" class="headerlink" title="原Vue文件调整"></a>原Vue文件调整</h2><p>将需要根据后端数据库而动态改变的数据，改为</p><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>Axios 是一个基于 <em><a href="https://javascript.info/promise-basics">promise</a></em> 网络请求库,这不是一种新技术，本质上还是对原生XMLHttpRequest的封装,用来实现Ajax(异步网络请求。Ajax能够让页面无刷新的请求数据，由来是浏览器页面在向服务器请求数据时，因为返回的是整个页面的数据，页面都会强制刷新一下，这对于用户来讲并不是很友好。并且我们只是需要修改页面的部分数据，但是从服务器端发送的却是整个页面的数据，十分消耗网络资源。而我们只是需要修改页面的部分数据，也希望不刷新页面，因此异步网络请求就应运而生。)</p><p>安装</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install axios</span><br></pre></td></tr></table></figure><p>最基础需要写比较长的配置来使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">&lt;!-- 方法一 --&gt;   </span><br><span class="line">axios(&#123;</span><br><span class="line">            method:&quot;get&quot;,</span><br><span class="line">            url:&quot;https://www.baidu.com&quot;，</span><br><span class="line">            data:user_id=7</span><br><span class="line">        &#125;).then(res =&gt; &#123;</span><br><span class="line">            console.log(res.data);</span><br><span class="line">        &#125;)</span><br><span class="line">&lt;!-- 方法二 --&gt; </span><br><span class="line">axios.get(&quot;https://www.baidu.com&quot;).then(res =&gt; &#123;</span><br><span class="line">            this.obj= res.data[0];</span><br><span class="line">            console.log(res.data);</span><br><span class="line">        &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/axios-1.png" alt="axios-1"></p><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/axios-2.png" alt="axios-2"></p><p>也可以全局注册后使用（这里不展开）</p><p>但是一般在请求数量增多时会需要来进行封装axios来简化开发</p><p>在utils下创建request.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken, removeToken, removeNickName, setToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API_URL</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">10000</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">withCredentials</span> = <span class="literal">true</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>[<span class="string">&#x27;X-Requested-With&#x27;</span>] = <span class="string">&#x27;XMLHttpRequest&#x27;</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="title function_">getToken</span>()</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> res.<span class="property">data</span> !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;服务端异常！&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> != <span class="string">&quot;00000&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">message</span>) &#123;</span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">message</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 登录已过期</span></span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> == <span class="string">&#x27;A0230&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 移除 token </span></span><br><span class="line">            <span class="title function_">removeToken</span>();</span><br><span class="line">            <span class="title function_">removeNickName</span>();</span><br><span class="line">            router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;网络异常！&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure><p>在main.js中注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;./util/axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(store)</span><br><span class="line">   .<span class="title function_">use</span>(router)</span><br><span class="line">   .<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$axios</span> = axios;</span><br></pre></td></tr></table></figure><p>封装api在api包下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;../utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">listHomeBooks</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">get</span>(<span class="string">&#x27;/front/home/books&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">listHomeFriendLinks</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">get</span>(<span class="string">&#x27;/front/home/friend_Link/list&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在vue的生命周期函数里调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">&lt;!--导入--&gt;    </span><br><span class="line">import &#123; reactive, toRefs, onMounted &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useRouter, useRoute &#125; from &quot;vue-router&quot;;</span><br><span class="line">import &#123; listHomeBooks &#125; from &quot;@/api/home&quot;;</span><br><span class="line">&lt;!--注册组件--&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;home&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Header,</span><br><span class="line">    LatestNews,</span><br><span class="line">    FriendLink,</span><br><span class="line">    BookVisitRank,</span><br><span class="line">    BookNewestRank,</span><br><span class="line">    BookUpdateRank,</span><br><span class="line">    Footer,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">&lt;!--route是一个跳转的路由对象，每一个路由都会有一个route对象，是一个局部的对象，可以获取对应的name,path,params,query等：--&gt;</span><br><span class="line">    const route = useRoute();</span><br><span class="line">&lt;!--router是VueRouter的一个对象，通过Vue.use(VueRouter)和VueRouter构造函数得到一个router的实例对象，这个对象中是一个全局的对象，包含了所有的路由包含了许多关键的对象和属性。例如history对象$router.push(&#123;path:’/path’&#125;); 本质是向history栈中添加一个路由，在我们看来是 切换路由，但本质是在添加一个history记录--&gt;</span><br><span class="line">    const router = useRouter();</span><br><span class="line">&lt;!--reactive（）函数接收一个普通对象，返回一个响应式的数据对象。访问： state.参数名--&gt;</span><br><span class="line">    const state = reactive(&#123;</span><br><span class="line">      // 轮播图</span><br><span class="line">      sliderContent: [],</span><br><span class="line">      // 顶部栏</span><br><span class="line">      topBooks1: [],</span><br><span class="line">      //本周强推</span><br><span class="line">      weekcommend: [],</span><br><span class="line">      // 热门推荐</span><br><span class="line">      hotRecommend: [],</span><br><span class="line">      // 精品推荐</span><br><span class="line">      goodRecommend: [],</span><br><span class="line">      imgBaseUrl: process.env.VUE_APP_BASE_IMG_URL,</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;!--生命周期函数--&gt;</span><br><span class="line">    onMounted(async () =&gt; &#123;</span><br><span class="line">      const loadingInstance = ElLoading.service(&#123;</span><br><span class="line">        target: &quot;#topBooks2&quot;,</span><br><span class="line">        text: &quot;加载中。。。&quot;,</span><br><span class="line">      &#125;);</span><br><span class="line">&lt;!--等待listHomeBooks()方法传来数据给data--&gt;</span><br><span class="line">      const &#123; data &#125; = await listHomeBooks();</span><br><span class="line"></span><br><span class="line">&lt;!--可能book和v-for的item相似，属于别名，这段的意思就是从--&gt;</span><br><span class="line">      await data.forEach((book) =&gt; &#123;</span><br><span class="line">        if (book.type == 0) &#123;</span><br><span class="line">          // 轮播图</span><br><span class="line">          state.sliderContent[state.sliderContent.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 1) &#123;</span><br><span class="line">          // 顶部栏</span><br><span class="line">          state.topBooks1[state.topBooks1.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 2) &#123;</span><br><span class="line">          //本周强推</span><br><span class="line">          state.weekcommend[state.weekcommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 3) &#123;</span><br><span class="line">          //热门推荐</span><br><span class="line">          state.hotRecommend[state.hotRecommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">        if (book.type == 4) &#123;</span><br><span class="line">          //精品推荐</span><br><span class="line">          state.goodRecommend[state.goodRecommend.length] = book;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">        </span><br><span class="line">&lt;!--push就是在浏览器的历史记录中追加一个新的记录，你可以通过window.history看到这个记录。而replace则是将当前的路由记录替换掉，替换后你如果回退，会发现上一个路由地址已经消失了。此处是点击链接后触发的方法，将跳转到小说的详情页--&gt;</span><br><span class="line">    const bookDetail = (bookId) =&gt; &#123;</span><br><span class="line">      router.push(&#123; path: `/book/$&#123;bookId&#125;` &#125;);</span><br><span class="line">    &#125;；</span><br><span class="line">&lt;!--toRefs将一个响应式对象，转换为普通对象，并且将其中的属性转换为 Ref 对象，与reactive搭配使用，reactive将数据变成响应式数据，当数据发生变化时state也会自动更新--&gt;        </span><br><span class="line">    return &#123;</span><br><span class="line">      ...toRefs(state),</span><br><span class="line">      bookDetail,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot的优化</title>
      <link href="/posts/da2135f6.html"/>
      <url>/posts/da2135f6.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot："><a href="#SpringBoot：" class="headerlink" title="SpringBoot："></a>SpringBoot：</h1><h1 id="简化依赖"><a href="#简化依赖" class="headerlink" title="简化依赖"></a>简化依赖</h1><h3 id="servlert中的重复书写完全抛弃优化："><a href="#servlert中的重复书写完全抛弃优化：" class="headerlink" title="servlert中的重复书写完全抛弃优化："></a>servlert中的重复书写完全抛弃优化：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 接收用户名和密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);    </span><br><span class="line"><span class="comment">//2. 调用MyBatis完成查询</span></span><br><span class="line">    <span class="comment">//2.1 获取SqlSessionFactory对象</span></span><br><span class="line">   <span class="comment">/* String resource = &quot;mybatis-config.xml&quot;;</span></span><br><span class="line"><span class="comment">    InputStream inputStream = Resources.getResourceAsStream(resource);</span></span><br><span class="line"><span class="comment">    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> SqlSessionFactoryUtils.getSqlSessionFactory();</span><br><span class="line">    <span class="comment">//2.2 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//2.3 获取Mapper</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">//2.4 调用方法</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.select(username, password);</span><br><span class="line">    <span class="comment">//2.5 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br></pre></td></tr></table></figure><h3 id="不需要使用外置tomcat（导入坐标等操作）来启动服务，有内置的tomcat"><a href="#不需要使用外置tomcat（导入坐标等操作）来启动服务，有内置的tomcat" class="headerlink" title="不需要使用外置tomcat（导入坐标等操作）来启动服务，有内置的tomcat"></a>不需要使用外置tomcat（导入坐标等操作）来启动服务，有内置的tomcat</h3><h3 id="连接mysql数据库的配置文件不用再写一份mybatis-config-xml，在resources下的application-yml（格式比较不同）下写入url以及name，password连接"><a href="#连接mysql数据库的配置文件不用再写一份mybatis-config-xml，在resources下的application-yml（格式比较不同）下写入url以及name，password连接" class="headerlink" title="连接mysql数据库的配置文件不用再写一份mybatis-config.xml，在resources下的application.yml（格式比较不同）下写入url以及name，password连接"></a>连接mysql数据库的配置文件不用再写一份mybatis-config.xml，在resources下的application.yml（格式比较不同）下写入url以及name，password连接</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">  <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db</span> <span class="comment">#?servierTimezone=UTC</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><h2 id="简化配置"><a href="#简化配置" class="headerlink" title="简化配置"></a>简化配置</h2><h3 id="dao层（接口类（写sql语句的））要先加入-Mapper"><a href="#dao层（接口类（写sql语句的））要先加入-Mapper" class="headerlink" title="dao层（接口类（写sql语句的））要先加入@@Mapper"></a>dao层（接口类（写sql语句的））要先加入@@Mapper</h3><p>mybatis-plus：<br>1在dao层中不需要写sql语句，直接extends BaseMapper<User>，再在实现层中使用mybatis-plus封装好的方法进行增删改查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Test</span>（测试类）</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;</span><br><span class="line">        userDao.deleteById(<span class="number">1401856123725713409L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加入插件lombok简化javabean书写，在domaim层下（javabean）只用写变量，无需get，set，tostring，直接-data"><a href="#加入插件lombok简化javabean书写，在domaim层下（javabean）只用写变量，无需get，set，tostring，直接-data" class="headerlink" title="加入插件lombok简化javabean书写，在domaim层下（javabean）只用写变量，无需get，set，tostring，直接@data"></a>加入插件lombok简化javabean书写，在domaim层下（javabean）只用写变量，无需get，set，tostring，直接@data</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实体层："><a href="#实体层：" class="headerlink" title="实体层："></a>实体层：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/SpringBoot1.jpg" alt="SpringBoot1"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>项目流程</title>
      <link href="/posts/2a16d212.html"/>
      <url>/posts/2a16d212.html</url>
      
        <content type="html"><![CDATA[<h1 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>在本项目中前端的页面都采用了vue的渐进式开发，依托后端来启动所有的项目，且采用了element-ui所提供的样式，使得页面更加整洁美观</p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>在项目的后端使用maven提供专业化的目录，以及进行项目的打包和快捷的插件管理，整体都使用lombok的注解式开发，再以spring-boot作为项目的主框架，加快项目的开发应用，也更方便对接mysql的数据库</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>而在数据库方面，使用了国人所升级的MybatisPlus，再在controller层实现业务逻辑，通过@RequestMapping来接受页面所发送的ajax请求以及json数据，同时利用DTO将多个字段封装到一个对象里，实现对于数据库基本的增删改查，最后在前端回显所修改的数据，在这整个用户交互的流程中，filter层会保持拦截用户所不该访问的页面，也会使用Redis来进行缓存优化，来达到更好的用户体验</p><h2 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h2><p>而在部署项目上采用腾讯云的云服务器，以及Git仓库来管理历史版本的代码以及团队协作，在Linux系统上进行部署，保证项目的安全性，再通过SSH连接工具就可以实现从本地连接到远程的Linux系统服务器</p><p><img src="https://cdn.staticaly.com/gh/TECNB/picgodemo/main/img/default_top_img.jpg" alt="壁纸"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
